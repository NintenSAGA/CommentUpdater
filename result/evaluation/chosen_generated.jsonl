{"SampleId": 336204, "Origin": "Sets the host's {@link OnBackPressedDispatcherOwner}.", "Reference": "Sets the host's {@link OnBackPressedDispatcher}.", "Hypothesis": "Sets the host's {@link OnBackPressedDispatcher}."}
{"SampleId": 4396494, "Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "Hypothesis": "Returns a string representation of this object; useful for testing and debugging, with sensitive data redacted."}
{"SampleId": 1843363, "Origin": "Waits during {@code timeout} until text extracted from specified {@code webElement} by {@link", "Reference": "Waits during {@code timeout} until value extracted from specified {@code element} by {@link", "Hypothesis": "Waits during {@code timeout} until text extracted from specified {@code element} by {@link waitVisibilityAndGetValue(WebElement, int)} is equal to {@code expected}."}
{"SampleId": 1118960, "Origin": "See {@link SyslogConstants} and RFC 3164 for more information about the", "Reference": "See RFC 3164 for more information about the", "Hypothesis": "Set the initial value by adding 8 to n. See {@link SyslogConstants} and RFC 3164 for more information about the syslog facility options available in this method."}
{"SampleId": 2973497, "Origin": "Return a signature object containing the current signature state.", "Reference": "Return the signature.", "Hypothesis": "Return a signature object containing the current signature state."}
{"SampleId": 4471749, "Origin": "If {@code labels = \"*abc*\"}, settings with a label containing \"abc\" are returned.", "Reference": "If {@code labelFilter = \"*abc*\"}, settings with a label containing \"abc\" are returned.", "Hypothesis": "If {@code labelFilter = \"abc\"}, settings with a label containing \"abc\" are returned."}
{"SampleId": 2535867, "Origin": "Extract the values from the array's elements by applying an extracting function on them.", "Reference": "Extract the values from the array's elements by applying an extracting function on them, the resulting list becomes\nthe new object under test.", "Hypothesis": "Extract the values from the array's elements by applying an extracting function on them, then return a new list assertion instance with those values."}
{"SampleId": 3677760, "Origin": "Returns the next day-of-week adjuster, which adjusts the date to be\nthe next of the specified day-of-week after the specified date.", "Reference": "Returns the next day-of-week adjuster, which adjusts the date to the\nfirst occurrence of the specified day-of-week after the date being adjusted.", "Hypothesis": "Returns the next day-of-week adjuster, which adjusts the date to be the next of the specified day-of-week after the specified date."}
{"SampleId": 5458940, "Origin": "Computes the hash of this module, returning it as a hex string.", "Reference": "Computes the hash of this module.", "Hypothesis": "Computes the hash of this module, returning it as a byte array."}
{"SampleId": 1879787, "Origin": "Testing the timesTranspose(vector, vector) method of VMath class.", "Reference": "Testing the timesTranspose(vector, vector) method of {@link VMath} class.", "Hypothesis": "Testing the timesTranspose(vector, vector) method of VMath class."}
{"SampleId": 3734015, "Origin": "Otherwise, this qualifier must contain all the arrays in superType.", "Reference": "Otherwise, this qualifier must contain all the sequences in superType.", "Hypothesis": "Otherwise, this qualifier must contain all the sequences in superType."}
{"SampleId": 3105766, "Origin": "Validate that I have a Exuberant ctags program I may use", "Reference": "Validate that there is a Universal ctags program.", "Hypothesis": "Validate that I have a Universal ctags program I may use"}
{"SampleId": 5244566, "Origin": "Builds maps of obj id to\nmd5 and case.", "Reference": "Builds maps of obj id to\nvalue and case.", "Hypothesis": "Builds maps of obj id to md5 and case using given parameters."}
{"SampleId": 5316049, "Origin": "Add the given {@link HandlerMethodArgumentResolver}s.", "Reference": "Add the given {@link HandlerMethodArgumentResolver HandlerMethodArgumentResolvers}.", "Hypothesis": "Add the given {@link HandlerMethodArgumentResolver}s to the existing list."}
{"SampleId": 1947847, "Origin": "Increment the count of triggered synchronous state updates (by one).", "Reference": "Increment the count of triggered synchronous state updates in Litho components (by one).", "Hypothesis": "Increment the count of component state update synchronous counts (by one)."}
{"SampleId": 5640472, "Origin": "Observer methods with other transaction phase\nare scheduled for the corresponding transaction phase.", "Reference": "Transactional observer methods are scheduled to be executed in the corresponding transaction phase.", "Hypothesis": "Observer methods are scheduled for the corresponding transaction phase."}
{"SampleId": 3241790, "Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}", "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveFromRangeEnd }{@code >}}", "Hypothesis": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveFromRangeEnd }{@code >"}
{"SampleId": 2018806, "Origin": "Sets dependency options.", "Reference": "Sets the dependency management options.", "Hypothesis": "Sets dependency options."}
{"SampleId": 2048399, "Origin": "After calling this method, call\n{@link #configure(int, int, int)} to start using the new sample rate.", "Reference": "After calling this method, call {@link\n#configure(AudioFormat)} to start using the new sample rate.", "Hypothesis": "After calling this method, call {@link #configure(int, int)} to start using the new sample rate."}
{"SampleId": 3322433, "Origin": "As the name\nimplies,  indicates whether the train or cart is in the process\nof leaving the track.", "Reference": "As the name\nimplies, {@code trainLeaving} indicates whether the train or cart is in the process\nof leaving the track.", "Hypothesis": "The calculateLocked() method calculates whether the train or cart is in the process of leaving the track based on various conditions. It takes into account the current state of the cart and train, as well as variables like redstone, delay, and sendUpdateToClient()."}
{"SampleId": 4386719, "Origin": "Glacier provides you a unique archive ID, an opaque string of\ncharacters.", "Reference": "Amazon Glacier\nprovides you a unique archive ID, an opaque string of characters.", "Hypothesis": "Initiates a job with the given request, returns an InitiateJobResult object on completion."}
{"SampleId": 2701561, "Origin": "Set Zu ber.", "Reference": "Set Zu berechn.", "Hypothesis": "Set the QtyToInvoiceInPriceUOM by passing BigDecimal QtyToInvoiceInPriceUOM."}
{"SampleId": 234560, "Origin": "If it fails, an exception is thrown and the read lock will not be locked.", "Reference": "If the reinitialization fails, an exception is thrown.", "Hypothesis": "If it fails, an exception is thrown and the resource will not be acquired."}
{"SampleId": 3923667, "Origin": "Produces a Collapsed SemanticGraph with no extras.", "Reference": "Produces a Collapsed SemanticGraph.", "Hypothesis": "Produces a Collapsed SemanticGraph with no extras, now deprecated."}
{"SampleId": 2624576, "Origin": "Binds the specified {@link Service} at the specified path pattern.", "Reference": "Binds the specified {@link HttpService} at the specified path pattern.", "Hypothesis": "Binds the specified {@link HttpService} at the specified path pattern."}
{"SampleId": 3467749, "Origin": "Makes the given visitor visit all of the instructions in this list.", "Reference": "Makes the given visitor visit all the instructions in this list.", "Hypothesis": "Makes the given visitor visit all of the instructions in this list."}
{"SampleId": 4245480, "Origin": "Does nothing if\nthe given node is currently not visible or target is .", "Reference": "Does nothing if\nthe given node is currently not visible or target is {@code null}.", "Hypothesis": "The method updates a Node with the given node if it is not currently visible and target is."}
{"SampleId": 4617610, "Origin": "Tests {@link Array#from(Value...)}.", "Reference": "Tests {@link XQArray#from(Value...)}.", "Hypothesis": "Tests {@link XQArray#from(Value...)}."}
{"SampleId": 1220434, "Origin": "Ingest a Matrix into an H2O Frame.", "Reference": "Ingest a Mahout Matrix into an H2O DRM.", "Hypothesis": "Ingest a Matrix into an H2O Frame."}
{"SampleId": 6305223, "Origin": "Build an HTTP Ok without any content.", "Reference": "Build an HTTP No content.", "Hypothesis": "Build an HTTP No Content without any content."}
{"SampleId": 3357845, "Origin": "List a range of recording descriptors which match a channel and stream id.", "Reference": "List a range of recording descriptors which match a channel URI fragment and stream id.", "Hypothesis": "List a range of recording descriptors which match a channel fragment and stream id."}
{"SampleId": 4117678, "Origin": "See the\n{@link BlowfishCipher} class-level JavaDoc for more information and why it might be good to provide your own.", "Reference": "See the\nclass-level JavaDoc for more information and why it might be good to provide your own.", "Hypothesis": "@link BlowfishCipher} class-level JavaDoc for more information and why it might be good to provide your own."}
{"SampleId": 5316646, "Origin": "Autodetect a {@link FreeMarkerConfig} object via the ApplicationContext.", "Reference": "Autodetect a {@link FreeMarkerConfig} object in the {@code ApplicationContext}.", "Hypothesis": "Autodetect a {@link FreeMarkerConfig} object via the ApplicationContext."}
{"SampleId": 1294322, "Origin": "Invoked when the txn has been removed from the queue and is starting to execute at a local ExecutionSite", "Reference": "Invoked when the txn has been removed from the queue and is starting to execute at a local PartitionExecutor", "Hypothesis": "Invoked when the txn has been removed from the queue and is starting to execute at a local ExecutionSite"}
{"SampleId": 3344326, "Origin": "RxRatpack.promise(new AsyncService().observe(\"foo\"))\n    ).getValue();", "Reference": "RxRatpack.promiseAll(new AsyncService().observe(\"foo\"))\n    ).getValue();", "Hypothesis": "RxRatpack.promiseAll(new AsyncService().observe(\"foo\"))\n    ).getValue();"}
{"SampleId": 1353529, "Origin": "Assign available voices to the chords that have no voice assigned yet.", "Reference": "Assign available voices to the chords in this measure with no voice assigned yet.", "Hypothesis": "Assign available voices to the chords that have no voice assigned yet, prioritizing staff continuity whenever possible."}
{"SampleId": 4311215, "Origin": "High order byte is serverId, next 5\n5 bytes are from timestamp, and low order 2 bytes are 0s.", "Reference": "High order 1 byte is serverId, next\n5 bytes are from timestamp, and low order 2 bytes are 0s.", "Hypothesis": "High order byte is serverId, next 5 bytes are from timestamp, and low order 2 bytes are 0s."}
{"SampleId": 5360172, "Origin": "Configure a {@link RSocketOutboundGateway.Command} for RSocket request type.", "Reference": "Configure an {@link RSocketOutboundGateway.Command} for the RSocket request type.", "Hypothesis": "Configure a {@link RSocketOutboundGateway.Command} for RSocket request type."}
{"SampleId": 242261, "Origin": "Then log4j invokes the {@link #setAppenderName(String)}\nmethod to set the value of {@link #mAppenderName}.", "Reference": "Then log4j invokes the {@link #setProcessType(String)}\nmethod to set the value of {@link #mProcessType}.", "Hypothesis": "Then log4j invokes the {@link #setProcessType(String)} method to set the value of {@link #mProcessType}."}
{"SampleId": 2337267, "Origin": "Created by user info", "Reference": "Created by user", "Hypothesis": "Created by user"}
{"SampleId": 2891318, "Origin": "Appends BCC address.", "Reference": "Appends CC address.", "Hypothesis": "Appends CC address."}
{"SampleId": 3576038, "Origin": "If there is any regular output or error\noutput, it is appended to the given s.", "Reference": "If there is any regular output or error\noutput, it is appended to the given {@code StringBuilder}s.", "Hypothesis": "Appends any regular output or error output to the given StringBuilder object(s)."}
{"SampleId": 2048820, "Origin": "Calls {@link #discardToEnd()} and releases any held DRM resources.", "Reference": "Calls {@link #discardToEnd()} and releases any owned {@link DrmSession} references.", "Hypothesis": "Calls {@link #discardToEnd()} and releases any held DRM resources by calling metadataQueue.releaseDrmSessionReferences()."}
{"SampleId": 2111867, "Origin": "There are cases where a type is seen as unresolved but can be found\namongst the imports of the module or within the default imports.", "Reference": "There are cases where a type is seen as unresolved but can be found\namongst the imports of the module.", "Hypothesis": "There are cases where a type is seen as unresolved but can be found amongst the module's single-type and on-demand imports."}
{"SampleId": 1348848, "Origin": "Returns the log compactor.", "Reference": "Returns the log writer.", "Hypothesis": "Returns the log writer."}
{"SampleId": 3991730, "Origin": "Set the number of expected records for this task.", "Reference": "Set the number of expected records for this connector.", "Hypothesis": "Set the number of expected records for this task."}
{"SampleId": 2134050, "Origin": "predict\n* predict the rating given a sparse appender vector", "Reference": "Predict the rating given a sparse appender vector.", "Hypothesis": "Predict the rating given a sparse appender vector with user and item IDs."}
{"SampleId": 617914, "Origin": "Adding fields to a POJO as operator state should require a state migration.", "Reference": "Adding fields to a POJO as operator state should succeed.", "Hypothesis": "Adding fields to a POJO as operator state should require a state migration exception."}
{"SampleId": 3357863, "Origin": "Set the time a publication will linger in nanoseconds after being drained.", "Reference": "Set the time a network publication will linger in nanoseconds after being drained.", "Hypothesis": "Set the time a publication will linger in nanoseconds after being drained."}
{"SampleId": 2312346, "Origin": "Users\ncannot poke the threshold values via this Condition.", "Reference": "Users must not poke the threshold values via this Condition.", "Hypothesis": "Users cannot poke the threshold values via this ConditionWithin."}
{"SampleId": 1328525, "Origin": "Sets the journal serializer, returning the builder for method chaining.", "Reference": "Sets the journal namespace, returning the builder for method chaining.", "Hypothesis": "Sets the journal namespace, returning the builder for method chaining."}
{"SampleId": 1066822, "Origin": "Return the {@code Graph} from the underlying switchable.", "Reference": "Return the {@code Graph} from the underlying DatasetGraph", "Hypothesis": "Return the {@code Graph} from the underlying data structure graph (DSG), or the default graph if there is no specified name."}
{"SampleId": 2913708, "Origin": "Obtains an instance from the specified unique name.", "Reference": "Obtains an instance from the specified name.", "Hypothesis": "Obtains an instance from the specified name."}
{"SampleId": 4396433, "Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "Hypothesis": "Returns a string representation of this object; useful for testing and debugging with sensitive data redacted."}
{"SampleId": 6006976, "Origin": "Write a Chart series as rows in a CSV file.", "Reference": "Export a XYChart series into rows in a CSV file.", "Hypothesis": "Write a Chart series as rows in a CSV file."}
{"SampleId": 4390872, "Origin": "For more information about managing snapshot copy grants, go to", "Reference": "For more information about managing snapshot copy grants, go to Amazon Redshift Database Encryption in the Amazon Redshift", "Hypothesis": "For more information about managing snapshot copy grants with updated code, go to"}
{"SampleId": 275709, "Origin": "Load all profile names.", "Reference": "A task that reads all profile names.", "Hypothesis": "Read all profile names."}
{"SampleId": 3036764, "Origin": "Decode an action profile member to PI action group member.", "Reference": "Decode an action profile member to PI action profile member.", "Hypothesis": "Decode an action profile member to PI action group member using a specific weight and pipeconf."}
{"SampleId": 1381360, "Origin": "Validates that trailing checksums should be enabled based on {@link ClientType} and the presence\nor S3 specific headers.", "Reference": "Validates that checksums should be enabled based on {@link ClientType} and the presence\nor S3 specific headers.", "Hypothesis": "Validates that trailing checksums should be enabled based on {@link ClientType} and the presence or S3 specific headers."}
{"SampleId": 1135007, "Origin": "First sends a request to the BlobStore and gets a list of all blob file summaries\nprefixed by the given coreName.", "Reference": "First sends a request to the BlobStore and gets a list of all blob file summaries\nprefixed by the given blobName.", "Hypothesis": "First sends a request to the BlobStore and gets a list of all blob file summaries prefixed by the given blobName."}
{"SampleId": 2624584, "Origin": "Creates a new HTTP authorization {@link Service} decorator using the specified\n{@link Authorizer}s.", "Reference": "Creates a new HTTP authorization {@link HttpService} decorator using the specified\n{@link Authorizer}s.", "Hypothesis": "Creates a new HTTP authorization {@link Service} decorator using the specified {@link Authorizer}s."}
{"SampleId": 1131869, "Origin": "Return a new {@link Terms} in which term of {@code coreNodeName} is removed", "Reference": "Return a new {@link Terms} in which terms for the {@code coreNodeName} are removed", "Hypothesis": "Return a new {@link Terms} in which terms of {@code coreNodeName} and {@code recoveringTerm(coreNodeName)} are removed"}
{"SampleId": 2939584, "Origin": "It incorporates the zone, bulb type and command\ncategory.", "Reference": "It incorporates the bridge, zone, bulb type and command\ncategory.", "Hypothesis": "It incorporates the zone, bulb type and command category, along with bridgeOffset."}
{"SampleId": 3772633, "Origin": "Expands the given row.", "Reference": "Expands the given item at given index.", "Hypothesis": "Expands the given row and its children."}
{"SampleId": 340561, "Origin": "Sets playback rate using {@link PlaybackParams2}.", "Reference": "Sets playback rate using {@link PlaybackParams}.", "Hypothesis": "Sets playback rate using {@link PlaybackParams}."}
{"SampleId": 2615599, "Origin": "Adds an actor as a child of this group, immediately after another child actor.", "Reference": "If the\nactor is already a child of this group, no changes are made.", "Hypothesis": "Adds an actor as a child of this group, immediately after another specified child actor."}
{"SampleId": 1095693, "Origin": "This method currently handles\nevents for the classname combo box.", "Reference": "This method currently handles\nevents for the classname JLabeledChoice", "Hypothesis": "This method currently handles events for the classname selection."}
{"SampleId": 1314713, "Origin": "Creates an audit entry when a service definition is deleted.", "Reference": "Creates an audit entry when a API definition is deleted.", "Hypothesis": "Creates an audit entry when a service definition is deleted."}
{"SampleId": 340563, "Origin": "Gets current playback position as a {@link MediaTimestamp2}.", "Reference": "Gets current playback position as a {@link MediaTimestamp}.", "Hypothesis": "Gets current playback position as a {@link MediaTimestamp}."}
{"SampleId": 2706458, "Origin": "Get Multiply Rate.", "Reference": "Get Faktor.", "Hypothesis": "Get Multiply Rate"}
{"SampleId": 2700190, "Origin": "Get UPC/EAN.", "Reference": "Get TU-UPC.", "Hypothesis": "Get UPC/EAN_TU."}
{"SampleId": 5724509, "Origin": "Convenience method for getScheme(host.getSchemeName())", "Reference": "Convenience method for {@code getScheme(host.getSchemeName())}", "Hypothesis": "Convenience method for getScheme(host.getSchemeName()). Args.notNull(host, \"Host\")."}
{"SampleId": 337258, "Origin": "Returns the {@link CaptureRequestConfiguration} for the {@link CaptureStage} object.", "Reference": "Returns the {@link CaptureRequestConfig} for the {@link CaptureStage} object.", "Hypothesis": "Returns the {@link CaptureRequestConfig} for the {@link CaptureStage} object."}
{"SampleId": 4797744, "Origin": "A return value of {@code -1} necessarily\nindicate that the map contains no mapping for the key.", "Reference": "A return value of {@code #FREE} necessarily\nindicate that the map contains no mapping for the key.", "Hypothesis": "A return value of {@code FREE} necessarily indicate that the map contains no mapping for the key."}
{"SampleId": 3758708, "Origin": "So when we got block and all is ok - call this method.", "Reference": "So when we got packet and all is ok - call this method.", "Hypothesis": "Sends an acknowledgement packet to a remote node using its session key and the given block ID."}
{"SampleId": 4474528, "Origin": "Generates a code sample for using {@link ShareDirectoryClient#deleteSubDirectoryWithResponse(String, Duration,", "Reference": "Generates a code sample for using {@link ShareDirectoryClient#deleteSubdirectoryWithResponse(String, Duration,", "Hypothesis": "Generates a code sample for using {@link ShareDirectoryClient#deleteSubdirectoryWithResponse(String, Duration,"}
{"SampleId": 1356230, "Origin": "Check if the last item in key signature has some trailing space (before any head).", "Reference": "Check if last item in key signature has some trailing space (before any head).", "Hypothesis": "Check if the last item in key signature has some trailing space (before any head)."}
{"SampleId": 1405621, "Origin": "Marks the action as analyzing.", "Reference": "Marks the action as scanning.", "Hypothesis": "Marks the action as scanning."}
{"SampleId": 2081521, "Origin": "We make sure that\ntrying to update the field works if the user has the \"correct\" role, but failes if it doesn't.", "Reference": "We make sure that\ntrying to update the field works if the user has the \"correct\" role, but fails if it doesn't.", "Hypothesis": "We make sure that trying to update the field works if the user has the \"correct\" role, but fails if it doesn't."}
{"SampleId": 2706894, "Origin": "Set Balancing.", "Reference": "Set Saldierung.", "Hypothesis": "Set IsBalancing value."}
{"SampleId": 1150835, "Origin": "An empty NumericDocValues which returns zero for every document", "Reference": "An empty NumericDocValues which returns no documents", "Hypothesis": "An empty NumericDocValues which returns zero for every document and supports exhaustion and cost tracking."}
{"SampleId": 3427796, "Origin": "Setter for the URL of the content review icon associated with this item", "Reference": "Setter for the css class of the content review icon associated with this item", "Hypothesis": "Setter for the CSS class of the content review icon associated with this item"}
{"SampleId": 3830101, "Origin": "Returns a new Run with the new status, and with the status of the given, completed step set accordingly.", "Reference": "Returns a new Run with the status of the given completed step set accordingly.", "Hypothesis": "Returns a new Run with the new status, and updates the status of the given completed step accordingly."}
{"SampleId": 2912437, "Origin": "Sets the groups used to find an issuer curve.", "Reference": "Sets the groups used to find an issuer curve by legal entity.", "Hypothesis": "Sets the groups used to find an issuer curve with a map of LegalEntityId to LegalEntityGroup"}
{"SampleId": 3571800, "Origin": "Marks {@code protoMember}, throwing if it is explicitly excluded, or if its enclosing type is\nalso specifically included.", "Reference": "Marks {@code protoMember}, throwing if it is explicitly excluded.", "Hypothesis": "Marks {@code protoMember}, throwing if it is explicitly excluded, or if its enclosing type is included."}
{"SampleId": 575173, "Origin": "Two objects are considered different if\n{@code value.compareTo(reference) != 0}", "Reference": "Two objects are considered different if\n{@code value.equals(reference) == false}", "Hypothesis": "Two objects are considered different if {@code value.equals(reference)"}
{"SampleId": 2732385, "Origin": "Expands all tree nodes in a single call.", "Reference": "Expands all tree nodes.", "Hypothesis": "Expands all tree nodes by recursively calling expandAllImpl()."}
{"SampleId": 6017980, "Origin": "Computes the minimum for each pixel across all bands in the {@link Planar} image.", "Reference": "Computes the minimum for each pixel across selected bands in the {@link Planar} image.", "Hypothesis": "Computes the minimum for each pixel across all bands in the {@link Planar} image by reshaping the output to the input's dimensions before performing the operation."}
{"SampleId": 2891419, "Origin": "Sets current date as e-mails sent date.", "Reference": "Sets current date as the sent date.", "Hypothesis": "Sets current date as e-mails sent date when using setCurrentSentDate method."}
{"SampleId": 5447619, "Origin": "timed invokeAll(,,null) throws NPE", "Reference": "timed invokeAll(,,null) throws NullPointerException", "Hypothesis": "Tests a custom executor with 2 threads, using invokeAll(,,null) method, and throws a NullPointerException if it's successful."}
{"SampleId": 4476777, "Origin": "The {@link RsaKeyCreateOptions#getKeyType() keyType} indicates the type of key to create.", "Reference": "The {@link CreateRsaKeyOptions#getKeyType() keyType} indicates the type of key to create.", "Hypothesis": "The {@link CreateRsaKeyOptions#getKeyType() keyType} indicates the type of key to create."}
{"SampleId": 3195611, "Origin": "Creates an iterable that iterates in parallel over a three iterables.", "Reference": "Creates an iterable that iterates in parallel over three iterables.", "Hypothesis": "Creates an iterable that iterates in parallel over a three iterables."}
{"SampleId": 2913755, "Origin": "Obtains an instance from the specified unique name.", "Reference": "Obtains an instance from the specified name.", "Hypothesis": "Obtains an instance from the specified name."}
{"SampleId": 5077304, "Origin": "Starts continuous task.", "Reference": "Starts local continuous task.", "Hypothesis": "Starts a local continuous task."}
{"SampleId": 1352180, "Origin": "Temporary method to upgrade from oldStaffBarlines to staffBarlines.", "Reference": "Upgrade from oldStaffBarlines to staffBarlines.", "Hypothesis": "Upgrade existing staff bar data from oldStaffBarlines to staffBarlines."}
{"SampleId": 2615557, "Origin": "Sets the alignment of the items in the list.", "Reference": "Sets the horizontal alignment of the list items.", "Hypothesis": "Sets the alignment of the items in the list."}
{"SampleId": 4625121, "Origin": "Atomize Java items.", "Reference": "Return Java items.", "Hypothesis": "Query Java utility classes."}
{"SampleId": 1122903, "Origin": "Constuct a trace log event.", "Reference": "Constuct a debug log event.", "Hypothesis": "Construct a debug log event."}
{"SampleId": 2782536, "Origin": "Returns an iterator on all registered commands.", "Reference": "Returns a sorted collection of all registered commands.", "Hypothesis": "Returns a collection of all registered commands."}
{"SampleId": 3828357, "Origin": "The string \"back\" is special-cased\nto provide Referrer support, when Referrer\nis not present `alt` or \"/\" is used.", "Reference": "The string \"back\" is special-cased\nto provide Referrer support, when Referrer\nis not present \"/\" is used.", "Hypothesis": "The string \"back\" is special-cased to provide Referrer support, when Referrer is not present `alt` or \"/\" is used."}
{"SampleId": 6048529, "Origin": "Returns the app with the primary key or throws a {@link com.liferay.marketplace.NoSuchAppException} if it could not be found.", "Reference": "Returns the app with the primary key or throws a {@link NoSuchAppException} if it could not be found.", "Hypothesis": "Returns the app with the primary key or throws a {@link com.liferay.marketplace.NoSuchAppException} if it could not be found."}
{"SampleId": 4476799, "Origin": "The {@link KeyCreateOptions#getExpires() expires} and {@link", "Reference": "The {@link CreateKeyOptions#getExpiresOn() expires} and {@link", "Hypothesis": "The {@link CreateKeyOptions#getExpires() expires} and {@link"}
{"SampleId": 3467805, "Origin": "Checks a given class.", "Reference": "Checks the given class.", "Hypothesis": "Checks a given class with usage instructions provided."}
{"SampleId": 2706670, "Origin": "Get Externer Kunde Nr..", "Reference": "Get Memo_Delivery.", "Hypothesis": "Get Memo_Delivery"}
{"SampleId": 4624088, "Origin": "Compresses and stores an integer value to the specified byte array.", "Reference": "Compresses and stores an integer value at the beginning of the byte array.", "Hypothesis": "Compresses and stores an integer value to the specified byte array using a method that takes the integer value itself and returns its length"}
{"SampleId": 2328476, "Origin": "Get the username (email) of the current user.", "Reference": "Get the email of the current user.", "Hypothesis": "Get the email of the current user."}
{"SampleId": 6176871, "Origin": "Fetch metric in {@link org.terasology.telemetry.Metrics} and send to the server.", "Reference": "Fetch metric in {@link org.terasology.context.Context} and send to the server.", "Hypothesis": "Fetch metric in {@link org.terasology.telemetry.Metrics} and send to the server with modified method signature and context."}
{"SampleId": 2336968, "Origin": "Get OpenID Connect authentication resources\n### Functional Description:   Provides information about OpenID Connect authentication options.", "Reference": "Get OpenID Connect authentication resources\n## ⚠ Deprecated since version VERSION  ### Functional Description:   Provides information about OpenID Connect authentication options.", "Hypothesis": "Get OpenID Connect authentication resources\n\nFunctional Description: Provides information about OpenID Connect authentication options."}
{"SampleId": 3296307, "Origin": "After install, this function checks whether everything went properly or not.", "Reference": "After install, this function checks whether everything went properly.", "Hypothesis": "After install, this function checks whether everything went properly or not by checking if a file corresponding to the available contribution already exists in the sketchbook folder and creates a new one if it doesn't."}
{"SampleId": 1328897, "Origin": "Creates a new {@code AtomicTreeMapBuilder}.", "Reference": "Creates a new {@code AtomicNavigableMapBuilder}.", "Hypothesis": "Creates a new {@code AtomicNavigableMapBuilder}."}
{"SampleId": 3629287, "Origin": "Returns an immutable map containing eight mappings.", "Reference": "Returns an unmodifiable map containing eight mappings.", "Hypothesis": "Returns an unmodifiable map containing eight mappings."}
{"SampleId": 4819711, "Origin": "Method getJobID returns the Hadoop running job JobID.", "Reference": "Method getProcessStepID returns the Hadoop running job JobID.", "Hypothesis": "Method getProcessStepID returns the JobStatusClient's ID as a String."}
{"SampleId": 6329108, "Origin": "Scheduler:\n {@code combineLatest} does not operate by default on a particular {@link Scheduler}.", "Reference": "Scheduler:\n {@code combineLatestArray} does not operate by default on a particular {@link Scheduler}.", "Hypothesis": "Scheduler: {@code combineLatestArray} does not operate by default on a particular {@link Scheduler}."}
{"SampleId": 1676490, "Origin": "Allows to create alignment with the following feature - aligned blocks are aligned to block with the current alignment if the one\nif found; block with the given  alignment is checked otherwise.", "Reference": "Allows to create alignment with the following feature - aligned blocks are aligned to block with the current alignment if the one\nif found; block with the given {@code 'base'} alignment is checked otherwise.", "Hypothesis": "Allows to create alignment with the following feature - aligned blocks are aligned to block with the current alignment if the one found; block with the given  alignment is checked otherwise."}
{"SampleId": 4470228, "Origin": "Gets the {@link EncryptionScope} used to encrypt this blob's content on the server.", "Reference": "Gets the {@code encryption scope} used to encrypt this blob's content on the server.", "Hypothesis": "Gets the {@link String} used to encrypt this blob's content on the server."}
{"SampleId": 617471, "Origin": "Tests that the conjunct future returns upon completion the collection of all future values.", "Reference": "Tests that the conjunct future returns upon completion the collection of all future values\nin the same order in which the futures were inserted.", "Hypothesis": "Tests that the conjunct future returns upon completion the collection of all future values after processing each future value sequentially and shuffling their order."}
{"SampleId": 4386725, "Origin": "To configure vault notifications, send a PUT request to the\n subresource of the vault.", "Reference": "To configure vault notifications, send a PUT request to the\nnotification-configuration subresource of the\nvault.", "Hypothesis": "To configure vault notifications, send a PUT request to the subresource of the vault with the given SetVaultNotificationsRequest object."}
{"SampleId": 3036552, "Origin": "Returns the members of this action profile group.", "Reference": "Returns the list of member references of this action profile group.", "Hypothesis": "Returns the members of this action profile group using values() method."}
{"SampleId": 4850465, "Origin": "Gets the icon URL of the guild, if present and in a supported format.", "Reference": "Gets the icon URL of the guild, if present.", "Hypothesis": "Gets the icon URL of the guild, if present and in a supported format."}
{"SampleId": 339388, "Origin": "Default implementation returns {@link SessionResult#RESULT_CODE_NOT_SUPPORTED}.", "Reference": "Default implementation returns {@link SessionResult#RESULT_ERROR_NOT_SUPPORTED}.", "Hypothesis": "Default implementation returns {@link SessionResult#RESULT_ERROR_NOT_SUPPORTED}."}
{"SampleId": 459646, "Origin": "Returns a function that checks that a particular MongoDB pipeline is\ngenerated to implement a query.", "Reference": "Returns a function that checks that a particular MongoDB query\nhas been called.", "Hypothesis": "Checks whether a MongoDB pipeline query matches a given set of expected queries."}
{"SampleId": 2705867, "Origin": "Get Minimum Level.", "Reference": "Get Mindestmenge.", "Hypothesis": "Get Minimum Level."}
{"SampleId": 2913695, "Origin": "Obtains an instance from the specified unique name.", "Reference": "Obtains an instance from the specified name.", "Hypothesis": "Obtains an instance from the specified name."}
{"SampleId": 3805026, "Origin": "The MediaLibrary will call `onChange(boolean ongoing)` if\nthe media library changed.", "Reference": "The MediaLibrary will call `onLibraryChanged()` if\nthe media library changed.", "Hypothesis": "The MediaLibrary will call `onChange(boolean ongoing)` if the library changed."}
{"SampleId": 761748, "Origin": "Updates frequencies by values and features.", "Reference": "Calculates frequencies for each feature.", "Hypothesis": "Calculates frequency maps for each feature category by iterating through dataset and updating counts."}
{"SampleId": 5367565, "Origin": "This indicator says if --entity and --defaultSearchResult parameter are visible.", "Reference": "This indicator says if --interface and --defaultSearchResult parameter are visible.", "Hypothesis": "This indicator says if --interface and --defaultSearchResult parameter are visible when --entity parameter isn't specified."}
{"SampleId": 3575190, "Origin": "then a new BasicDocument is used instead.", "Reference": "then a new {@code BasicDocument} is used instead.", "Hypothesis": "Instantiates a new BasicDocument instance either through reflection or direct instantiation and sets basic metadata."}
{"SampleId": 6017975, "Origin": "Computes the maximum for each pixel across all bands in the {@link Planar} image.", "Reference": "Computes the maximum for each pixel across selected bands in the {@link Planar} image.", "Hypothesis": "Computes the maximum for each pixel across all bands in the {@link Planar} image, and reshapes the output to match the input's dimensions."}
{"SampleId": 1405989, "Origin": "Helper method to remove an Artifact.", "Reference": "Helper method to remove an output file.", "Hypothesis": "Helper method to remove an output artifact by deleting its path. This method also handles scenarios where the output cannot be directly deleted but can still be removed safely. It takes a Path object and an optional ArtifactRoot as input parameters."}
{"SampleId": 4479527, "Origin": "Set the etag property: The etag property.", "Reference": "Set the eTag property: The eTag property.", "Hypothesis": "Set the eTag property: The eTag property."}
{"SampleId": 5282400, "Origin": "Gets an ordered list of visible screens", "Reference": "Gets a copy of the ordered list of visible screens", "Hypothesis": "Gets a copy of an ordered list of visible screens"}
{"SampleId": 402257, "Origin": "Handles: PUT /clusters/{clusterName}/servicegroups/{serviceGroupName}/services/{serviceDisplayName}", "Reference": "Handles: PUT /clusters/{clusterName}/servicegroups/{serviceGroupName}/services/{serviceName}", "Hypothesis": "Handles: PUT /clusters/{clusterName}/servicegroups/{serviceGroupName}/services/{serviceName"}
{"SampleId": 1311682, "Origin": "Scenario:\n  - CA is only in service trust store, missing from gateway trust store\n  - Gateway does not trust service, as it does not trust CA\n  - Service trusts gateway via CA", "Reference": "Scenario:\n  - CA is only in API trust store, missing from gateway trust store\n  - Gateway does not trust API, as it does not trust CA\n  - API trusts gateway via CA", "Hypothesis": "Scenario: \n  - CA is only in service trust store, missing from gateway trust store\n  - Gateway does not trust API, as it does not trust CA\n  - Service trusts gateway via CA"}
{"SampleId": 2139109, "Origin": "Writes an entry to the currently open file, if any.", "Reference": "Writes a compilation unit to the currently open file, if any.", "Hypothesis": "Writes a compilation unit to the currently open file, if any."}
{"SampleId": 4478591, "Origin": "Set the fileContentType property: Sets the MIME content type of the\nfile.", "Reference": "Set the contentType property: Sets the MIME content type of the\nfile.", "Hypothesis": "Set the contentType property: Sets the MIME content type of the file."}
{"SampleId": 3678417, "Origin": "Obtains an instance of {@code OffsetDateTime} from a local date and offset time.", "Reference": "Obtains an instance of {@code OffsetDateTime} from a {@code ZonedDateTime}.", "Hypothesis": "Obtains an instance of {@code OffsetDateTime} from a ZonedDateTime."}
{"SampleId": 4478304, "Origin": "Code snippets for {@link LeaseClientBuilder#buildClient()}.", "Reference": "Code snippets for {@link BlobLeaseClientBuilder#buildClient()}.", "Hypothesis": "Code snippets for {@link BlobLeaseClientBuilder#buildClient()}."}
{"SampleId": 5454967, "Origin": "Resolves a collection of root modules to create a configuration.", "Reference": "Resolves a collection of root modules, with service binding, to create\nconfiguration.", "Hypothesis": "Resolves a collection of root modules and binds them to create a configuration."}
{"SampleId": 4470113, "Origin": "In case of\nfailure the {@link Flux} will error.", "Reference": "In case of\nfailure the {@link CosmosContinuablePagedFlux} will error.", "Hypothesis": "In case of failure, the {@link CosmosContinuablePagedFlux} will error."}
{"SampleId": 18077, "Origin": "Set Exclude of Total Calculation.", "Reference": "Set Hide Grand Total.", "Hypothesis": "Set Hide Grand Total."}
{"SampleId": 4863801, "Origin": "Atomically sets the hi int value to the given updated value\nonly if the current value {@code ==} the expected value.", "Reference": "Atomically sets the hi value to the given updated value\nonly if the current value {@code ==} the expected value.", "Hypothesis": "Atomically sets the hi int value to the given updated value only if the current value {@code ==} the expected value."}
{"SampleId": 1553355, "Origin": "For each ChildGlideModule, write an Indexer with an Annotation with the class name.", "Reference": "For each LibraryGlideModule, write an Indexer with an Annotation with the class name.", "Hypothesis": "For each LibraryGlideModule, write an Indexer with an Annotation with the class name."}
{"SampleId": 2337136, "Origin": "Get customer keypair\n### Functional Description:   Retrieve the customer resque keypair.", "Reference": "Get customer's key pair\n### Functional Description:   Retrieve the customer rescue key pair.", "Hypothesis": "Get customer keypair}\nFunctional Description: Retrieve the customer resque keypair."}
{"SampleId": 2641057, "Origin": "This makes it\nhard to debug because if task throws an exception, its call stack ends in the execution engine that actually\nstarts a thread that serves the task.", "Reference": "This makes it\nhard to debug because if a task throws an exception, its call stack ends in the execution engine that actually\nstarts a thread that serves the task.", "Hypothesis": "This makes it hard to debug because if a task throws an exception, its call stack ends in the execution engine that actually starts a thread that serves the task."}
{"SampleId": 1533305, "Origin": "Code for reading alt site records from a table *", "Reference": "Code for reading sample name and alt site records from a table *", "Hypothesis": "Read alt site records from a table and return a pair of metadata and list of records."}
{"SampleId": 2049289, "Origin": "Sets the {@link MediaSource}s to be used by the test runner.", "Reference": "Sets a {@link MediaSource} to be used by the test runner.", "Hypothesis": "Sets the {@link MediaSource} to be used by the test runner."}
{"SampleId": 2631280, "Origin": "Sets decryption as succeeded", "Reference": "Sets crypto job as succeeded", "Hypothesis": "Sets crypto job success"}
{"SampleId": 4477720, "Origin": "Tests assert that the setting can be deleted after unlock the setting.", "Reference": "Tests assert that the setting can be deleted after clear read-only of the setting.", "Hypothesis": "Tests assert that the setting can be deleted after clearing the read-only of the setting."}
{"SampleId": 2241395, "Origin": "Compares if the file md5 matches a given md5 hash", "Reference": "Compares if the file hash matches a given hash", "Hypothesis": "Compares if the file hash matches a given hash"}
{"SampleId": 5629899, "Origin": "Sets the dialogNode.", "Reference": "Set the dialogNode.", "Hypothesis": "Sets the dialogNode"}
{"SampleId": 1922268, "Origin": "Get the value of a property in a specific buck rule body.", "Reference": "Get the value of a named property in a specific buck rule body.", "Hypothesis": "Get the string value of a property in a specific buck rule body."}
{"SampleId": 3734030, "Origin": "If arrayLengthAccess node is an array length field access and the other node is less than or\nequal to that array length, then refine the other nodes type to less than the array length.", "Reference": "If lengthAccess node is an sequence length field or method access and the other node is less\nthan or equal to that sequence length, then refine the other nodes type to less than the\nsequence length.", "Hypothesis": "If arrayLengthAccess node is a sequence length field access and the other node is less than or equal to that sequence length, then refine the other nodes type to less than the sequence length."}
{"SampleId": 1985695, "Origin": "Then pick the second highest from the array and insert to result according to k.", "Reference": "Insert the person to result according to k.", "Hypothesis": "Sort the given people array based on their tickets' numbers. Then add each person to a result list according to their specified k value."}
{"SampleId": 4718520, "Origin": "Returns true to indicate that we can paint a representation of the", "Reference": "Returns true to indicate that we can paint a representation of the Object.", "Hypothesis": "@Override Returns true to indicate that we can paint a representation of the"}
{"SampleId": 4902042, "Origin": "The return map keys are index, type, field (as specified in the request).", "Reference": "The return map keys are index, field (as specified in the request).", "Hypothesis": "The return map keys are index, type, and field (as specified in the request)."}
{"SampleId": 5270976, "Origin": "Return all keys matching the search query, without pagination nor facets", "Reference": "Return all rule ids matching the search query, without pagination nor facets", "Hypothesis": "Return all keys matching the search query, without pagination nor facets."}
{"SampleId": 3551966, "Origin": "If Servlet VERSION is\nused, the cookie will be marked as HttpOnly.", "Reference": "By default the cookie\nwill be marked as HttpOnly.", "Hypothesis": "If Servlet VERSION is used, the cookie will be marked as HttpOnly."}
{"SampleId": 2230459, "Origin": "Associates this cache configuration to a quorum.", "Reference": "Associates this cache configuration to a split brain protection.", "Hypothesis": "Associates this cache configuration to a split brain protection."}
{"SampleId": 5270278, "Origin": "Non-null password.", "Reference": "Non-empty password.", "Hypothesis": "Optional: non-null password."}
{"SampleId": 4780028, "Origin": "web applications), consider using a\ncontroller with component pooling and/or caching.", "Reference": "web applications), consider using a\ncontroller with component pooling.", "Hypothesis": "Create a simple controller using a specific component manager."}
{"SampleId": 4465304, "Origin": "If an event\nlistener is assignable to {@link EventListener} it will registered as is.", "Reference": "If an event\nhandler is assignable to {@link EventMessageHandler} it will registered as is.", "Hypothesis": "If an event handler is assignable to {@link EventHandler} it will registered as is."}
{"SampleId": 340615, "Origin": "Once the prefetch is done, the session will change its playback state to\n{@link SessionPlayer2#PLAYER_STATE_PAUSED}.", "Reference": "Once the prepare is done, the session will change its playback state to\n{@link SessionPlayer2#PLAYER_STATE_PAUSED}.", "Hypothesis": "Once the prepare is done, the session will change its playback state to {@link SessionPlayer2#PLAYER_STATE_PAUSED}."}
{"SampleId": 6298393, "Origin": "Reset the value given the timestamp, value and reals.", "Reference": "Reset the value given the timestamp and value.", "Hypothesis": "Reset the value given the timestamp and value."}
{"SampleId": 4476356, "Origin": "{@codesnippet com.azure.data.applicationconfig.configurationclient.getSetting#string-string}", "Reference": "{@codesnippet com.azure.data.applicationconfig.configurationclient.getConfigurationSetting#string-string}", "Hypothesis": "@codesnippet com.azure.data.applicationconfig.configurationclient.getConfigurationSetting#string-string"}
{"SampleId": 6043601, "Origin": "Returns the sync d l objects before and after the current sync d l object in the ordered set where companyId = ?", "Reference": "Returns the sync d l objects before and after the current sync d l object in the ordered set where modifiedTime > ?", "Hypothesis": "Finds the sync DL objects preceding and following the specified sync DL object in the ordered set where modified time = ?"}
{"SampleId": 3653621, "Origin": "Returns an java.time.Instant object that is offset by a number of milliseconds from now.", "Reference": "Returns an java.time.Instant object that is offset by a number of hours from now.", "Hypothesis": "Returns an java.time.Instant object that is offset by a number of hours from now."}
{"SampleId": 1579836, "Origin": "returns true when data migration is complete and all v2 metrics tables have been deleted; false otherwise", "Reference": "returns true when data migration is complete and\nall v2 metrics tables data has been migrated for configured resolutions ; false otherwise", "Hypothesis": "returns true when data migration is complete and all v2 metrics tables have been deleted; false otherwise"}
{"SampleId": 708945, "Origin": "Get methods from all interfaces.", "Reference": "Gets methods from all interfaces.", "Hypothesis": "Get methods from all interfaces."}
{"SampleId": 5176855, "Origin": "Setter for {@link #exposeOnlyRequestedHeader}", "Reference": "Setter for {@link #allowOnlyRequestedHeader}", "Hypothesis": "Setter for {@link #allowOnlyRequestedHeader"}
{"SampleId": 4388491, "Origin": "Once you've created a DB cluster\nparameter group, you need to associate it with your DB cluster using", "Reference": "Once\nyou've created a DB cluster parameter group, you need to associate it\nwith your DB cluster using ModifyDBCluster.", "Hypothesis": "Once you've created a DB cluster parameter group, associate it with your DB cluster using the provided method."}
{"SampleId": 3511343, "Origin": "Creates a new unformatted {@link TranslatableText} with the given\n{@link Translation} and arguments.", "Reference": "Creates a new unformatted {@link TranslatableText} with the given\n{@link Translation}.", "Hypothesis": "Creates a new unformatted {@link TranslatableText} with the given {@link Nameable#Translatable nameable}."}
{"SampleId": 5178253, "Origin": "Returns the selection listener that will be notified.", "Reference": "Returns the wakeup listener that will be notified.", "Hypothesis": "Returns the wakeup listener that will be notified."}
{"SampleId": 4379077, "Origin": "Put all the DynamoDB annotations.", "Reference": "Put all the DynamoDB annotations present on the annotated element.", "Hypothesis": "Put all the DynamoDB annotations from the given AnnotatedElement."}
{"SampleId": 1278082, "Origin": "Adds the address of a Gremlin Server to the list of servers a {@link Client} will try to contact to send\nrequests to.", "Reference": "Adds an address representing a group of Gremlin Servers, which will be added to the list of servers a\n{@link Client} will try to contact to send requests to.", "Hypothesis": "Adds a list of addresses of Gremlin Servers to the list of servers a {@link Client} will try to contact to send requests to."}
{"SampleId": 6044923, "Origin": "or throws a {@link com.liferay.calendar.NoSuchNotificationTemplateException} if it could not be found.", "Reference": "or throws a {@link NoSuchNotificationTemplateException} if it could not be found.", "Hypothesis": "Finds a CalendarNotificationTemplate by its calendarId, notificationType, and notificationTemplateType or throws a com.liferay.calendar.NoSuchNotificationTemplateException if it could not be found."}
{"SampleId": 4320705, "Origin": "New attribute statement.", "Reference": "New attribute statement attribute statement.", "Hypothesis": "Creates a new AttributeStatement object from given attribute maps and formats, while considering empty attributes and default name format. Uses a DefaultSaml20AttributeBuilder for construction."}
{"SampleId": 5828057, "Origin": "Apply {@link #coerce(String, Type, CNode, DataContext)} method to a collection item.", "Reference": "Apply {@link #coerce(String, Type, TreeNode, DataContext)} method to a collection item.", "Hypothesis": "Apply {@link #coerce(String, Type, TreeNode, DataContext)} method to a collection item."}
{"SampleId": 3036393, "Origin": "Adds a control metadata.", "Reference": "Adds a packet metadata.", "Hypothesis": "Adds a packet metadata."}
{"SampleId": 1575039, "Origin": "Submits a Runnable task for execution and returns a Future representing that task.", "Reference": "Submits a {@link RepeatedTask} for execution and returns a Future representing that task.", "Hypothesis": "Submits a RepeatedTask for execution and returns a Future representing that task."}
{"SampleId": 4396663, "Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "Hypothesis": "Returns a string representation of this object; useful for testing and debugging, with sensitive data redacted."}
{"SampleId": 1855746, "Origin": "Based on vmchk/checkinterntable.c r1.3", "Reference": "Based on runtime/vmchk/checkinterntable.c", "Hypothesis": "Checking ROM intern string nodes and reporting any issues found with UTF8 and classLoader for each node while iterating through the stringInternTable. Count of checked nodes is reported at the end."}
{"SampleId": 4824462, "Origin": "If set to false, an exception in CuDNN will be propagated back to the user.", "Reference": "If set to false, an exception in the helper will be propagated back to the user.", "Hypothesis": "If set to false, an exception in CuDNN will be propagated back to the user."}
{"SampleId": 4829582, "Origin": "This method allows you to specify IterationListeners for this model.", "Reference": "This method allows you to specify trainingListeners for this model.", "Hypothesis": "This method allows you to specify TrainingListeners for this model."}
{"SampleId": 5069072, "Origin": "If no such module has been set, or if something wrong occurred, null will be returned.", "Reference": "If no valid module has been set null will be returned.", "Hypothesis": "Returns a default FileSinkImages instance if the UI module has a FileSinkImages implementation, otherwise logs a warning. If no valid UI module is set or an error occurred, null will be returned."}
{"SampleId": 1052971, "Origin": "Better way to change consumers are use {@link DataCarrier#consume}", "Reference": "Better way to change consumeDriver are use {@link DataCarrier#consume}", "Hypothesis": "Better way to change consumers are use {@link DataCarrier#consume"}
{"SampleId": 6105217, "Origin": "Returns a {@link PointerBuffer} view of the {@code data.l} field.", "Reference": "Returns a {@link CLongBuffer} view of the {@code data.l} field.", "Hypothesis": "Returns a {@link CLongBuffer} view of the {@code data.l} field."}
{"SampleId": 2434957, "Origin": "Get the value of reportFormat.", "Reference": "Get the value of junitFailOnCVSS.", "Hypothesis": "Get the value of junitFailOnCVSS."}
{"SampleId": 3425035, "Origin": "Helper to get a list of user eids in a group", "Reference": "Helper to get a list of user display ids in a group", "Hypothesis": "Helper to get a list of user display ids in a group"}
{"SampleId": 2519949, "Origin": "Gets the resolution of the bitstream that this instance represents.", "Reference": "Gets the height of the bitstream that this instance represents.", "Hypothesis": "Gets the height of the bitstream that this instance represents."}
{"SampleId": 2912958, "Origin": "Position attributes, provide the ability to associate arbitrary information\nwith a position in a key-value map.", "Reference": "Position attributes provide the ability to associate arbitrary information in a key-value map.", "Hypothesis": "Arbitrary information associated with a position in a key-value map using an ImmutableMap."}
{"SampleId": 80471, "Origin": "Returns a new Coord4D from a ByteBuf.", "Reference": "Returns a new Coord4D from a PacketBuffer.", "Hypothesis": "Returns a new Coord4D from a PacketBuffer."}
{"SampleId": 2443732, "Origin": "In case the {@code parent} instance manager\nis not specified, the locator will not be parented.", "Reference": "In case the {@code parent} injection manager\nis not specified, the locator will not be parented.", "Hypothesis": "In case the {@code parent} injection manager is not specified, the locator will not be parented."}
{"SampleId": 3082427, "Origin": "However, since we\ninject the ConstantAnnotationMarker the Annotation proxy types for ahead-of-time allocated\nannotations implement two interfaces.", "Reference": "However, since we\ninject the constant-annotation-marker interface the Annotation proxy types for ahead-of-time\nallocated annotations implement two interfaces.", "Hypothesis": "Finds the interface type for a marked annotation type based on the provided annotation type and MetaAccessProvider. The method returns the first interface of the two interfaces implemented by the annotation proxy class when the second interface is ConstantAnnotationMarker or its equivalent."}
{"SampleId": 2170166, "Origin": "Returns JSON value with the specified content.", "Reference": "Returns JSON value with the specified string content.", "Hypothesis": "Retrieves a JSON value with the specified content."}
{"SampleId": 3675981, "Origin": "{@code EPOCH_MONTH} -", "Reference": "{@code PROLEPTIC_MONTH} -", "Hypothesis": "@code PROLEPTIC_MONTH} -"}
{"SampleId": 2478797, "Origin": "Get the instance of Smack interoperation layer implementation class", "Reference": "Get the instance of Smack interoperability layer implementation class", "Hypothesis": "Get the instance of Smack interoperation layer implementation class"}
{"SampleId": 1837269, "Origin": "Send request to the server with early blockwise negociation through block2 option.", "Reference": "Send request to the server with early blockwise negotiation through block2 option.", "Hypothesis": "Send request to the server with early blockwise negotiation through block2 option."}
{"SampleId": 4961624, "Origin": "If such value node exists {@code this} is returned\n to allow chaining; otherwise {@link IllegalArgumentException} is thrown.", "Reference": "If such value node exists {@code this} is returned\n to allow chaining;\n otherwise exception is thrown.", "Hypothesis": "If such value node exists {@code this} is returned to allow chaining; otherwise an exception is thrown."}
{"SampleId": 2107622, "Origin": "Use the\n{@linkplain #addDelivery(Delivery, TimeWindow)} instead.", "Reference": "Use the\n{@linkplain #addDelivery(DeliveryJob, TimeWindow)} instead.", "Hypothesis": "Use the {@linkplain #addDelivery(DeliveryJob)} instead."}
{"SampleId": 4780357, "Origin": "Returns the clusters that have been created during processing or \nif none were created.", "Reference": "Returns the clusters that have been created during processing or an empty list\nif no documents were present.", "Hypothesis": "Returns the clusters that have been created during processing or if none were created, returns an empty list."}
{"SampleId": 1985798, "Origin": "Heap.", "Reference": "Update heap.", "Hypothesis": "Build a max heap to store height and number of rectangles available."}
{"SampleId": 125272, "Origin": "Executes the console script.", "Reference": "Executes the webserver script.", "Hypothesis": "Executes the web server script."}
{"SampleId": 2782634, "Origin": "Enables or disables this action based on the currently active folder's\nhas a parent, this action will be enabled, if not it will be disabled.", "Reference": "Enables or disables this action based on the currently active folder's\nhas a parent and current tab is not locked, this action will be enabled,\nif not it will be disabled.", "Hypothesis": "Enables or disables this action based on the currently active folder's has a parent and if the current tab is not locked, this action will be enabled, if not it will be disabled."}
{"SampleId": 4019376, "Origin": "Checks the dirty status of the 'reprUrl' field.", "Reference": "Checks the dirty status of the 'headers' field.", "Hypothesis": "Checks the dirty status of the 'headers' field."}
{"SampleId": 239880, "Origin": "Sends a request and returns immediately without getting a response.", "Reference": "Sends a request and waits until the request is flushed to network.", "Hypothesis": "Sends a request and returns immediately without getting a response; adds a listener to close the channel on failure and notifies the request when completed."}
{"SampleId": 3710214, "Origin": "Returns the next {@link Query} but does not update the internal {@link Query} iterator.", "Reference": "Returns the next {@link PlaylistEntry} but does not update the internal {@link PlaylistEntry}\niterator.", "Hypothesis": "Returns the next {@link PlaylistEntry} but does not update the internal {@link PlaylistEntry} iterator."}
{"SampleId": 3629282, "Origin": "Returns an immutable list containing an arbitrary number of elements.", "Reference": "Returns an unmodifiable list containing an arbitrary number of elements.", "Hypothesis": "Returns an unmodifiable list containing an arbitrary number of elements."}
{"SampleId": 2126899, "Origin": "See {@link Args#getBlockingExecutor}.", "Reference": "See {@link Args#getOffloadExecutor}.", "Hypothesis": "See {@link Args#getOffloadExecutor}."}
{"SampleId": 5023264, "Origin": "This method wraps raw in the character provided by {@link #getNameEscape()}.", "Reference": "This method escapes raw using method {@link #escapeName(String)}.", "Hypothesis": "This method escapes raw by appending the result of {@link #escapeName(raw)} to the sql buffer."}
{"SampleId": 1460396, "Origin": "Use pipelined hash join for SERVICE node.", "Reference": "Use pipelined hash join for inlined VALUES node.", "Hypothesis": "Testing the use of pipelined hash join for values."}
{"SampleId": 5146744, "Origin": "Go through the list of available clients\nin the queue and call {@link HThriftClient#close()} on each.", "Reference": "Go through the list of available clients\nin the queue and call {@link HClient#close()} on each.", "Hypothesis": "Go through the list of available clients in the queue and call {@link HClient#close()} on each."}
{"SampleId": 3073929, "Origin": "Assigns a native mirror object to the given RObject object.", "Reference": "Assigns a native mirror object to the given RBaseObject object.", "Hypothesis": "Assigns a native mirror object to the given RBaseObject object."}
{"SampleId": 4374184, "Origin": "Calling this operation sends a handshake to\nevery account in the organization.", "Reference": "Calling this\noperation sends a handshake to every invited account in the organization.", "Hypothesis": "Calling this operation sends a handshake to every account in the organization."}
{"SampleId": 4860737, "Origin": "The max idle time is applied to a HTTP request for IO operations and\ndelayed dispatch.", "Reference": "The max idle time is applied to an HTTP request for IO operations and\ndelayed dispatch.", "Hypothesis": "The max idle time is applied to an HTTP request for IO operations and delayed dispatch."}
{"SampleId": 6289995, "Origin": "If no\nauthority is found {@code null} is returned.", "Reference": "If no Network is found {@code null} is returned.", "Hypothesis": "This method looks up a network for a given groupOfLineOrNetworkId. If no network is found with the provided ID, {@code null} is returned."}
{"SampleId": 2312762, "Origin": "It divides the sum of\nsquared deviations from the mean by N (N == number of samples).", "Reference": "It divides the sum of\nsquared deviations from the mean by N-1 (N == number of samples).", "Hypothesis": "It divides the sum of squared deviations from the mean by N (N == number of samples)."}
{"SampleId": 114175, "Origin": "Checks if a group is allowed in a container with the given type.", "Reference": "Checks if a group element is allowed in a container with a given type.", "Hypothesis": "Checks if a group is allowed in a container with the given type and returns true if there are any types that match."}
{"SampleId": 3283282, "Origin": "Records the addition of an element of the given size to the given generation.", "Reference": "Records the addition of an element to the given generation.", "Hypothesis": "Records the addition of an element to the given generation."}
{"SampleId": 6043570, "Origin": "Returns a range of all the sync d l objects where companyId = ?", "Reference": "Returns a range of all the sync d l objects where repositoryId = ?", "Hypothesis": "Finds a range of all the sync d l objects where repositoryId = ? and type = ?"}
{"SampleId": 3815935, "Origin": "Tells if the join / leave membership events must be hidden in the messages list.", "Reference": "Tells if the join and leave membership events should be shown in the messages list.", "Hypothesis": "Tells if the join / leave membership events should be shown in the messages list."}
{"SampleId": 5458041, "Origin": "Returns a non-empty array of ModuleDescriptors in the run-time image.", "Reference": "Returns a non-empty array of ModuleResolutions in the run-time image.", "Hypothesis": "Returns a non-empty array of ModuleResolutions in the run-time image."}
{"SampleId": 5176599, "Origin": "Getter for {@link #allowOrigins}", "Reference": "Getter for {@link #allowedOrigins}", "Hypothesis": "Getter for {@link #allowedOrigins"}
{"SampleId": 6034465, "Origin": "See\n{@link #DEFAULT_PING_BEFORE_ACTIVATE_CONNECTION}.", "Reference": "See {@link #DEFAULT_PROTOCOL_VERSION}.", "Hypothesis": "See {@link #DEFAULT_PROTOCOL_VERSION}."}
{"SampleId": 6048596, "Origin": "or throws a {@link com.liferay.marketplace.NoSuchModuleException} if it could not be found.", "Reference": "or throws a {@link NoSuchModuleException} if it could not be found.", "Hypothesis": "Finds the Module with the given appId and contextName, or throws a {@link com.liferay.marketplace.NoSuchModuleException} if it could not be found."}
{"SampleId": 6190301, "Origin": "Returns the rootest flow's name for the module chain that will be macro expanded.", "Reference": "'s name for the module chain that will be macro expanded.", "Hypothesis": "Calculates the rootest flow's name for the module chain that will be macro expanded."}
{"SampleId": 4621073, "Origin": "Removes a package from the package repository.", "Reference": "Removes a package from the repository.", "Hypothesis": "Removes a package from the main-memory repository based on its name or ID."}
{"SampleId": 1837347, "Origin": "Gets connection ID length.", "Reference": "Gets connection ID generator.", "Hypothesis": "Gets connection ID generator."}
{"SampleId": 5073089, "Origin": "The returned {@link RxTransaction} allows using DB transactions using Rx Observables.", "Reference": "The returned {@link RxTransaction} allows using DB transactions using Rx Observables using RX's IO scheduler for\nsubscribeOn.", "Hypothesis": "The returned {@link RxTransaction} allows using DB transactions using Rx Observables with support for IO schedulers."}
{"SampleId": 2915653, "Origin": "The meta-property for the {@code upFrontFee} property.", "Reference": "The meta-property for the {@code upfrontFee} property.", "Hypothesis": "The meta-property for the {@code upfrontFee} property."}
{"SampleId": 4386719, "Origin": "For more\ninformation, see SetVaultNotifications.", "Reference": "SetVaultNotifications.", "Hypothesis": "Initiates a job using the provided request."}
{"SampleId": 5876039, "Origin": "Get this object as a DateTime using the default zone.", "Reference": "Converts this object to a DateTime using the default zone.", "Hypothesis": "Get this object as a DateTime using the default zone without specifying a DateTimeZone."}
{"SampleId": 5596153, "Origin": "Wrapper for updateRemoteStoreDefList : update this for all the nodes", "Reference": "Wrapper for updateRemoteStoreDefList : update this for all nodes", "Hypothesis": "Wrapper for updateRemoteStoreDefList : update this for all the nodes"}
{"SampleId": 5324103, "Origin": "Match the beginning of the given path and return the remaining portion of\nthe path not covered by this pattern.", "Reference": "Match the beginning of the given path and return the remaining portion\nnot covered by this pattern.", "Hypothesis": "Match the beginning of the given path and return the remaining portion of the path not covered by this pattern."}
{"SampleId": 6263795, "Origin": "Cancel the task of loading and displaying image for passed {@link ImageView}.", "Reference": "Cancel the task of loading and displaying image for passed\n{@link android.widget.ImageView ImageView}.", "Hypothesis": "Cancel the task of loading and displaying image for passed {@link ImageViewAware}."}
{"SampleId": 3677409, "Origin": "This factory converts the arbitrary date-time object to an instance of {@code OffsetTime}.", "Reference": "This factory converts the arbitrary temporal object to an instance of {@code OffsetTime}.", "Hypothesis": "This factory converts the arbitrary date-time object to an instance of {@code OffsetTime}, catching potential exceptions during the process."}
{"SampleId": 2731883, "Origin": "Returns Object deserialized from XML text.", "Reference": "Returns Object deserialized from XML content.", "Hypothesis": "Deserializes an object from XML input stream using XStream and returns it."}
{"SampleId": 6559, "Origin": "Registers a receiver to finish activity when screen goes off.", "Reference": "Registers a receiver to finish activity when screen goes off and to\nrefresh window flags on screen on.", "Hypothesis": "Registers a receiver for handling screen on/off events to finish activity when screen goes off."}
{"SampleId": 6366279, "Origin": "Execute and passed template.", "Reference": "Execute the passed template.", "Hypothesis": "Execute and passed template."}
{"SampleId": 3677411, "Origin": "Returns an adjusted time based on this time.", "Reference": "Returns an adjusted copy of this time.", "Hypothesis": "Returns an adjusted time based on this time with optimizations."}
{"SampleId": 5177289, "Origin": "Converts a Raml documentation to a Restlet definition.", "Reference": "Translates a Raml documentation to a Restlet definition.", "Hypothesis": "Converts a Raml documentation to a Restlet definition."}
{"SampleId": 3633675, "Origin": "Returns the selected remote file", "Reference": "Returns the selected remote resource", "Hypothesis": "Returns the selected remote resource"}
{"SampleId": 3894694, "Origin": "Set read only mode.", "Reference": "Toggle read only mode.", "Hypothesis": "Toggle read only mode."}
{"SampleId": 1702768, "Origin": "The writes are done across 2 different instantiations of the same SMRMap.", "Reference": "The writes are done across 2 different instantiations of the same CorfuTable.", "Hypothesis": "The writes are done across 2 different instantiations of the same CorfuTable."}
{"SampleId": 3775217, "Origin": "Saves changes from the bound fields to the given bean if all validators\n(binding and bean level) pass.", "Reference": "Writes changes from the bound fields to the given bean if all validators\n(binding and bean level) pass.", "Hypothesis": "Writes changes from the bound fields to the given bean if all validators (binding and bean level) pass."}
{"SampleId": 4624575, "Origin": "Opens the specified query file.", "Reference": "Opens and focuses the specified query file.", "Hypothesis": "Opens the specified query file and sets the editor area focus."}
{"SampleId": 5433435, "Origin": "Returns the default SelectorProvider.", "Reference": "Returns the default SelectorProvider implementation.", "Hypothesis": "Returns the default SelectorProviderImpl instance."}
{"SampleId": 3410298, "Origin": "Returns an array containing some validators in order to validate the", "Reference": "Returns an array containing some validators in order to validate the JimpleBody", "Hypothesis": "Returns an array containing some validators in order to validate the"}
{"SampleId": 5652738, "Origin": "Executes a long work instances on a single node and verifies that it took enough time and executed on the\nexpected node.", "Reference": "Executes a long work instances on a single node and verifies that it took enough time and executed on the\nexpected node (the other one since Policy.ALWAYS)", "Hypothesis": "Executes a long work instances on a single node and verifies that it took enough time and executed on the expected node using server2Proxy instead of server1Proxy."}
{"SampleId": 4396704, "Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "Hypothesis": "Returns a string representation of this object for testing and debugging purposes."}
{"SampleId": 1462504, "Origin": "Brings the BIND nodes in a correct order according to the dependencies\nthat they have.", "Reference": "Brings the nodes in a correct order according to binding req dependencies\nthat they have.", "Hypothesis": "Brings the BIND nodes in a correct order according to the dependencies that they have."}
{"SampleId": 4145487, "Origin": "User names will always be checked in a\ncase insensitive manner.", "Reference": "User names will always be checked in a\ncase insensitive manner using the system default Locale.", "Hypothesis": "User names will always be checked in a case insensitive manner."}
{"SampleId": 84943, "Origin": "Receives a problem and a queue implementing the search strategy and\ncomputes a node referencing a goal state, if such a state was found.", "Reference": "Template method which receives a problem and a queue implementing the search strategy\nand computes a node referencing a goal state, if such a state was found.", "Hypothesis": "Receives a problem and a queue implementing the search strategy and computes a node referencing a goal state, if such a state was found while considering cheaper paths."}
{"SampleId": 5724301, "Origin": "Converts an array of raw binary data into an array of ascii 0 and 1 characters.", "Reference": "Converts an array of raw binary data into an array of ASCII 0 and 1 characters.", "Hypothesis": "Converts an array of raw binary data into an array of ASCII 0 and 1 characters."}
{"SampleId": 3036551, "Origin": "Returns the identifier of this action profile group.", "Reference": "Returns the ID of this action profile group.", "Hypothesis": "Returns the identifier of this action profile group."}
{"SampleId": 2247228, "Origin": "Returns a new Task that, when this task completes\nnormally, executes the given action using the supplied Scheduler.", "Reference": "Returns a new Task that, when this task completes\nnormally, executes the given action using the supplied Executor.", "Hypothesis": "Returns a new Task that, when this task completes normally, executes the given action using the supplied Executor."}
{"SampleId": 434622, "Origin": "If the compatibility is INCOMPATIBLE, returns the first part of the reader schema that failed\ncompatibility check.", "Reference": "Returns the fragment of the reader schema that failed compatibility check.", "Hypothesis": "Returns the first part of the reader schema that failed compatibility check if the compatibility is INCOMPATIBLE."}
{"SampleId": 4396506, "Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "Hypothesis": "Returns a string representation of this object; useful for testing and debugging, with sensitive data redacted."}
{"SampleId": 5322140, "Origin": "Determine if the supplied class is an inner class.", "Reference": "Determine if the supplied class is an inner class,\ni.e.", "Hypothesis": "Determine if the supplied class is an inner class."}
{"SampleId": 2004453, "Origin": "This delegates to {@link #execute(CommandSender, String, String[], ResourceBundle,", "Reference": "This delegates to {@link #execute(CommandSender, String, String[], CommandMessages)}.", "Hypothesis": "This delegates to {@link #execute(CommandSender, String, String[], ResourceBundle, CommandMessages)"}
{"SampleId": 4087929, "Origin": "Test for reading paragraphs from Range after replacing some\ntext in this Range.", "Reference": "Test for reading paragraphs from Range after replacing some text in this", "Hypothesis": "Test for reading paragraphs from Range after replacing some text in this Range."}
{"SampleId": 439644, "Origin": "This test ensures that the {@link KuduIO} correctly respects parallelism by\ndeserializes writers and that each writer is opening and closing Kudu sessions.", "Reference": "This test ensures that the {@link KuduIO} correctly respects parallelism by\ndeserializing writers and that each writer is opening and closing Kudu sessions.", "Hypothesis": "This test ensures that the {@link KuduIO} correctly respects parallelism by verifying deserialized writers and that each writer opens and closes Kudu sessions."}
{"SampleId": 803503, "Origin": "Gets the threshold parameter.", "Reference": "Get the threshold parameter.", "Hypothesis": "Gets the threshold parameter."}
{"SampleId": 3774250, "Origin": "Returns a comparator which can compare calendar events.", "Reference": "Returns the default comparator which can compare calendar events by\nduration.", "Hypothesis": "Returns a comparator which can compare calendar events based on their duration and index."}
{"SampleId": 3830099, "Origin": "Returns an unmodifiable view of the status of all steps in this run.", "Reference": "Returns an unmodifiable view of all step information in this run.", "Hypothesis": "Returns an unmodifiable view of the status of all steps in this run."}
{"SampleId": 1033556, "Origin": "Generates an instance of {@link OpenedObject} for which the underlying stream may be re-opened and retried\nbased on the exception and retry condition.", "Reference": "Generates an instance of {@link OpenObject} for which the underlying stream may be re-opened and retried\nbased on the exception and retry condition.", "Hypothesis": "Generates an instance of {@link OpenObject} for which the underlying stream may be re-opened and retried based on the exception and retry condition using the provided fetch configuration."}
{"SampleId": 4396659, "Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "Hypothesis": "Returns a string representation of this object with sensitive data redacted; useful for testing and debugging."}
{"SampleId": 4132989, "Origin": "Sets the value of default user (login or username).", "Reference": "Sets the value of default user (login or user name).", "Hypothesis": "Sets the value of default user name (login or username)."}
{"SampleId": 2063123, "Origin": "Returns an immutable copy of {@code graph}.", "Reference": "Returns an immutable copy of {@code network}.", "Hypothesis": "Returns an immutable copy of {@code network}."}
{"SampleId": 4132858, "Origin": "Get a list of objects being traced by this object.", "Reference": "Gets a list of objects being traced by this object.", "Hypothesis": "Get a list of weak references for objects being traced by this object."}
{"SampleId": 132608, "Origin": "Returns the Lucene document with the given root path from the index.", "Reference": "Returns the Lucene document with the given structure id from the index.", "Hypothesis": "Deprecated} Returns the Lucene document with the given resource structure ID from the index."}
{"SampleId": 471385, "Origin": "The option is a:", "Reference": "The option is a:\n type.", "Hypothesis": "The option is an AdvancedCxfEndpointConsumerBuilder which accepts a cxfConfigurer object and sets it to the property before returning this instance."}
{"SampleId": 3665758, "Origin": "Gets the specified message in the current locale.", "Reference": "Gets the data source with the specified id.", "Hypothesis": "Finds a data source with the specified ID from the metadata service. Throws an exception if the data source is not found."}
{"SampleId": 5458271, "Origin": "Returns a {@link Requires} for a dependence on a module\nwith the given (and possibly empty) set of modifiers.", "Reference": "Returns a {@link Requires} for a dependence on a module with the given\n(and possibly empty) set of modifiers, and optionally the version\nrecorded at compile time.", "Hypothesis": "Returns a {@link Requires} for a dependence on a module with the given (and possibly empty) set of modifiers and an additional null value."}
{"SampleId": 4320984, "Origin": "Jsonify string.", "Reference": "Jsonify.", "Hypothesis": "Jsonify a value into string."}
{"SampleId": 5437533, "Origin": "This test uses some API hidden by the JDK9 module system.", "Reference": "This test uses some non-public API.", "Hypothesis": "This test uses some API hidden by the JDK9 module system to export packages to."}
{"SampleId": 5455020, "Origin": "Returns the service type corresponding to the name of a services\nconfiguration file if it is a valid Java identifier.", "Reference": "Returns the service type corresponding to the name of a services\nconfiguration file if it is a legal type name.", "Hypothesis": "Returns the service type corresponding to the name of a services configuration file if it is a valid Java class name."}
{"SampleId": 3964370, "Origin": "Return a HotStream that will skip emitting data when the first connecting Stream connects.", "Reference": "Return a Connectable that will skip emitting data when the first connecting Stream connects.", "Hypothesis": "Return a Connectable that will skip emitting data when the first connecting Stream connects."}
{"SampleId": 3646242, "Origin": "Builds a JFreeChart time series from a Ta4j time series and an indicator.", "Reference": "Builds a JFreeChart time series from a Ta4j bar series and an indicator.", "Hypothesis": "Builds a JFreeChart time series from a Ta4j time series and an indicator."}
{"SampleId": 5455559, "Origin": "Returns a Path to access to the given resource.", "Reference": "Returns a Path to access the given resource.", "Hypothesis": "Returns a Path to access to the given resource using ResourceHelper."}
{"SampleId": 1310035, "Origin": "Gets the service synchronously.", "Reference": "Gets the api synchronously.", "Hypothesis": "Gets the api synchronously."}
{"SampleId": 2269009, "Origin": "Overload of {@link #connect(String, ServerStateListener, ServerConnectionFailListener)} with only one listener.", "Reference": "Overload of {@link #connect(String, ServerStateListener, ServerReconnectFilter)} with only one listener.", "Hypothesis": "Overload of {@link #connect(String, ServerStateListener, ServerReconnectFilter)} with only one listener."}
{"SampleId": 2016435, "Origin": "Returns the class path URIs specified by the {@code Class-Path} manifest attribute, according\nto \nJAR File Specification.", "Reference": "Returns the class path URIs specified by the {@code Class-Path} manifest attribute, according\nto JAR", "Hypothesis": "Returns the class path files specified by the {@code Class-Path} manifest attribute, according to JAR File Specification."}
{"SampleId": 4396714, "Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "Hypothesis": "Returns a string representation of this object; useful for testing and debugging with sensitive data redacted."}
{"SampleId": 1354753, "Origin": "Report the number of pixels of the interline that corresponds to\nthis font.", "Reference": "Report the number of pixels of the interline that corresponds to the staves\nwhere this font is used.", "Hypothesis": "Report the number of pixels of the interline that corresponds to this staff."}
{"SampleId": 705087, "Origin": "Gets the object schema", "Reference": "Gets the schema", "Hypothesis": "Gets the Avro schema"}
{"SampleId": 2063211, "Origin": "Creates a mutable copy of {@code graph} with the same nodes, edges, and edge values.", "Reference": "Creates a mutable copy of {@code graph} with the same nodes and edges.", "Hypothesis": "Creates a mutable copy of {@code graph} with the same nodes and edges but omits edge values."}
{"SampleId": 4618883, "Origin": "Helper for {@link #remove(long)} that copies all items into a {@link TreeSeq}.", "Reference": "Helper for {@link #remove(long, QueryContext)} that copies all items into a {@link TreeSeq}.", "Hypothesis": "Helper for {@link #remove(long, QueryContext)} that copies all items into a {@link TreeSeq}."}
{"SampleId": 4237630, "Origin": "So if you\nwant to be sure that your {@link IClassCache} is handled in all situations then call this\nmethod twice with your implementations.", "Reference": "So if you\nwant to be sure that your {@link IGetAndSetLocator} is handled in all situations then call this\nmethod twice with your implementations.", "Hypothesis": "This deprecated method setClassCache is used for setting the IClassCache on a class, considering different situations by calling it twice with implementations. It returns an IGetAndSet object that can be used to get and set values of a class."}
{"SampleId": 5453804, "Origin": "The {@code what} supplies the message that describes the member.", "Reference": "The {@code what} parameter supplies the message that describes the member.", "Hypothesis": "The {@code what} supplies the message that describes the member."}
{"SampleId": 2288839, "Origin": "The method call will block (not return)\nuntil a stanza is available or the timeout has elapsed.", "Reference": "The method call will block (not return) until a stanza is available or the\ntimeout has elapsed or if the connection was terminated because of an error.", "Hypothesis": "The method call will block (not return) until a stanza is available or the timeout has elapsed, while continuously checking for exceptions and cancellation status."}
{"SampleId": 4475786, "Origin": "The {@link Poller poller} allows users to automatically poll on the create certificate\noperation status.", "Reference": "The {@link PollerFlux poller} allows users to automatically poll on the create certificate\noperation status.", "Hypothesis": "The {@link PollerFlux poller} allows users to automatically poll on the create certificate operation status."}
{"SampleId": 3774915, "Origin": "Gets the current data source from this DataCommunicator.", "Reference": "Gets the current data provider from this DataCommunicator.", "Hypothesis": "Gets the current data provider from this DataCommunicator."}
{"SampleId": 526695, "Origin": "Update a MessageDigest with the content of a context.", "Reference": "Update a {@link Hasher} with the content of a context.", "Hypothesis": "Update a Hasher with the content of a context."}
{"SampleId": 3366544, "Origin": "Returns an RxJava Observable that monitors changes to this RealmObject.", "Reference": "Returns an Rx Observable that monitors changes to this RealmObject.", "Hypothesis": "Returns an RxJava Observable that monitors changes to this RealmObject as a ChangesetObservable."}
{"SampleId": 2615666, "Origin": "The children will be ordered from bottom to top rather than the default top to bottom.", "Reference": "The children will be displayed last to first.", "Hypothesis": "The children will be ordered from top to bottom rather than the default bottom to top."}
{"SampleId": 1547967, "Origin": "Adds the given {@link ItemStack} to the player's inventory, or drops it in front of them if it was not accepted", "Reference": "Adds the given {@link ItemStack} to the player's inventory, or drops it in front of them if their was not enough\nroom.", "Hypothesis": "Adds the given {@link ItemStack} to the player's inventory, or drops it in front of them if it was not accepted."}
{"SampleId": 3221220, "Origin": "Checks if the given user exists in the current tenant", "Reference": "Checks if the given users and roles exist in the current tenant", "Hypothesis": "Checks if users or roles exist for a given RepositoryFileAclDto object in the current tenant"}
{"SampleId": 5945849, "Origin": "| lhsPatternBind consequenceInvocation?\n          )", "Reference": "| lhsPatternBind consequenceInvocation*\n          )\n          SEMICOLON?", "Hypothesis": "lhsPatternBind consequenceInvocation"}
{"SampleId": 4476383, "Origin": "If the set etag doesn't match anything the update won't happen, this will result in a 412.", "Reference": "If the set ETag doesn't match anything the update won't happen, this will result in a 412.", "Hypothesis": "If the set ETag doesn't match anything the update won't happen, this will result in a 412."}
{"SampleId": 4404090, "Origin": "NOTE:This operation is only useful for long-lived activities\nto report liveliness of the task and to determine if a cancellation is\nbeing attempted.", "Reference": "This operation is only useful\nfor long-lived activities to report liveliness of the task and to\ndetermine if a cancellation is being attempted.", "Hypothesis": "This operation is only useful for long-lived activities to report liveliness of the task and to determine if a cancellation is being attempted."}
{"SampleId": 4718496, "Origin": "Object chooser, this becomes the selected item (and added\nto the chooser if necessary).", "Reference": "If the Object is in the Object chooser, this\nbecomes the selected item (and added to the chooser if necessary).", "Hypothesis": "Set the value of an object for GenericObjectEditor by passing it in the method. If there is no ClassType set up or the object's class does not match, this will result in an error and the operation will be aborted. Otherwise, the object is set as the selected item and the EditorComponent is updated to reflect the change."}
{"SampleId": 5460176, "Origin": "Retrn the list of members for the given class.", "Reference": "Returns a list of enclosed members for the given type.", "Hypothesis": "Retrn a list of members for the given class."}
{"SampleId": 5453405, "Origin": "Updates a module m to export a package to all modules.", "Reference": "Update module m to export a package to all modules.", "Hypothesis": "Updates a module m to export a package to all modules."}
{"SampleId": 3935405, "Origin": "The input file must be a list of whitespace-separated verb-lemma-POS triples, one verb\nform per line.", "Reference": "The input file must be a list of tab-separated verb-POS pairs, one verb\nper line.", "Hypothesis": "The input file must be a list of whitespace-separated verb-lemma-POS triples, one verb form per line."}
{"SampleId": 2774826, "Origin": "Returns the component's background color as an alpha-red-green-blue\ninteger.", "Reference": "Returns the background color of the %type% as an alpha-red-green-blue\ninteger.", "Hypothesis": "Returns the background color of the %type% as an alpha-red-green-blue integer."}
{"SampleId": 616737, "Origin": "TODO: If a region is involved, all of its consumer regions are involved", "Reference": "If a region is involved, all of its consumer regions are involved", "Hypothesis": "If a region is involved, all of its consumer regions are visited during backtracking and marked for restart."}
{"SampleId": 4904121, "Origin": "Creates a new program scope: the list of methods.", "Reference": "Creates a new program scope as the root of all scopes", "Hypothesis": "Creates a new program scope using ScriptClassInfo and PainlessLookup."}
{"SampleId": 2482241, "Origin": "Queries this contact source for the given searchString.", "Reference": "Creates query for the given searchString.", "Hypothesis": "Queries this contact source for the given searchString with the specified limit."}
{"SampleId": 3493340, "Origin": "Schedules package actions differentiating their type among Linux and Solaris\nservers.", "Reference": "Schedules package actions.", "Hypothesis": "Schedules package actions for Linux server types only."}
{"SampleId": 2848828, "Origin": "Load a {@link JobDirectoryManifest} from a {@link AgentManifestMessage}.", "Reference": "Load a {@link DirectoryManifest} from a {@link AgentManifestMessage}.", "Hypothesis": "Load a {@link DirectoryManifest} from a {@link AgentManifestMessage}."}
{"SampleId": 4396482, "Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "Hypothesis": "Returns a string representation of this object; useful for testing and debugging, with sensitive data redacted."}
{"SampleId": 4396486, "Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "Hypothesis": "Returns a string representation of this object; useful for testing and debugging, with sensitive data redacted."}
{"SampleId": 5165327, "Origin": "Test that DocumentElement.add does not throw any exception when passing a non-null value.", "Reference": "Test that DocumentElement.addValue does not throw any exception when passing a non-null value.", "Hypothesis": "Test that DocumentElement.addValue does not throw any exception when passing a non-null value."}
{"SampleId": 3847344, "Origin": "Parses {@link Basic2DMatrix} from the given Matrix Market string.", "Reference": "Parses {@link Basic2DMatrix} from the given Matrix Market.", "Hypothesis": "Parses {@link Basic2DMatrix} from the given Matrix Market stream."}
{"SampleId": 6192592, "Origin": "Creates and caches a test {@link BaseEvent} instance for the scope of the current test method.", "Reference": "Creates and caches a test {@link CoreEvent} instance for the scope of the current test method.", "Hypothesis": "Creates and caches a test {@link CoreEvent} instance for the scope of the current test method."}
{"SampleId": 2384608, "Origin": "This\nmethod removes any fully qualified throwable class names from the message\ncause chain.", "Reference": "This\nmethod replaces fully qualified throwable class names from the message\ncause chain with simple class names.", "Hypothesis": "This method removes any fully qualified throwable class names from the message cause chain and formats it with the simple class name instead."}
{"SampleId": 4622054, "Origin": "Returns the value of a yes/no option.", "Reference": "Returns the boolean value of a yes/no option.", "Hypothesis": "Returns the boolean value of a yes/no option."}
{"SampleId": 5437670, "Origin": "Creates a preprocessed graph for a snippet or method substitution.", "Reference": "Creates a preprocessed graph for a snippet or method substitution with a context of .", "Hypothesis": "Creates a preprocessed graph for a snippet or method substitution with INLINE_AFTER_PARSING flag."}
{"SampleId": 2217820, "Origin": "Test of npara method, of class Exponential.", "Reference": "Test of length method, of class Exponential.", "Hypothesis": "Test of length method, of class Exponential."}
{"SampleId": 4117686, "Origin": "Note that this method will only return a non-null value code if the  has been set.", "Reference": "Note that this method will only return a non-null value code if the {@code CacheManager} has been set.", "Hypothesis": "Note that this method will only return a non-null value if the activeSessions cache has been set."}
{"SampleId": 5724450, "Origin": "Work-around for bug in\njava.net.URI ()", "Reference": "Work-around for bug in\njava.net.URI (URL)", "Hypothesis": "Work-around for bug in java.net.URI ()"}
{"SampleId": 2231272, "Origin": "Throws {@link ConfigurationException} if given group property is defined within Hazelcast properties.", "Reference": "Throws {@link InvalidConfigurationException} if given group property is defined within Hazelcast properties.", "Hypothesis": "Throws {@link InvalidConfigurationException} if given group property is defined within Hazelcast properties."}
{"SampleId": 2568453, "Origin": "Gets the value of the 'zk_Quorum' field.", "Reference": "Gets the value of the 'zkQuorum' field.", "Hypothesis": "Gets the value of the 'zkQuorum' field."}
{"SampleId": 1348201, "Origin": "Returns the event index.", "Reference": "Returns the event indexes.", "Hypothesis": "Returns the event indexes."}
{"SampleId": 726446, "Origin": "Generate a new LdapConnection object for following a referral\nwith the given LdapUrl, and copy the username and password\nfrom the original connection.", "Reference": "Generate a new LdapNetworkConnection object for following a referral\nwith the given LdapUrl, and copy the username and password\nfrom the original connection.", "Hypothesis": "Generate a new LdapNetworkConnection object for following a referral with the given LdapUrl, and copy the username and password from the original connection."}
{"SampleId": 3832974, "Origin": "Returns the subset of nodes that are in a given state", "Reference": "Returns the subset of nodes that are in a given state(s)", "Hypothesis": "Returns the subset of nodes with the specified state or states"}
{"SampleId": 4047352, "Origin": "AdditionalAction, this method returns false and updates the error list when the additonalActionAuth parameter is\nset to false.", "Reference": "AdditionalAction, this method returns false and updates the error list when the additionalActionAuth parameter is\nset to false.", "Hypothesis": "This method returns false and updates the error list when the additionalActionAuth parameter is set to false."}
{"SampleId": 3629299, "Origin": "See Immutable Map Static Factory Methods for details.", "Reference": "See Unmodifiable Maps for details.", "Hypothesis": "See Unmodifiable Map Static Factory Methods for details."}
{"SampleId": 398291, "Origin": "Resets any management pack installation states from\n{@link RepositoryVersionState#INSTALLING} to\n{@link RepositoryVersionState#INSTALL_FAILED}.", "Reference": "Resets any management pack installation states from\n{@link MpackInstallState#INSTALLING} to\n{@link MpackInstallState#INSTALL_FAILED}.", "Hypothesis": "Resets any management pack installation states from {@link MpackInstallState#INSTALLING} to {@link MpackInstallState#INSTALL_FAILED}."}
{"SampleId": 4396705, "Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "Hypothesis": "Returns a string representation of this object; useful for testing and debugging with sensitive data redacted."}
{"SampleId": 2794190, "Origin": "This method returns the value of the database column m_prj_project.projectType", "Reference": "This method returns the value of the database column m_prj_project.type", "Hypothesis": "This method returns the value of the database column m_prj_project.type."}
{"SampleId": 1576666, "Origin": "Validate metadata tags and return whether any properties are present.", "Reference": "Validate metadata tags.", "Hypothesis": "Validate metadata tags and return if any properties are present."}
{"SampleId": 2754246, "Origin": "Inflates the child view of a tab and adds it to the view hierarchy.", "Reference": "Inflates the view, which is associated with a tab, and adds it to the view hierarchy.", "Hypothesis": "Inflates the content view of a tab and adds it to the view hierarchy."}
{"SampleId": 5600560, "Origin": "Name of schedule", "Reference": "Name of task", "Hypothesis": "Name of task"}
{"SampleId": 3665105, "Origin": "Creates a new data source using the specified template.", "Reference": "Updates a data source using the specified template.", "Hypothesis": "Updates an existing data source using the specified template."}
{"SampleId": 4143643, "Origin": "Store the specified Realm properties and child (Realm)", "Reference": "Store the specified CredentialHandler properties and child (CredentialHandler)", "Hypothesis": "Store the specified CredentialHandler properties and child (CredentialHandler)"}
{"SampleId": 1609537, "Origin": "Creates a Stackdriver Stats exporter for an explicit project ID.", "Reference": "Creates a Stackdriver Stats exporter for an explicit project ID, with default Monitored", "Hypothesis": "Creates a Stackdriver Stats exporter for an explicit project ID with additional parameters."}
{"SampleId": 471639, "Origin": "Sets a condition when the provided mock (or other matchers) is not satisfied based on {@link Exchange}\nbeing sent to it when they are received.", "Reference": "Sets a condition when the provided matcher (such as mock endpoint) is not satisfied based on {@link Exchange}\nbeing sent to it when they are received.", "Hypothesis": "Sets a condition when the provided mock (or other matchers) is not satisfied based on {@link Exchange} being sent to it when they are received."}
{"SampleId": 2041054, "Origin": "Destroys all the keys created during this test run.", "Reference": "Destroys all the key versions created during this test run.", "Hypothesis": "Destroys all the crypto key versions created during this test run by checking if their state is not DESTROY_SCHEDULED and then destroying them one by one."}
{"SampleId": 1827452, "Origin": "Return the buffer that apply history DDL is written to.", "Reference": "Return the buffer that apply history-view DDL is written to.", "Hypothesis": "Return the buffer that apply history DDL is written to."}
{"SampleId": 5631112, "Origin": "List a specified feedback entry.", "Reference": "Get a specified feedback entry.", "Hypothesis": "List a specified feedback entry with parameters."}
{"SampleId": 2735159, "Origin": "Returns gap between split icon and split part sides.", "Reference": "Returns gap between menu icon and menu button part sides.", "Hypothesis": "Returns gap between menu icon and menu part sides."}
{"SampleId": 6018005, "Origin": "Computes the minimum for each pixel across all bands in the {@link Planar} image.", "Reference": "Computes the minimum for each pixel across selected bands in the {@link Planar} image.", "Hypothesis": "Computes the minimum for each pixel across all bands in the {@link Planar} image by setting the output shape to match the input's dimensions before performing the operation."}
{"SampleId": 1448162, "Origin": "Extend the path by appending two ChildNumber objects.", "Reference": "Extend the path by appending additional ChildNumber objects.", "Hypothesis": "Extend the path by appending multiple ChildNumber objects."}
{"SampleId": 6048111, "Origin": "or throws a {@link com.liferay.knowledgebase.NoSuchFolderException} if it could not be found.", "Reference": "or throws a {@link NoSuchFolderException} if it could not be found.", "Hypothesis": "Finds a KBFolder by UUID and group ID, or throws a {@link com.liferay.knowledgebase.NoSuchFolderException} if it could not be found."}
{"SampleId": 1041539, "Origin": "Creates {@link JobSpec} from the {@link AvroJobSpec} record.", "Reference": "Creates a {@link JobSpec} or {@link URI} from the {@link AvroJobSpec} record.", "Hypothesis": "Creates a {@link JobSpec} from the {@link AvroJobSpec} record and returns a Collection of Either<JobSpec, URI> based on whether the operation is ADD or UPDATE."}
{"SampleId": 5454859, "Origin": "Returns a Path to access to the given resource.", "Reference": "Returns a Path to access the given resource.", "Hypothesis": "Returns a Path to access the given resource by resolving it relative to the module directory."}
{"SampleId": 4465302, "Origin": "Sets the {@code eventListeners} this {@link EventHandlerInvoker} will forward all its events to.", "Reference": "Sets the {@code eventHandlers} this {@link EventHandlerInvoker} will forward all its events to.", "Hypothesis": "Sets the {@code eventHandlers} this {@link EventHandlerInvoker} will forward all its events to."}
{"SampleId": 3653149, "Origin": "Does not check if feedback session exists.", "Reference": "Creates a feedback response.", "Hypothesis": "Does not check if feedback response exists."}
{"SampleId": 5748677, "Origin": "This method must be invoked for each cache that uses protobuf.", "Reference": "This must be invoked for each cache that uses protobuf.", "Hypothesis": "This method must be invoked for each cache that uses protobuf."}
{"SampleId": 2599642, "Origin": "Accept (case-sensitively) the given phrases even though they are not in the built-in dictionary.", "Reference": "Accept (case-sensitively, unless at the start of a sentence) the given phrases even though they\nare not in the built-in dictionary.", "Hypothesis": "Accept case-sensitively the given phrases even though they are not in the built-in dictionary, and handle the case where the first word is in lowercase."}
{"SampleId": 6017994, "Origin": "Computes the average for each pixel across all bands in the {@link Planar} image.", "Reference": "Computes the minimum for each pixel across selected bands in the {@link Planar} image.", "Hypothesis": "Computes the minimum value for each pixel across all bands in the {@link Planar} image, and stores it in the output array."}
{"SampleId": 3629295, "Origin": "See Immutable Map Static Factory Methods for details.", "Reference": "See Unmodifiable Maps for details.", "Hypothesis": "See Unmodifiable Map Static Factory Methods for details."}
{"SampleId": 1576667, "Origin": "Validate metadata properties and return whether any properties are present.", "Reference": "Validate metadata properties.", "Hypothesis": "Validate metadata properties and return whether any properties are present or not."}
{"SampleId": 570081, "Origin": "Checks a filename to see if it matches the specified wildcard matcher,\nalways testing case-sensitive.", "Reference": "Checks a fileName to see if it matches the specified wildcard matcher,\nalways testing case-sensitive.", "Hypothesis": "Checks a filename to see if it matches the specified wildcard matcher, always testing case-sensitive."}
{"SampleId": 3344545, "Origin": "Create a new builder for creating Retrofit implementations.", "Reference": "Create a new builder for creating Retrofit clients.", "Hypothesis": "Create a new builder for creating Retrofit implementations with default HttpClient instance."}
{"SampleId": 570068, "Origin": "No processing is performed on the filenames other than comparison.", "Reference": "No processing is performed on the fileNames other than comparison.", "Hypothesis": "No processing is performed on the filenames other than comparison."}
{"SampleId": 1356524, "Origin": "For not good inters (such 'weak' inters have already survived the first REDUCTION step)\nwe put them aside as optional glyphs that can take part of the symbols glyphs clustering and\nthus compete for valuable compounds.", "Reference": "For not good inters (some \"weak\" inters have already survived the first REDUCTION step)\nwe put them aside as optional glyphs that can take part of the symbols glyphs clustering and\nthus compete for valuable compounds.", "Hypothesis": "Prepare the ground for symbols retrieval, noting optional (weak) glyphs per system for not good inters that can take part of the symbols glyphs clustering and thus compete for valuable compounds."}
{"SampleId": 3731347, "Origin": "Returns the annotation mirror as specified by the \"qualifier\" element in {@code metaAnno},\nwith arguments taken from {@code argumentAnno}.", "Reference": "Returns the annotation mirror as specified by the \"qualifier\" element in {@code\ncontractAnno}, with arguments taken from {@code argumentAnno}.", "Hypothesis": "Returns the annotation mirror as specified by the \"qualifier\" element in {@code contractAnno}, with arguments taken from {@code argumentAnno}."}
{"SampleId": 1069378, "Origin": "Find all matching tuples - a slot of NodeId.NodeIdAny (or null) means match any", "Reference": "Find all matching tuples - a slot of NodeId.NodeIdAny means match any", "Hypothesis": "Find all matching tuples - a slot of NodeId.NodeIdAny (or null) means match any"}
{"SampleId": 2443548, "Origin": "The current thread might be already in any request scope\nand in that case the scope will be changed to the scope defined by the\n{@link RequestScope.Instance scope instance}.", "Reference": "The current thread might be already in any request scope\nand in that case the scope will be changed to the scope defined by the\n{@link RequestContext scope context}.", "Hypothesis": "The current thread might be already in any request scope and in that case the scope will be changed to the scope defined by the {@link RequestScope.Context context}."}
{"SampleId": 2624540, "Origin": "Binds the specified {@link Service} at the specified path pattern of the default {@link VirtualHost}.", "Reference": "Binds the specified {@link HttpService} at the specified path pattern of the default {@link VirtualHost}.", "Hypothesis": "Binds the specified {@link HttpService} at the specified path pattern of the default {@link VirtualHost}."}
{"SampleId": 4478378, "Origin": "Searches for a {@link SharedKeyCredential} in the passed {@link HttpPipeline}.", "Reference": "Searches for a {@link StorageSharedKeyCredential} in the passed {@link HttpPipeline}.", "Hypothesis": "Searches for a {@link StorageSharedKeyCredential} in the passed {@link HttpPipeline}."}
{"SampleId": 2823334, "Origin": "Maps all index descriptors according to {@link #indexReference(IndexDescriptor)}.", "Reference": "Maps all index descriptors according to {@link #indexReference(IndexDescriptor2)}.", "Hypothesis": "Maps all index descriptors according to {@link #indexReference(IndexDescriptor2)}."}
{"SampleId": 505928, "Origin": "Add a server to the known list of servers.", "Reference": "Add a server to the known list of servers to blacklist.", "Hypothesis": "Add a server to the known list of servers using DefaultServiceDefinition.parse() and addServer()."}
{"SampleId": 557601, "Origin": "If the requested index is greater than the current size, the list will\ngrow to the new size and a new object will be returned from the factory.", "Reference": "If the requested index is greater than the current size, the list will\ngrow to the new size and a new object will be returned from the factory\nor transformer.", "Hypothesis": "If the requested index is greater than the current size, the list will grow to the new size and a new object will be returned from the factory."}
{"SampleId": 4396500, "Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "Hypothesis": "Returns a string representation of this object; useful for testing and debugging."}
{"SampleId": 3471294, "Origin": "Usefull when  you know, that there should be js val or something at the stage", "Reference": "Useful whenyou know that there should be a Javascript value or something at the stage.", "Hypothesis": "Useful when you know that there should be a js val or something at the stage."}
{"SampleId": 1879351, "Origin": "Run ERiC with fixed parameters and compare the result to a golden standard.", "Reference": "Run LMCLUS with fixed parameters and compare the result to a golden standard.", "Hypothesis": "Run LMCLUS with fixed parameters and compare the result to a golden standard."}
{"SampleId": 3355850, "Origin": "Prepare a pooled {@link HttpClient}.", "Reference": "Prepare an {@link HttpClient}.", "Hypothesis": "Prepare a pooled {@link HttpClient} using the provided connection provider."}
{"SampleId": 5078515, "Origin": "Test affinity awareness partition distributions cache size property with semicolon.", "Reference": "Test Partition Awareness partition distributions cache size property with semicolon.", "Hypothesis": "Test partition awareness partition distributions cache size property with semicolon."}
{"SampleId": 5843451, "Origin": "Loads resource IDs from R.txt file and returns the list of their names, if successful.", "Reference": "Loads resource IDs from R.txt file.", "Hypothesis": "Loads resource IDs from R.txt file and returns their names if successful."}
{"SampleId": 436991, "Origin": "Produces a {@link RunnerApi.CombinePayload} from a {@link Combine}.", "Reference": "Produces a {@link RunnerApi.CombinePayload} from a {@link Combine.PerKey}.", "Hypothesis": "Produces a {@link RunnerApi.CombinePayload} from a {@link Combine.PerKey}."}
{"SampleId": 2217799, "Origin": "BIC score of the mixture for given data.", "Reference": "The BIC score of the mixture for given data.", "Hypothesis": "Calculate the BIC score of the mixture for given data by subtracting 0.5 * length() from logLikelihood multiplied by n."}
{"SampleId": 5471903, "Origin": "Gets a new {@link PiNode} that replaces this placeholder during snippet instantiation.", "Reference": "Replaces this node with a {@link PiNode} during snippet instantiation.", "Hypothesis": "Replaces a placeholder with a new {@link PiNode} during snippet instantiation."}
{"SampleId": 3891996, "Origin": "See {@link Upsertable#rowidHasPriority()} for more information.", "Reference": "See {@link Upsertable#rowidSupersedesLogicalKey()} for more information.", "Hypothesis": "See {@link Upsertable#rowidSupersedesLogicalKey()} for more information."}
{"SampleId": 240427, "Origin": "Tests the {@link BlockWorker#createBlock(long, long, String, long)} method.", "Reference": "Tests the {@link BlockWorker#createBlock(long, long, String, String, long)} method.", "Hypothesis": "Tests the {@link BlockWorker#createBlock(long, long, String, String, long)} method."}
{"SampleId": 1473283, "Origin": "The IHAWriteMessage is returned to the caller.", "Reference": "The {@link IHAWriteMessage}\nis returned to the caller.", "Hypothesis": "The IHAWriteMessage is returned to the caller after validating checksum and file position."}
{"SampleId": 2527766, "Origin": "Remove a storage block by the name.", "Reference": "Removes a buffer block by the name.", "Hypothesis": "Remove a buffer block by the name."}
{"SampleId": 2089256, "Origin": "Add a file to the list of the successfully uploaded files.", "Reference": "Add a file to the list of the successfully uploaded files and remove it from the file list", "Hypothesis": "Add a file to the list of the successfully uploaded files with its path and remove it from params."}
{"SampleId": 6188828, "Origin": "Parses the WSDL file in order to validate the service, port and operation, to get the SOAP Action (if defined)\nand to check if the operation requires input parameters or not.", "Reference": "Resolves the WSDL file in order to validate the service, port and operation, to get the SOAP Action (if defined)\nand to check if the operation requires input parameters or not.", "Hypothesis": "Resolves the WSDL data in order to validate the service, port and operation, to get the SOAP Action (if defined) and to check if the operation requires input parameters or not."}
{"SampleId": 2230455, "Origin": "Associates this cache configuration to a quorum.", "Reference": "Associates this cache configuration to a split brain protection.", "Hypothesis": "Associates this cache configuration to a split brain protection mechanism."}
{"SampleId": 1441932, "Origin": "Test of process method, of class ABITracer.", "Reference": "Test of local method, of class ABITracer.", "Hypothesis": "Test of local method, of class ABITracer."}
{"SampleId": 470389, "Origin": "Group: consumer", "Reference": "Group: producer", "Hypothesis": "Group: consumer"}
{"SampleId": 5454855, "Origin": "Returns the service type corresponding to the name of a services\nconfiguration file if it is a valid Java identifier.", "Reference": "Returns the service type corresponding to the name of a services\nconfiguration file if it is a legal type name.", "Hypothesis": "Returns the service type corresponding to the name of a services configuration file if it is a valid Java className."}
{"SampleId": 2824113, "Origin": "See {@link #newDatabase(File, Config, GraphDatabaseFacadeFactory.Dependencies)} instead.", "Reference": "See {@link #newDatabase(File, Config, ExternalDependencies)} instead.", "Hypothesis": "See {@link #newDatabase(File, Config, ExternalDependencies)} instead."}
{"SampleId": 5764434, "Origin": "For details see also {@link #getFieldOrAlias(String)}", "Reference": "For details see also {@link #getFieldOrAlias(Field)}", "Hypothesis": "For details see also {@link #getFieldOrAlias(Field)"}
{"SampleId": 2201186, "Origin": "Corresponds to `hex.tree.drf.DrfMojoModel.score0()`", "Reference": "Corresponds to `hex.tree.gbm.GbmMojoModel.score0()`", "Hypothesis": "Corresponds to `hex.tree.drf.DrfMojoModel.score0(double[], double, double[])`"}
{"SampleId": 2891472, "Origin": "Receives all emails that matches given {@link EmailFilter filter}.", "Reference": "Receives all emails that matches given {@link EmailFilter}.", "Hypothesis": "Receives all emails that matches given {@link EmailFilter filter}."}
{"SampleId": 3083932, "Origin": "Returns a supplier that returns the current execution context associated with the given\nlanguage.", "Reference": "Returns a reference that returns the current execution context associated with the given\nlanguage.", "Hypothesis": "Returns a supplier that returns the current execution context associated with the given language."}
{"SampleId": 4617366, "Origin": "Discards a Message from the not-Acked-List", "Reference": "Discards a Message from the not-Acked-List and returns the messageobject", "Hypothesis": "Discards a Message from the not-Acked-List and returns it if found"}
{"SampleId": 6050719, "Origin": "or throws a {@link com.liferay.wsrp.NoSuchProducerException} if it could not be found.", "Reference": "or throws a {@link NoSuchProducerException} if it could not be found.", "Hypothesis": "Finds a WSRPProducer by UUID and group ID, or throws a {@link com.liferay.wsrp.NoSuchProducerException} if it could not be found."}
{"SampleId": 4476809, "Origin": "The {@link RsaKeyCreateOptions#getKeySize() keySize} can be\noptionally specified.", "Reference": "The {@link CreateRsaKeyOptions#getKeySize() keySize} can be\noptionally specified.", "Hypothesis": "The {@link CreateRsaKeyOptions#getKeySize() keySize} can be optionally specified."}
{"SampleId": 1348855, "Origin": "Returns the current range of the segment.", "Reference": "Returns the segment length.", "Hypothesis": "Returns the length of the range covered by the segment."}
{"SampleId": 2564575, "Origin": "Conditions can be imported statically from {@link ExecutionEventConditions}\nand {@link TestExecutionResultConditions}.", "Reference": "Conditions can be imported statically from {@link EventConditions}\nand {@link TestExecutionResultConditions}.", "Hypothesis": "Conditions can be imported statically from {@link EventConditions} and {@link TestExecutionResultConditions}."}
{"SampleId": 4478507, "Origin": "Code snippets for {@link BlobAsyncClient#setHTTPHeaders(BlobHttpHeaders)}", "Reference": "Code snippets for {@link BlobAsyncClient#setHttpHeaders(BlobHttpHeaders)}", "Hypothesis": "Code snippets for {@link BlobAsyncClient#setHttpHeaders(BlobHttpHeaders)"}
{"SampleId": 4857037, "Origin": "This is an overload of {@link #getUsers(int)} with {@code 100}.", "Reference": "This is an overload of {@link #retrieveUsers(int)} with {@code 100}.", "Hypothesis": "This is an overload of {@link #retrieveUsers(int)} with {@code 100}."}
{"SampleId": 5319737, "Origin": "Set \"global\" CORS configuration based on URL patterns.", "Reference": "Set the \"global\" CORS configurations based on URL patterns.", "Hypothesis": "Set \"global\" CORS configuration based on URL patterns using given map of key-value pairs."}
{"SampleId": 4476351, "Origin": "{@codesnippet com.azure.data.applicationconfig.configurationclient.getSetting#string-string-OffsetDateTime}", "Reference": "{@codesnippet com.azure.data.applicationconfig.configurationclient.getConfigurationSetting#string-string-OffsetDateTime}", "Hypothesis": "@codesnippet com.azure.data.applicationconfig.configurationclient.getConfigurationSetting#string-string-OffsetDateTime"}
{"SampleId": 3772920, "Origin": "If the item is already collapsed, does nothing.", "Reference": "For items that are already collapsed, does nothing.", "Hypothesis": "If the items are already collapsed, does nothing."}
{"SampleId": 5315678, "Origin": "Apply the XPath and assert the number of nodes found.", "Reference": "Apply the XPath and assert the number value found.", "Hypothesis": "Apply the XPath and assert the number of nodes found using provided Double value."}
{"SampleId": 3358067, "Origin": "{@link Publication#isOriginal()} is true,  then an {@link AeronException}\nwill be thrown and the recording not initiated.", "Reference": "{@link Publication#isOriginal()} is true,  then an {@link ArchiveException}\nwill be thrown and the recording not initiated.", "Hypothesis": "@link Publication#isOriginal()} is true,  then an {@link ArchiveException} will be thrown and the recording not initiated."}
{"SampleId": 803893, "Origin": "Gets the batch size.", "Reference": "Get the batch size.", "Hypothesis": "Gets the batch size."}
{"SampleId": 6174222, "Origin": "Creates a DBObject from this Point", "Reference": "Creates a Document from this Point", "Hypothesis": "Creates a Document from this Point"}
{"SampleId": 4320703, "Origin": "New attribute statement.", "Reference": "New attribute statement attribute statement.", "Hypothesis": "New attribute statement with custom builder."}
{"SampleId": 4704906, "Origin": "Initialize the SSL Context, factory and verifier.", "Reference": "Initialize the SSL Context and factory.", "Hypothesis": "Initialize the SSL Context, factory, and verifier."}
{"SampleId": 2913766, "Origin": "Obtains the type from a unique name.", "Reference": "Obtains an instance from the specified name.", "Hypothesis": "Obtains the PriceIndexCalculationMethod from a unique name."}
{"SampleId": 2427998, "Origin": "Create a new reader with the new type {@code B}.", "Reference": "Create a new reader for the new mapped type {@code B}.", "Hypothesis": "Create a new reader with the new type {@code B}, using {@code mapper} function to transform the original value."}
{"SampleId": 2774825, "Origin": "Returns a number that encodes how contents of the arrangement are aligned vertically.", "Reference": "Returns a number that encodes how contents of the %type% are aligned vertically.", "Hypothesis": "A number that encodes how the contents of the %type% are aligned vertically. The choices are: 1 = aligned at the top, 2 = vertically centered, 3 = aligned at the bottom. Alignment has no effect if the arrangement's height is automatic."}
{"SampleId": 440256, "Origin": "Get a {@link DirectExecutionContext} for the provided {@link PTransformNode} and key.", "Reference": "Get a {@link DirectStateAndTimers} for the provided {@link PTransformNode} and key.", "Hypothesis": "Get a {@link DirectStateAndTimers} for the provided {@link PTransformNode} and key."}
{"SampleId": 5444578, "Origin": "Build the extern package list from given URL or the directory path,\nas specified with the \"-linkoffline\" flag.", "Reference": "Build the extern element list from given URL or the directory path,\nas specified with the \"-linkoffline\" flag.", "Hypothesis": "Build the extern element list from given URL or the directory path, as specified with the \"-linkoffline\" flag."}
{"SampleId": 4089052, "Origin": "The second record is gets decrypted so this method also checks its content.", "Reference": "The third record is decrypted so this method also checks its content.", "Hypothesis": "The second record gets decrypted so this method also checks its content."}
{"SampleId": 5632409, "Origin": "Set the sentenceLocation.", "Reference": "Set the sentenceLocations.", "Hypothesis": "Set the sentenceLocations."}
{"SampleId": 4471162, "Origin": "Main method to invoke this demo about how to recognize entities of a text input.", "Reference": "Main method to invoke this demo about how to recognize the entities of an input text.", "Hypothesis": "Main method to invoke this demo about how to recognize entities of a text input."}
{"SampleId": 2443716, "Origin": "Create client request filtering stage using the instance manager.", "Reference": "Create client request filtering stage using the injection manager.", "Hypothesis": "Create client request filtering stage using the injection manager."}
{"SampleId": 5149455, "Origin": "Get the operation", "Reference": "Get the operator", "Hypothesis": "Get the operator"}
{"SampleId": 4143175, "Origin": "get a copy from all member entries", "Reference": "Get a copy from all member entries.", "Hypothesis": "get a copy from all member entries"}
{"SampleId": 5433163, "Origin": "Sets the character used for thousands separator.", "Reference": "Sets the character used for grouping separator.", "Hypothesis": "Sets the character used for grouping separator."}
{"SampleId": 2487751, "Origin": "Returns a String representation of this Version instance in the generic\nform of major.minor.revision[.nightly.build.id].", "Reference": "Returns a String representation of this Version instance in the generic\nform of major.minor[.nightly.build.id].", "Hypothesis": "Returns a String representation of this Version instance in the generic form of major.minor[.-pre-release-id].[.-nightly.build-id]."}
{"SampleId": 4396472, "Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "Hypothesis": "Returns a string representation of this object; useful for testing and debugging."}
{"SampleId": 3678724, "Origin": "Returns an offset date-time formed from this date at the specified time.", "Reference": "Returns a zoned date-time formed from this date at the specified time.", "Hypothesis": "Returns a zoned date-time formed from this date at the specified time."}
{"SampleId": 5842711, "Origin": "Add an {@link NlModel} to DesignSurface.", "Reference": "Add an {@link NlModel} to DesignSurface and refreshes the rendering of the model.", "Hypothesis": "Add an {@link NlModel} to DesignSurface, returning a CompletableFuture for asynchronous processing."}
{"SampleId": 5444575, "Origin": "Build the extern package list from given URL or the directory path.", "Reference": "Build the extern element list from given URL or the directory path.", "Hypothesis": "Build the extern element list from given URL or the directory path."}
{"SampleId": 117376, "Origin": "Gets the width of the account information widget.", "Reference": "Initializes the width of the dialog contents.", "Hypothesis": "Initializes the width of the user settings panel."}
{"SampleId": 5454840, "Origin": "Checks a name to ensure that it's a legal type name.", "Reference": "Checks a name to ensure that it's a legal qualified class name", "Hypothesis": "Checks a name to ensure that it's a legal qualified class name."}
{"SampleId": 4470080, "Origin": "In case of\nfailure the {@link Flux} will error.", "Reference": "In case of\nfailure the {@link CosmosContinuablePagedFlux} will error.", "Hypothesis": "In case of failure, the {@link CosmosContinuablePagedFlux} will error."}
{"SampleId": 6048992, "Origin": "or throws a {@link com.liferay.opensocial.NoSuchGadgetException} if it could not be found.", "Reference": "or throws a {@link NoSuchGadgetException} if it could not be found.", "Hypothesis": "Finds a Gadget with the specified companyId and url, or throws a {@link com.liferay.opensocial.NoSuchGadgetException} if it could not be found."}
{"SampleId": 2783501, "Origin": "The provided \nwill *NOT* be closed by this method.", "Reference": "It is noteworthy that the provided  will not be closed by this method.", "Hypothesis": "The provided }will *NOT* be closed by this method."}
{"SampleId": 5170344, "Origin": "Returns the member with the given name and type.", "Reference": "Returns the property with the given name and type.", "Hypothesis": "Returns a property with the given name and type."}
{"SampleId": 1327248, "Origin": "Executes tasks after an operation.", "Reference": "Executes pending tasks.", "Hypothesis": "Executes pending tasks after an operation."}
{"SampleId": 4015955, "Origin": "Test the array method for a IoBuffer containing one ByteBuffer", "Reference": "Test the array method for a IoBuffer containing one ByteBuffer (cases 2 and 3)", "Hypothesis": "Test the array method for a IoBuffer containing one ByteBuffer after initialization and modification."}
{"SampleId": 2087538, "Origin": "Convenience method for creating a new primitive for the key given in {@code proto}.", "Reference": "Convenience method for creating a new primitive for the key given in {@code serializedKey}.", "Hypothesis": "Convenience method for creating a new primitive for the key given in {@code typeUrl}."}
{"SampleId": 2443922, "Origin": "The factory itself is bound in a per-lookup scope.", "Reference": "The supplier itself is bound in a per-lookup scope.", "Hypothesis": "The factory itself is bound in a per-lookup scope with a modified signature and return type."}
{"SampleId": 5300329, "Origin": "Creates new {@link Week} in the UTC timezone.", "Reference": "Creates new {@link Week}.", "Hypothesis": "Creates new {@link Week} using the specified field reference in the UTC timezone."}
{"SampleId": 2916263, "Origin": "This operates using {@link Map#putAll(Map)} semantics using the index as the key.", "Reference": "This operates using {@link Map#put(Object, Object)} semantics using the index as the key.", "Hypothesis": "This operates using {@link Map#putAll(Map)} semantics using the index as the key."}
{"SampleId": 4863799, "Origin": "Atomically updates the current values with the results of\napplying the given deltas.", "Reference": "Atomically adds the given deltas to the current hi and lo values.", "Hypothesis": "Atomically updates the current values by adding the given deltas."}
{"SampleId": 4386724, "Origin": "Access Control Using AWS Identity and Access Management (IAM) \n.", "Reference": "For more information, see Access Control Using AWS Identity and Access Management (IAM).", "Hypothesis": "List jobs using AWS Identity and Access Management (IAM)."}
{"SampleId": 2382831, "Origin": "Converts a Titan vertex id of a given vertex to the user provided id as the inverse mapping of {@link #toVertexId(long)}.", "Reference": "Converts a JanusGraph vertex id of a given vertex to the user provided id as the inverse mapping of {@link #toVertexId(long)}.", "Hypothesis": "Converts a JanusGraph vertex id of a given vertex to the user provided id as the inverse mapping of {@link #toVertexId(long)}."}
{"SampleId": 526043, "Origin": "Respond a limited number of times with the provided message in reply to each intercepted outbound message.", "Reference": "Respond a limited number of times with the provided message in response to each intercepted outbound message.", "Hypothesis": "Respond a limited number of times with the provided message in reply to each intercepted outbound message."}
{"SampleId": 2543438, "Origin": "Create an immutable view of this {@link Vector4f}.", "Reference": "Create a new immutable view of this {@link Vector4f}.", "Hypothesis": "Create an immutable view of this {@link Vector4f}."}
{"SampleId": 4390844, "Origin": "Amazon Redshift returns all HSM client certificates that match any\ncombination of the specified keys and values.", "Reference": "Redshift returns all HSM client certificates that match any combination\nof the specified keys and values.", "Hypothesis": "Amazon Redshift returns all HSM client certificates that match any combination of the specified keys and values."}
{"SampleId": 6234779, "Origin": "Set the default factory.", "Reference": "Changes the default factory.", "Hypothesis": "Set the default factory if it is not null."}
{"SampleId": 2882296, "Origin": "Tests using mapify on entities", "Reference": "Tests using mapify on refs", "Hypothesis": "Tests using mapify on entities with Ref and factory classes."}
{"SampleId": 4396713, "Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "Hypothesis": "Returns a string representation of this object; useful for testing and debugging with sensitive data redacted."}
{"SampleId": 5210859, "Origin": "Creates a new SchemaInfoLevel builder with settings for standard\nschema information.", "Reference": "Creates a new SchemaInfoLevel with settings for standard schema\ninformation.", "Hypothesis": "Create a new SchemaInfoLevel builder with settings for standard schema information using the provided method."}
{"SampleId": 2444054, "Origin": "In case the {@code parent} service locator\nis not specified, the locator will not be parented.", "Reference": "In case the {@code name} is not specified, the locator\nwill be unnamed.", "Hypothesis": "In case the {@code name} is not specified, no instance manager will be created with a parent."}
{"SampleId": 5459967, "Origin": "Reads boolean type system property.", "Reference": "Reads a system property.", "Hypothesis": "Retrieves a system property with type conversion if necessary."}
{"SampleId": 4617564, "Origin": "Moves entries inside an array.", "Reference": "Removes entries inside an array.", "Hypothesis": "Removes entries inside an array by shifting elements."}
{"SampleId": 5440406, "Origin": "This\ndeclaration is of the form \"Label lXXX = new Label();\".", "Reference": "This declaration is of the\nform \"Label labelXXX = new Label();\".", "Hypothesis": "This declaration is of the form \"Label labelXXX = new Label();\"."}
{"SampleId": 2428341, "Origin": "Set the elevation (in meters) of the point.", "Reference": "Set the elevation  of the point.", "Hypothesis": "Set the elevation (in Length units) of the point."}
{"SampleId": 1352296, "Origin": "Assign the timeOffset since the beginning of the measure, for all chords in this\ntime slot.", "Reference": "Assign the timeOffset since the beginning of the measure.", "Hypothesis": "Set the timeOffset for all chords in this time slot, considering its position since the beginning of the measure."}
{"SampleId": 2680530, "Origin": "Sets the current end icon to be VISIBLE or GONE.", "Reference": "Sets the current end icon to be VISIBLE or INVISIBLE.", "Hypothesis": "Sets the current end icon to be VISIBLE or INVISIBLE."}
{"SampleId": 1408321, "Origin": "Checks that a randomly generated {@link SkylarkSemantics} object can be serialized and\ndeserialized to an equivalent object.", "Reference": "Checks that a randomly generated {@link StarlarkSemantics} object can be serialized and\ndeserialized to an equivalent object.", "Hypothesis": "Checks that a randomly generated {@link StarlarkSemantics} object can be serialized and deserialized to an equivalent object."}
{"SampleId": 5631581, "Origin": "An array containing any synonyms for the entity value.", "Reference": "An array of synonyms for the entity value.", "Hypothesis": "Returns a list of synonyms for the entity value."}
{"SampleId": 1843314, "Origin": "Creates instance of {@link SecureServerExposerFactory} that will expose secure servers for\nruntime with the specified runtime identity.", "Reference": "Creates instance of {@link SecureServerExposerFactory} that will expose secure servers of", "Hypothesis": "Creates an instance of {@link SecureServerExposerFactory} that will expose secure servers for runtime with the specified runtime identity."}
{"SampleId": 2913688, "Origin": "Obtains an instance from the specified unique name.", "Reference": "Obtains an instance from the specified name.", "Hypothesis": "Obtains an instance from the specified name."}
{"SampleId": 5827385, "Origin": "In this case dependant plugins not\ndisabled.", "Reference": "In this case dependent plugins not\ndisabled.", "Hypothesis": "In this case dependant plugins not disabled."}
{"SampleId": 1327564, "Origin": "Encodes the given object using the configured {@link #serializer}.", "Reference": "Encodes the given object using the given encoder.", "Hypothesis": "Encodes the given object using the configured {@link #encoder}."}
{"SampleId": 101408, "Origin": "Returns the parent folder to the resource in the current site.", "Reference": "Returns the parent folder of this resource in the current site.", "Hypothesis": "Returns the parent folder to the resource in the current site path."}
{"SampleId": 2891470, "Origin": "Receives all emails that matches given {@link EmailFilter filter}\nand mark them as 'seen' (ie 'read').", "Reference": "Receives all emails that matches given {@link EmailFilter}\nand mark them as 'seen' (ie 'read').", "Hypothesis": "Receives all emails that matches given {@link EmailFilter filter} and mark them as 'seen' (ie 'read')."}
{"SampleId": 4679956, "Origin": "Checks if pos is in range [offset .. offset+length]", "Reference": "Checks if pos is in range [offset..end]", "Hypothesis": "Checks if pos is in range [offset .. end]"}
{"SampleId": 4470229, "Origin": "Sets the {@link EncryptionScope encryption scope} that is used to encrypt blob contents on the server.", "Reference": "Sets the {@code encryption scope} that is used to encrypt blob contents on the server.", "Hypothesis": "Sets the {@link String encryptionScope} that is used to encrypt blob contents on the server."}
{"SampleId": 4235993, "Origin": "This method is called when a component will be rendered standalone.", "Reference": "This method is called when a component will be rendered as a part.", "Hypothesis": "This method is called when a component will be rendered standalone."}
{"SampleId": 6248273, "Origin": "When 'false' is set, FAB visibility is set to View.GONE programmatically,", "Reference": "When 'false' is set, FAB is greyed out", "Hypothesis": "When 'false' is set, FAB visibility is set to View.GONE and disabled programmatically, with its background tinted gray."}
{"SampleId": 2544524, "Origin": "Pre-multiply the rotation transformation of the given {@link Quaterniond} to this matrix.", "Reference": "Pre-multiply the rotation transformation of the given {@link Quaterniondc} to this matrix.", "Hypothesis": "Pre-multiply the rotation transformation of the given {@link Quaterniondc} to this matrix."}
{"SampleId": 1578396, "Origin": "Adds tags for the specified {@link NamespacedEntityId}.", "Reference": "Adds tags for the specified {@link MetadataEntity}.", "Hypothesis": "Adds tags for the specified {@link MetadataEntity}."}
{"SampleId": 6190682, "Origin": "We cannot just use a\nmap, because it may result in an eternal recurrent call, guava does a good job at handling that situation.", "Reference": "We cannot just use a\nmap, because it may result in an eternal recurrent call, Guava does a good job at handling that situation.", "Hypothesis": "We cannot just use a map, because it may result in an eternal recurrent call, guava does a good job at handling that situation."}
{"SampleId": 4124141, "Origin": "In this case\nthe underlying stream is advanced to the end of the associated MPEG\nframe.", "Reference": "In this case\nthe underlying stream is advanced to the end of the associated MPEG\nframe or until the EOF is reached.", "Hypothesis": "The underlying stream is advanced to the end of the associated MPEG frame, and its corresponding header is discarded."}
{"SampleId": 4019358, "Origin": "An Exception\noccured which may be retrieved from the arguments., FAILED_TRUNCATED -", "Reference": "An Exception occured which may be retrieved from the arguments., FAILED_TRUNCATED - Parsing failed.", "Hypothesis": "An exception may be thrown if this operation is attempted on a tombstone object."}
{"SampleId": 620096, "Origin": "Waits until the job has reached a certain state.", "Reference": "Waits until the Job has reached a certain state.", "Hypothesis": "Waits until the job reaches a certain state within a specified time frame."}
{"SampleId": 4396710, "Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "Hypothesis": "Returns a string representation of this object; useful for testing and debugging, with sensitive data redacted."}
{"SampleId": 235878, "Origin": "Stop the sync manager.", "Reference": "1.", "Hypothesis": "Stop all active syncs and remove the relevant polling threads."}
{"SampleId": 2337028, "Origin": "If an existing file is overwritten, it is moved to the Recycle Bin instead of the restored one.", "Reference": "If an existing file is overwritten, it is moved to the recycle bin instead of the restored one.", "Hypothesis": "Restores deleted nodes using a request body with the given xSdsAuthToken and returns a list of NotRestoredNode objects containing the restored files. If an existing file is overwritten, it is moved to the Recycle Bin instead of the restored one."}
{"SampleId": 4133028, "Origin": "Also clears any idle instances associated with the username that was used\nto create the PooledConnection.", "Reference": "Also clears any idle instances associated with the user name that was used to\ncreate the PooledConnection.", "Hypothesis": "Also clears any idle instances associated with the username that was used to create the PooledConnection."}
{"SampleId": 5170829, "Origin": "Asserts that the given violation list has the expected number of violations.", "Reference": "Asserts that the given violation list has no violations (is empty).", "Hypothesis": "Asserts that the given violation list has no violations."}
{"SampleId": 2569161, "Origin": "Clears the value of the 'publicPort' field", "Reference": "Clears the value of the 'publicPorts' field", "Hypothesis": "Clears the value of the 'publicPorts' field"}
{"SampleId": 3389054, "Origin": "Register an observer EventListener with the current context (provided).", "Reference": "Register the given EventListener to the contest and event class.", "Hypothesis": "Register an observer EventListener with the given event class and add it to the existing observers set for that specific event."}
{"SampleId": 4614729, "Origin": "Return the first argument if it yields an empty sequence.", "Reference": "Returns the first argument (or the context) if it yields an empty sequence.", "Hypothesis": "Return the first argument if it yields an empty sequence, or use a specified value if no arguments are provided."}
{"SampleId": 1278275, "Origin": "The negative of {@code contains} is {@link #absent}.", "Reference": "The negative of {@code contains} is {@link #notContaining}.", "Hypothesis": "The negative of {@code contains} is {@link #notContaining}."}
{"SampleId": 5360170, "Origin": "Configure a SpEL expression to evaluate a {@link RSocketOutboundGateway.Command}\nfor RSocket request type at runtime against a request message.", "Reference": "Configure a SpEL expression to evaluate an {@link RSocketOutboundGateway.Command}\nfor the RSocket request type at runtime against a request message.", "Hypothesis": "Configures a SpEL expression to evaluate a {@link RSocketOutboundGateway.Command} for RSocket request type at runtime against a request message."}
{"SampleId": 3830228, "Origin": "IPv4 address in this allocation", "Reference": "Primary address of this allocation", "Hypothesis": "Primary of this allocation"}
{"SampleId": 1768398, "Origin": "Returns an {@link Operator} that runs a select query for each list of\nparameter objects in the source observable.", "Reference": "Returns an {@link Transformer} that runs a select query for each list\nof parameter objects in the source observable.", "Hypothesis": "Returns a {@link Transformer} that runs a select query for each list of parameter objects in the source observable."}
{"SampleId": 3679425, "Origin": "Casts the {@code DateTime} to {@ChronoLocalDate} with the same chronology.", "Reference": "Casts the {@code DateTime} to {@code ChronoLocalDate} with the same chronology.", "Hypothesis": "Casts the {@code DateTime} to {@ChronoLocalDate} with the same chronology."}
{"SampleId": 3808383, "Origin": "Applies a function f to the error of this Validation if this is an Invalid.", "Reference": "Applies a function f to the errors of this Validation if this is an Invalid.", "Hypothesis": "Applies a function f to the errors of this Validation if this is an Invalid."}
{"SampleId": 2443546, "Origin": "The\ncurrent thread might be already in any request scope and in that case the scope\nwill be changed to the scope defined by the {@link RequestScope.Instance scope\ninstance}.", "Reference": "The\ncurrent thread might be already in any request scope and in that case the scope\nwill be changed to the scope defined by the {@link RequestContext scope\ninstance}.", "Hypothesis": "The current thread might be already in any request scope and in that case the scope will be changed to the scope defined by the {@link RequestScope.Instance scope instance}."}
{"SampleId": 2046273, "Origin": "Optional.absent()} if the AST node doesn't correspond to a 'simple' lock expression.", "Reference": "Optional.empty()} if the AST node doesn't correspond to a 'simple' lock expression.", "Hypothesis": "Optional.empty()} if the AST node doesn't correspond to a 'simple' lock expression."}
{"SampleId": 128369, "Origin": "Adds a single button to the view.", "Reference": "Adds buttons to the view.", "Hypothesis": "Adds multiple buttons to the view."}
{"SampleId": 6043574, "Origin": "Returns a range of all the sync d l objects where companyId = ?", "Reference": "Returns a range of all the sync d l objects where repositoryId = ?", "Hypothesis": "Finds a range of Sync DL objects where repositoryId = ? and parentFolderId = ?"}
{"SampleId": 2624533, "Origin": "Binds the specified {@link Service} at the specified {@link Route} of the default\n{@link VirtualHost}.", "Reference": "Binds the specified {@link HttpService} at the specified {@link Route} of the default\n{@link VirtualHost}.", "Hypothesis": "Binds the specified {@link HttpService} at the specified {@link Route} of the default {@link VirtualHost}."}
{"SampleId": 339143, "Origin": "No-op if ParcelFileDescriptor is already closed.", "Reference": "Increases reference count for underlying ParcelFileDescriptor.", "Hypothesis": "No-op if ParcelFileDescriptor is already closed. Increments the reference count for the ParcelFileDescriptorClient."}
{"SampleId": 5763905, "Origin": "The clone is given a new unique ID.", "Reference": "The clones are each given a new unique ID.", "Hypothesis": "The cloned entry is given a new unique ID and added to the generated BibDatabase."}
{"SampleId": 2443392, "Origin": "Checks if the parent is null then must be an instance of {@link HK2InjectionManager}.", "Reference": "Checks if the parent is null then must be an instance of {@link ServiceLocator} or {@link HK2InjectionManager}.", "Hypothesis": "Checks if the parent is null then must be an instance of {@link ServiceLocator} or {@link HK2InjectionManager}."}
{"SampleId": 5180109, "Origin": "Returns the request's call sequence.", "Reference": "Returns the request's command sequence.", "Hypothesis": "Returns the request's command sequence."}
{"SampleId": 4396432, "Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "Hypothesis": "Returns a string representation of this object with sensitive data redacted; useful for testing and debugging."}
{"SampleId": 434455, "Origin": "Gedec the value of the 'dec' field.", "Reference": "Gets the value of the 'dec' field.", "Hypothesis": "Gedec the value of the 'dec' field."}
{"SampleId": 2404065, "Origin": "Executes {@link Pems#publicKeySpecFromOpenSSH(InputSupplier)} on the string which was OpenSSH", "Reference": "Executes {@link Pems#publicKeySpecFromOpenSSH(ByteSource)} on the string which was OpenSSH", "Hypothesis": "Executes {@link Pems#publicKeySpecFromOpenSSH(ByteSource)} on the string which was OpenSSH"}
{"SampleId": 2544547, "Origin": "Pre-multiply the rotation transformation of the given {@link Quaterniond} to this matrix.", "Reference": "Pre-multiply the rotation transformation of the given {@link Quaterniondc} to this matrix.", "Hypothesis": "Pre-multiply the rotation transformation of the given {@link Quaterniondc} to this matrix."}
{"SampleId": 2813196, "Origin": "Returns true if field traceId is set (has been assigned a value) and false otherwise", "Reference": "Returns true if field sampled is set (has been assigned a value) and false otherwise", "Hypothesis": "Returns true if field sampled is set (has been assigned a value) and false otherwise"}
{"SampleId": 1806080, "Origin": "Standard getter for the leftwardLabel String in this Relationship", "Reference": "Standard getter for the leftwardValue String in this Relationship", "Hypothesis": "Standard getter for the leftwardValue String in this Relationship"}
{"SampleId": 1327011, "Origin": "Compiles the given code generator request.", "Reference": "Generates the given code generator request.", "Hypothesis": "Compiles the given code generator request."}
{"SampleId": 1442557, "Origin": "The squared length of the quaternion is obtained by multiplying by its\nconjugate and summing the terms of the resulting quaternion.", "Reference": "The squared length of the quaternion is obtained by the dot product of\nthe quaternion with its conjugate.", "Hypothesis": "The squared length of the quaternion is obtained by summing the products of its components with their conjugates."}
{"SampleId": 6232077, "Origin": "Return the nanoseconds when the next scheduled task is ready to be run or {@code -1} if no task is scheduled.", "Reference": "Return the nanoseconds until the next scheduled task is ready to be run or {@code -1} if no task is scheduled.", "Hypothesis": "Return the nanoseconds until the next scheduled task is ready to be run or {@code -1} if no task is scheduled."}
{"SampleId": 2138860, "Origin": "Initialize source, build, and public resource oracles using the most complete currently\navailable combination of moduleDef and libraryGroup.", "Reference": "Initialize source, build, and public resource oracles using the most complete currently\navailable moduleDef.", "Hypothesis": "Initialize source, build, and public resource oracles using the most complete currently available combination of moduleDef."}
{"SampleId": 5458006, "Origin": "It\nsatisfies the general contract of the {@link Object#hashCode", "Reference": "It satisfies the general\ncontract of the {@link Object#hashCode Object.hashCode} method.", "Hypothesis": "It satisfies the general contract of the {@link Object#hashCode by using the hash values from the name and mods, and additionally incorporating the compiledVersion's hash code if it is not null."}
{"SampleId": 1459092, "Origin": "Verify that a named subquery exists for each INCLUDE.", "Reference": "Verify that a named subquery of solution set exists for each INCLUDE.", "Hypothesis": "Verify that a named subquery exists for each INCLUDE, considering AST2BOpContext and SolutionSetStats."}
{"SampleId": 4396446, "Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "Hypothesis": "Returns a string representation of this object; useful for testing and debugging, with sensitive data redacted."}
{"SampleId": 2337028, "Origin": "### Effects: The selected files are moved from the Recycle Bin to the chosen productive container.", "Reference": "### Effects: The selected files are moved from the recycle bin to the chosen productive container.", "Hypothesis": "The selected nodes are restored from the Recycle Bin to their original location or another chosen container."}
{"SampleId": 2336969, "Origin": "### Precondition: Existing user that is not locked.", "Reference": "### Precondition: Existing user that is **NOT** locked.", "Hypothesis": "Precondition: Existing user that is not locked."}
{"SampleId": 5601933, "Origin": "Indicate to all associated {@link ExportDataSource} to assume\nmastership role for the given partition id", "Reference": "Indicate to all associated {@link ExportDataSource} to assume\nleadership role for the given partition id", "Hypothesis": "Indicate to all associated {@link ExportDataSource} to assume leadership role for the given partition id"}
{"SampleId": 5177344, "Origin": "Returns true if the given type is a primitive type, false otherwise.", "Reference": "Indicates if the given type is a primitive type.", "Hypothesis": "Returns true if the given type is a primitive type, false otherwise."}
{"SampleId": 4396675, "Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "Hypothesis": "Returns a string representation of this object; useful for testing and debugging with sensitive data redacted."}
{"SampleId": 5053629, "Origin": "Constructs an instance of TableAdminClient with the given instanceName and\nbigtableTableAdminStub", "Reference": "Constructs an instance of TableAdminClient with the given instanceName and stub.", "Hypothesis": "Constructs an instance of TableAdminClient with the given @Nonnull InstanceName and @Nonnull BigtableTableAdminStub"}
{"SampleId": 4618885, "Origin": "Helper for {@link #insertBefore(long, Value)} that copies all items into a {@link TreeSeq}.", "Reference": "Helper for {@link #insertBefore(long, Value, QueryContext)} that copies all items into a\n{@link TreeSeq}.", "Hypothesis": "Helper for {@link #insertBefore(long, Value, QueryContext)} that copies all items into a {@link TreeSeq}."}
{"SampleId": 1703210, "Origin": "Sends a request to write a list of addresses.", "Reference": "Sends a request to write a list of entries.", "Hypothesis": "Sends a request to write all entries."}
{"SampleId": 4614729, "Origin": "Sets the occurrence indicator to 1 if the first expression returns at least one\n    non-array item.", "Reference": "Sets the occurrence indicator to 1 if the argument returns at least one item.", "Hypothesis": "Sets the occurrence indicator to 1 if the first expression returns at least one non-array item."}
{"SampleId": 4388479, "Origin": "For an overview of CIDR ranges, go to the", "Reference": "For an overview of CIDR ranges, go to the Wikipedia Tutorial.", "Hypothesis": "For an overview of CIDR ranges, go to the"}
{"SampleId": 4476816, "Origin": "The {@code keyImportOptions} is required and its fields {@link KeyImportOptions#getName() name} and {@link", "Reference": "The {@code keyImportOptions} is required and its fields {@link ImportKeyOptions#getName() name} and {@link", "Hypothesis": "The {@code importKeyOptions} is required and its fields {@link ImportKeyOptions#getName() name} and {@link"}
{"SampleId": 5640473, "Origin": "Delivers the given event object to given observer methods.", "Reference": "Delivers the given synchronous event object to synchronous and transactional observer methods.", "Hypothesis": "Delivers the given event object to given observer methods with specified exception handler."}
{"SampleId": 1802834, "Origin": "The tracking state affects the aggressiveness of the alpha/beta\ngain values in synchronizing with the signal carrier.", "Reference": "The PLLGain state affects the aggressiveness of the alpha/beta\ngain values in synchronizing with the signal carrier.", "Hypothesis": "The PLL gain state affects the aggressiveness of the alpha/beta gain values in synchronizing with the signal carrier."}
{"SampleId": 5441870, "Origin": "Sets the TEXT value of the ds:XPath Element.", "Reference": "Sets the TEXT value of the {@code ds:XPath} Element.", "Hypothesis": "Sets the XPath value of the ds:XPath Element."}
{"SampleId": 5629922, "Origin": "Sets the source.", "Reference": "Set the source.", "Hypothesis": "Set the source by adding \"source\"."}
{"SampleId": 3905992, "Origin": "If the given element is {@code null} or does not have an integer, zero is returned.", "Reference": "If the given string is {@code null} or does not have an integer, zero is returned.", "Hypothesis": "If the given string is {@code null} or does not have an integer, zero is returned."}
{"SampleId": 4388480, "Origin": "NOTE: Changes to dynamic parameters are applied immediately.", "Reference": "Changes to dynamic parameters are applied immediately.", "Hypothesis": "Changes to dynamic parameters are applied immediately."}
{"SampleId": 4861016, "Origin": "Immediately initialize the default WebSocketUpgradeFilter.", "Reference": "Configure the default WebSocketUpgradeFilter.", "Hypothesis": "Configure the default WebSocketUpgradeFilter immediately."}
{"SampleId": 3677409, "Origin": "Obtains an instance of {@code OffsetTime} from a date-time object.", "Reference": "Obtains an instance of {@code OffsetTime} from a temporal object.", "Hypothesis": "Obtains an instance of {@code OffsetTime} from a date-time object, and catches exceptions during this process."}
{"SampleId": 470735, "Origin": "Client will automatically attempt to reconnect to the server if the\nconnection is lost.", "Reference": "Sets whether the client will automatically attempt to reconnect to\nthe server if the connection is lost.", "Hypothesis": "Client will automatically attempt to reconnect to the server if the connection is lost."}
{"SampleId": 4471750, "Origin": "If {@code labels = \"*\"}, settings with any label are returned.", "Reference": "If {@code labelFilter = \"*\"}, settings with any label are returned.", "Hypothesis": "If {@code labelFilter = \"*\"}, settings with any label are returned."}
{"SampleId": 3513099, "Origin": "Attempts to get the underlying value backed by a {@link BaseValue}\nlinked to the provided {@link Key}.", "Reference": "Attempts to get the underlying value backed by a {@link Value}\nlinked to the provided {@link Key}.", "Hypothesis": "Attempts to get the underlying value backed by a {@link Value} linked to the provided {@link Key}."}
{"SampleId": 5431793, "Origin": "Serialize the given TokenStream into a byte array using the provided AttributeSerializer(s).", "Reference": "Serialize the given TwitterTokenStream into a byte array using the provided AttributeSerializer(s).", "Hypothesis": "Serialize the given TwitterTokenStream into a byte array using the provided AttributeSerializer(s)."}
{"SampleId": 3241908, "Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}", "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveToRangeEnd }{@code >}}", "Hypothesis": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveToRangeEnd }{@code >"}
{"SampleId": 5629910, "Origin": "Sets the title.", "Reference": "Set the title.", "Hypothesis": "Set the title."}
{"SampleId": 1404839, "Origin": "Implements the \"in\" operator.", "Reference": "Implements 'x in y'.", "Hypothesis": "Implements the \"in\" operator for checking if an object is present within another object."}
{"SampleId": 3697316, "Origin": "The comparison is based on the Unicode value of each character in the strings.", "Reference": "The comparison is based on the Unicode value of each character in the CharSequences.", "Hypothesis": "The comparison is based on the Unicode value of each character in the CharSequences."}
{"SampleId": 3734027, "Origin": "Is a value with this type less than or equal to the length of array?", "Reference": "Is a value with this type less than or equal to the length of sequence?", "Hypothesis": "Is a value with this type less than or equal to the length of sequence?"}
{"SampleId": 2564580, "Origin": "Record an {@link ExecutionEvent} for a container or test that started.", "Reference": "Record an {@link Event} for a container or test that started.", "Hypothesis": "Record an {@link Event} for a container or test that started."}
{"SampleId": 5453591, "Origin": "Test ModuleModule with a JAR file containing a .class file in the top\nlevel directory.", "Reference": "Test ModuleFinder with a JAR file containing a .class file in the top\nlevel directory.", "Hypothesis": "Test ModuleFinder with a JAR file containing a .class file in the top level directory."}
{"SampleId": 5631503, "Origin": "The timestamp for the most recent update to the dialog node.", "Reference": "The timestamp for the most recent update to the object.", "Hypothesis": "The timestamp for the most recent update to the dialog node."}
{"SampleId": 1403002, "Origin": "BaseFunction} instances, calling {@link BaseFunction#configure(SkylarkSignature)}.", "Reference": "BuiltinFunction} instances, calling {@link BuiltinFunction#configure(SkylarkSignature)}.", "Hypothesis": "Configure SkylarkFunctions for Class<?> type by registering builtins and calling {@link BuiltinFunction#configureFromAnnotation(SkylarkSignature)} on annotated fields."}
{"SampleId": 3384757, "Origin": "Sentry robots cannot move outside this border or\ndo any harm to other robots outside this border.", "Reference": "Border border sentry robots cannot move outside this border or\ndo any harm to other robots outside this border.", "Hypothesis": "Sentry robots cannot move outside this border or do any harm to other robots outside this range."}
{"SampleId": 5207144, "Origin": "Orchestrates the creation of a terminal pane, then connects to it.", "Reference": "Orchestrates the creation and connection of a terminal.", "Hypothesis": "Orchestrates the creation of a terminal session, then connects to it."}
{"SampleId": 4791774, "Origin": "Parses longitude out of a given string.", "Reference": "Parses longitude out of the given string.", "Hypothesis": "Parses longitude out of a given string. If the input is null, throws an exception."}
{"SampleId": 3233194, "Origin": "Highlights the value at the given x-value in the given DataSet.", "Reference": "Highlights any y-value at the given x-value in the given DataSet.", "Hypothesis": "Highlights the value at the given x-value in the given DataSet with a special flag for NaN."}
{"SampleId": 1747164, "Origin": "This is the largest positive power\nof B that equal to or less than the given n.", "Reference": "This is the largest positive power\nof B that equal to or less than the given n and equal to a mathematical integer.", "Hypothesis": "This is the largest positive power of B that equal to or less than the given n, considering a clamped value for n."}
{"SampleId": 3993231, "Origin": "For simplicity, all sensors are synchronized on Sensor.", "Reference": "For simplicity,\nall sensors are synchronized on this object.", "Hypothesis": "For simplicity, all sensors are synchronized on metricLock()."}
{"SampleId": 2732160, "Origin": "Returns new child style ID container.", "Reference": "Returns new child style identifier container.", "Hypothesis": "Returns a new child style ID container with the specified id."}
{"SampleId": 3774066, "Origin": "Return value of the selected option in the option group", "Reference": "Return list of the selected options in the checkbox group", "Hypothesis": "Return values of the selected options in the option group"}
{"SampleId": 3927074, "Origin": "Annotate for coreference (statistical)", "Reference": "Annotate for coreference", "Hypothesis": "Annotate for coreference (deterministic)"}
{"SampleId": 4470111, "Origin": "The {@link Flux} will\ncontain one or several feed response of the obtained users.", "Reference": "The {@link CosmosContinuablePagedFlux} will\ncontain one or several feed response of the obtained users.", "Hypothesis": "The {@link CosmosContinuablePagedFlux} will contain one or several feed response of the obtained users."}
{"SampleId": 1766052, "Origin": "Call this once, to enable or disable DEBUG logs.", "Reference": "Call this once, to enable or disable logs.", "Hypothesis": "Call this once, to enable or disable DEBUG logs for a specific level."}
{"SampleId": 3937848, "Origin": "Any of the\ninput words can also be the answer if one is the parent or grandparent of\nother", "Reference": "Any of the\ninput words can also be the answer if one is the parent or grandparent of\nother, or if the input words are the same.", "Hypothesis": "Finds the common ancestor between two given words by comparing their parents and grandparents. If one word is a parent or grandparent of the other, it returns that word. If not, returns null."}
{"SampleId": 3760836, "Origin": "If {@link aboveId} is blank or not found,\n{@link id} will be placed last in the list.", "Reference": "If {@code aboveId} isn't\nfound, {@code id} will be placed last in the list.", "Hypothesis": "If {@link aboveId} is blank or not found, {@link id} will be placed last in the list."}
{"SampleId": 5376624, "Origin": "The label for the C API.", "Reference": "The slug for the C API.", "Hypothesis": "The slug for the C API."}
{"SampleId": 1730636, "Origin": "Returns the the number of editor columns if it was set by {@link #setColumns(Integer)} or in the screen XML.", "Reference": "Returns the columns mode which defines the number of columns if it was set by {@link #setColumnsMode(ColumnsMode)}\nor in the screen XML.", "Hypothesis": "Returns the columns mode if it was set by {@link #setColumnsMode(ColumnsMode)} or in the screen XML."}
{"SampleId": 2090031, "Origin": "This will open a new one Session if it hasn't been opened before", "Reference": "This will open a new graph or retrieve one from shared cache.", "Hypothesis": "This will open a new Session if it hasn't been opened before using the cache and keyspace data."}
{"SampleId": 3957031, "Origin": "This can be called before we get the full set of applications, we should merge the results\nonly in onAppsUpdated() which is idempotent.", "Reference": "This can be called before we get the full set of applications, we should merge the results\nonly in onPredictionsUpdated() which is idempotent.", "Hypothesis": "This can be called before we get the full set of applications, we should merge the results only in onPredictionsUpdated() which is idempotent."}
{"SampleId": 3625841, "Origin": "Returns a new {@link Partitioner.OnVirtualNodes} based on the partition key token.", "Reference": "Returns a new {@link Partitioner.OnVirtualNode} based on the partition key token.", "Hypothesis": "Returns a new {@link Partitioner.OnVirtualNode} based on the partition key token."}
{"SampleId": 4476408, "Origin": "Tests that when an etag is passed to delete it will only delete if the current representation of the setting has the etag.", "Reference": "Tests that when an ETag is passed to delete it will only delete if the current representation of the setting has the ETag.", "Hypothesis": "Tests that when an etag is passed to delete it will only delete if the current representation of the setting has the etag."}
{"SampleId": 3349700, "Origin": "Aggregate given void publishers into a new {@literal Mono} that will be\nfulfilled when all of the given {@literal sources} have been fulfilled.", "Reference": "Aggregate given publishers into a new {@literal Mono} that will be\nfulfilled when all of the given {@literal sources} have been fulfilled.", "Hypothesis": "Aggregate given publishers into a new {@literal Mono} that will be fulfilled when all of the given {@literal sources} have been fulfilled."}
{"SampleId": 4396437, "Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "Hypothesis": "Returns a string representation of this object with sensitive data redacted; useful for testing and debugging."}
{"SampleId": 708331, "Origin": "Convenience routine to return the specified error's\nunderlying Exception, or null if it isn't one.", "Reference": "Returns the specified error's underlying Exception, or null if it isn't one.", "Hypothesis": "Convenience routine to return the specified error's underlying Exception, or null if it isn't one."}
{"SampleId": 1759644, "Origin": "Returns the location of the output directory from the configuration or the temporary directory if not defined.", "Reference": "Returns the location of the directory from the configuration or the temporary directory if not defined.", "Hypothesis": "Returns the location of the directory from the configuration or the temporary directory if not defined."}
{"SampleId": 1150834, "Origin": "An empty SortedDocValues which returns {@link SortedSetDocValues#NO_MORE_ORDS} for every document", "Reference": "An empty SortedDocValues which returns {@link BytesRef#EMPTY_BYTES} for every document", "Hypothesis": "An empty SortedSetDocValues which returns {@link SortedSetDocValues#NO_MORE_ORDS} for every document"}
{"SampleId": 3566646, "Origin": "{@code inetAddressList} will be non-null and {@code throwable} will be null in the case of a\nsuccessful DNS lookup.", "Reference": "{@code inetAddressList} will be non-null and {@code ioe} will be null in the case of a\nsuccessful DNS lookup.", "Hypothesis": "@code ioe} will be non-null and {@code throwable} will be null in the case of a successful DNS lookup."}
{"SampleId": 5440349, "Origin": "Returns an array containing all of the instructions in this list.", "Reference": "Returns an array containing all the instructions in this list.", "Hypothesis": "Returns an array containing all of the instructions in this list."}
{"SampleId": 1057326, "Origin": "This is because the members (and action parameters) all reference the {@link DomainClass}s, so these need\n    to exist first.", "Reference": "This is because the members (and action parameters) all reference the {@link DomainClassDto}s, so these need\n    to exist first.", "Hypothesis": "This is because the members (and action parameters) all reference the {@link DomainClassDto}s, so these need to exist first."}
{"SampleId": 2018618, "Origin": "This includes @type, @this, @extends, @implements, @param, @throws,\nand @return.", "Reference": "This\nincludes @type, @this, @extends, @implements, @param, @throws, @lends, and @return.", "Hypothesis": "This includes @type, @this, @extends, @implements, @param, @throws, and @lendsName."}
{"SampleId": 1347389, "Origin": "Once the session is open, the client will transition to the {@link State#CONNECTED} state and the\nreturned {@link CompletableFuture} will be completed.", "Reference": "Once the session is registered, the client will transition to the {@link State#CONNECTED} state and the\nreturned {@link CompletableFuture} will be completed.", "Hypothesis": "Once the session is open, the client will transition to the {@link State#CONNECTED} state and the returned {@link CompletableFuture} will be completed."}
{"SampleId": 2072413, "Origin": "If no byte is available\nbecause the end of the stream has been reached, the value\n is returned.", "Reference": "If no byte is available\nbecause the end of the stream has been reached, the value\n{@code -1} is returned.", "Hypothesis": "If no byte is available because the end of the stream has been reached, the value is returned."}
{"SampleId": 2664185, "Origin": "read String object from File", "Reference": "read float from File", "Hypothesis": "Read float object from File"}
{"SampleId": 3677392, "Origin": "This factory converts the arbitrary date-time object to an instance of {@code OffsetDate}.", "Reference": "This factory converts the arbitrary temporal object to an instance of {@code OffsetDate}.", "Hypothesis": "This factory converts the arbitrary date-time object to an instance of {@code OffsetDate}, optionally handling exceptions."}
{"SampleId": 3035305, "Origin": "Same as {@link #isPipelineConfigSet(PiPipeconf, ByteBuffer)} but blocks\nexecution.", "Reference": "Same as {@link #isPipelineConfigSet(long, PiPipeconf, ByteBuffer)} but\nblocks execution.", "Hypothesis": "Same as {@link #isPipelineConfigSet(long, PiPipeconf, ByteBuffer)} but blocks execution."}
{"SampleId": 6043595, "Origin": "Returns the number of sync d l objects where companyId = ?", "Reference": "Returns the number of sync d l objects where repositoryId = ?", "Hypothesis": "Returns the number of sync d l objects where repositoryId = ? and type = ?"}
{"SampleId": 1535389, "Origin": "Set the bases of tumorSeqAllele1 in the {@link GencodeFuncotation}.", "Reference": "Set the Version {@link String} in the {@link GencodeFuncotation}.", "Hypothesis": "Set the version in the {@link GencodeFuncotation}."}
{"SampleId": 3159938, "Origin": "Deletes the entire row of the Sweepable Timestamps table.", "Reference": "Deletes complete rows of the Sweepable Timestamps table.", "Hypothesis": "Deletes the rows of the Sweepable Timestamps table based on the specified coarse partitions."}
{"SampleId": 4594985, "Origin": "Parses the 'ResourceInfo' annotation and builds swagger operation.", "Reference": "Parses the 'ResourceInfo' annotation and builds openApi operation.", "Hypothesis": "Parses the 'ResourceInfo' annotation and builds OpenAPI operation."}
{"SampleId": 3270019, "Origin": "Gets the type against which the expression is tested.", "Reference": "Gets the wrapped type node.", "Hypothesis": "Get the type node from the rhs."}
{"SampleId": 593430, "Origin": "Get the Date that this Token was Created", "Reference": "Get the ZonedDateTime that this Token was Created", "Hypothesis": "Get the ZonedDateTime that this Token was Created"}
{"SampleId": 6329219, "Origin": "Scheduler:\n {@code onErrorResumeNext} does not operate by default on a particular {@link Scheduler}.", "Reference": "Scheduler:\n {@code onErrorResumeWith} does not operate by default on a particular {@link Scheduler}.", "Hypothesis": "Scheduler: {@code onErrorResumeWith} does not operate by default on a particular {@link Scheduler}."}
{"SampleId": 3774224, "Origin": "For localizing the error message, use\n{@link #setRequired(SerializableFunction)}.", "Reference": "For localizing the error message, use\n{@link #asRequired(ErrorMessageProvider)}.", "Hypothesis": "For localizing the error message, use {@link #asRequired(SerializableFunction)}."}
{"SampleId": 5176620, "Origin": "Setter for {@link #allowMethods}", "Reference": "Setter for {@link #allowedHeaders}", "Hypothesis": "Setter for {@link #allowedHeaders"}
{"SampleId": 4245566, "Origin": "Convert to primitive types, returning default value if text is null.", "Reference": "Convert to character, returning default value if text is inconvertible.", "Hypothesis": "Convert to primitive types, returning the specified default value if text is null."}
{"SampleId": 6361621, "Origin": "Create the default request used when asking for the upgrade plan on a namespace.", "Reference": "Create a request used when asking for the upgrade plan on a namespace.", "Hypothesis": "Create the default request used when asking for the upgrade plan on a namespace."}
{"SampleId": 3863230, "Origin": "Get image width setting from the image width site setting string.", "Reference": "Get image max size setting from the image max size setting string.", "Hypothesis": "Get image max size setting from the image max size site setting string."}
{"SampleId": 2364596, "Origin": "Helper method to lookup a Dao if it has already been associated with the class.", "Reference": "Helper method to lookup a DAO if it has already been associated with the class.", "Hypothesis": "Helper method to lookup a Dao if it has already been associated with the class and return it as D-type."}
{"SampleId": 1355135, "Origin": "Build ghost image based on provided interline value.", "Reference": "Update ghost image based on provided interline value.", "Hypothesis": "Adapt image to current interline and build ghost image based on provided interline value."}
{"SampleId": 4117678, "Origin": "If the cipher is an asymmetric cipher (different keys for encryption and decryption, such as public/private key\npairs), you should set your encryption key via one of these methods:", "Reference": "If the CipherService is an asymmetric CipherService (different keys for encryption and decryption, such as\npublic/private key pairs), you should set your encryption key via one of these methods:", "Hypothesis": "If the cipher service is an asymmetric cipher (different keys for encryption and decryption, such as public/private key pairs), you should set your encryption key via one of these methods:"}
{"SampleId": 4476936, "Origin": "Iterate over all the {@link SecretProperties\nsecret} by page and call {@link SecretClient#getSecret(SecretProperties baseSecret)} .", "Reference": "Iterate over all the {@link SecretProperties\nsecret} by page and call {@link SecretClient#getSecret(String, String)}.", "Hypothesis": "Iterate over all the {@link SecretProperties secret} by page and call {@link SecretClient#getSecret(SecretProperties baseSecret)} ."}
{"SampleId": 4404094, "Origin": "IMPORTANT:A TypeAlreadyExists fault is returned if the type\nalready exists in the domain.", "Reference": "A  fault is returned if the type\nalready exists in the domain.", "Hypothesis": "A TypeAlreadyExists fault is returned if the type already exists in the domain and is not overridden by a different operation."}
{"SampleId": 5246431, "Origin": "Public factory method.", "Reference": "public factory method.", "Hypothesis": "Public factory method for creating a DrawableDB object using given ImageGalleryController and database path. Throws TskCoreException on errors."}
{"SampleId": 471132, "Origin": "Group: common", "Reference": "Group: advanced", "Hypothesis": "Overload a builder for constructing AdvancedAtmosEndpoint objects, setting the property \"uri\" with the given value."}
{"SampleId": 3677549, "Origin": "Obtains an instance of {@code LocalDateTime} from a date-time object.", "Reference": "Obtains an instance of {@code LocalDateTime} from a temporal object.", "Hypothesis": "Obtains an instance of {@code LocalDateTime} from a date-time object, catching exceptions when necessary."}
{"SampleId": 4386718, "Origin": "List Parts operation requires a multipart upload ID since parts are\nassociated with a single upload.", "Reference": "The List Parts operation requires a multipart upload ID since parts are\nassociated with a single upload.", "Hypothesis": "List Parts operation requires a multipart upload ID since parts are associated with a single upload."}
{"SampleId": 4615413, "Origin": "Tests the creation of a message authentication code for the sha1 algorithm.", "Reference": "Tests the creation of message authentication codes for the sha1 algorithm.", "Hypothesis": "Tests the creation of a message authentication code for the sha1 algorithm using both hex and base64 formats."}
{"SampleId": 5454797, "Origin": "Resolves a collection of root modules, with service binding, to create\nconfiguration.", "Reference": "Resolves a collection of root modules to create a configuration.", "Hypothesis": "Resolves a collection of root modules with service binding, to create configuration."}
{"SampleId": 1721063, "Origin": "The current checkpoint which can be advanced by {@link #markSeqNoAsCompleted(long)}.", "Reference": "The current persisted checkpoint which can be advanced by {@link #markSeqNoAsPersisted(long)}.", "Hypothesis": "The current persisted checkpoint which can be advanced by {@link #markSeqNoAsCompleted(long)}."}
{"SampleId": 2783350, "Origin": "However,\nthis can be modified by calling {@link #setReaderFactory(ConfigurationReaderFactory) setReaderFactory}.", "Reference": "This can be modified by calling {@link #setReaderFactory(ConfigurationReaderFactory) setReaderFactory}.", "Hypothesis": "The reader factory can be modified by calling {@link #setReaderFactory(ConfigurationReaderFactory) setReaderFactory}."}
{"SampleId": 3283268, "Origin": "Starts BookKeeper and sets up RocksDB.", "Reference": "Starts BookKeeper.", "Hypothesis": "Starts BookKeeper and sets up RocksDB."}
{"SampleId": 2940305, "Origin": "Runs the logic to dispatch any responses to the current listeners until {@link #_isRunning} is false.", "Reference": "Runs the logic to dispatch any responses to the current listeners until {@link #isRunning} is false.", "Hypothesis": "Runs the logic to dispatch any responses to the current listeners until {@link #isRunning} is false."}
{"SampleId": 5843450, "Origin": "Consider calling AarResourceRepositoryCache.getSourceRepository\ninstead of this method.", "Reference": "AarResourceRepositoryCache.getSourceRepository instead of this method.", "Hypothesis": "Consider calling AarSourceResourceRepository.getAarSourceResourceRepository instead of this method."}
{"SampleId": 5600561, "Origin": "Name of schedule", "Reference": "Name of task", "Hypothesis": "Matcher for creating a task"}
{"SampleId": 5322051, "Origin": "Configure the name of a selector header that a subscription message can\nhave in order to filter messages based on their headers.", "Reference": "Configure the name of a header that a subscription message can have for\nthe purpose of filtering messages matched to the subscription.", "Hypothesis": "Configure the name of a selector header that a subscription message can have in order to filter messages based on their headers."}
{"SampleId": 2049073, "Origin": "Sets a {@link MediaSource} to be used by the test runner.", "Reference": "Sets the {@link MediaSource}s to be used by the test runner.", "Hypothesis": "Sets multiple {@link MediaSource}s to be used by the test runner."}
{"SampleId": 4476799, "Origin": "The {@link KeyCreateOptions#getKeyType() keyType} indicates the type of key to create.", "Reference": "The {@link CreateKeyOptions#getKeyType() keyType} indicates the type of key to create.", "Hypothesis": "The {@link CreateKeyOptions#getKeyType() keyType} indicates the type of key to create."}
{"SampleId": 5314965, "Origin": "Return the configured {@link #setProxyPing(boolean)}", "Reference": "Return the configured {@link #setHandlePing(boolean)}.", "Hypothesis": "Return the configured {@link #setHandlePing(boolean)"}
{"SampleId": 2388085, "Origin": "Provides a list of all connection wrappers corresponding to a current environment.", "Reference": "Provides a list of all connection configs corresponding to a current environment.", "Hypothesis": "Provides a list of all connection configs corresponding to a current environment."}
{"SampleId": 3270710, "Origin": "Returns 'true' if the stream is empty.", "Reference": "Returns 'true' if the stream has no elements.", "Hypothesis": "Returns 'true' if the stream is empty."}
{"SampleId": 18366, "Origin": "Get Application Registration.", "Reference": "Get File Handler.", "Hypothesis": "Get File Handler ID."}
{"SampleId": 4478596, "Origin": "Set the fileContentDisposition property: Sets the file's", "Reference": "Set the contentDisposition property: Sets the file's", "Hypothesis": "Set the contentDisposition property: Sets the file's"}
{"SampleId": 2875969, "Origin": "Returns Query classes whose equals() and hashCode() methods can be validated by EqualsVerifier.", "Reference": "Returns Query classes whose equals() and hashCode() methods can be validated by EqualsVerifier in a uniform way.", "Hypothesis": "Returns Query classes whose equals() and hashCode() methods can be validated by EqualsVerifier for specific use cases."}
{"SampleId": 4133021, "Origin": "Close all pools associated with this class.", "Reference": "Closes all pools associated with this class.", "Hypothesis": "Close all pools associated with this class, handling exceptions while closing the InstanceKeyDataSource instances."}
{"SampleId": 6166242, "Origin": "Default is {@code false}.", "Reference": "Default is {@code true}.", "Hypothesis": "Default is {@code false}."}
{"SampleId": 3566645, "Origin": "{@code throwable} will be non-null in the case of a failed attempt to execute the call.", "Reference": "{@code ioe} will be non-null in the case of a failed attempt to execute the call.", "Hypothesis": "@code ioe} will be non-null in the case of a failed attempt to execute the call."}
{"SampleId": 3937456, "Origin": "Add the argument to the value of this long.", "Reference": "Add the argument to the value of this integer.", "Hypothesis": "Add the argument to the value of this integer."}
{"SampleId": 3934729, "Origin": "What we do in this method is look for temporary dependencies of\nthe type \"rel\".", "Reference": "What we do in this method is look for temporary dependencies of\nthe type \"rel\" and \"prep\".", "Hypothesis": "This method looks for temporary dependencies of the type \"rel\" and handles prepositional modifiers to set their relationships correctly before marking other dependencies as direct objects. Additionally, it filters out any kill-labeled dependencies."}
{"SampleId": 668162, "Origin": "Tests creating a distributed subregion of a local scope region, which should fail.", "Reference": "Tests creating a distributed sub-region of a local scope region, which should fail.", "Hypothesis": "Tests creating a distributed subregion of a local scope region, which should fail."}
{"SampleId": 2251649, "Origin": "Delete an object from array if it exists", "Reference": "Delete an object if it exists", "Hypothesis": "Delete an object from array if it exists"}
{"SampleId": 2171347, "Origin": "Returns null.", "Reference": "Returns empty string.", "Hypothesis": "Returns empty string."}
{"SampleId": 1405495, "Origin": "Returns a new {@link AttributeTransitionData} instance.", "Reference": "Returns a new {@link Builder} for {@link AttributeTransitionData}.", "Hypothesis": "Creates a new {@link Builder} for building AttributeTransitionData instances."}
{"SampleId": 1993154, "Origin": "Can this user see the given patchset?", "Reference": "Can the user see this change?", "Hypothesis": "Does this user see the reference?"}
{"SampleId": 2624434, "Origin": "Use this when you need customizations such as log integration via\n{@linkplain Builder#addScopeDecorator(ScopeDecorator)}.", "Reference": "Use this when you need customizations such as log integration via\n{@linkplain RequestContextCurrentTraceContextBuilder#addScopeDecorator(ScopeDecorator)}.", "Hypothesis": "Use this when you need customizations such as log integration via {@linkplain RequestContextCurrentTraceContextBuilder#addScopeDecorator(ScopeDecorator)}."}
{"SampleId": 4003271, "Origin": "Argument takes precedence from pid stored in the {@link CommandSession}.", "Reference": "Argument takes precedence from pid stored in the {@link Session}.", "Hypothesis": "Argument takes precedence from pid stored in the {@link Session}."}
{"SampleId": 4798740, "Origin": "Basically, this method runs the following instructions:", "Reference": "This method run the following instructions:", "Hypothesis": "Finds all optimal solutions of a given problem. If there are any optimal solutions found, it returns a list containing those solutions. Otherwise, it returns an empty list. This method takes an IntVar representing the objective to be maximized or minimized and a boolean flag indicating whether the objective should be maximized or minimized. Additionally, it takes Criterion variables to set stop conditions."}
{"SampleId": 1066204, "Origin": "Look for and set context declarations.", "Reference": "Look for and merge in context declarations.", "Hypothesis": "Merge context declarations from given resource into the provided Context."}
{"SampleId": 237148, "Origin": "Tests the {@link FileSystemMaster#delete(AlluxioURI, DeleteOptions)} method for\na directory with un-synced persistent entries with a sync check.", "Reference": "Tests the {@link FileSystemMaster#delete(AlluxioURI, DeleteContext)} method for\na directory with un-synced persistent entries with a sync check.", "Hypothesis": "Tests the {@link FileSystemMaster#delete(AlluxioURI, DeleteContext)} method for a directory with un-synced persistent entries with a sync check."}
{"SampleId": 2337198, "Origin": "`DEPRECATED`: Node IDs; use `items` attribute", "Reference": "`DEPRECATED`: Node IDs Please use `items` instead.", "Hypothesis": "DEPRECATED: Node IDs Please use `items` instead."}
{"SampleId": 2568420, "Origin": "Gets the value of the 'KeepDeletedCells' field.", "Reference": "Gets the value of the 'keepDeletedCells' field.", "Hypothesis": "Gets the value of the 'keepDeletedCells' field."}
{"SampleId": 2911446, "Origin": "If the key already exists, the sensitivity value will be merged.", "Reference": "Values with the same market data name and currency will be merged.", "Hypothesis": "Adds a sensitivity value for the given curve type and curve name. If the key already exists, the sensitivity value will be merged."}
{"SampleId": 4479526, "Origin": "Set the etag property: The etag property.", "Reference": "Set the eTag property: The eTag property.", "Hypothesis": "Set the ETag property: The ETag property."}
{"SampleId": 5436149, "Origin": "Expected 4 barriers for the Serial GC and 8 for G1 (4 pre + 4 post).", "Reference": "Expected 4 barriers for the card mark GCs and 8 for G1 (4 pre + 4 post).", "Hypothesis": "Expected 4 barriers for the Serial GC and 8 for G1 (4 pre + 4 post)."}
{"SampleId": 3677392, "Origin": "A {@code DateTimeAccessor} represents some form of date and time information.", "Reference": "A {@code TemporalAccessor} represents some form of date and time information.", "Hypothesis": "A DateTimeAccessor represents some form of date and time information from a TemporalAccessor, either by returning an existing OffsetDate or constructing a new one."}
{"SampleId": 3037779, "Origin": "Tests resilency when L2 and L4 link is down.", "Reference": "Tests resiliency when L2 and L4 link is down.", "Hypothesis": "Tests resilency when L2 and L4 links are down."}
{"SampleId": 236973, "Origin": "Tests for the {@link BaseFileSystem#free(AlluxioURI, FreeOptions)} method.", "Reference": "Tests for the {@link BaseFileSystem#free(AlluxioURI, FreePOptions)} method.", "Hypothesis": "Tests for the {@link BaseFileSystem#free(AlluxioURI, FreePOptions)} method."}
{"SampleId": 128218, "Origin": "Sets the search roots.", "Reference": "Sets the searchRoots.", "Hypothesis": "Sets the search roots by adding to an internal list."}
{"SampleId": 2033460, "Origin": "This utility is needed\nfor supporting Producers + some Apps Framework utility classes.", "Reference": "This utility is needed for supporting Producers + some Apps", "Hypothesis": "Wraps a ListenableFuture<paramsClass> as a SoyTemplate.AsyncWrapper<paramsClass>. This utility is needed for supporting Producers + some Apps Framework utility classes."}
{"SampleId": 4616217, "Origin": "Returns a string representation of the specified value.", "Reference": "Returns a chopped token representation of the specified value.", "Hypothesis": "Returns a byte array representation of the specified value with optional quotes and size limiting."}
{"SampleId": 4045861, "Origin": "Adds multiple Certificates out of a Collection of X509CertificateHolder into certificatesMap.", "Reference": "Adds multiple Certificates out of a Collection of X509CertificateHolder into certificateSet.", "Hypothesis": "Adds multiple Certificates out of a Collection of X509CertificateHolder into certificateSet."}
{"SampleId": 3981826, "Origin": "For selection order-by queries, order-by expressions will be put at the front.", "Reference": "Order-by expressions will be put at the front.", "Hypothesis": "For selection order-by queries, order-by expressions will be added to a set and only unique ones are considered. Other selection expressions are also added to the set before compilation."}
{"SampleId": 3678108, "Origin": "Applications should use the {@code with(WithAdjuster)} method on the\ndate-time object to make the adjustment passing this as the argument.", "Reference": "Applications should use the {@code with(TemporalAdjuster)} method on the\ndate-time object to make the adjustment passing this as the argument.", "Hypothesis": "Applications should use the {@code adjustInto(Adjusted)} method on the date-time object to make the adjustment passing this as the argument."}
{"SampleId": 340619, "Origin": "During the prefetch, a session should not hold audio focus in order to allow\nother sessions play seamlessly.", "Reference": "During the prepare, a session should not hold audio focus in order to allow\nother sessions play seamlessly.", "Hypothesis": "During the prepare, a session should not hold audio focus in order to allow other sessions play seamlessly."}
{"SampleId": 2608944, "Origin": "Tests {@code globalRecommend(Set, int)}.", "Reference": "Tests {@code recommendRelatedItems()(Set, int)}.", "Hypothesis": "Tests {@code recommendRelatedItems(Set, int)}."}
{"SampleId": 5150270, "Origin": "Generate an info message string relating to given entity persister.", "Reference": "Generate an info message string relating to given entity descriptor.", "Hypothesis": "Generate an info message string relating to given entity type descriptor."}
{"SampleId": 6018390, "Origin": "Computes the average for each pixel across all bands in the {@link Planar} image.", "Reference": "Computes the maximum for each pixel across all bands in the {@link Planar} image.", "Hypothesis": "Computes the maximum for each pixel across all bands in the {@link Planar} image."}
{"SampleId": 3241743, "Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}", "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveFromRangeEnd }{@code >}}", "Hypothesis": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveFromRangeEnd }{@code >"}
{"SampleId": 2273095, "Origin": "to work in test classes without errors being displayed to stderr.", "Reference": "to work (and persist) in test classes without errors being displayed to stderr.", "Hypothesis": "Configure Openfire Home to work in test classes without errors being displayed to stderr."}
{"SampleId": 3000414, "Origin": "Provider-Person-Names(that are not voided)", "Reference": "Creates or that matches the input name with Provider-Person-Names (not voided)", "Hypothesis": "Search person names containing given, middle or family names based on the input name and ensure they are not voided."}
{"SampleId": 1311565, "Origin": "Scenario:\n  - no CA inherited trust\n  - gateway does not trust the service\n  - service trusts gateway certificate", "Reference": "Scenario:\n  - no CA inherited trust\n  - gateway does not trust the API\n  - API trusts gateway certificate", "Hypothesis": "Scenario: - no CA inherited trust - gateway does not trust the API - API trusts gateway certificate"}
{"SampleId": 470388, "Origin": "Group: consumer", "Reference": "Group: producer", "Hypothesis": "This method sets the property \"rdd\" with the given Object value and returns an instance of SparkEndpointBuilder for chaining calls."}
{"SampleId": 236331, "Origin": "Locks existing inodes on the specified path, in the specified {@link LockMode}.", "Reference": "Locks existing inodes on the specified path, in the specified {@link LockPattern}.", "Hypothesis": "Locks existing inodes on the specified path, in the specified {@link LockPattern}."}
{"SampleId": 2913753, "Origin": "Obtains an instance from the specified unique name.", "Reference": "Obtains an instance from the specified name.", "Hypothesis": "Obtains an instance from the specified unique name."}
{"SampleId": 5085347, "Origin": "Check partiiton state on all nodes by all caches.", "Reference": "Checks partitions state on all nodes by all caches.", "Hypothesis": "Check partition state on all nodes by all caches."}
{"SampleId": 1576910, "Origin": "Removes all metadata (including properties and tags) for the specified {@link MetadataEntity}.", "Reference": "Removes all metadata (including properties and tags) for the specified {@link MetadataEntity} and it's\ncustom sub entity", "Hypothesis": "Removes all metadata (including properties and tags) for the specified {@link MetadataEntity} and deletes all sub entities' metadata."}
{"SampleId": 2823637, "Origin": "TransactionToApply} given.", "Reference": "CommandsToApply} given.", "Hypothesis": "Apply the given CommandsToApply transactions using BatchTransactionApplier."}
{"SampleId": 5177164, "Origin": "Returns a rule that restricts access by period of time according to the\nIP address of the request's client.", "Reference": "Adds a rule that restricts access by period of time according to the\nIP address of the request's client.", "Hypothesis": "Adds a rule that restricts access by period of time according to the IP address of the request's client using FirewallUtils."}
{"SampleId": 2404069, "Origin": "Executes {@link Pems#x509Certificate(InputSupplier, CertificateFactory)} on the string which contains an X.509\ncertificate in PEM format.", "Reference": "Executes {@link Pems#x509Certificate(ByteSource, CertificateFactory)} on the string which contains an X.509\ncertificate in PEM format.", "Hypothesis": "Executes {@link Pems#x509Certificate(ByteSource, CertificateFactory)} on the string which contains an X.509 certificate in PEM format."}
{"SampleId": 3981670, "Origin": "Get all Pinot table names (server resources).", "Reference": "Get all table names (with type suffix).", "Hypothesis": "Get all Pinot table names (server resources)."}
{"SampleId": 5629967, "Origin": "Gets the msg.", "Reference": "New builder.", "Hypothesis": "Returns a new Builder instance with the current state."}
{"SampleId": 1351115, "Origin": "Default is to have both left and right buttons pressed when moving.", "Reference": "Default is to have both left and right buttons, or just middle button, pressed when moving.", "Hypothesis": "Default is to have both left and right buttons pressed when moving or the wheel button if applicable."}
{"SampleId": 4474460, "Origin": "Code snippet for {@link DataLakeDirectoryAsyncClient#getSubDirectoryAsyncClient(String)}", "Reference": "Code snippet for {@link DataLakeDirectoryAsyncClient#getSubdirectoryAsyncClient(String)}", "Hypothesis": "Code snippet for {@link DataLakeDirectoryAsyncClient#getSubdirectoryAsyncClient(String)"}
{"SampleId": 2783374, "Origin": "If the variable was set, a configuration {@link ConfigurationEvent event} will be passed to\nall registered listeners.", "Reference": "If the variable was set, a CONFIGURATION {@link ConfigurationEvent event} will be passed to\nall registered listeners.", "Hypothesis": "If the variable was set, a configuration {@link ConfigurationEvent event} will be passed to all registered listeners."}
{"SampleId": 2230484, "Origin": "Sets the quorum name for operations.", "Reference": "Sets the split brain protection name for operations.", "Hypothesis": "Sets the split brain protection name for operations."}
{"SampleId": 4470235, "Origin": "Get the preventEncryptionScopeOverride property: The\npreventEncryptionScopeOverride property.", "Reference": "Get the encryptionScopeOverridePrevented property: The\nencryptionScopeOverridePrevented property.", "Hypothesis": "Get the encryptionScopeOverridePrevented property: The encryptionScopeOverridePrevented property."}
{"SampleId": 5446168, "Origin": "Returns the ModuleReader for the given module.", "Reference": "Returns the ModuleReader for the given module, creating it if needed", "Hypothesis": "Returns a ModuleReader for the given module, creating it if necessary and avoiding method reference during startup."}
{"SampleId": 5415536, "Origin": "Generate a FactorStatus from a string.", "Reference": "Generate a FactorStatuses from a string.", "Hypothesis": "Generate a FactorStatuses from a string."}
{"SampleId": 2071854, "Origin": "Gets the set of this charset's aliases.", "Reference": "Returns a set containing this charset's aliases.", "Hypothesis": "Gets a set of this charset's aliases if aliasSet is not null, otherwise constructing a new set from the aliases array and returning it in an unmodifiable form."}
{"SampleId": 4617937, "Origin": "Deletes a line.", "Reference": "Deletes lines.", "Hypothesis": "Deletes lines."}
{"SampleId": 526011, "Origin": "If we succeeded on both stream in and out, reply back to coordinator", "Reference": "If we succeeded on both stream in and out, respond back to coordinator", "Hypothesis": "If we succeeded on both stream in and out, reply back to coordinator."}
{"SampleId": 4245985, "Origin": "Convert to object types, returning null if text is null.", "Reference": "Convert to object types, returning null if text is null or empty.", "Hypothesis": "Convert to object types, returning null if text is empty."}
{"SampleId": 2311346, "Origin": "Implements the {@code --run  } legacy handling.", "Reference": "Implements the {@code --run} command line argument.", "Hypothesis": "Implements the {@code --run} command handling by searching for a command with the given title or attempting to run a specific class name."}
{"SampleId": 1319546, "Origin": "We assume {@link #canSerialize(String)} returns  or a runtime\nexception may be thrown.", "Reference": "We assume {@link #canSerialize(String, java.util.List)} returns  or\na runtime exception may be thrown.", "Hypothesis": "We assume {@link #canSerialize(String)} returns or a runtime exception may be thrown."}
{"SampleId": 2891738, "Origin": "Reads all available bytes from InputStream as a byte array.", "Reference": "Reads all available bytes from {@link InputStream} as a byte array.", "Hypothesis": "Reads all available bytes from InputStream as a byte array."}
{"SampleId": 2482278, "Origin": "Queries this search source for the given searchPattern.", "Reference": "Creates query for the given searchPattern.", "Hypothesis": "Queries this search source for the given searchPattern using LdapContactQuery with specified LDAP_MAX_RESULTS."}
{"SampleId": 230481, "Origin": "Shuts down the managed channel.", "Reference": "Tries to gracefully shut down the managed channel.", "Hypothesis": "Shuts down the managed channel with a timeout, attempting to gracefully shut down the channel and falling back to a forceful shutdown if the initial attempt times out."}
{"SampleId": 6043559, "Origin": "Returns the last sync d l object in the ordered set where parentFolderId = ?.", "Reference": "Returns the last sync d l object in the ordered set where modifiedTime > ?", "Hypothesis": "Returns the last sync d l object in the ordered set where M_R = ?."}
{"SampleId": 3306951, "Origin": "Gets the SSLHostConfig infos.", "Reference": "Gets the SslHostConfig infos.", "Hypothesis": "Gets the SSLHostConfig infos."}
{"SampleId": 1473408, "Origin": "The default implementation is a NOP.", "Reference": "Note: The default implementation is a NOP.", "Hypothesis": "The default implementation is a NOP."}
{"SampleId": 3467728, "Origin": "This methods checks that this node, and all its nodes recursively, do not\ncontain elements that were introduced in more recent versions of the ASM\nAPI than the given version.", "Reference": "This method checks\nthat this node, and all its children recursively, do not contain elements that were introduced\nin more recent versions of the ASM API than the given version.", "Hypothesis": "This method checks that this node, and all its nodes recursively, do not contain elements that were introduced in more recent versions of the ASM API than the given version."}
{"SampleId": 4390841, "Origin": "Amazon Redshift returns all clusters that match any combination of the\nspecified keys and values.", "Reference": "Redshift returns all clusters that match any combination of the specified\nkeys and values.", "Hypothesis": "Amazon Redshift returns all clusters that match any combination of the specified keys and values."}
{"SampleId": 1989248, "Origin": "Users should remove\ngraphs via the {@link RemoveGraph} operation.", "Reference": "Users should remove\ngraphs via the {@link RemoveStore} operation.", "Hypothesis": "Users should remove store graphs via the {@link RemoveStore} operation."}
{"SampleId": 2482809, "Origin": "Adds a ChatRoomProviderWrapperListener to the listener list.", "Reference": "Removes the ChatRoomProviderWrapperListener to the listener list.", "Hypothesis": "Removes a ChatRoomProviderWrapperListener from the listener list."}
{"SampleId": 5458951, "Origin": "Invoke Builder.moduleHash(String name, String hashString);", "Reference": "Invoke Builder.moduleHash(String name, byte[] hash);", "Hypothesis": "Invoke Builder.moduleHash(String name, byte[] hash);"}
{"SampleId": 5440347, "Origin": "Reset all labels in the instruction list.", "Reference": "Resets all the labels in the instruction list.", "Hypothesis": "Resets all labels in the instruction list."}
{"SampleId": 1973341, "Origin": "Called if this element get updated on the client side.", "Reference": "Called if this element getComb updated on the client side.", "Hypothesis": "Called if this element is updated on the client side."}
{"SampleId": 1357720, "Origin": "Compute the theoretical starting abscissa for each key-sig item.", "Reference": "Compute the theoretical starting abscissa for each key signature item.", "Hypothesis": "Compute the theoretical starting abscissa for each key signature item by considering both sharp and flat cases separately."}
{"SampleId": 5300354, "Origin": "Creates new {@link AggregationExpression} that returns the week of the year for a date as a number between 0 and\n53 in the factory timezone (default UTC).", "Reference": "Creates new {@link AggregationExpression} that returns the week of the year for a date as a number between 0 and\n53.", "Hypothesis": "Creates new {@link AggregationExpression} that returns the week of the year for a date as a number between 0 and 53 considering the specified timezone."}
{"SampleId": 5322447, "Origin": "This method will just return the ReflectivePropertyAccessor instance if it is unable to build\nsomething more optimal.", "Reference": "This method will just\nreturn the ReflectivePropertyAccessor instance if it is unable to build a more\noptimal accessor.", "Hypothesis": "This method will just return the ReflectivePropertyAccessor instance if it is unable to build something more optimal."}
{"SampleId": 1611962, "Origin": "Returns xpath query corresponding to {@code TreeWalkerAuditEvent} object which points to\nthe same AST element as specified {@code AuditEvent} object.", "Reference": "Returns xpath query corresponding to localized message of the\n{@code TreeWalkerAuditEvent} object which points to the same AST element as specified\n{@code AuditEvent} object.", "Hypothesis": "Returns xpath query corresponding to {@code AuditEvent} object which points to the same AST element as specified."}
{"SampleId": 3379473, "Origin": "The default value of this attribute is {@code 40}.", "Reference": "The default value of this attribute is {@code VERSION}.", "Hypothesis": "The default value of this attribute is {@code 0.4}."}
{"SampleId": 2887904, "Origin": "Returns default type cache implementation variant.", "Reference": "Sets default file prefix.", "Hypothesis": "Sets the temporary file prefix."}
{"SampleId": 5051654, "Origin": "Returns the builder for the settings used for calls to labelAudio.", "Reference": "Returns the builder for the settings used for calls to getEvaluation.", "Hypothesis": "Returns the builder for the settings used for calls to getEvaluation."}
{"SampleId": 3678749, "Origin": "Obtains an instance of {@code ZonedDateTime} from an {@code OffsetDateTime}.", "Reference": "Obtains an instance of {@code ZonedDateTime} from the instant formed by combining\nthe local date-time and offset.", "Hypothesis": "Obtains an instance of {@code ZonedDateTime} from a {@code LocalDateTime}, {@code ZoneOffset}, and {@code ZoneId}."}
{"SampleId": 5441633, "Origin": "The code of this method is a copy of {@link #handleAttributes(Element,", "Reference": "The code of this method is a copy of {@link #outputAttributes(Element,", "Hypothesis": "@Override protected void outputAttributesSubtree(Element element, NameSpaceSymbTable ns, Map<String, byte[]> cache) throws CanonicalizationException, DOMException, IOException { if (!element.hasAttributes() && !firstCall) { return; } // result will contain the attrs which have to be output SortedSet<Attr> result = new TreeSet<Attr>(COMPARE);\n\nif (element.hasAttributes()) { NamedNodeMap attrs = element.getAttributes(); int attrsLength = attrs.getLength(); for (int i = 0; i < attrsLength; i++) { Attr attribute = (Attr) attrs.item(i); String NUri = attribute.getNamespaceURI(); String NName = attribute.getLocalName(); String NValue = attribute.getValue(); if (!XMLNS_URI.equals(NUri)) { //It's not a namespace attr node. Add to the result and continue. result.add(attribute); } else if (!(XML.equals(NName) && XML_LANG_URI.equals(NValue))) { //The default mapping for xml must not be output. Node n = ns.addMappingAndRender(NName, NValue, attribute); if (n != null) { //Render the ns definition result.add((Attr)n); if (C14nHelper.namespaceIsRelative(attribute)) { Object exArgs[] = { element.getTagName(), NName, attribute.getNodeValue() }; throw new CanonicalizationException( \"c14n.Canonicalizer.RelativeNamespace\", exArgs ); } }\n}\n}\n\nif (firstCall) { //It is the first node of the subtree //Obtain all the namespaces defined in the parents, and added to the output. ns.getUnrenderedNodes(result); //output the attributes in the xml namespace. xmlattrStack.getXmlnsAttr(result); firstCall = false; }\n\nOutputStream writer = getWriter(); //we output all Attrs which are available for (Attr attr : result) { outputAttrToWriter(attr.getNodeName(), attr.getNodeValue(), writer, cache); }"}
{"SampleId": 2624579, "Origin": "Sets the {@link Service} and returns the {@link VirtualHostBuilder} that this\n{@link VirtualHostServiceBindingBuilder} was created from.", "Reference": "Sets the {@link HttpService} and returns the {@link VirtualHostBuilder} that this\n{@link VirtualHostServiceBindingBuilder} was created from.", "Hypothesis": "Sets the {@link HttpService} and returns the {@link VirtualHostBuilder} that this\n{@link VirtualHostServiceBindingBuilder} was created from."}
{"SampleId": 361684, "Origin": "Test that {@link RawContactDelta#buildDiffWrapper(ArrayList)} is correctly built for\ninsert, update, and delete cases.", "Reference": "Test that {@link RawContactDelta#buildDiff(ArrayList)} is correctly built for\ninsert, update, and delete cases.", "Hypothesis": "Test that {@link RawContactDelta#buildDiff(ArrayList)} is correctly built for insert, update, and delete cases."}
{"SampleId": 2217861, "Origin": "Test of var method, of class WeibullDistribution.", "Reference": "Test of variance method, of class WeibullDistribution.", "Hypothesis": "Test of variance method, of class WeibullDistribution."}
{"SampleId": 1644254, "Origin": "returns the ID of a given object from the pool", "Reference": "Returns the ID of a given object from the pool.", "Hypothesis": "returns the ID of a given object from the pool"}
{"SampleId": 4850302, "Origin": "Get the {@link DiscordClient} that emitted this {@link Event}.", "Reference": "Get the {@link GatewayDiscordClient} that emitted this {@link Event}.", "Hypothesis": "Get the {@link GatewayDiscordClient} that emitted this {@link Event}."}
{"SampleId": 3376155, "Origin": "Return the attributes map", "Reference": "Return the properties map", "Hypothesis": "Return the properties map"}
{"SampleId": 3467755, "Origin": "LabelNode if necessary.", "Reference": "Creates a new LabelNode if necessary.", "Hypothesis": "Return the LabelNode if necessary."}
{"SampleId": 3629301, "Origin": "Returns an immutable set containing five elements.", "Reference": "Returns an unmodifiable set containing five elements.", "Hypothesis": "Returns an unmodifiable set containing five elements."}
{"SampleId": 3863202, "Origin": "get the preference key which stores the number of times the toast associated with the smart toast type has\nbeen shown", "Reference": "returns the preference key which stores the number of times the toast associated with the smart toast type\nhas been shown", "Hypothesis": "Get the preference key which stores the number of times the toast associated with the smart toast type has been shown."}
{"SampleId": 3380964, "Origin": "System will constantly measure actual average latency and compare it with \"desirableOperationLatency\".", "Reference": "System will constantly measure actual average latency and compare it with \"slowCallDurationThreshold\".", "Hypothesis": "System will constantly measure actual average latency and compare it with \"slowCallDurationThreshold\"."}
{"SampleId": 3036907, "Origin": "Currently, SONA supports Flat, VXLAN, GRE and VLAN modes.", "Reference": "Currently, SONA supports Flat, VXLAN, GRE, GENEVE and VLAN modes.", "Hypothesis": "SONA now supports Flat, VXLAN, GRE, GENEVE and VLAN modes."}
{"SampleId": 339305, "Origin": "Default implementation returns {@link ControllerResult#RESULT_CODE_NOT_SUPPORTED}.", "Reference": "Default implementation returns {@link SessionResult#RESULT_CODE_NOT_SUPPORTED}.", "Hypothesis": "Default implementation returns {@link SessionResult#RESULT_CODE_NOT_SUPPORTED}."}
{"SampleId": 1142555, "Origin": "Create a GeoCircle of the right kind given the specified bounds.", "Reference": "Create a GeoCircle from a center and a cutoff angle.", "Hypothesis": "Create a GeoCircle of the right kind given the specified cutoff angle."}
{"SampleId": 4476914, "Origin": "The {@link Secret} is required.", "Reference": "The {@link KeyVaultSecret} is required.", "Hypothesis": "The {@link KeyVaultSecret} is required."}
{"SampleId": 3920548, "Origin": "Make a new label with this  as the value (word).", "Reference": "Make a new label with this {@code String} as the value (word).", "Hypothesis": "Create a new label with this as the value (word)."}
{"SampleId": 6361507, "Origin": "Change the status of the pageCommentCheckbox.", "Reference": "Set the state of the given application for the given format.", "Hypothesis": "Update the application state of the given application ID with the specified format and state."}
{"SampleId": 3143395, "Origin": "Structural Specification for more details.", "Reference": "The\nOWL 2 Structural Specification for more details.", "Hypothesis": "Get an OWL Annotation Property based on a given abbreviated IRI and PrefixManager."}
{"SampleId": 4477930, "Origin": "Generates a code sample for using {@link FileClient#startCopyWithResponse(String, Map, Duration, Context)}", "Reference": "Generates a code sample for using {@link FileClient#beginCopy(String, Map, Duration)}", "Hypothesis": "Generates a code sample for using {@link FileClient#beginCopy(String, Map, Duration)"}
{"SampleId": 6329102, "Origin": "Scheduler:\n {@code combineLatest} does not operate by default on a particular {@link Scheduler}.", "Reference": "Scheduler:\n {@code combineLatestArray} does not operate by default on a particular {@link Scheduler}.", "Hypothesis": "@code combineLatestArray} does not operate by default on a particular {@link Scheduler}."}
{"SampleId": 6049283, "Origin": "or throws a {@link com.liferay.samplelar.NoSuchBookingException} if it could not be found.", "Reference": "or throws a {@link NoSuchBookingException} if it could not be found.", "Hypothesis": "Finds a SampleLARBooking by UUID and groupId, or throws a {@link com.liferay.samplelar.NoSuchBookingException} if it could not be found."}
{"SampleId": 4383863, "Origin": "If the Multi-AZ option is\nenabled, these values control the resources used per Availability", "Reference": "If the Multi-AZ option is enabled, these values\ncontrol the resources used per Availability Zone.", "Hypothesis": "If the Multi-AZ option is enabled, these values control the resources used per Availability Zone."}
{"SampleId": 2170401, "Origin": "Get the SQL snippet for this index column.", "Reference": "Appends the SQL snippet for this index column to the specified string builder.", "Hypothesis": "Get the SQL snippet for this index column using the provided StringBuilder object."}
{"SampleId": 1843356, "Origin": "Waits during {@code timeout} until specified {@code element} contains the defined {@code\nexpectedText}.", "Reference": "Waits during {@code timeout} until specified {@code element} contains the defined {@code\nexpected} value.", "Hypothesis": "Waits during {@code timeout} until specified {@code element} contains the defined {@code expected} value."}
{"SampleId": 2337140, "Origin": "Invalidate authentication token\n### Functional Description:   Logout a user.", "Reference": "Invalidate authentication token\n### Functional Description:   Log out a user.", "Hypothesis": "Invalidate authentication token}\n\n### Functional Description:   Logout a user."}
{"SampleId": 1464216, "Origin": "Modified enum is hiding in the 2 and 3 bits of the flags.", "Reference": "Modified enum is hiding in the 3 and 4 bits of the flags.", "Hypothesis": "Modified enum is hiding in the 3 and 4 bits of the flags."}
{"SampleId": 5077310, "Origin": "Removes pending delete object.", "Reference": "Removes local continuous task object.", "Hypothesis": "Removes a local continuous task object by key."}
{"SampleId": 6043553, "Origin": "Returns the last sync d l object in the ordered set where parentFolderId = ?.", "Reference": "Returns the last sync d l object in the ordered set where modifiedTime > ?", "Hypothesis": "Returns the last sync d l object in the ordered set where modifiedTime = ? and repositoryId = ?."}
{"SampleId": 5176614, "Origin": "Setter for {@link #allowCredentials}", "Reference": "Setter for {@link #allowedCredentials}", "Hypothesis": "Setter for {@link #allowedCredentials"}
{"SampleId": 4144226, "Origin": "Get a string from the underlying resource bundle or return\n       null if the String is not found.", "Reference": "Get a string from the underlying resource bundle or return null if the", "Hypothesis": "Get a string from the underlying resource bundle or return null if the String is not found."}
{"SampleId": 337518, "Origin": "Sets text to be displayed next to icon.", "Reference": "Sets body text to be displayed next to radio button.", "Hypothesis": "Sets body text to be displayed next to icon."}
{"SampleId": 4367575, "Origin": "this will return a Duration with 2004 {@link TimeUnit#MILLISECONDS}.", "Reference": "will return a Duration of 2004 {@link TimeUnit#MILLISECONDS}.", "Hypothesis": "This method returns a Duration with 2004 {@link TimeUnit#MILLISECONDS}."}
{"SampleId": 4386720, "Origin": "Access Control Using AWS Identity and Access Management (IAM) \n.", "Reference": "For more information, see Access Control Using AWS Identity and Access Management (IAM).", "Hypothesis": "Deletes a specified vault using AWS Identity and Access Management (IAM)."}
{"SampleId": 4476820, "Origin": "Sets the vault endpoint url to send HTTP requests to.", "Reference": "Sets the vault url to send HTTP requests to.", "Hypothesis": "Sets the vault URL to send HTTP requests to."}
{"SampleId": 612080, "Origin": "The difference of {@link #isInteroperable} is ignore decimal precision.", "Reference": "The difference of {@link #isInteroperable} is ignore precisions.", "Hypothesis": "The difference of {@link #isAssignable} is ignore decimal precision."}
{"SampleId": 4396617, "Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "Hypothesis": "Returns a string representation of this object; useful for testing and debugging."}
{"SampleId": 340614, "Origin": "Once the prefetch is done, the player will change\nits playback state to {@link SessionPlayer2#PLAYER_STATE_PAUSED}.", "Reference": "Once the prepare is done, the player will change\nits playback state to {@link SessionPlayer2#PLAYER_STATE_PAUSED}.", "Hypothesis": "Once the prepare is done, the player will change its playback state to {@link SessionPlayer2#PLAYER_STATE_PAUSED}."}
{"SampleId": 2482280, "Origin": "Queries this contact source for the given queryString.", "Reference": "Creates query for the given queryString.", "Hypothesis": "Queries this contact query for the given queryString."}
{"SampleId": 2217859, "Origin": "Test of npara method, of class TDistribution.", "Reference": "Test of length method, of class TDistribution.", "Hypothesis": "Test of length method, of class TDistribution."}
{"SampleId": 5453329, "Origin": "Matching is performed using the matching rules specified by\n[RFC2459].", "Reference": "Matching is performed using the matching rules specified by\n[RFC5280].", "Hypothesis": "Matching is performed using the matching rules specified by RFC2459 and considering if chainsToPublicCA."}
{"SampleId": 613115, "Origin": "If there is a sample in progress for the operator, the call\nis ignored.", "Reference": "If there is a request in progress for the vertex, the call\nis ignored.", "Hypothesis": "Triggers a back pressure request for the specified tasks if the job is still active and not in a terminal state."}
{"SampleId": 5589114, "Origin": "If the given language code is {@code null}, uses {@link DisplaySettings#getShowsLanguage(Context)}.", "Reference": "If the given language code is {@code null}, uses\n{@link DisplaySettings#getShowsLanguageFallback(Context)}.", "Hypothesis": "If the given language code is {@code null}, uses {@link DisplaySettings#getShowsLanguageFallback(Context)}."}
{"SampleId": 1220562, "Origin": "heavy weight join(), involves moving data", "Reference": "Heavy weight join(), involves moving data", "Hypothesis": "The method involves re-organizing B to be similarly partitioned as A and then zipping them up using an MRTask."}
{"SampleId": 671356, "Origin": "Converts a JSON document into a PdxInstance", "Reference": "Converts a String JSON document into a PdxInstance", "Hypothesis": "Converts a JSON document into a PdxInstance with given identityFields"}
{"SampleId": 4388428, "Origin": "For an overview on tagging Amazon RDS resources, see", "Reference": "For an overview on tagging Amazon RDS resources, see Tagging Amazon RDS Resources.", "Hypothesis": "Adds tags to an Amazon RDS resource using a given request object and returns the result. For more information on tagging Amazon RDS resources, see [Amazon Resource Names (ARN)](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-tags.html)."}
{"SampleId": 2487751, "Origin": "If you'd just\nlike to obtain the version of SIP Communicator so that you could display\nit (e.g.", "Reference": "If you'd just like to obtain the\nversion of Jitsi so that you could display it (e.g.", "Hypothesis": "This method constructs a version string by combining major, minor, pre-release ID and nightly build ID if applicable, according to the given conditions."}
{"SampleId": 1985759, "Origin": "Search for the insertion point of current number.", "Reference": "Binary search for the insertion point of current number.", "Hypothesis": "Search for the insertion position of current number."}
{"SampleId": 6304839, "Origin": "Return the HTTP request.", "Reference": "Return the native HTTP request.", "Hypothesis": "Return the native HTTP request."}
{"SampleId": 4386726, "Origin": "Access Control Using AWS Identity and Access Management (IAM) \n.", "Reference": "For more information, see Access Control Using AWS Identity and Access Management (IAM).", "Hypothesis": "This method is used to upload a multipart part using an UploadMultipartPartRequest and return an UploadMultipartPartResult. The AWS Identity and Access Management (IAM) is used for access control in this operation."}
{"SampleId": 5078411, "Origin": "Test affinity awareness Sql cache size property.", "Reference": "Test Partition Awareness Sql cache size property.", "Hypothesis": "Test partition awareness Sql cache size property."}
{"SampleId": 5433434, "Origin": "Returns the default SelectorProvider.", "Reference": "Returns the default SelectorProvider implementation.", "Hypothesis": "Returns the default SelectorProviderImpl."}
{"SampleId": 5218518, "Origin": "Get XA connection.", "Reference": "Get connection.", "Hypothesis": "Get XA connection for a specific resource with enlistment and synchronization handling."}
{"SampleId": 471129, "Origin": "Group: common", "Reference": "Group: security", "Hypothesis": "Enable SSL validation by setting the value of \"sslValidation\" property."}
{"SampleId": 4374300, "Origin": "This API returns an export ID which you can query using the DescribeExportConfigurations API.", "Reference": "This API returns an export ID that you can query using the DescribeExportConfigurations API.", "Hypothesis": "This API returns an export ID which you can query using the DescribeExportConfigurations API. However, this method is deprecated."}
{"SampleId": 5325351, "Origin": "Open a Session for the SessionFactory that this interceptor uses.", "Reference": "Open a Session for the given SessionFactory.", "Hypothesis": "Open a Session for the SessionFactory that this interceptor uses."}
{"SampleId": 2544535, "Origin": "In order to set the matrix to a rotation transformation without post-multiplying,\nuse {@link #rotation(Quaterniond)}.", "Reference": "In order to set the matrix to a rotation transformation without post-multiplying,\nuse {@link #rotation(Quaterniondc)}.", "Hypothesis": "In order to set the matrix to a rotation transformation without post-multiplying, use {@link #rotation(Quaterniond)}."}
{"SampleId": 4615152, "Origin": "Fills the current buffer with bytes from the specified array from the\nspecified offset.", "Reference": "Fills the current buffer with bytes from the specified array and offset.", "Hypothesis": "Fills the current buffer with bytes from the specified array from the specified offset."}
{"SampleId": 1751597, "Origin": "This means that, by default, a codec will accept any\nsubtype of the Java type that it has been created for.", "Reference": "This means that, by default, a codec will accept any subtype of the", "Hypothesis": "This means that, by default, a codec will accept any subtype of the Java type that it has been created for."}
{"SampleId": 4779874, "Origin": "Returns the {@link ISeedingStrategyFactory} used by this factory.", "Reference": "Returns the {@link SeedingStrategyFactory} used by this factory.", "Hypothesis": "Returns the {@link SeedingStrategyFactory} used by this factory."}
{"SampleId": 6360454, "Origin": "If\n{@link Context#dropPermissions()} has been called then this will return the guest user no matter who the real\nauthor is.", "Reference": "If\n{@link XWikicontext#dropPermissions()} has been called then this will return the guest user no matter who the\nreal author is.", "Hypothesis": "If {@link XWikiContext#dropPermissions()} has been called then this will return the guest user no matter who the real author is."}
{"SampleId": 439644, "Origin": "Test the write path using a {@link FakeWriter} and verifying the expected log statements are\nwritten.", "Reference": "Test the write path using a {@link FakeWriter} and verifies the expected log statements are\nwritten.", "Hypothesis": "Test the write path using a {@link FakeWriter} and verifying the expected log statements are written for targetParallelism instead of numberRecords."}
{"SampleId": 337081, "Origin": "Creates a CaptureRequestConfig.Builder contains shared options.", "Reference": "Creates a CaptureConfig.Builder contains shared options.", "Hypothesis": "Creates a CaptureConfig.Builder contains shared options."}
{"SampleId": 1144953, "Origin": "This method may return null if the field does not exist.", "Reference": "This method may return null if the field does not exist or if it has no terms.", "Hypothesis": "This method may return null if the field does not exist or contains no terms."}
{"SampleId": 3964373, "Origin": "Turns this ReactiveSeq into a HotStream, a connectable & pausable Stream, being executed on a thread on the\nsupplied executor, that is producing data.", "Reference": "Turns this ReactiveSeq into a Connectable, a connectable & pausable Stream, being executed on a thread on the\nsupplied executor, that is producing data.", "Hypothesis": "Turns this ReactiveSeq into a PausableConnectable, a connectable & pausable Stream, being executed on a thread on the supplied executor, that is producing data."}
{"SampleId": 5300336, "Origin": "Creates new {@link AggregationExpression} that returns the millisecond portion of a date as an integer between 0\nand 999 in the factory timezone (default UTC).", "Reference": "Creates new {@link AggregationExpression} that returns the millisecond portion of a date as an integer between 0\nand 999.", "Hypothesis": "Creates new {@link AggregationExpression} that returns the millisecond portion of a date as an integer between 0 and 999 in the factory timezone (default UTC)."}
{"SampleId": 3630984, "Origin": "Create parameters necessary for creating a reusable Alipay source.", "Reference": "Create reusable Alipay Source params.", "Hypothesis": "Create parameters necessary for creating a reusable Alipay source with an optional owner's name and email."}
{"SampleId": 1310040, "Origin": "Removes all of the service contracts from ES.", "Reference": "Removes all of the api contracts from ES.", "Hypothesis": "Removes all of the api contracts from ES."}
{"SampleId": 1577340, "Origin": "Get the metrics context for the program, the tags are constructed with the program run id and\nthe profile id", "Reference": "Emit the metrics context for the program, the tags are constructed with the program run id and\nthe profile id", "Hypothesis": "Emit the metrics context for a profile based on program run id and profile id with a specified metric name."}
{"SampleId": 1988266, "Origin": "Tests the engine starts up, executes 1 trade cycle successfully, but then receives unexpected Exception from", "Reference": "Tests the engine starts up, executes 1 trade cycle successfully, but then receives unexpected", "Hypothesis": "Tests the engine starts up, executes 1 trade cycle successfully, but then receives unexpected Exception from Trading Strategy and shuts down."}
{"SampleId": 6043566, "Origin": "Returns all the sync d l objects where companyId = ?", "Reference": "Returns all the sync d l objects where repositoryId = ?", "Hypothesis": "Returns all the sync d l objects where repositoryId = ?"}
{"SampleId": 1578468, "Origin": "Returns the {@link ProgramId} of the program who emit this message.", "Reference": "Returns the {@link EntityId} of the entity who emit this message.", "Hypothesis": "Returns the {@link EntityId} of the entity who emit this message."}
{"SampleId": 2887745, "Origin": "This method must only be used for type references\nwhose sort is {@link #EXCEPTION_PARAMETER EXCEPTION_PARAMETER} .", "Reference": "This method must\nonly be used for type references whose sort is {@link #EXCEPTION_PARAMETER} .", "Hypothesis": "This method must only be used for type references whose sort is {@link #EXCEPTION_PARAMETER EXCEPTION_PARAMETER} ."}
{"SampleId": 2250759, "Origin": "EventListener callback -\n unused for now - how many devices support events?", "Reference": "EventListener callback -\n unused for now - supported in miniupnpd as of VERSION", "Hypothesis": "EventListener callback - unused for now - how many devices support events? This method is invoked when an event notification is received. The event type and value are logged if the logger should log at warn level. If any of the parameters (uuid, varName, or value) are null, or if varName's length exceeds 128 characters, or if value's length exceeds 128 characters, this method returns immediately without processing the event. The method also checks if _eventVars contains a key for varName, and if it doesn't, it is added to _eventVars with the value as its associated value. If the new value for varName is different from the old value stored in _eventVars, it is logged at debug level. This method also seems to call a callback which is not mentioned here."}
{"SampleId": 5062110, "Origin": "Adds an entry to the layer with the given permissions.", "Reference": "Adds an entry to the layer with the given permissions and file modification time.", "Hypothesis": "Adds an entry to the layer with the given permissions."}
{"SampleId": 3718673, "Origin": "Shutdown all the channel creators out there.", "Reference": "Shuts down all the channel creators.", "Hypothesis": "Shutdown all the channel creators out there and wait for completion."}
{"SampleId": 5229842, "Origin": "Gets a list of suggestions of input to this parser.", "Reference": "Gets a stream of suggestions of input to this parser.", "Hypothesis": "Gets a stream of suggestions of input to this parser."}
{"SampleId": 2481896, "Origin": "Checks the account and\nthen searches for the contact.", "Reference": "Checks the\naccount and then searches for the contact or chat room.", "Hypothesis": "Checks the account and then searches for the contact or room by id."}
{"SampleId": 6148105, "Origin": "Adds a check that the given number is positive.", "Reference": "Adds a check that the given number is not null.", "Hypothesis": "Ensures that the given object is not null by throwing an exception if it is."}
{"SampleId": 5749376, "Origin": "Test method for {@link org.infinispan.spring.provider.SpringRemoteCacheManager#stop()}.", "Reference": "Test method for {@link org.infinispan.spring.remote.provider.SpringRemoteCacheManager#stop()}.", "Hypothesis": "Test method for {@link org.infinispan.spring.provider.SpringRemoteCacheManager#stop()}."}
{"SampleId": 2393773, "Origin": "Whitelisted props can be defined only if ignored properties are not defined.", "Reference": "Included props can be defined only if ignored properties are not defined.", "Hypothesis": "Included props can be defined only if ignored properties are not defined."}
{"SampleId": 4711272, "Origin": "Subtracts a value that has been seen n times from the observed values", "Reference": "Subtracts a weighted value from the observed values", "Hypothesis": "Subtracts a value that has been seen weight times from the observed values."}
{"SampleId": 2783389, "Origin": "If this happens, a configuration {@link ConfigurationEvent event} will\nbe sent to all registered listeners.", "Reference": "If this happens, a CONFIGURATION {@link ConfigurationEvent event} will\nbe sent to all registered listeners.", "Hypothesis": "If this happens, a configuration {@link ConfigurationEvent event} will be sent to all registered listeners."}
{"SampleId": 5724780, "Origin": "If not found, {@link #currentToken} is set to .", "Reference": "If not found, {@link #currentToken} is set to {@code null}.", "Hypothesis": "If not found, {@link #currentToken} is set to null and return -1."}
{"SampleId": 5844047, "Origin": "and transfer all those namespace declarations to the current document", "Reference": "and transfer all those namespace declarations to the current document root.", "Hypothesis": "Transfer all namespace declarations from the given XmlTag to the current document."}
{"SampleId": 5324301, "Origin": "Note that the writing process does not start until the returned {@code Mono} is subscribed\nto.", "Reference": "Note that the writing process does not start until the returned {@code Flux} is subscribed\nto.", "Hypothesis": "Note that the writing process does not start until the returned {@code Flux} is subscribed to."}
{"SampleId": 1703343, "Origin": "Sets the trim mark on this endpoint's log unit and also perform a prefix trim.", "Reference": "Sets the trim mark on this endpoint's log unit, performs a prefix trim and then compaction.", "Hypothesis": "Sets the trim mark on this endpoint's log unit by performing a prefix trim and compaction afterwards."}
{"SampleId": 4476926, "Origin": "This will return the {@link Secret secret} with\nvalue included of its latest version.", "Reference": "This will return the {@link KeyVaultSecret secret} with\nvalue included of its latest version.", "Hypothesis": "This will return the {@link SecretProperties} with value included of its latest version."}
{"SampleId": 4003996, "Origin": "Adds a Bundle to the watch list.", "Reference": "Adds a Bundle URLs to the watch list.", "Hypothesis": "Adds a Bundle with specified URL to the watch list."}
{"SampleId": 2569170, "Origin": "Sets the value of the 'publicPort' field", "Reference": "Sets the value of the 'publicPorts' field", "Hypothesis": "Sets the value of the 'publicPorts' field"}
{"SampleId": 2608943, "Origin": "Tests {@code globalRecommend(long, int, Set, Set)}.", "Reference": "Tests {@code recommendRelatedItems()(long, int, Set, Set)}.", "Hypothesis": "Tests {@code recommendRelatedItems(long, int, Set, Set)}."}
{"SampleId": 3774737, "Origin": "Gets the filters for items to fetch.", "Reference": "Gets the filter for items to fetch.", "Hypothesis": "Gets the filter for items to fetch."}
{"SampleId": 3734017, "Origin": "Is the value with this qualifier less than or equal to the length of array?", "Reference": "Is the value with this qualifier less than or equal to the length of sequence?", "Hypothesis": "Is the value with this qualifier less than or equal to the length of sequence?"}
{"SampleId": 3366544, "Origin": "It will emit the current object when\nsubscribed to.", "Reference": "It will emit the current RealmObject when\nsubscribed to.", "Hypothesis": "This method will emit the current object when subscribed to, converting it into a changeset observable."}
{"SampleId": 6133396, "Origin": "Convenience method to load tree from file", "Reference": "Convenience method to load tree from an inputstream", "Hypothesis": "Convenience method to load tree from stream"}
{"SampleId": 4471749, "Origin": "If {@code labels = \"*\"}, settings with any label are returned.", "Reference": "If {@code labelFilter = \"*\"}, settings with any label are returned.", "Hypothesis": "If {@code labelFilter = \"*\"}, settings with any label are returned."}
{"SampleId": 2663978, "Origin": "An accurate sync method that adapts automatically\nto the system it runs on to provide reliable results.", "Reference": "An accurate sync method that will attempt to run an application loop\nat a constant frame rate.", "Hypothesis": "An accurate sync method that adapts automatically to the system it runs on to provide reliable results using a given frames per second (fps) value."}
{"SampleId": 1468039, "Origin": "A\n is built when the JAR is created.", "Reference": "A\n class is built when the JAR is\ncreated.", "Hypothesis": "Retrieves build information when called. This method retrieves a map of build metadata by parsing the \"com.bigdata.BuildInfo\" class. The method returns a read-only, unmodifiable map containing the build info."}
{"SampleId": 1355604, "Origin": "Assign the current point, where the dragged image is to be displayed", "Reference": "Assign the current screen point, where the dragged image is to be displayed", "Hypothesis": "Set the screen point by assigning the current point where the dragged image is to be displayed."}
{"SampleId": 4900008, "Origin": "Collect capabilities of an index.", "Reference": "Collect the field capabilities for an index.", "Hypothesis": "Collect capabilities of an index with given parameters and update searchable and aggregatable flags."}
{"SampleId": 1473283, "Origin": "Attempts to read the next IHAWriteMessage and then the\nexpected buffer, that is read into the client buffer.", "Reference": "Attempts to read the next {@link IHAWriteMessage} and then the expected\nbuffer, that is read into the client buffer.", "Hypothesis": "Attempts to read the next IHAWriteMessage and then the expected buffer, that is read into the client buffer while considering the store type (RW or WORM)."}
{"SampleId": 4388498, "Origin": "For an overview on tagging an Amazon RDS resource, see", "Reference": "For an overview on tagging an Amazon RDS resource, see Tagging Amazon RDS Resources.", "Hypothesis": "Performs a list of tags for an Amazon RDS resource based on the provided request."}
{"SampleId": 2706880, "Origin": "Set Tree.", "Reference": "Set Baum.", "Hypothesis": "Set the Tree ID."}
{"SampleId": 4709071, "Origin": "Now performs a deep copy of the\nclassifier before each call to buildClassifier() (just in case the\nclassifier is not initialized properly).", "Reference": "Performs a deep copy of the\nclassifier before each call to buildClassifier() (just in case the\nclassifier is not initialized properly).", "Hypothesis": "Performs a deep copy of the classifier before each call to buildClassifier() (just in case the classifier is not initialized properly)."}
{"SampleId": 2138025, "Origin": "Tests that adding a @JsNoExport annotation on a method comes out accurately and that removing\nit comes out accurately as well.", "Reference": "Tests that adding a @JsIgnore annotation on a method comes out accurately and that removing\nit comes out accurately as well.", "Hypothesis": "Tests that adding a @JsIgnore annotation on a method comes out accurately and that removing it comes out accurately as well."}
{"SampleId": 5630850, "Origin": "Gets the lastUpdated.", "Reference": "Gets the nextCrawl.", "Hypothesis": "Gets the nextCrawl."}
{"SampleId": 2143359, "Origin": "Checks Command cancellation detection", "Reference": "Checks Command cancellation", "Hypothesis": "Checks Command cancellation detection and recovery"}
{"SampleId": 3084709, "Origin": "Determines if the reachability of this object corresponds with the validity of the referenced\nmachine code.", "Reference": "Determines if a reference to this object is the only way the machine code can be executed.", "Hypothesis": "Determines if this object is the sole execution entry point for the referenced machine code."}
{"SampleId": 401348, "Origin": "Gets all of the {@link AlertDefinition}s that exist on the path for\n{@link Components#AMBARI_SERVER}.", "Reference": "Gets all of the {@link AlertDefinition}s that exist on the path for\n{@link RootComponent#AMBARI_SERVER}.", "Hypothesis": "Gets all of the {@link AlertDefinition}s that exist on the path for {@link RootComponent#AMBARI_SERVER}."}
{"SampleId": 1805614, "Origin": "This method will retrieve all the ExternalSourceEntries for the ExternalSource for the given AuthorityName param", "Reference": "This method will retrieve all the ExternalSourceEntries for the ExternalSource for the given externalSourceName\nparam", "Hypothesis": "This method will retrieve all the ExternalSourceEntries for the ExternalSource for the given externalSourceName param"}
{"SampleId": 1151195, "Origin": "But that is okay\nbecause {@link #constructState(Map)} will give priority to collections in the\nshared collection state over this map.", "Reference": "But that is okay\nbecause {@link #constructState(Set)} will give priority to collections in the\nshared collection state over this map.", "Hypothesis": "Refresh the collection list using a given Watcher. First, drop any children that disappeared, then check if eager collections need to be created for interesting collections."}
{"SampleId": 1881542, "Origin": "Compute the diagonal of a bounding box.", "Reference": "Compute the square size of a bounding box.", "Hypothesis": "Compute the square size of a bounding box by finding the maximum edge length."}
{"SampleId": 1404142, "Origin": "Creates a {@link MiddlemanType#ERROR_PROPAGATING_MIDDLEMAN error-propagating} middleman.", "Reference": "Creates a {@link MiddlemanType#SCHEDULING_DEPENDENCY_MIDDLEMAN scheduling dependency}\nmiddleman.", "Hypothesis": "Creates a {@link MiddlemanType#SCHEDULING_DEPENDENCY_MIDDLEMAN scheduling dependency} middleman."}
{"SampleId": 118329, "Origin": "Loads the available edit groups.", "Reference": "Loads the available element views.", "Hypothesis": "Loads the available element views."}
{"SampleId": 471492, "Origin": "Group: producer", "Reference": "Group: consumer", "Hypothesis": "This method allows you to disable stream cache by setting a property with a given value."}
{"SampleId": 3629306, "Origin": "See Immutable Set Static Factory Methods for details.", "Reference": "See Unmodifiable Sets for details.", "Hypothesis": "See Unmodifiable Set Static Factory Methods for details."}
{"SampleId": 5317700, "Origin": "This variant retrieves {@link Class#getDeclaredMethods()} from a local cache\nin order to avoid the JVM's SecurityManager check and defensive array copying.", "Reference": "Variant of {@link Class#getDeclaredMethods()} that uses a local cache in\norder to avoid the JVM's SecurityManager check and new Method instances.", "Hypothesis": "This variant retrieves {@link Class#getDeclaredMethods()} from a local cache in order to avoid the JVM's SecurityManager check and defensive array copying."}
{"SampleId": 3036485, "Origin": "Adds a control metadata.", "Reference": "Adds a packet metadata.", "Hypothesis": "Adds a packet metadata."}
{"SampleId": 5631537, "Origin": "The text of the user input example.", "Reference": "The text of a user input example.", "Hypothesis": "The text of the user input example."}
{"SampleId": 4237545, "Origin": "Sets the {@link IGetAndSetLocator} for the given application.", "Reference": "Sets the {@link IPropertyLocator} for the given application.", "Hypothesis": "Sets the {@link IPropertyLocator} for the given application."}
{"SampleId": 5631191, "Origin": "**See also:** [Specifying a voice](URL).", "Reference": "**See also:** [Listing all available\nvoices](URL).", "Hypothesis": "See also: [Specifying a voice](URL)."}
{"SampleId": 5046238, "Origin": "Writes a collection of values to an output stream.", "Reference": "Writes a sequence of values to an output stream.", "Hypothesis": "Writes a collection of values to an output stream using an OutputStreamWriter with ISO-8859-1 encoding, and flushes the writer after writing."}
{"SampleId": 5454827, "Origin": "Resources ending in \"{@code .class}\" or where\nthe package name is not a Java identifier are resources that can\nnever be encapsulated.", "Reference": "Resources ending in \"{@code .class}\"\nor where the package name is not a legal package name can not be\nencapsulated.", "Hypothesis": "Resources ending in \"{@code .class}\" or where the package name is not a valid package name are resources that can never be encapsulated."}
{"SampleId": 1790909, "Origin": "Sets the value of the sourceFileName property.", "Reference": "Sets the value of the componentName property.", "Hypothesis": "Sets the value of the componentName property."}
{"SampleId": 2603301, "Origin": "Read the parameter meta data from the transfer object.", "Reference": "Read the parameter meta data from the out object.", "Hypothesis": "Read the parameter meta data from the TransferInputStream object."}
{"SampleId": 4476930, "Origin": "Code Samples\n{@codesnippet com.azure.security.keyvault.secretclient.getSecret#secretProperties}", "Reference": "{@codesnippet com.azure.security.keyvault.secretclient.deleteSecret#string}", "Hypothesis": "Code Samples {@codesnippet com.azure.security.keyvault.secretclient.beginDeleteSecret#name"}
{"SampleId": 3557991, "Origin": "Asserts that all channels of the processor channel combination, processed the correct number of messages", "Reference": "Asserts that source channel, processed the correct number of messages", "Hypothesis": "Asserts that all channels of the processor channel combination received by the source, processed the correct number of messages"}
{"SampleId": 431814, "Origin": "Example: [30, 60, 70, 90], the 75 percentile is 30 (i.e.", "Reference": "Example: [30, 60, 70, 90], the 75 percentile is VERSION (i.e.", "Hypothesis": "Finds the value at the given percentile from a list of values sorted in natural order. Example: [30, 60, 70, 90], the 75 percentile is 70 (i.e., 0.75 * length(list) = 3)."}
{"SampleId": 1859918, "Origin": "Registers a connection status listener and attempts a connection.", "Reference": "Registers a connection status listener and attempts a connection if there is none so far.", "Hypothesis": "Registers a connection status listener and attempts a connection."}
{"SampleId": 2912048, "Origin": "This allows additional information to be attached to the trade.", "Reference": "This allows additional information to be attached.", "Hypothesis": "This allows additional information to be attached to a PortfolioItem."}
{"SampleId": 5454256, "Origin": "return the DataFlavors for this", "Reference": "Return the DataFlavors for this", "Hypothesis": "Return the DataFlavor for this"}
{"SampleId": 711378, "Origin": "Tests if this string ends with any specified suffixes.", "Reference": "Tests if this CharSequence ends with any specified suffixes.", "Hypothesis": "Tests if this CharSequence ends with any specified suffixes."}
{"SampleId": 5015630, "Origin": "Get BlobStoreType from BlobStoreConfig class", "Reference": "Get BlobStoreType from BlobStoreInfo class", "Hypothesis": "Get BlobStoreType from BlobStoreInfo class"}
{"SampleId": 4396697, "Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "Hypothesis": "Returns a string representation of this object; useful for testing and debugging when sensitive data is redacted."}
{"SampleId": 2879642, "Origin": "Adds a {@link TemporalMemory} to this {@code Layer}", "Reference": "Adds a {@link OldTemporalMemory} to this {@code Layer}", "Hypothesis": "Adds an {@link OldTemporalMemory} to this {@code Layer"}
{"SampleId": 5763825, "Origin": "Utility method for creation of CandidateURIs found extracting\nlinks from this CrawlURI.", "Reference": "Utility method for creation of CrawlURIs found extracting\nlinks from this CrawlURI.", "Hypothesis": "Utility method for creation of CandidateURIs found extracting links from a CrawlURI."}
{"SampleId": 1879512, "Origin": "Compute the Mahalanobis distance of a vector.", "Reference": "Compute the Mahalanobis distance from the centroid for a given vector.", "Hypothesis": "Compute the Mahalanobis distance of a vector using a precomputed Cholesky decomposition and the mean vector."}
{"SampleId": 132838, "Origin": "Returns if there are changed inherit properties.", "Reference": "Returns if there are changed properties.", "Hypothesis": "Checks if there are changed properties in the list of property modifications"}
{"SampleId": 5203296, "Origin": "Ensures that {@code component} is present in the manifest as an exported and enabled launcher\nactivity.", "Reference": "Ensures that {@code component} is present in the manifest as an exported and enabled activity.", "Hypothesis": "Ensures that {@code component} is present in the manifest as an exported activity with specified requirement for main activity or launcher activity if required."}
{"SampleId": 2443921, "Origin": "Start building a new factory instance-based service binding.", "Reference": "Start building a new supplier instance-based service binding.", "Hypothesis": "Build a new supplier instance-based service binding."}
{"SampleId": 4236910, "Origin": "If the wrapping fails, then null is returned.", "Reference": "If wrapping fails, returns null.", "Hypothesis": "If wrapping fails, null is returned."}
{"SampleId": 3241729, "Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}", "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveFromRangeEnd }{@code >}}", "Hypothesis": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveFromRangeEnd }{@code >"}
{"SampleId": 570083, "Origin": "Checks a filename to see if it matches the specified wildcard matcher\nusing the case rules of the system.", "Reference": "Checks a fileName to see if it matches the specified wildcard matcher\nusing the case rules of the system.", "Hypothesis": "Checks a filename to see if it matches the specified wildcard matcher using the case rules of the system."}
{"SampleId": 1254003, "Origin": "/api/v1/topology/:id/profiling/dumpheap/:host-port/:timeout -> dump heap.", "Reference": "/api/v1/topology/:id/profiling/dumpheap/:host-port -> dump heap.", "Hypothesis": "/api/v1/topology/:id/profiling/dumpheap/:host-port\" -> dump heap."}
{"SampleId": 2462078, "Origin": "Sets the base section paint and sends a {@link PlotChangeEvent} to all\nregistered listeners.", "Reference": "Sets the default section paint and sends a {@link PlotChangeEvent} to all\nregistered listeners.", "Hypothesis": "Sets the default section paint and sends a {@link PlotChangeEvent} to all registered listeners."}
{"SampleId": 5452247, "Origin": "Returns the {@code Platform} of the given OS name specified\nin the {@code ModuleTarget} attribute.", "Reference": "Returns the {@code Platform} derived from the target platform\nin the {@code ModuleTarget} attribute.", "Hypothesis": "Returns the {@code Platform} of the given OS name specified in the {@code targetPlatform}."}
{"SampleId": 2482279, "Origin": "Queries this contact source for the given queryString.", "Reference": "Creates query for the given queryString.", "Hypothesis": "Queries this contact source for the given queryString."}
{"SampleId": 4396498, "Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "Hypothesis": "Returns a string representation of this object for testing and debugging purposes, with sensitive data redacted."}
{"SampleId": 5243115, "Origin": "Embeds the tag regions into an image (represented as an AbstractFile).", "Reference": "Embeds the tag regions into an image.", "Hypothesis": "Embeds the tag regions into an image (represented as a BufferedImage)."}
{"SampleId": 5300352, "Origin": "Creates new {@link DayOfYear} in UTC.", "Reference": "Creates new {@link DayOfYear}.", "Hypothesis": "Creates new {@link DayOfYear} using specified expression in UTC."}
{"SampleId": 4595120, "Origin": "Construct XML data source from the underneath byte channel which is associated with the entity struct.", "Reference": "Construct XML data source from the underneath byte channel which is associated with the entity object.", "Hypothesis": "Construct XML data source from the underneath byte channel which is associated with the entity object."}
{"SampleId": 4476777, "Origin": "RsaKeyCreateOptions#isEnabled() enabled} field is set to true by Azure Key Vault, if not specified.", "Reference": "CreateRsaKeyOptions#isEnabled() enabled} field is set to true by Azure Key Vault, if not specified.", "Hypothesis": "RsaKeyVaultKeyCreateOptions#isEnabled() enabled} field is set to true by Azure Key Vault, if not specified."}
{"SampleId": 3241857, "Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}", "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveToRangeEnd }{@code >}}", "Hypothesis": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveToRangeEnd }{@code >"}
{"SampleId": 3900398, "Origin": "TkFallback can throw an IOException when no fallback is available.", "Reference": "TkFallback can throw an Exception when no fallback is available.", "Hypothesis": "TkFallback can throw an Exception when no fallback is available."}
{"SampleId": 3170431, "Origin": "Register a HealthCheck to the Set of HealthChecks based on appName.", "Reference": "Register a HealthCheck to the Set of HealthChecks based on appName to execute when\nperformHealthChecks is called.", "Hypothesis": "Register a HealthCheck to the Set of HealthChecks based on appName and type."}
{"SampleId": 2699046, "Origin": "Get Discount Amount.", "Reference": "Get Skonto.", "Hypothesis": "Get the Discount Amount."}
{"SampleId": 2061868, "Origin": "Determines whether a character is a letter according to {@linkplain Character#isLetter(char)", "Reference": "Determines whether a character is a BMP letter according to\n{@linkplain Character#isLetter(char) Java's definition}.", "Hypothesis": "Determines whether a character is a letter according to {@linkplain Character#isLetter(char)"}
{"SampleId": 19726, "Origin": "Getter Parameter Value for statementdate", "Reference": "Getter Parameter Value for Statement date", "Hypothesis": "Getter Parameter Value for statementDate"}
{"SampleId": 2049256, "Origin": "Sets the timeline on this fake player, which notifies listeners with the changed timeline and\nthe given timeline change reason.", "Reference": "Sets the timeline on this fake player, which notifies listeners with the changed timeline.", "Hypothesis": "Sets the timeline on this fake player, which notifies listeners with the changed timeline and the given prepared status."}
{"SampleId": 2913690, "Origin": "Obtains an instance from the specified unique name.", "Reference": "Obtains an instance from the specified name.", "Hypothesis": "Obtains an instance from the specified name."}
{"SampleId": 5459556, "Origin": "This method has no effect if the package is already exported to the\ngiven module.", "Reference": "This method has no effect if the package is already exported (or\nopen) to the given module.", "Hypothesis": "This method has no effect if the package is already exported to the given module and is not open."}
{"SampleId": 2382772, "Origin": "If the string argument is a configuration short-cut, then the short-cut is parsed and used to configure the returned Titan graph.", "Reference": "If the string argument is a configuration short-cut, then the short-cut is parsed and used to configure the returned JanusGraph graph.", "Hypothesis": "If the string argument is a configuration short-cut, then the short-cut is parsed and used to configure the returned Janus graph."}
{"SampleId": 2846168, "Origin": "Resolve host part of the given URI to the bottom A-Record or the latest available CNAME", "Reference": "Resolve host name to the bottom A-Record or the latest available CNAME", "Hypothesis": "Resolve host part of the given URI to the bottom A-Record or the latest available CNAME for eureka server."}
{"SampleId": 3380829, "Origin": "SemaphoreBasedRateLimiter is totally blocking by it's nature.", "Reference": "Semaphores are totally blocking by it's nature.", "Hypothesis": "SemaphoreBasedRateLimiter is totally blocking by it's nature. Reserving permissions is not supported in the spemaphore based implementation."}
{"SampleId": 4404115, "Origin": "IMPORTANT:Workers should set their client side socket timeout\nto at least 70 seconds (10 seconds higher than the maximum time\nservice may hold the poll request).", "Reference": "Workers should set their client side socket timeout to at\nleast 70 seconds (10 seconds higher than the maximum time service may\nhold the poll request).", "Hypothesis": "Workers should set their client side socket timeout to at least 70 seconds (10 seconds higher than the maximum time service may hold the poll request)."}
{"SampleId": 4479426, "Origin": "Sets the {@link IpRange} which determines the IP ranges that are allowed to use the SAS.", "Reference": "Sets the {@link SasIpRange} which determines the IP ranges that are allowed to use the SAS.", "Hypothesis": "Sets the {@link SasIpRange} which determines the IP ranges that are allowed to use the SAS."}
{"SampleId": 1311535, "Origin": "Scenario successful connection to the back end service via basic auth.", "Reference": "Scenario successful connection to the back end API via basic auth.", "Hypothesis": "Test successful connection to the back end service via basic auth."}
{"SampleId": 3677409, "Origin": "A {@code DateTimeAccessor} represents some form of date and time information.", "Reference": "A {@code TemporalAccessor} represents some form of date and time information.", "Hypothesis": "A {@code TemporalAccessor} represents some form of date and time information. This method attempts to return an {@code OffsetTime} object from the given {@code TemporalAccessor}. If it's already an {@code OffsetTime}, it will simply return itself; otherwise, it parses the local time and zone offset from the accessor and constructs a new {@code OffsetTime} object. An exception is thrown if the parsing fails due to incorrect input format."}
{"SampleId": 6406797, "Origin": "Receive a message as a String.", "Reference": "Receive a message as a String with the default Charset.", "Hypothesis": "Receive a deprecated message as a String."}
{"SampleId": 2912975, "Origin": "Security attributes, provide the ability to associate arbitrary information\nwith a security contract specification in a key-value map.", "Reference": "Attributes provide the ability to associate arbitrary information\nwith a security contract specification in a key-value map.", "Hypothesis": "Attributes, provide the ability to associate arbitrary information with a security contract specification in a key-value map."}
{"SampleId": 2102471, "Origin": "Creates an OSM turn relation out of an unspecified OSM relation", "Reference": "Creates turn relations out of an unspecified OSM relation", "Hypothesis": "Creates an OSM turn relation out of a specified OSM relation"}
{"SampleId": 3833338, "Origin": "When the config has been successfully retrieved it must be put in the cache.", "Reference": "When the config has been successfully retrieved it must be updated in cache.", "Hypothesis": "When the config is successfully retrieved, it must be put in the cache."}
{"SampleId": 432139, "Origin": "Starts zookeeper up on the configured port.", "Reference": "Starts zookeeper up on an ephemeral port.", "Hypothesis": "Starts zookeeper up on the configured port, and adds a cleanup action for shutting down network when needed."}
{"SampleId": 4618281, "Origin": "Removes a variable scope from the stack.", "Reference": "Removes and returns the current variable scope.", "Hypothesis": "Removes a variable scope from the stack."}
{"SampleId": 3889093, "Origin": "Gets dimensions based on relationships and attributes from {@link EntityProjection}.", "Reference": "Gets dimensions except time dimensions based on relationships and attributes from {@link EntityProjection}.", "Hypothesis": "Gets dimensions based on relationships and attributes from {@link EntityProjection} that are not TimeDimensions."}
{"SampleId": 5323558, "Origin": "Retrieve the {@code ExchangeResult} for the given \"request-id\" header value.", "Reference": "Retrieve the {@link Info} for the given \"request-id\" header value.", "Hypothesis": "Retrieve the {@code Info} for the given \"request-id\" header value."}
{"SampleId": 5452333, "Origin": "Returns the {@code Platform} of the given OS name specified\nin the {@code ModuleTarget} attribute.", "Reference": "Returns the {@code Platform} derived from the target platform\nin the {@code ModuleTarget} attribute.", "Hypothesis": "Returns the {@code Platform} of the given OS name specified in the {@code targetPlatform}."}
{"SampleId": 4807858, "Origin": "Add a system classpath element.", "Reference": "Add a system classpath entry.", "Hypothesis": "Add a system classpath entry."}
{"SampleId": 2847871, "Origin": "Can get a bean for Script Load Balancer.", "Reference": "Can get a bean for Script Cluster Selector.", "Hypothesis": "Can get a bean for Script Cluster Selector."}
{"SampleId": 5629906, "Origin": "Sets the preference.", "Reference": "Set the preference.", "Hypothesis": "Sets the preference in a builder."}
{"SampleId": 1612569, "Origin": "Checks that semicolon is in empty for initializer.", "Reference": "Checks that semicolon is in empty for initializer or condition.", "Hypothesis": "Checks that semicolon is in empty for initializer or condition."}
{"SampleId": 2544540, "Origin": "Pre-multiply the rotation transformation of the given {@link Quaterniond} to this matrix while using (ox, oy, oz)\nas the rotation origin.", "Reference": "Pre-multiply the rotation transformation of the given {@link Quaterniondc} to this matrix while using (ox, oy, oz)\nas the rotation origin.", "Hypothesis": "Pre-multiply the rotation transformation of the given {@link Quaterniondc} to this matrix while using (ox, oy, oz) as the rotation origin."}
{"SampleId": 4396573, "Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "Hypothesis": "Returns a string representation of this object; useful for testing and debugging with sensitive data redacted."}
{"SampleId": 1968873, "Origin": "Cleans the sequences in this schema.", "Reference": "Cleans the objects of these types in this schema.", "Hypothesis": "Cleans the specified objects in this schema according to their types."}
{"SampleId": 2911558, "Origin": "The supplied function is invoked for each market data name in this sensitivities.", "Reference": "The supplied function is invoked for each parameter metadata in this sensitivities.", "Hypothesis": "The supplied function is invoked for each CurrencyParameterSensitivity in this CurveSensitivities, modifying the parameter metadata accordingly."}
{"SampleId": 3808327, "Origin": "Applies an action to this value, if this option is defined, otherwise does nothing.", "Reference": "Applies an action to this value if this is defined, otherwise nothing happens.", "Hypothesis": "Applies an action to this value if this option is defined, otherwise does nothing."}
{"SampleId": 616014, "Origin": "Returns builtin the operator table for this environment.", "Reference": "Returns builtin the operator table and external the operator for this environment.", "Hypothesis": "Returns builtin the operator table for this environment using a FunctionCatalogOperatorTable and FlinkSqlOperatorTable."}
{"SampleId": 616670, "Origin": "The algorithm looks for requested table\nin following paths in that order:", "Reference": "The algorithm looks for requested table\nin the following paths in that order:", "Hypothesis": "The algorithm looks for requested table in following paths in that order:"}
{"SampleId": 2426710, "Origin": "Return a scalar {@code Codec} for the given range.", "Reference": "Return a scalar {@code Encodec} for the given range.", "Hypothesis": "Return a scalar {@code Encodec} for the given range."}
{"SampleId": 2450049, "Origin": "Chosen bits are [8, 6, 7]", "Reference": "Chosen bits are [11, 6, 4]", "Hypothesis": "Chosen bits are [10, 6, 7]"}
{"SampleId": 2628797, "Origin": "Upsert the blob metadata document in the CosmosDB collection, retrying as necessary.", "Reference": "Upsert the blob metadata document in the CosmosDB collection.", "Hypothesis": "Upserts the blob metadata document in the CosmosDB collection using asyncDocumentClient and retrying if necessary."}
{"SampleId": 3083175, "Origin": "Use {@link HostAccessPolicy#EXPLICIT} or\n{@link HostAccessPolicy#ALL}.", "Reference": "Use {@link HostAccess#EXPLICIT} or\n{@link HostAccess#ALL}.", "Hypothesis": "Use {@link HostAccess#EXPLICIT} or {@link HostAccess#ALL}."}
{"SampleId": 116640, "Origin": "Deletes a single document from the Solr server.", "Reference": "Deletes a single document from the Solr client.", "Hypothesis": "Deletes a single document from the Solr client."}
{"SampleId": 5455407, "Origin": "Returns the long value if this primitive value is of type long.", "Reference": "Returns the long value if this primitive value is of size 8", "Hypothesis": "Returns the long value if this primitive value is of type long or size()."}
{"SampleId": 3134660, "Origin": "To add/remove/change points, you must call setPoints again.", "Reference": "To remove/change points, you must call setPoints again.", "Hypothesis": "To add/remove/change points, you must call setPoints again."}
{"SampleId": 1198, "Origin": "This method returns a URL for a cover query for the Spotify API.", "Reference": "This method returns a URL for a cover query for the", "Hypothesis": "This method returns a URL for a cover query using the updated Spotify API format based on an album and artist information."}
{"SampleId": 5630797, "Origin": "Gets the warningId.", "Reference": "Gets the message.", "Hypothesis": "Gets the message."}
{"SampleId": 2327543, "Origin": "Generates a random transaction.", "Reference": "Generates a transaction.", "Hypothesis": "Generates a random transaction"}
{"SampleId": 2217842, "Origin": "Test of var method, of class LogisticDistribution.", "Reference": "Test of variance method, of class LogisticDistribution.", "Hypothesis": "Test of variance method, of class LogisticDistribution."}
{"SampleId": 732638, "Origin": "Returns true if field isAcid is set (has been assigned a value) and false otherwise", "Reference": "Returns true if field isTransactional is set (has been assigned a value) and false otherwise", "Hypothesis": "Returns true if field isTransactional is set (has been assigned a value) and false otherwise"}
{"SampleId": 2700521, "Origin": "Get Bewegungsdatum.", "Reference": "Get Inventurdatum.", "Hypothesis": "Get Inventariedatum."}
{"SampleId": 3732345, "Origin": "outputs the simple name of the type", "Reference": "Outputs the simple name of the type.", "Hypothesis": "Formats the simple name of a type by iterating through a string tokenizer and appending tokens without their prefixes or suffixes if they contain no dots."}
{"SampleId": 3629308, "Origin": "Returns an immutable set containing four elements.", "Reference": "Returns an unmodifiable set containing four elements.", "Hypothesis": "Returns an unmodifiable set containing four elements."}
{"SampleId": 6285365, "Origin": "Checks to see if the current sequence number should be send to the\nchannel, or whether the channel must wait for a new sequence number to\narrive.", "Reference": "Checks to see if the current sequence should be send to the channel, or\nwhether the channel must wait for a new sequence number to arrive.", "Hypothesis": "Checks if the current sequence number should be sent to the channel, or whether the channel must wait for a new sequence number to arrive."}
{"SampleId": 4933785, "Origin": "Add the opcodes for numeric operations to a context.", "Reference": "Add the opcodes for numeric operations to a context, do not use protected\ndivision.", "Hypothesis": "Add the opcodes for numeric operations to a context with default option false."}
{"SampleId": 4476799, "Origin": "The {@link KeyCreateOptions} is required.", "Reference": "The {@link CreateKeyOptions} is required.", "Hypothesis": "The {@link CreateKeyOptions} is required."}
{"SampleId": 2789547, "Origin": "Creates an introspected table implementation that is only usable for validation (i.e.", "Reference": "Creates an introspected table implementation that is only usable for validation .", "Hypothesis": "Creates an introspected table implementation that is only usable for validation (i.e."}
{"SampleId": 118324, "Origin": "Gets the edit group configuration resource type.", "Reference": "Gets the element view configuration resource type.", "Hypothesis": "Gets the element view configuration resource type."}
{"SampleId": 3323852, "Origin": "***** Property SYSAPP *****", "Reference": "***** Property SYSAPPDATA *****", "Hypothesis": "Property SYSAPPDATA *****"}
{"SampleId": 3512233, "Origin": "Gets the {@link Value.Mutable} for the {@link ParrotVariant} of this\n{@link Parrot}.", "Reference": "Gets the {@link Value.Mutable} for the {@link ParrotType} of this\n{@link Parrot}.", "Hypothesis": "Gets the {@link Value.Mutable} for the {@link ParrotType} of this {@link Parrot}."}
{"SampleId": 3965088, "Origin": "Return all elements until specified time period has elapsed", "Reference": "Skip all elements until specified time period has passed", "Hypothesis": "Drop all elements until specified time period has elapsed"}
{"SampleId": 4900011, "Origin": "Collect capabilities of an index.", "Reference": "Collect the field capabilities for an index.", "Hypothesis": "Collect capabilities of an index with specified searchable and aggregatable settings, and update meta information."}
{"SampleId": 4477713, "Origin": "Tests assert that the setting can be deleted after unlock the setting.", "Reference": "Tests assert that the setting can be deleted after clear read-only of the setting.", "Hypothesis": "Tests assert that the setting can be deleted after clearing the read-only setting."}
{"SampleId": 5270019, "Origin": "Send request to gracefully stop to the process (via ipc shared memory)", "Reference": "Send request to quickly stop to the process (via ipc shared memory)", "Hypothesis": "Send request to hard stop to the process (via ipc shared memory)"}
{"SampleId": 471387, "Origin": "The option is a:\n type.", "Reference": "The option is a:", "Hypothesis": "The option is a: AdvancedCxfRsEndpointConsumerBuilder."}
{"SampleId": 2357574, "Origin": "Inspects the value of a K entry and stores all\nmeaningful StructureItem objects that are encountered.", "Reference": "Inspects the value of the K entry of a structure element\nand stores all meaningful StructureItem objects that are encountered.", "Hypothesis": "Inspects the value of a K entry and stores all meaningful StructureItem objects that are encountered."}
{"SampleId": 125266, "Origin": "Returns the console script.", "Reference": "Returns the web server script.", "Hypothesis": "Returns the web server script."}
{"SampleId": 3467767, "Origin": "Merges this frame with the given frame (case of a RET instruction).", "Reference": "Merges the given frame into this frame (case of a subroutine).", "Hypothesis": "Merges this frame with the given frame (case of a RET instruction)."}
{"SampleId": 4390906, "Origin": "You cannot use  to\nrestore a table with the same name as an existing table in an Amazon", "Reference": "You cannot use  to restore a\ntable with the same name as an existing table in an Amazon Redshift\ncluster.", "Hypothesis": "The method is used to restore a table with the same name as an existing table in Amazon DynamoDB."}
{"SampleId": 2142713, "Origin": "Sets an attribute on the given element.", "Reference": "Sets a property on the given element.", "Hypothesis": "Sets an attribute on the given element using setPropertyString method."}
{"SampleId": 5240872, "Origin": "Device-General Information reports have 2 key value pairs for every\nattribute.", "Reference": "Device-General Information reports generally have 2 key value pairs for\nevery blackboard attribute.", "Hypothesis": "Device-General Information reports have 2 key value pairs for every attribute."}
{"SampleId": 3083169, "Origin": "Use {@link HostAccess#EXPLICIT} or {@link HostAccess#PUBLIC}.", "Reference": "Use {@link HostAccessPolicy#EXPLICIT} or\n{@link HostAccessPolicy#PUBLIC}.", "Hypothesis": "Use {@link HostAccessPolicy#EXPLICIT} or {@link HostAccessPolicy#PUBLIC}."}
{"SampleId": 4045722, "Origin": "Indicates whether an optional content group is enabled.", "Reference": "Indicates whether at least one optional content group with this name is enabled.", "Hypothesis": "Indicates whether an optional content group with the specified group name is enabled by checking its status in the list of optional content groups."}
{"SampleId": 2336160, "Origin": "Only included for SyncClient", "Reference": "Only avaialable for SyncClient", "Hypothesis": "Not Checksum. Only available for SyncClient"}
{"SampleId": 1878754, "Origin": "Linear algebraic matrix multiplication, aT * B * c", "Reference": "Matrix multiplication, v1T * m2 * v3", "Hypothesis": "Calculates the product of a transposed matrix (aT) and two matrices B multiplied by a vector c, where v1 corresponds to the transposed matrix, m2 is the second matrix, and v3 represents the vector. The result is returned as a double value."}
{"SampleId": 5049790, "Origin": "Returns a default credential for the application.", "Reference": "Returns the Application Default Credentials.", "Hypothesis": "Returns a default credential for the application using the specified transport and JSON factory."}
{"SampleId": 2127623, "Origin": "Returns value of network address cache ttl property.", "Reference": "Returns value of network address cache ttl property if not Android environment.", "Hypothesis": "Returns value of network address cache ttl property for non-Android platforms."}
{"SampleId": 6273081, "Origin": "Propagate CDI context across completion stages.", "Reference": "Propagate CDI context to a completion stage.", "Hypothesis": "Propagate CDI context across completion stages, ensuring a bean is only lazily enlisted when CDI context is propagated."}
{"SampleId": 2395072, "Origin": "This first tries to use {@code sun.misc.Unsafe} to load a class.", "Reference": "This first tries to use {@code java.lang.invoke.MethodHandle} to load a class.", "Hypothesis": "This first tries to use {@code sun.misc.Unsafe} to load a class with an additional parameter, neighbor."}
{"SampleId": 4473534, "Origin": "{@codesnippet com.azure.security.keyvault.certificates.CertificateClient.getCertificate#CertificateProperties}", "Reference": "{@codesnippet com.azure.security.keyvault.certificates.CertificateClient.getCertificateOperation#String}", "Hypothesis": "@codesnippet com.azure.security.keyvault.certificates.CertificateClient.getCertificateOperation#String"}
{"SampleId": 754550, "Origin": "if last-modified and date are defined, freshness lifetime is coefficient*(date-lastModified),\nelse freshness lifetime is defaultLifetime", "Reference": "The algorithm is as follows:\nif last-modified and date are defined, freshness lifetime is coefficient*(date-lastModified),\nelse freshness lifetime is defaultLifetime", "Hypothesis": "if last-modified and date are defined, freshness lifetime is coefficient*(date-lastModified), else freshness lifetime is defaultLifetime"}
{"SampleId": 5458562, "Origin": "Returns the provider's public no-arg constructor.", "Reference": "Returns the public no-arg constructor of a class.", "Hypothesis": "Returns the provider's public constructor."}
{"SampleId": 1630816, "Origin": "Fork the {@code routine} to a separate JVM process and return the result\nlocally.", "Reference": "Fork the {@code routine} to a separate JVM process and block until the\nresult can be returned locally.", "Hypothesis": "Fork the {@code routine} to a separate JVM process and return the result locally using callback mechanism."}
{"SampleId": 6046932, "Origin": "Returns the entry with the primary key or throws a {@link com.liferay.chat.NoSuchEntryException} if it could not be found.", "Reference": "Returns the entry with the primary key or throws a {@link NoSuchEntryException} if it could not be found.", "Hypothesis": "Returns the entry with the primary key or throws a {@link com.liferay.chat.NoSuchEntryException} if it could not be found."}
{"SampleId": 3241866, "Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}", "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveFromRangeEnd }{@code >}}", "Hypothesis": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveFromRangeEnd }{@code >}}."}
{"SampleId": 5219199, "Origin": "Get condition values.", "Reference": "Get values.", "Hypothesis": "Get values from given parameters list."}
{"SampleId": 4469817, "Origin": "In case of\nfailure the {@link Flux} will error.", "Reference": "In case of\nfailure the {@link CosmosContinuablePagedFlux} will error.", "Hypothesis": "In case of failure, the {@link CosmosContinuablePagedFlux} will error."}
{"SampleId": 5367222, "Origin": "Build a Map with projection field names and \"path\" field names\nand adds it to the typesFieldMaps Map.", "Reference": "Build a Map with field names and \"path\" field names\nand adds it to the typesFieldMaps Map.", "Hypothesis": "Build a Map with projection field names and \"path\" field names and adds it to the typesFieldMaps Map."}
{"SampleId": 237170, "Origin": "Tests the {@link FileSystemMaster#delete(AlluxioURI, DeleteOptions)} method with a\nnon-empty directory.", "Reference": "Tests the {@link FileSystemMaster#delete(AlluxioURI, DeleteContext)} method with a\nnon-empty directory.", "Hypothesis": "Tests the {@link FileSystemMaster#delete(AlluxioURI, DeleteContext)} method with a non-empty directory."}
{"SampleId": 5219447, "Origin": "Get JDBC driver class name.", "Reference": "Get JDBC driver URL recognizer.", "Hypothesis": "Get JDBC driver URL recognizer from the given URL."}
{"SampleId": 3653386, "Origin": "Returns true if the session is closed within the past hour of calling this function.", "Reference": "Checks if the session closed some time in the last one hour from calling this function.", "Hypothesis": "Returns true if the session is closed within an hour of calling this function."}
{"SampleId": 242261, "Origin": "\"AppenderName\" : \"MASTER_LOG\".", "Reference": "\"ProcessType\" : \"MASTER\".", "Hypothesis": "ProcessType : \"MASTER_LOG"}
{"SampleId": 4985720, "Origin": "The formally correct mechanism of disconnecting the returned {@link FCPPluginClient} is to\nnull out the strong reference to it.", "Reference": "The formally correct mechanism of disconnecting the returned {@link FCPPluginConnection}\nis to null out the strong reference to it.", "Hypothesis": "The formally correct mechanism of disconnecting the returned {@link FCPPluginConnection} is to null out the strong reference to it."}
{"SampleId": 2672207, "Origin": "Parse card number as int (support base [123] and alternative numbers\n[123b]).", "Reference": "Parse card number as int (support base [123] and alternative numbers\n[123b], [U123]).", "Hypothesis": "Parse card number as int (support base [123] and alternative numbers [U123], [123b])."}
{"SampleId": 3933363, "Origin": "The input file must be a list of tab-separated verb-POS pairs, one verb\nper line.", "Reference": "The input file must be a list of whitespace-separated verb-lemma-POS triples, one verb\nform per line.", "Hypothesis": "The input file must be a list of tab-separated verb-POS pairs, one verb per line."}
{"SampleId": 4595130, "Origin": "Construct JsonDataSource from the underneath byte channel which is associated with the entity struct.", "Reference": "Construct JsonDataSource from the underneath byte channel which is associated with the entity object.", "Hypothesis": "Construct JsonDataSource from the underneath byte channel which is associated with the entity object."}
{"SampleId": 1143805, "Origin": "returns the number of 64 bit words it would take to hold numBits", "Reference": "Returns the number of 64 bit words it would take to hold numBits", "Hypothesis": "Calculates the number of 64 bit words required to hold numBits, ensuring that numBits is within valid range."}
{"SampleId": 3629343, "Origin": "If the mapped keys\nmay have duplicates, use {@link #toMap(Function, Function, BinaryOperator)}\ninstead.", "Reference": "If the mapped keys\nmight have duplicates, use {@link #toMap(Function, Function, BinaryOperator)}\ninstead.", "Hypothesis": "If the mapped keys may have duplicates, use {@link #toMap(Function, Function, BinaryOperator)} instead."}
{"SampleId": 6174223, "Origin": "Creates a DBObject from this Shape", "Reference": "Creates a Document from this Shape", "Hypothesis": "Creates a Document from this Shape"}
{"SampleId": 6104865, "Origin": "Unsafe version of {@link #standingTrackedDevicePose}.", "Reference": "Unsafe version of {@link #trackedDevicePose}.", "Hypothesis": "Unsafe version of {@link #trackedDevicePose}."}
{"SampleId": 3389053, "Origin": "Raises the event's class' event on the current context.", "Reference": "Raises the event's class' event on the given context.", "Hypothesis": "Raises the event's class' event on the current context by iterating through observers and notifying each one of the event."}
{"SampleId": 1676519, "Origin": "It's configured to be aligned to  block, hence, it's moved\n     to the right:", "Reference": "It's configured to be aligned to {@code 'blih'} block, hence, it's moved\nto the right:", "Hypothesis": "It's configured to be aligned with block, hence, it's moved to the right."}
{"SampleId": 664802, "Origin": "Throw a , because it doesn't know how to\n      unwrap the object.", "Reference": "Throw a {@link TemplateException}, because it doesn't know how to\n      unwrap the object.", "Hypothesis": "Throw a , because it doesn't know how to unwrap the object."}
{"SampleId": 5176848, "Origin": "Getter for {@link #exposeOnlyRequestedHeader}", "Reference": "Getter for {@link #allowOnlyRequestedHeader}", "Hypothesis": "Getter for {@link #allowOnlyRequestedHeader"}
{"SampleId": 3935422, "Origin": "If true, applying this lexical relation to this word creates a sentence which is negated by the original sentence", "Reference": "If true, applying this lexical relation to this word creates a sentence which is entailed by the original sentence,", "Hypothesis": "If true, applying this lexical relation to this word creates a sentence which maintains entailment with the original sentence."}
{"SampleId": 2911709, "Origin": "The curves themselves are provided in {@link ScenarioMarketData}\nusing {@link CurveId} as the identifier.", "Reference": "The curves themselves are provided in {@link ScenarioMarketData}\nusing {@link RatesCurveId} as the identifier.", "Hypothesis": "The curves themselves are provided in {@link ScenarioMarketData} using {@link RatesCurveId} as the identifier."}
{"SampleId": 2916988, "Origin": "Suitable surface metadata can be created using\n{@link Surfaces#swaptionBlackExpiryTenor(String, DayCount, FixedIborSwapConvention)}.", "Reference": "Suitable surface metadata can be created using\n{@link Surfaces#swaptionBlackExpiryTenor(String, DayCount)}.", "Hypothesis": "Suitable surface metadata can be created using {@link Surfaces#swaptionBlackExpiryTenor(String, DayCount, FixedIborSwapConvention)}."}
{"SampleId": 4386726, "Origin": "Range does not align The byte range value in the request\ndoes not align with the part size specified in the corresponding\ninitiate request.", "Reference": "Range does not alignThe byte range value in the request does\nnot align with the part size specified in the corresponding initiate\nrequest.", "Hypothesis": "The byte range value in the request does not align with the part size specified in the corresponding initiate request."}
{"SampleId": 4624035, "Origin": "Converts the given item into a long value.", "Reference": "Converts the given value to a long primitive.", "Hypothesis": "Converts the given byte[] value into a long value."}
{"SampleId": 4471181, "Origin": "Polling operation to poll on create delete certificate operation status.", "Reference": "Polling operation to poll on create recover certificate operation status.", "Hypothesis": "Polling operation to poll on create/delete certificate operation status for different HTTP codes."}
{"SampleId": 6104724, "Origin": "Takes SPIR-V as a sequence of 32-bit words, validates it, then compiles to GLSL.", "Reference": "Takes SPIR-V as a sequence of 32-bit words, validates it, then creates the internal compiler for translating to GLSL and performing reflection.", "Hypothesis": "Takes SPIR-V as a sequence of 32-bit words, initializes the compiler for GLSL compilation."}
{"SampleId": 6048619, "Origin": "Returns the module with the primary key or throws a {@link com.liferay.marketplace.NoSuchModuleException} if it could not be found.", "Reference": "Returns the module with the primary key or throws a {@link NoSuchModuleException} if it could not be found.", "Hypothesis": "Returns the module with the primary key or throws a {@link com.liferay.marketplace.NoSuchModuleException} if it could not be found."}
{"SampleId": 1401713, "Origin": "In that case, since\nthere is no FuncallExpression to evaluate, stack trace mechanism cannot record this call.", "Reference": "CallExpression to evaluate, stack trace mechanism cannot record this call.", "Hypothesis": "In this case, since there is no FuncallExpression to evaluate, stack trace mechanism cannot record this call."}
{"SampleId": 4476787, "Origin": "The {@link EcKeyCreateOptions#getKeyType() keyType} indicates the type of key to create.", "Reference": "The {@link CreateEcKeyOptions#getKeyType() keyType} indicates the type of key to create.", "Hypothesis": "The {@link CreateEcKeyOptions#getKeyType() keyType} indicates the type of key to create."}
{"SampleId": 3239590, "Origin": "(Just an alias/synonym for getJaxbElement())", "Reference": "(An alias/synonym for older getJaxbElement(), but now throws exception)", "Hypothesis": "Get the contents as a JAXB element. This method is implemented for lazy unmarshalling and throws Docx4JException if any error occurs during unmarshalling."}
{"SampleId": 2333918, "Origin": "Returns the user icon image with the given identifier, or null if invalid.", "Reference": "Returns the user icon image with the given identifier,\nor the default image if invalid.", "Hypothesis": "Returns the user icon image with the given identifier or null if invalid."}
{"SampleId": 4386712, "Origin": "For more\ninformation about the vault locking process,", "Reference": "For more information about the\nvault locking process, Amazon Glacier Vault Lock.", "Hypothesis": "The comment should be as follows: \n\n\"Complete a vault lock operation by providing a CompleteVaultLockRequest and receive a response containing the result of the locking process."}
{"SampleId": 2774816, "Origin": "Returns true if the button is active and clickable.", "Reference": "Returns true if the %type% is active and clickable.", "Hypothesis": "If set, user can tap %type% to cause action. Returns true if the button is active and clickable."}
{"SampleId": 3760873, "Origin": "Constructor that registers all players based on the given configuration,\nframe and registry.", "Reference": "Registers all players based on the given configuration, frame and\nregistry.", "Hypothesis": "Initialize() constructor that registers all players based on the given configuration, frame and registry with added InterruptedException handling."}
{"SampleId": 4819627, "Origin": "Method wasStarted returns true if this job was started", "Reference": "Method isStarted returns true if this underlying job has started running", "Hypothesis": "Method wasStarted returns true if this job was started and running"}
{"SampleId": 3676603, "Origin": "This month-day will be passed to the formatter\n{@link DateTimeFormatter#print(TemporalAccessor) print method}.", "Reference": "This month-day will be passed to the formatter\n{@link DateTimeFormatter#format(TemporalAccessor) print method}.", "Hypothesis": "This month-day will be passed to the formatter {@link DateTimeFormatter#format(TemporalAccessor) format method}."}
{"SampleId": 4907596, "Origin": "Execute an {@link Action} locally, returning that {@link Task} used to track it, and linking an {@link TaskListener}.", "Reference": "Execute an {@link ActionType} locally, returning that {@link Task} used to track it, and linking an {@link TaskListener}.", "Hypothesis": "Execute an {@link ActionType} locally, returning that {@link Task} used to track it, and linking an {@link TaskListener}."}
{"SampleId": 5462066, "Origin": "The specified uses maps a service type name to the modules\nusing the service type and that may or may not be present\nthe given modules.", "Reference": "The specified services maps a service type name to the modules\nusing the service type which may be empty if no observable module uses\nthat service.", "Hypothesis": "The provided uses map a service type name to the modules using that service type and may or may not be present in the given set of modules."}
{"SampleId": 438213, "Origin": "Get the DataService for the clientId", "Reference": "Get the anonymous subclass of GrpcDataService for the clientId", "Hypothesis": "Get the GrpcDataService for the clientId"}
{"SampleId": 5588758, "Origin": "Adds a new tab.", "Reference": "Adds a new tab at the end.", "Hypothesis": "Adds a new tab at the end of the list."}
{"SampleId": 3239398, "Origin": "Sets the value of the descrption property.", "Reference": "Sets the value of the description property.", "Hypothesis": "Sets the value of the description property."}
{"SampleId": 2911798, "Origin": "The meta-property for the {@code weekendDays} property.", "Reference": "The meta-property for the {@code startYear} property.", "Hypothesis": "The meta-property for the {@code startYear} property."}
{"SampleId": 2312198, "Origin": "The extra code is defined in the imagej.legacy.patches package, as\ndescribed in the documentation for {@link #insertMethod(String, String)}.", "Reference": "The extra code is defined in the imagej.legacy.patches package, as\ndescribed in the documentation for {@link #insertNewMethod(String, String)}.", "Hypothesis": "The extra code is defined in the imagej.legacy.patches package, as described in the documentation for {@link #insertAtBottomOfMethod(String, String)}."}
{"SampleId": 2685192, "Origin": "Returns the name of the parent skill from the Locale file", "Reference": "Returns the name of the parent skill from the LocaleManager file", "Hypothesis": "Returns the name of the parent skill from the LocaleManager file"}
{"SampleId": 4003564, "Origin": "Configure the distribution options to use.", "Reference": "Configures which distribution options to use.", "Hypothesis": "Configure the distribution options to use."}
{"SampleId": 1141596, "Origin": "Set the values for some metadata keys on a collection alias.", "Reference": "Set the values for some properties keys on a collection alias.", "Hypothesis": "Set the values for some properties keys on a collection alias."}
{"SampleId": 5458823, "Origin": "Integers 0 ... n.", "Reference": "Integers 0 ... n - 1.", "Hypothesis": "Integers 0...n are added."}
{"SampleId": 570080, "Origin": "Checks whether two filenames are equal, optionally normalizing and providing\ncontrol over the case-sensitivity.", "Reference": "Checks whether two fileNames are equal, optionally normalizing and providing\ncontrol over the case-sensitivity.", "Hypothesis": "Checks whether two filenames are equal, optionally normalizing and providing control over the case-sensitivity."}
{"SampleId": 6043571, "Origin": "and repositoryId = ?.", "Reference": "and parentFolderId = ?.", "Hypothesis": "fetch by repositoryId = ? and parentFolderId = ?"}
{"SampleId": 4854487, "Origin": "Returns the timestamp when the result was created.", "Reference": "Returns the timestamp when the result was created as a formatted String.", "Hypothesis": "Returns a formatted timestamp as a string based on the current system time."}
{"SampleId": 3114375, "Origin": "Put buffer which is not used any more back to the pool.", "Reference": "Put buffer which is not used any more back to the pool or frees direct memory if pool is full.", "Hypothesis": "Release the buffer back to the pool if it is not used any more."}
{"SampleId": 2624528, "Origin": "Decorates {@link Service}s under the specified directory.", "Reference": "Decorates {@link HttpService}s under the specified directory.", "Hypothesis": "Decorates {@link HttpService}s under the specified directory."}
{"SampleId": 2107670, "Origin": "Use the\n{@linkplain #addPickup(Shipment, TimeWindow)} instead.", "Reference": "Use the\n{@linkplain #addPickup(ShipmentJob, TimeWindow)} instead.", "Hypothesis": "Use the {@linkplain #addPickup(ShipmentJob, TimeWindow)} instead."}
{"SampleId": 4592572, "Origin": "Checks if the path is a project repo.", "Reference": "Checks if the path is a project.", "Hypothesis": "Checks if the path is a Ballerina project."}
{"SampleId": 2535873, "Origin": "Extract the result of given method invocation from the array's elements under test into a new array, this new array\nbecoming the array under test.", "Reference": "Extract the result of given method invocation from the array's elements under test into a list, this list becoming\nthe object under test.", "Hypothesis": "Extract the result of given method invocation from the array's elements under test into a new array, this new array becoming the array under test."}
{"SampleId": 3242022, "Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}", "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveFromRangeEnd }{@code >}}", "Hypothesis": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveFromRangeEnd }{@code >"}
{"SampleId": 726515, "Origin": "Generates the name of the parameter token that should be populated with\nthe value of the given attribute.", "Reference": "Generates the name of the parameter token that should be populated with\nthe given string.", "Hypothesis": "Generates the canonicalized form of the given string by converting it to uppercase and adding the prefix."}
{"SampleId": 2991861, "Origin": "{@link WebConstants#HYPERLINK_VIEW}: a lightweight alternative to returning the", "Reference": "{@link WebConstants#URI_VIEW}: a lightweight alternative to returning the", "Hypothesis": "Converts an Obs object based on the given view type. Handles URI_VIEW and HTML_VIEW cases. The first one returns a ComplexData object with hyperlink information from WebHandlerUtils, while the second one returns an imgtag with the hyperlink as its source attribute. The default case falls through to the parent ImageHandler action."}
{"SampleId": 4245989, "Origin": "Convert to object types, returning null if text is null.", "Reference": "Convert to object types, returning null if text is null or empty.", "Hypothesis": "Convert to object types, returning null if text is empty."}
{"SampleId": 4233617, "Origin": "Execute a requestHandler for the given exception.", "Reference": "Process the given exception.", "Hypothesis": "Execute a request handler for the given exception and return its result"}
{"SampleId": 4807862, "Origin": "Add a classpath element.", "Reference": "Add a classpath entry.", "Hypothesis": "Add a classpath entry."}
{"SampleId": 2568447, "Origin": "Gets the value of the 'RowKey' field.", "Reference": "Gets the value of the 'rowKey' field.", "Hypothesis": "Gets the value of the 'rowKey' field."}
{"SampleId": 367494, "Origin": "It may return null if the security is not supported by QR code generator nor\nscanner.", "Reference": "It may return null if the security is not\nsupported by QR code scanner.", "Hypothesis": "It may return null if the security is not supported by QR code scanner."}
{"SampleId": 5459791, "Origin": "Verify that duplicate exported packages are detected.", "Reference": "Verify that duplicate requires are detected.", "Hypothesis": "Verify that duplicate requires transitive static are detected."}
{"SampleId": 5724630, "Origin": "Return a name/value string suitable for sending in a \"Cookie\"\nheader as defined in RFC 2109 for backward compatibility with cookie\nversion 0", "Reference": "Return a name/value string suitable for sending in a {@code \"Cookie\"}\nheader as defined in RFC 2109 for backward compatibility with cookie\nversion 0", "Hypothesis": "Return a name/value string suitable for sending in a \"Cookie\" header as defined in RFC 2109 for backward compatibility with cookie version 0."}
{"SampleId": 232556, "Origin": "Shuts down the managed channel for given key.", "Reference": "Shuts down the managed channel.", "Hypothesis": "Shuts down the managed channel with given timeout duration."}
{"SampleId": 3579668, "Origin": "Fetches the leader index metadata and history UUIDs for leader index shards from the remote cluster.", "Reference": "Fetches the remote cluster state, leader index metadata, and history UUIDs for leader index shards from\nthe remote cluster.", "Hypothesis": "Fetches the leader index metadata and history UUIDs for leader index shards from the remote cluster with option to fetch nodes."}
{"SampleId": 4621765, "Origin": "Compares the specified item.", "Reference": "Compares the specified name.", "Hypothesis": "Compares this QNm object with the specified one."}
{"SampleId": 5322081, "Origin": "Default value is {@code Integer.MAX_VALUE}, meaning that it's non-ordered.", "Reference": "The default value is {@code Ordered.LOWEST_PRECEDENCE}, meaning non-ordered.", "Hypothesis": "The default value is {@code 0}, meaning that it's non-ordered."}
{"SampleId": 3542643, "Origin": "Set the {@link RecordMessageConverter} to use.", "Reference": "Set the {@link MessageConverter} to use.", "Hypothesis": "Set the {@link MessageConverter} to use."}
{"SampleId": 1145258, "Origin": "NOTE: This method is meaningless unless you explicitly provide paths when constructing this instance", "Reference": "NOTE: This method is meaningless in SSLTestConfig.", "Hypothesis": "NOTE: This method is meaningless unless you explicitly provide paths when constructing this instance"}
{"SampleId": 3241610, "Origin": "This is why there is not a set method for the egBlockLevelElts property.", "Reference": "This is why there is not a set method for the content property.", "Hypothesis": "This is why there is not a set method for the content property."}
{"SampleId": 1327151, "Origin": "Returns the primitive management service.", "Reference": "Returns the primitive thread factory.", "Hypothesis": "Returns the thread context factory."}
{"SampleId": 239894, "Origin": "Typically used for RPCs\nat best efforts (e.g., async cache).", "Reference": "This method is typically used for RPCs\nproviding best efforts (e.g., async cache).", "Hypothesis": "Fire and forget a message without waiting for the response. This method is typically used for RPCs at best efforts (e.g., async cache)."}
{"SampleId": 3070027, "Origin": "Returns a sampler, given a rate expressed as a percentage.", "Reference": "Returns a sampler, given a probability expressed as a percentage.", "Hypothesis": "Returns a sampler, given a probability expressed as a percentage."}
{"SampleId": 1459084, "Origin": "Verify that a named subquery exists for each INCLUDE.", "Reference": "Verify that a named subquery of solution set exists for each INCLUDE.", "Hypothesis": "Verify that a named subquery exists for each INCLUDE, considering the AST2BOpContext context while checking."}
