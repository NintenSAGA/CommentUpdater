{"Origin": "Examines the undistorted gray scake input image for squares.", "Reference": "Examines the undistorted gray scale input image for squares.", "NNUpdater": "Transform from undistorted pixel coordinates to distorted with radial pixel coordinates"}
{"Origin": "Save basic clusters.", "Reference": "Save cluster basic configuration.", "NNUpdater": "Classifies a given instance."}
{"Origin": "Configure a sslConfig for the server using the legacy configuration", "Reference": "Configure a SSLConfig.Builder for the server using the legacy configuration", "NNUpdater": "Returns a new server-side {@link SSLEngine} with the current configuration."}
{"Origin": "If the wrapping fails, then null is returned.", "Reference": "If wrapping fails, returns null.", "NNUpdater": "If any input fails, the returned future fails immediately."}
{"Origin": "Test of npara method, of class GeometricDistribution.", "Reference": "Test of length method, of class GeometricDistribution.", "NNUpdater": "Test of geometric method, of class DiscreteDistributions."}
{"Origin": "Bui (2015) ``Cachediff: Fast Random Sampling`` URL", "Reference": "Bui (2015) ``CacheDiff: Fast Random Sampling`` URL", "NNUpdater": "Increase sampling count."}
{"Origin": "If it's successfully completed, {@link BrowserResult#getMediaItems()} will return the search result.", "Reference": "If it's successfully completed, {@link LibraryResult#getMediaItems()} will return the search result.", "NNUpdater": "Otherwise, this will return a {@link ReadWriteEvent} for which {@link ReadWriteEvent#isNull()} returns ."}
{"Origin": "Sets the options.", "Reference": "Set the options.", "NNUpdater": "Sets options."}
{"Origin": "Convenience method to get custom install file", "Reference": "Convenience method to get custom installation script", "NNUpdater": "Test of installItem method (with a valid handle), of class InstallItem."}
{"Origin": "Sets the confidence.", "Reference": "Set the confidence.", "NNUpdater": "This is measured from the bottom, thus equal to {@code 1 - confidence level}."}
{"Origin": "Request an update of the current cluster metadata info, return the current version before the update", "Reference": "Request an update of the current cluster metadata info, return the current updateVersion before the update", "NNUpdater": "Returns the update timestamp."}
{"Origin": "Gets the full path from a full filename, which is the prefix + path.", "Reference": "Gets the full path from a full fileName, which is the prefix + path.", "NNUpdater": "Get the directory that contains the user's NodeBox library directory."}
{"Origin": "Unlinks interior Node p with predecessor trail.", "Reference": "Unlinks interior Node p with predecessor pred.", "NNUpdater": "The same applies whenever you stop CloudTrail logging or delete a trail."}
{"Origin": "Create a new client with the given connection string.", "Reference": "Create a new client with the given client settings.", "NNUpdater": "Create link."}
{"Origin": "The buffer resets after this method is called, so this method should only be called once per BlobDescriptor.", "Reference": "The buffer resets after this method is called, so this method should only be called once per computation.", "NNUpdater": "This method is guaranteed to only be called once."}
{"Origin": "Sets the host's {@link OnBackPressedDispatcherOwner}.", "Reference": "Sets the host's {@link OnBackPressedDispatcher}.", "NNUpdater": "Sets the {@link ControlDispatcher}."}
{"Origin": "Creates a {@link NativeLinkable} using sources compiled by the D compiler.", "Reference": "Creates a {@link NativeLinkableGroup} using sources compiled by the D compiler.", "NNUpdater": "Returns our {@link #getBuildDeps()}, limited to the subset of those which are {@link NativeLinkable}."}
{"Origin": "Sets the CPU status (free or busy).", "Reference": "Sets the CPU status (free or busy since some ms).", "NNUpdater": "Returns whether node childs are loaded or not."}
{"Origin": "Computes the maximum for each pixel across all bands in the {@link Planar} image.", "Reference": "Computes the maximum for each pixel across selected bands in the {@link Planar} image.", "NNUpdater": "Computes the average for each pixel across all bands in the {@link Planar} image."}
{"Origin": "Returns the status annotation descriptor if present of null.", "Reference": "Returns the status annotation descriptor if present or null.", "NNUpdater": "If no such comparator is present, this implementation returns {@code null}."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Closes the Websocket-Connection.", "Reference": "Closes the WebSocket connection.", "NNUpdater": "Closes silently a connection."}
{"Origin": "For example, the period in hours between two times can be calculated using {@code startTime.periodUntil(endTime, HOURS)}.", "Reference": "For example, the period in hours between two times can be calculated using {@code startTime.until(endTime, HOURS)}.", "NNUpdater": "For example, the period in hours between two times can be calculated using {@code startTime.until(endTime, HOURS)}."}
{"Origin": "Converts an array of raw binary data into an array of ascii 0 and 1 character bytes - each byte is a truncated char.", "Reference": "Converts an array of raw binary data into an array of ASCII 0 and 1 character bytes - each byte is a truncated char.", "NNUpdater": "Converts a byte array into a {@link ByteString}."}
{"Origin": "Pauses all downloads.", "Reference": "Pauses downloads.", "NNUpdater": "Signals all downloads to stop."}
{"Origin": "Loads the {@link Class} using the application {@link ArtifactClassLoader}.", "Reference": "Loads the {@link Class} using the test runner {@link ArtifactClassLoader}.", "NNUpdater": "It delegates to {@link ArtifactClassLoaderFactory#createClassLoader(Location, NamespacedImpersonator)}."}
{"Origin": "Convenient way to build a {@code BeamSqlRowType}.", "Reference": "Convenient way to build a {@link Schema}.", "NNUpdater": "Convenient way to build a {@code BeamSqlRowType}."}
{"Origin": "Calculates intersection of the image and the render filter region in the coordinate system relative to image.", "Reference": "Calculates intersection of the image and the render filter region in the coordinate system relative to the image.", "NNUpdater": "Set Bild."}
{"Origin": "Sets the values for the ModuleTarget attribute.", "Reference": "Sets the value for the ModuleTarget attribute.", "NNUpdater": "Updates this module to read the source module."}
{"Origin": "If keys = ``abc1234``, settings with a key equal to ``abc1234`` are returned.", "Reference": "If {@code keyFilter = ``abc1234``}, settings with a key equal to ``abc1234`` are returned.", "NNUpdater": "If keys = ``abc1234``, settings with a key equal to ``abc1234`` are returned."}
{"Origin": "18:43:59 CAUTION: Does NOT recognize values with a timezone information (...[+-Z]...)", "Reference": "CAUTION: Does NOT recognize values with a timezone information (...[+-Z]...)", "NNUpdater": "Operation fails."}
{"Origin": "generic method for untyped messages.", "Reference": "generic method for untyped remoting.", "NNUpdater": "Sets the default annotation for unannotated elements."}
{"Origin": "Sets the additional trade information, defaulted to an empty instance.", "Reference": "Sets the additional information, defaulted to an empty instance.", "NNUpdater": "Gets the trade attributes."}
{"Origin": "or throws a {@link com.liferay.calendar.NoSuchResourceException} if it could not be found.", "Reference": "or throws a {@link NoSuchResourceException} if it could not be found.", "NNUpdater": "Operation fails."}
{"Origin": "Initializes and returns the hashtable of all permissions known in the system.", "Reference": "Initializes and returns the linked hash map of all permissions known in the system.", "NNUpdater": "Initializes system core."}
{"Origin": "Grants the role read permissions on the resource.", "Reference": "Sets the read permission status.", "NNUpdater": "By default, AWS CloudFormation grants permissions to all resource types."}
{"Origin": "Waits during {@code timeout} until text extracted from specified {@code webElement} by {@link", "Reference": "Waits during {@code timeout} until value extracted from specified {@code element} by {@link", "NNUpdater": "WebElement#getText()} equals to provided {@code expectedText}."}
{"Origin": "Scenario: - no CA inherited trust - gateway does not explicitly trust the service, but automatically validates against self-signed - service trusts gateway certificate", "Reference": "Scenario: - no CA inherited trust - gateway does not explicitly trust the API, but automatically validates against self-signed - API trusts gateway certificate", "NNUpdater": "Set the tls configuration with the certificate to trust"}
{"Origin": "Check if there is any negative cost (= improvement).", "Reference": "Find the smallest (most negative) value.", "NNUpdater": "Set Kosten."}
{"Origin": "see URL html", "Reference": "see URL", "NNUpdater": "URL"}
{"Origin": "Create new {@link Builder} based on an existing {@link BaseEvent} instance.", "Reference": "Create new {@link Builder} based on an existing {@link CoreEvent} instance.", "NNUpdater": "Create a {@link InternalNode} from an existing {@link Component}."}
{"Origin": "User / Group may update meta data of nodes: rename files and folders, change classification, etc.", "Reference": "User / Group may update metadata of nodes: rename files and folders, change classification, etc.", "NNUpdater": "The meta-data of the Dataframe are updated."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "See {@link SyslogConstants} and RFC 3164 for more information about the", "Reference": "See RFC 3164 for more information about the", "NNUpdater": "For more information, see the Amazon"}
{"Origin": "Once you've created a DB parameter group, you need to associate it with your DB instance using ModifyDBInstance .", "Reference": "Once you've created a DB parameter group, you need to associate it with your DB instance using", "NNUpdater": "Once you've created a DB parameter group, you need to associate it with your DB instance using ModifyDBInstance ."}
{"Origin": "Returns the list of configured WAN publisher targets for this WAN replication.", "Reference": "Returns the list of custom WAN publisher implementations for this WAN replication.", "NNUpdater": "Clears the WAN queues for the wan replication name and publisher ID defined by the command parameters."}
{"Origin": "Print an raw message to the user.", "Reference": "Print a raw message to the user.", "NNUpdater": "Print colored text in the console."}
{"Origin": "RemoveAxiom change objects are automatically generated.", "Reference": "The appropriate RemoveAxiom change objects are automatically generated.", "NNUpdater": "This stateUUID is automatically generated for for each version of cluster state."}
{"Origin": "Return a signature object containing the current signature state.", "Reference": "Return the signature.", "NNUpdater": "Get short description."}
{"Origin": "If {@code labels = ``*abc*``}, settings with a label containing ``abc`` are returned.", "Reference": "If {@code labelFilter = ``*abc*``}, settings with a label containing ``abc`` are returned.", "NNUpdater": "If {@code labels = ``*abc*``}, settings with a label containing ``abc`` are returned."}
{"Origin": "Adds a new URI to the list of redirects.", "Reference": "Adds a new URI to the collection.", "NNUpdater": "Adds a new URI to the collection."}
{"Origin": "Returns the (biased) estimate of the sample standard deviation of the values within a {@link PointSet} region of a {@link Dataset}.", "Reference": "Returns the (unbiased) kurtosis excess of all the values within a {@link PointSet} region of a {@link Dataset}", "NNUpdater": "The class of the {@link DatasetsFinder} is read from property {@link #DATASET_PROFILE_CLASS_KEY}."}
{"Origin": "ArchaiusModule however is stateful in that much of its configuration is supplied externally to the Guice injector.", "Reference": "ArchaiusModule however is stateful in that it is initially set up outside of Guice.", "NNUpdater": "Creates a Guice injector that includes the SoyModule, a message plugin module, and maybe additional plugin modules, and maybe additional modules."}
{"Origin": "Invalid bundle", "Reference": "Valid bundle", "NNUpdater": "Gets the bundle id of the bundle containing the component type of the instance."}
{"Origin": "The {@link EventContextKeys#MESSAGE_TARGET}, if any", "Reference": "The {@link EventContextKeys#MESSAGE_CHANNEL}, if any", "NNUpdater": "The event {@link Event#setTargetActor(Actor) target} must be set."}
{"Origin": "Create a new empty {@link Sequential} with atomic guarantees on all mutative operations.", "Reference": "Create a new empty {@link Swap} with atomic guarantees on all mutative operations.", "NNUpdater": "Create a new empty {@link JavaSource} instance."}
{"Origin": "Extract the values from the array's elements by applying an extracting function on them.", "Reference": "Extract the values from the array's elements by applying an extracting function on them, the resulting list becomes the new object under test.", "NNUpdater": "Test method."}
{"Origin": "Sets the {@code Cipher} to use for encrypting and decrypting serialized identity data to prevent easy inspection of Subject identity data.", "Reference": "Sets the {@code CipherService} to use for encrypting and decrypting serialized identity data to prevent easy inspection of Subject identity data.", "NNUpdater": "Returns the principal value."}
{"Origin": "This method allows you to specify IterationListeners for this model.", "Reference": "This method allows you to specify trainingListeners for this model.", "NNUpdater": "Perform one training iteration."}
{"Origin": "Sets data to be parsed by libflac.", "Reference": "Sets the data to be parsed.", "NNUpdater": "Returns the parsed expression."}
{"Origin": "Returns the next day-of-week adjuster, which adjusts the date to be the next of the specified day-of-week after the specified date.", "Reference": "Returns the next day-of-week adjuster, which adjusts the date to the first occurrence of the specified day-of-week after the date being adjusted.", "NNUpdater": "Test get day of week."}
{"Origin": "{@codesnippet com.azure.data.appconfiguration.configurationasyncclient.addSettingWithResponse#ConfigurationSetting}", "Reference": "{@codesnippet com.azure.data.appconfiguration.configurationasyncclient.addConfigurationSettingWithResponse#ConfigurationSetting}", "NNUpdater": "{@codesnippet com.azure.data.appconfiguration.configurationasyncclient.setSettingWithResponse#ConfigurationSetting-boolean}"}
{"Origin": "Set Account Element.", "Reference": "Set Kontenart.", "NNUpdater": "Set Konto."}
{"Origin": "Computes the hash of this module, returning it as a hex string.", "Reference": "Computes the hash of this module.", "NNUpdater": "Examines the module dependences of the given module and computes the hash of any module that matches the pattern {@code dependenciesToHash}."}
{"Origin": "The {@code orderType} is an enum value located under the {@link #ORDER_TYPE} key.", "Reference": "The {@code orderType} is an enum value located under the {@link HasOrderTypeUtil#ORDER_TYPE} key.", "NNUpdater": "Returns a new {@link Order} with the given {@link Direction}."}
{"Origin": "Read an optional Long value (stored as string) form a JSON Object.", "Reference": "Read an optional Date value (stored as string) form a JSON Object.", "NNUpdater": "Attempts to read the response text in the provided object as a JSON string and convert it to its corresponding JsonObject representation."}
{"Origin": "Gets the parent object in the object tree representing the unmarshalled xml document.", "Reference": "Gets the value of the anchorId property.", "NNUpdater": "Set the expected root object for the unmarshaller, into which the source will be unmarshalled."}
{"Origin": "If modified and not discarded, sheet material will be stored before being disposed of.", "Reference": "If modified or upgraded, sheet material will be stored before being disposed of.", "NNUpdater": "If c is null, the array will be discarded."}
{"Origin": "Get the value of the {@code accessible} flag for this object.", "Reference": "Get the value of the {@code accessible} flag for this reflected object.", "NNUpdater": "Get the error value."}
{"Origin": "Get icon img and append to buf", "Reference": "Get 16x16 icon img and append to buf", "NNUpdater": "Append a base url with #{iconName}."}
{"Origin": "Testing the timesTranspose(vector, vector) method of VMath class.", "Reference": "Testing the timesTranspose(vector, vector) method of {@link VMath} class.", "NNUpdater": "If the vector is the 0-Vector (ignoring y), this method returns {@link #NONE}."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Otherwise, this qualifier must contain all the arrays in superType.", "Reference": "Otherwise, this qualifier must contain all the sequences in superType.", "NNUpdater": "calls `outputConsumer.accept(superClass)` for all super classes of superType."}
{"Origin": "Returns bounds of the split button part.", "Reference": "Returns bounds of the menu button part.", "NNUpdater": "Returns {@link UIInputListener} for the button."}
{"Origin": "Asynchronously gets a service.", "Reference": "Asynchronously gets a api.", "NNUpdater": "Returns a class name property."}
{"Origin": "Returns true if the constructor method is locally empty (allows calls to empty init and super constructor).", "Reference": "Returns true if the constructor method is locally empty (allows calls to init and super constructor).", "NNUpdater": "Returns true if the constructor (or static initializer) is the default one."}
{"Origin": "Sets each pixel in the output image to log( 1 + input(x,y)) of the input image.", "Reference": "Sets each pixel in the output image to log( val + input(x,y)) of the input image.", "NNUpdater": "Gets input item information array."}
{"Origin": "Creates a schemaless instance of a provider with the given values for fields f1 and f2.", "Reference": "Creates an instance of a provider with the given values for fields f1 and f2.", "NNUpdater": "Creates a schemaful (array-based) provider instance with the given provider type, layout, and values."}
{"Origin": "Add two URI path segments.", "Reference": "Add two Decoded URI path segments.", "NNUpdater": "Append path segments to the existing path."}
{"Origin": "In alarm, only minute dimensionality indicators are expected to process.", "Reference": "In alarm, only minute dimensionality metrics are expected to process.", "NNUpdater": "Get the dimensionality of a relation."}
{"Origin": "Set this {@link AxisAngle4d} to be equivalent to the rotational component of the given {@link Matrix4d}.", "Reference": "Set this {@link AxisAngle4d} to be equivalent to the rotational component of the given {@link Matrix4dc}.", "NNUpdater": "Set this {@link AxisAngle4d} to be equivalent to the rotational component of the given {@link Matrix4dr}."}
{"Origin": "If {@code thread} is null, the list is immutable.", "Reference": "Equivalent to {@code copyOf(null, elems)}.", "NNUpdater": "The returned List is immutable."}
{"Origin": "Creates callable for executing {@link Entry#doubleWhoAmI(String, String, ReAuthnType, String)} as given user.", "Reference": "Creates a callable for executing {@link Entry#doubleWhoAmI(String, String, ReAuthnType, String)} as given user.", "NNUpdater": "Shortcut for {@code query(false, String, Iterable)}"}
{"Origin": "Validate that I have a Exuberant ctags program I may use", "Reference": "Validate that there is a Universal ctags program.", "NNUpdater": "validateSignature."}
{"Origin": "Tests for the {@link BaseFileSystem#getStatus(AlluxioURI, GetStatusOptions)} method.", "Reference": "Tests for the {@link BaseFileSystem#getStatus(AlluxioURI, GetStatusPOptions)} method.", "NNUpdater": "Tests for the {@link BaseFileSystem#getStatus(AlluxioURI, GetStatusOptions)} method."}
{"Origin": "### Effects: Provided user receives email with reset token.", "Reference": "### Effects: Provided user receives email with password reset token.", "NNUpdater": "Sets the userToken."}
{"Origin": "Performs thread dump and prints all available info to the given log.", "Reference": "Performs thread dump and prints all available info to the given log with WARN logging level.", "NNUpdater": "Set the thread local log info with the given information."}
{"Origin": "If the columnIdent doesn't have a path the return value is null", "Reference": "If the columnName doesn't have a path the return value is null", "NNUpdater": "returns the functionImplementation for the given ident or null if nothing was found"}
{"Origin": "Checks if the given {@code DetailAST} node is matching line and column number.", "Reference": "Checks if the given {@code DetailAST} node is matching line number, column number and token type.", "NNUpdater": "Set selection."}
{"Origin": "Persists running state to the {@link RemoteRuntimeDataset}.", "Reference": "Persists running state to the {@link RemoteRuntimeTable}.", "NNUpdater": "Checks if the application is in the {@link ApplicationState#RUNNING} state."}
{"Origin": "An array of objects defining the nodes in the dialog.", "Reference": "An array of objects describing the dialog nodes in the workspace.", "NNUpdater": "Adds an dialogNode to dialogNodes."}
{"Origin": "The default value is 10000 ms.", "Reference": "The default value is 60000 ms.", "NNUpdater": "By default this is set to ``10000,10000`` but subclasses may override that default and for example set it to ``0,0`` if they require a"}
{"Origin": "The amount of time (in millisecond) which adds to waiting time when using Linear back off strategy.", "Reference": "Maximum amount of time (in millisecond) a thread wait before retrying failed request.", "NNUpdater": "Returns an array with absolute time [0], day [1] and relative time [2] of the given millisecond time."}
{"Origin": "Specify charsets associated with the configured {@link #setLocations(List) locations}.", "Reference": "An alternative to {@link #setLocations(List)} that accepts a list of", "NNUpdater": "For example: at(locations)"}
{"Origin": "Builds maps of obj id to md5 and case.", "Reference": "Builds maps of obj id to value and case.", "NNUpdater": "Get the md5 of the given string key."}
{"Origin": "Moves on to next top level domain in {@code topLevelDomainsList}.", "Reference": "Moves on to next top level domain in {@code tldCycleIterator}.", "NNUpdater": "Get the domainName value."}
{"Origin": "Add the given {@link HandlerMethodArgumentResolver}s.", "Reference": "Add the given {@link HandlerMethodArgumentResolver HandlerMethodArgumentResolvers}.", "NNUpdater": "Add the given {@link HandlerMethodArgumentResolver}."}
{"Origin": "Gets the Chemical Dissolution Chamber of the ItemStackInput in the parameters", "Reference": "Gets the Chemical Dissolution Chamber of the ItemStack in the parameters", "NNUpdater": "Gets the Chemical Infuser Recipe of the ChemicalPairInput in the parameters."}
{"Origin": "Runs operations for a single client.", "Reference": "Runs operations for a single session.", "NNUpdater": "Gets the HttpClientFailures object to access its operations."}
{"Origin": "inverse of {@link #jacksonBson(String)}", "Reference": "inverse of {@link #jacksonThenBson(String)}", "NNUpdater": "However, the bson encoder would fail to encode the object of type ValueObject (as shown by {@link #testFullBSONSerialization()})."}
{"Origin": "are specifically excluded except for carriage return, linefeed, and the horizontal tab.", "Reference": "are specifically excluded except for carriage return, line-feed, and the horizontal tab.", "NNUpdater": "Set Register."}
{"Origin": "Computes the hash of this module, returning it as a hex string.", "Reference": "Computes the hash of this module.", "NNUpdater": "Examines the module dependences of the given module and computes the hash of any module that matches the pattern {@code dependenciesToHash}."}
{"Origin": "Calls the specified converter function with the current Single instance during assembly time and returns its result.", "Reference": "Calls the specified converter function during assembly time and returns its resulting value.", "NNUpdater": "Set the name value."}
{"Origin": "or throws a {@link com.liferay.knowledgebase.NoSuchArticleException} if it could not be found.", "Reference": "or throws a {@link NoSuchArticleException} if it could not be found.", "NNUpdater": "Operation fails."}
{"Origin": "Comments in the same 10-minute bucket and otherwise equal are considered equal.", "Reference": "Comments within 10 minutes (not necessarily in same bucket) and otherwise equal are considered equal.", "NNUpdater": "Two instances are equal if the unit and amount are equal."}
{"Origin": "creates a new columnIdent which just consists of the path of the given columnIdent e.g.", "Reference": "creates a new columnName which just consists of the path of the given columnName e.g.", "NNUpdater": "returns the functionImplementation for the given ident or null if nothing was found"}
{"Origin": "Returns the capacity specified for each node, or empty to leave this decision to provisioning", "Reference": "Returns the resources requested for each node, or empty to leave this decision to provisioning", "NNUpdater": "The decision details for allocating to this node."}
{"Origin": "Deletes all objects by their id.", "Reference": "Deletes all objects by their ids.", "NNUpdater": "Deletes a given path."}
{"Origin": "Returns an immutable copy of the current headers.", "Reference": "Returns an immutable copy of the Headers for this request.", "NNUpdater": "Returns an immutable view of the current thread's context Map."}
{"Origin": "SETTER: What to execute when this trigger is activated``", "Reference": "GETTER: What to execute when this trigger is activated``", "NNUpdater": "Deactivated by default."}
{"Origin": "Purge the population of parts candidates as much as possible, since the cost of their later combinations is worse than exponential.", "Reference": "Purge the population of parts candidates as much as possible, since the cost of their later combinations is exponential.", "NNUpdater": "Purge the population of glyph candidates as much as possible, since the cost of their later combinations is very high."}
{"Origin": "Returns the sync d l objects before and after the current sync d l object in the ordered set where parentFolderId = ?.", "Reference": "Returns the sync d l objects before and after the current sync d l object in the ordered set where modifiedTime > ?", "NNUpdater": "Returns the sync d l object ID of this sync d l object."}
{"Origin": "Calculates the cash flow for a single trade.", "Reference": "Calculates the cash flow for a single closed trade.", "NNUpdater": "Calculates the cash flow for a single trade."}
{"Origin": "Assigns a native mirror object to the given RBaseObject object.", "Reference": "Assigns a native mirror object ID to the given RBaseObject object.", "NNUpdater": "(Internal use only) Resets all {@link NativeObject}s."}
{"Origin": "Creates an exception from an service name.", "Reference": "Creates an exception from an API name.", "NNUpdater": "Create an instance of {@link ServerException }"}
{"Origin": "Appends a quoted string to a given buffer.", "Reference": "Appends a quoted string to the given string buffer.", "NNUpdater": "Appends the descriptor of the given class to the given string builder."}
{"Origin": "Return -1 if there are no tokens on channel between i and 0.", "Reference": "Return -1 if there are no tokens on channel between {@code i} and 0.", "NNUpdater": "Returns the username."}
{"Origin": "Construct the default web view object.", "Reference": "Construct the CordovaWebView object.", "NNUpdater": "WebView."}
{"Origin": "Sets each pixel in the output image to log( 1 + input(x,y)) of the input image.", "Reference": "Sets each pixel in the output image to log( val + input(x,y)) of the input image.", "NNUpdater": "Gets input item information array."}
{"Origin": "This returns false for unstampable rule classes and for rules in the host configuration.", "Reference": "This returns false for unstampable rule classes and for rules used to build tools.", "NNUpdater": "Removes IP rules for a route when the next hop is gone."}
{"Origin": "Computes the median for each pixel across all bands in the {@link Planar} image.", "Reference": "Computes the median for each pixel across selected bands in the {@link Planar} image.", "NNUpdater": "Computes the average for each pixel across all bands in the {@link Planar} image."}
{"Origin": "In this test, we close an internal stream in the priority tree but tree should not change.", "Reference": "In this test, we close an internal stream in the priority tree.", "NNUpdater": "Initializes the main tree."}
{"Origin": "Adds a (non-optional non-minus) node to a join group partition.", "Reference": "Adds a (non-optional non-minus) node to a join group partition and updates the set of definitely produced variables accordingly.", "NNUpdater": "This returns iff the {@link StatementPatternNode} was lifted out of an optional {@link JoinGroupNode} such that it has OPTIONAL semantics."}
{"Origin": "If they are not the same an AssertionFailedError is thrown.", "Reference": "AssertionFailedError is thrown.", "NNUpdater": "AssertionFailedError is thrown with the given message."}
{"Origin": "Gets the value of the 'ValueType' field.", "Reference": "Gets the value of the 'valueType' field.", "NNUpdater": "Returns the encoding of the next field value."}
{"Origin": "Adds remote file attributes to this remote file class.", "Reference": "Sets remote file attributes to this remote file class.", "NNUpdater": "Returns the document library file entry remote service."}
{"Origin": "Increment the count of triggered synchronous state updates (by one).", "Reference": "Increment the count of triggered synchronous state updates in Litho components (by one).", "NNUpdater": "Increment source count by 1."}
{"Origin": "Extracts options from the specified item.", "Reference": "Assigns options to the specified options.", "NNUpdater": "Extracts the bytes from a given item."}
{"Origin": "Check whether we are executed on an expired entry before the timer event for expiry was received.", "Reference": "Check whether we are executed on an expired entry before the timer event for the expiry was received.", "NNUpdater": "We are called to remove the entry."}
{"Origin": "Obtains an instance from the specified unique name.", "Reference": "Obtains an instance from the specified name.", "NNUpdater": "Obtains the type from a unique name."}
{"Origin": "Checks if the given name is a legal binary name.", "Reference": "Checks if the given name is a legal type name.", "NNUpdater": "Returns the PropertyName for the given name if it exists, null otherwise."}
{"Origin": "StringMap is created for the configuration property file and is passed into the framework.", "Reference": "A case insensitive StringMap is created for the configuration property file and is passed into the framework.", "NNUpdater": "StringMap is created for the configuration property file and is passed into the framework."}
{"Origin": "Checks if the deletion policy can release some index commits with the latest global checkpoint.", "Reference": "Checks if the deletion policy can delete some index commits with the latest global checkpoint.", "NNUpdater": "If the global checkpoint is equal to or above the global checkpoint the listener is waiting for, then the listener will be asynchronously notified on the executor used to construct this collection of global checkpoint listeners."}
{"Origin": "Retrieve configuration parameter from the current space's WebPreferences and fallback to XWiki.RatingsConfig if it does not exist", "Reference": "Retrieves configuration parameter from the current space's WebPreferences and fallback to XWiki.RatingsConfig if it does not exist.", "NNUpdater": "Creates the XWiki SchedulerJob XClass if it does not exist in the wiki."}
{"Origin": "Tests for the {@link BaseFileSystem#rename(AlluxioURI, AlluxioURI, RenameOptions)} method.", "Reference": "Tests for the {@link BaseFileSystem#rename(AlluxioURI, AlluxioURI, RenamePOptions)} method.", "NNUpdater": "Tests for the {@link BaseFileSystem#rename(AlluxioURI, AlluxioURI, RenameOptions)} method."}
{"Origin": "Resolves a collection of root modules, with service binding, to create configuration.", "Reference": "Resolves a collection of root modules to create a configuration.", "NNUpdater": "Resolves the resource configuration."}
{"Origin": "Returns the Java type corresponding to the given method descriptor.", "Reference": "Returns the {@link Type} corresponding to the given method descriptor.", "NNUpdater": "Returns the {@link Type} corresponding to the given method descriptor."}
{"Origin": "SHA256 tree hash does not match To ensure that part data is not corrupted in transmission, you compute a SHA256 tree hash of the part and include it in your request.", "Reference": "SHA256 tree hash does not matchTo ensure that part data is not corrupted in transmission, you compute a SHA256 tree hash of the part and include it in your request.", "NNUpdater": "Use {@link #of(byte[])} instead: this old name is ambiguous."}
{"Origin": "Returns an instance of a GLSL data type for the given {@link DataType}.", "Reference": "Returns an instance of a GLSL data type for the given {@link ShaderVariable}.", "NNUpdater": "Set the 'to' data type name."}
{"Origin": "If nodes returned are to be further used, they must be finalized via {@link ANode#finish()}.", "Reference": "Before nodes are added to the result, they must be finalized via {@link ANode#finish()}.", "NNUpdater": "If there are more, {@link #run(int, ExecutorService)} must be used."}
{"Origin": "Tests if this string starts with any specified prefixes.", "Reference": "Tests if this CharSequence starts with any specified prefixes.", "NNUpdater": "Starts a client."}
{"Origin": "Returns the user thread with the primary key or throws a {@link com.liferay.privatemessaging.NoSuchUserThreadException} if it could not be found.", "Reference": "Returns the user thread with the primary key or throws a {@link NoSuchUserThreadException} if it could not be found.", "NNUpdater": "A {@link UserException} is throws when:"}
{"Origin": "Stub of {@link Plugin#willDeclareSetter(TypeSpec.Builder, PropertyGenerator, MethodSpec.Builder)} for subclasses to override", "Reference": "Stub of {@link Plugin#beforeDeclareSetter(TypeSpec.Builder, PropertyGenerator, MethodSpec.Builder)} for subclasses to override", "NNUpdater": "Operation fails."}
{"Origin": "Provides field-based getter and/or setters for all attributes in atts if not present", "Reference": "Provides field-based getter and/or setters for all attributes in attrs if not present", "NNUpdater": "setters, the obvious candidate :-), {@link #getSetters() } readAccessors, for collections that do not have a setter, e.g."}
{"Origin": "Observer methods with other transaction phase are scheduled for the corresponding transaction phase.", "Reference": "Transactional observer methods are scheduled to be executed in the corresponding transaction phase.", "NNUpdater": "Observer methods with {@link TransactionPhase#IN_PROGRESS} are called asnchronously in a separate thread."}
{"Origin": "Use the given SleuthkitCase to update the data used to determine the available filters.", "Reference": "Update the data used to determine the available filters.", "NNUpdater": "Return the cache to use for queries."}
{"Origin": "Extract a user rating vector from a rating cursor.", "Reference": "Extract a user rating vector from a rating stream.", "NNUpdater": "Get the Rating property value"}
{"Origin": "Adds a to a buffer, with each being separated by a ``:``.", "Reference": "Adds a to a , with each being separated by a ``:``.", "NNUpdater": "Each level is separated by `>`."}
{"Origin": "Do nothing if {@link BaseConfiguration#nocomment} is set to true.", "Reference": "Do nothing if {@link BaseOptions#noComment} is set to true.", "NNUpdater": "If already present, does nothing."}
{"Origin": "Standard setter for the leftwardLabel String for this RelationshipType", "Reference": "Standard setter for the leftwardType String for this RelationshipType", "NNUpdater": "Sets the value(s) for identifier (An identifier for the person as this patient)"}
{"Origin": "Create a {@link ServiceLocator}.", "Reference": "Create a {@link InstanceManager}.", "NNUpdater": "Return a default configuration StreamManager with a {@link LocatorFile}, {@link LocatorURL}, and {@link LocatorClassLoader}"}
{"Origin": "It will also exclude files that cannot be analysed with {@link #canAnalyze(VirtualFile, FileType, Module)}.", "Reference": "It will also exclude files that cannot be analysed with {@link #canAnalyze(VirtualFile, Module)}.", "NNUpdater": "It will also exclude files that cannot be analysed with {@link #canAnalyze(VirtualFile, FileType, Module)}."}
{"Origin": "If the name is a single identifier, then this can be reclassified as an {@link ASTVariableReference}", "Reference": "If the name is a single identifier, then this can be reclassified as an {@link ASTVariableAccess}", "NNUpdater": "The location is specified as an instance of a {@link Node} in the AST."}
{"Origin": "Set Account Type.", "Reference": "Set Kontenart.", "NNUpdater": "Set the sku value."}
{"Origin": "Returns the object with the settings used for calls to labelAudio.", "Reference": "Returns the object with the settings used for calls to getEvaluation.", "NNUpdater": "Returns the next Data object."}
{"Origin": "This is a convenience method for {@link #electPreferredLeaders(Collection, ElectPreferredLeadersOptions)} with default options.", "Reference": "This is a convenience method for {@link #electLeaders(ElectionType, Set, ElectLeadersOptions)} with preferred election type and default options.", "NNUpdater": "Convenience method for {@link #getInStream(TachyonFile, InStreamOptions)} with default options."}
{"Origin": "Returns the value of the specific parameter, or default value defined in the {@code info} if this Params doesn't contain the param.", "Reference": "Returns the value of the specific parameter, or default value defined in the {@code info} if this Params doesn't have a value set for the parameter.", "NNUpdater": "Sets the value of the 'httpRequestParams' field."}
{"Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}", "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveFromRangeEnd }{@code >}}", "NNUpdater": "Create an instance of {@link JAXBElement }{@code <}{@link CTStrokeChild }{@code >}}"}
{"Origin": "Is the value with this qualifier less than the length of any of the arrays?", "Reference": "Is the value with this qualifier less than the length of any of the sequences?", "NNUpdater": "TransferInput, CFStore)} for details."}
{"Origin": "Clears the given persisted files stored in {@link #mPersistedFiles}.", "Reference": "Clears the given persisted files stored in {@link #mPersistedFilesInfo}.", "NNUpdater": "Sets the file persistent state of the file."}
{"Origin": "Compares this {@code LocalDateTime} to another date-time.", "Reference": "Compares this date-time to another date-time.", "NNUpdater": "Compares this date-time to another date-time based on the UTC equivalent date-times."}
{"Origin": "This returns a trade based on the specified trade date.", "Reference": "This returns a trade based on the specified trade date and upfront fee.", "NNUpdater": "Adapts a BTCETradeV3 to a Trade Object"}
{"Origin": "Returns a new Task that, when this task completes normally, is executed using the supplied Scheduler, with this task's result as the argument to the supplied function.", "Reference": "Returns a new Task that, when this task completes normally, is executed using the supplied Executor, with this task's result as the argument to the supplied function.", "NNUpdater": "Returns a new Task that, when this task completes normally, is executed using the default Scheduler."}
{"Origin": "This parses the specified byte source to determine if it appears to be FpML.", "Reference": "This checks the first part of the byte source to see if it appears to be FpML.", "NNUpdater": "Determine if the specified name is this user."}
{"Origin": "The {@link KeyCreateOptions#isEnabled()} enabled} field is set to true by Azure Key Vault, if not specified.", "Reference": "The {@link CreateKeyOptions#isEnabled()} enabled} field is set to true by Azure Key Vault, if not specified.", "NNUpdater": "The {@link Secret#isEnabled() enabled} field is set to true by key vault, if not specified."}
{"Origin": "See Immutable List Static Factory Methods for details.", "Reference": "See Unmodifiable Lists for details.", "NNUpdater": "The returned List is immutable."}
{"Origin": "Helper to parse the imported file into an {@link ImportedGradeWrapper} depending on its type", "Reference": "Helper to parse the imported file into an {@link ImportedSpreadsheetWrapper} depending on its type", "NNUpdater": "Set Importiert."}
{"Origin": "Fixes a bug with the Swing JFileChooser: if you entered a new filename in the save dialog and press Enter the method returns instead of the filename.", "Reference": "Swing JFileChooser: if you entered a new filename in the save dialog and press Enter the method returns instead of the filename.", "NNUpdater": "Returns the file contents associated with the tree."}
{"Origin": "Returns the operation enum value.", "Reference": "Returns the operation constant name.", "NNUpdater": "Sets generated file files."}
{"Origin": "Saves all dictionary entries that appeared > threshold times Note: feature indices are changed to contiguous values starting at 0.", "Reference": "Saves all dictionary entries that appeared {@literal >} threshold times Note: feature indices are changed to contiguous values starting at 0.", "NNUpdater": "4) Otherwise, if there are features and the feature data source has only one dictionary, then that one is the best dictionary."}
{"Origin": "Currently, SONA supports Flat, VXLAN and VLAN modes.", "Reference": "Currently, SONA supports Flat, VXLAN, GRE and VLAN modes.", "NNUpdater": "Currently, SONA supports Flat, VXLAN and VLAN modes."}
{"Origin": "loads truststore and potentially (depending on settings) blacklist", "Reference": "loads truststores and potentially (depending on settings) blacklist", "NNUpdater": "Set the _trustStoreInputStream."}
{"Origin": "Create new instance of {@link InstanceManagerStore}.", "Reference": "Create new instance of {@link InjectionManagerStore}.", "NNUpdater": "Create a transient instance."}
{"Origin": "Sets dependency options.", "Reference": "Sets the dependency management options.", "NNUpdater": "Get a DependencyInfo by the dependency id"}
{"Origin": "Setter for comment format.", "Reference": "Setter for comment pattern.", "NNUpdater": "Setter for 'todo' comment pattern."}
{"Origin": "Sets the entity attribute of this User to entity", "Reference": "Sets the entity attribute of this User's element to entity", "NNUpdater": "Sets the entityName."}
{"Origin": "More specifically, the root modules are resolved as if by calling {@code resolveRequires}.", "Reference": "More specifically, the root modules are resolved as if by calling {@code resolve}.", "NNUpdater": "Whether the {@code call} is calling the given `functionName` in the `resolvedModuleName` with the `resolvedFinalArity`"}
{"Origin": "Get the set of all custom providers registered for the given service provider contract in the underlying {@link InstanceManager instance manager} container.", "Reference": "Get the set of all custom providers registered for the given service provider contract in the underlying {@link InjectionManager injection manager} container.", "NNUpdater": "Get the set of all custom providers registered for the given service provider contract in the underlying {@link ServiceLocator HK2 service locator} container."}
{"Origin": "Generates the form to post to the dialog frame.", "Reference": "Generates the dialog parameters.", "NNUpdater": "Generates a IFRAME tag."}
{"Origin": "Returns If the is greater than the .", "Reference": "Returns If the is greater than the and is not used.", "NNUpdater": "Returns If the is greater than the ."}
{"Origin": "After calling this method, call {@link #configure(int, int, int)} to start using the new sample rate.", "Reference": "After calling this method, call {@link #configure(AudioFormat)} to start using the new sample rate.", "NNUpdater": "After calling this method, call {@link #configure(int, int, int)} to apply the new trimming frame counts."}
{"Origin": "Move this TouchDisplay to a new x-y position and bounds.", "Reference": "Move this TouchDisplay to a new x-y position.", "NNUpdater": "Moves current touch to a new position."}
{"Origin": "Triangulate two view using the Discrete Linear Transform (DLT)", "Reference": "Triangulate two view using the Discrete Linear Transform (DLT) with an uncalibrated camera.", "NNUpdater": "Otherwise, it returns an instance of {@link DiscreteResourceId}"}
{"Origin": "Split the given tree based on a split point such that the terminals leading up to the split point are in the left returned tree and those following the are in the right returned tree.", "Reference": "Split the given tree based on a split point such that the terminals leading up to the split point are in the left returned tree and those following the are in the left returned tree.", "NNUpdater": "Computes and returns the best split point."}
{"Origin": "Gets the full path from a full filename, which is the prefix + path, and also excluding the final directory separator.", "Reference": "Gets the full path from a full fileName, which is the prefix + path, and also excluding the final directory separator.", "NNUpdater": "Get the directory that contains the user's NodeBox library directory."}
{"Origin": "As the name implies, indicates whether the train or cart is in the process of leaving the track.", "Reference": "As the name implies, {@code trainLeaving} indicates whether the train or cart is in the process of leaving the track.", "NNUpdater": "Whether or not the status that this tag implies Notable status"}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "When the context is being reinitialized, this call blocks until the reinitialization succeeds or fails.", "Reference": "When the context is being reinitialized, this call returns an empty optional.", "NNUpdater": "If the queue is empty, it blocks the call until at least one item is added."}
{"Origin": "If the property has not been set, or if its value is negative, set the timeout length to the default.", "Reference": "If the property has not been set, or if its value is negative, set the timeout length to the specified default.", "NNUpdater": "Returns true if field ufsLength is set (has been assigned a value) and false otherwise"}
{"Origin": "Access Control Using AWS Identity and Access Management (IAM) .", "Reference": "For more information, see Access Control Using AWS Identity and Access Management (IAM).", "NNUpdater": "Access Management (IAM) user account."}
{"Origin": "Verify that a named subquery exists for each INCLUDE.", "Reference": "Verify that a named subquery of solution set exists for each INCLUDE.", "NNUpdater": "Verify that we use breadcrumb path for both #include and #include ``x/y.h`` in C and C++ (bug REF)"}
{"Origin": "Make a copy of a range of bytes from the passed in data array.", "Reference": "Make a copy of a range of bytes from the passed in array.", "NNUpdater": "Set the position in the buffer."}
{"Origin": "Returns {@code true} if there is a value in the current thread's copy of this thread-local variable, even if that values is {@code null}.", "Reference": "Returns {@code true} if there is a value in the current strand's copy of this thread-local variable, even if that values is {@code null}.", "NNUpdater": "Throw {@link NullPointerException} with {@code message} if {@code o} is null."}
{"Origin": "Applications should use the {@code with(WithAdjuster)} method on the date-time object to make the adjustment passing this as the argument.", "Reference": "Applications should use the {@code with(TemporalAdjuster)} method on the date-time object to make the adjustment passing this as the argument.", "NNUpdater": "The adjustment is equivalent to using {@link DateTime#with(DateTimeField, long)} passing {@code YEAR} as the field."}
{"Origin": "Glacier provides you a unique archive ID, an opaque string of characters.", "Reference": "Amazon Glacier provides you a unique archive ID, an opaque string of characters.", "NNUpdater": "Working with Archives in Amazon Glacier in the Amazon Glacier Developer Guide ."}
{"Origin": "Set Zu ber.", "Reference": "Set Zu berechn.", "NNUpdater": "In BER/DER encoding, length can be encoded in 2 forms, Short form."}
{"Origin": "This method must only be used for type references whose sort is {@link #EXCEPTION_PARAMETER EXCEPTION_PARAMETER} .", "Reference": "This method must only be used for type references whose sort is {@link #EXCEPTION_PARAMETER} .", "NNUpdater": "Find an {@code @ExceptionHandler} method for the given exception."}
{"Origin": "See {@link ClientsClassDefinition#getWhitelistedProperties()}", "Reference": "See {@link ClientsClassDefinition#getIncludedProperties()}", "NNUpdater": "Operation fails."}
{"Origin": "Ensures that the quorum is present if the quorum is configured and the operation service is quorum aware.", "Reference": "Ensures that there is no split brain if the split brain protection is configured and the operation service is split brain protection aware.", "NNUpdater": "Returns the cluster read quorum strategy."}
{"Origin": "Sets the {@link RetryPolicy} that is used when each request is sent.", "Reference": "Sets the {@link HttpPipelinePolicy} that is used when each request is sent.", "NNUpdater": "Sets the retry options used to govern retry attempts when an issue is encountered while sending."}
{"Origin": "Provides the location to dockerfile", "Reference": "Provides the location to devfile yaml file", "NNUpdater": "Set Nach Ort."}
{"Origin": "For a split parent package this will include enriching with siblings, if checkForSplitSiblings is true in which case the enriched (split) binding will be returned.", "Reference": "For a split parent package this will include potentially enriching with siblings, in which case the enriched (split) binding will be returned.", "NNUpdater": "Also supports parsing of the deprecated format ``;;;;;``."}
{"Origin": "Gets all of the {@link AlertDefinition}s that exist on the path for {@link Components#AMBARI_SERVER}.", "Reference": "Gets all of the {@link AlertDefinition}s that exist on the path for {@link RootComponent#AMBARI_SERVER}.", "NNUpdater": "Operation fails."}
{"Origin": "Glacier, you first initiate a job, and after the job completes, you download the data.", "Reference": "To retrieve an archive or retrieve a vault inventory from Amazon Glacier, you first initiate a job, and after the job completes, you download the data.", "NNUpdater": "Gets or creates job instance."}
{"Origin": "derive secret key by PBKDF2 algorithm (1000 iterations of SHA256)", "Reference": "Derive secret key by PBKDF2 algorithm (1000 iterations of SHA256)", "NNUpdater": "-I iterations"}
{"Origin": "Convert statistics object into JSONObject.", "Reference": "Convert statistics object into JSON.", "NNUpdater": "Convert a file into a Reader"}
{"Origin": "NOTE:This operation is eventually consistent.", "Reference": "This operation is eventually consistent.", "NNUpdater": "Sets the request action."}
{"Origin": "Gets a Vector pointing in the direction that this Location is facing", "Reference": "Gets a unit-vector pointing in the direction that this Location is facing.", "NNUpdater": "sets the direction vector of the camera."}
{"Origin": "or throws a {@link com.liferay.so.NoSuchMemberRequestException} if it could not be found.", "Reference": "or throws a {@link NoSuchMemberRequestException} if it could not be found.", "NNUpdater": "Operation fails."}
{"Origin": "Given a bunch of NodeRefs, create SimpleFeatures from the results.", "Reference": "Given a bunch of NodeRefs, create Features from the results.", "NNUpdater": "Set the features."}
{"Origin": "Get Import Account.", "Reference": "Get Import - Kontendefinition.", "NNUpdater": "Get Konto."}
{"Origin": "For adding classpath elements that are not normally on the classpath in the Java version: svm jars, truffle jars etc.", "Reference": "For adding classpath elements that are only on the classpath in the context of native-image building.", "NNUpdater": "Creates a {@link JavaSourceJarsProvider} from the given lists of source jars."}
{"Origin": "Create a GeoCircle of the right kind given the specified bounds.", "Reference": "Create a GeoCircle from a center and a cutoff angle.", "NNUpdater": "Create a context with the given configuration."}
{"Origin": "Set the nodeType.", "Reference": "Set the newType.", "NNUpdater": "Set Knoten."}
{"Origin": "Sets a new value by changing the offset and docID.", "Reference": "Sets a new value by changing the offset.", "NNUpdater": "Sets the time Offset in seconds."}
{"Origin": "The MD5 hash of the file.", "Reference": "The hash of the file.", "NNUpdater": "Returns an MD5 hash."}
{"Origin": "Creates a list of default files to check for credentials.", "Reference": "Creates a list of files to check for credentials.", "NNUpdater": "Adds the given credentials to the list of known credentials."}
{"Origin": "Sets each pixel in the output image to sgn*log( 1 + sgn*input(x,y)) of the input image.", "Reference": "Sets each pixel in the output image to sgn*log( val + sgn*input(x,y)) of the input image.", "NNUpdater": "Retrieves {@link InputStream} of image by URI."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "The entries in the file are assumed to be the fully-qualified binary names of provider classes.", "Reference": "The entries in the file are assumed to be the fully-qualified class names of provider classes.", "NNUpdater": "Get the fully-qualified name of the enum const value, i.e."}
{"Origin": "Reads a tag, an arrau of four uint8s used to identify a script, language system, feature, or baseline.", "Reference": "Reads a tag, an array of four uint8s used to identify a script, language system, feature, or baseline.", "NNUpdater": "Returns the script for a given Locale."}
{"Origin": "The key for a max value, or null if everything is NaN (no max).", "Reference": "The key for a max value; null if empty or everything is NaN (no max).", "NNUpdater": "Returns the maximum elements number."}
{"Origin": "Gets the editor component generator for this Column.", "Reference": "Gets the grid that this column belongs to.", "NNUpdater": "Gets the value of the usergenerator property."}
{"Origin": "Whenever a minion with Deathrattle is summoned, gain +1/+1", "Reference": "Whenever a minion with Deathrattle is summoned, gain +1 Attack", "NNUpdater": "Called whenever another minion is summoned, before the summoning"}
{"Origin": "Gets the Ibor index.", "Reference": "Gets the name of the volatilities.", "NNUpdater": "Gets the longer Ibor index observation."}
{"Origin": "Obtains an instance from the specified unique name.", "Reference": "Obtains an instance from the specified name.", "NNUpdater": "Obtains the type from a unique name."}
{"Origin": "Returns a {@link Date} representing the date of the last checkpoint before the given block height, for example, normally you would want to know the checkpoint before the last block the wallet had seen.", "Reference": "Returns a {@link StoredBlock} representing the last checkpoint before the given block height, for example, normally you would want to know the checkpoint before the last block the wallet had seen.", "NNUpdater": "For {@link CheckpointType#CHECKPOINT} this returns the shared factory of this operator."}
{"Origin": "Deletes the specified variable from the configuration.", "Reference": "Deletes the specified variable from the CONFIGURATION.", "NNUpdater": "Returns the value of the specified variable."}
{"Origin": "Configures SSL or TLS of the default {@link VirtualHost} from the specified {@code keyManagerFactory} and {@code tlsCustomizer}.", "Reference": "Configures SSL or TLS of the {@link Server} from the specified {@code keyManagerFactory} and {@code tlsCustomizer}.", "NNUpdater": "TlsContext.isExtension{Proposed,Negotiated}(extType)."}
{"Origin": "If it fails, an exception is thrown and the read lock will not be locked.", "Reference": "If the reinitialization fails, an exception is thrown.", "NNUpdater": "If this fails too then an LWJGLErrorException will be thrown."}
{"Origin": "Returns true if the specified String name, is found within JsonArray checks.", "Reference": "Returns true if the expectedName, is found within JsonArray checks.", "NNUpdater": "Checks if the specified element is found in the list."}
{"Origin": "Create a new {@link ICrypter} for the given context.", "Reference": "Create a new {@link ICrypter}.", "NNUpdater": "Create a {@link Kind#SHARE_PARENT_RO} {@link RContext}."}
{"Origin": "Produces a Collapsed SemanticGraph with no extras.", "Reference": "Produces a Collapsed SemanticGraph.", "NNUpdater": "Set the semanticRoles."}
{"Origin": "WorkItemLifecycleEvent} and calls the {@link #publish(WorkItemLifecycleEvent)} method", "Reference": "WorkItemLifecycleEvent} and calls the {@link #publish(IWorkItemLifecycleEvent)} method", "NNUpdater": "Creates a new instance of {@link org.spongepowered.api.event.entity.SpawnEntityEvent.Custom}."}
{"Origin": "Gets the {@link Value.Mutable} for the {@link Keys#LLAMA_VARIANT llama variant}.", "Reference": "Gets the {@link Value.Mutable} for the {@link LlamaType} of this {@link Llama}.", "NNUpdater": "Gets the {@link Value.Mutable} for the {@link Keys#LLAMA_VARIANT llama variant}."}
{"Origin": "Set a new {@link JacksonResourceProvider} to this builder, dedicated to provide an {@link ObjectMapper} for serialization and deserialization of data.", "Reference": "Set a new {@link JacksonResources} to this builder, dedicated to provide an {@link ObjectMapper} for serialization and deserialization of data.", "NNUpdater": "Tests serialization/deserialization for {@link RecentJobEvent}."}
{"Origin": "Lists a feedback entry with a specified `feedback_id`.", "Reference": "Gets a feedback entry with a specified `feedback_id`.", "NNUpdater": "Sets a filter to use on the feedback messages model"}
{"Origin": "Adds an export.", "Reference": "Sets module opens.", "NNUpdater": "Set Kann exportieren."}
{"Origin": "If the new address is {@code null}, a pending flight is cancelled and an ongoing handshake is failed.", "Reference": "If the new address is {@code null}, an ongoing handshake is failed.", "NNUpdater": "Checks if the state is {@link #CANCELLED} or {@link #INTERRUPTED}."}
{"Origin": "Binds the specified {@link Service} at the specified path pattern.", "Reference": "Binds the specified {@link HttpService} at the specified path pattern.", "NNUpdater": "Binds the specified {@link Service} at the specified {@link Route}."}
{"Origin": "Maps all index descriptors according to {@link #indexReference(IndexDescriptor2)}.", "Reference": "Maps all index descriptors according to {@link #indexReference(IndexDescriptor)}.", "NNUpdater": "E.g setZIndex() becomes ``zIndex``."}
{"Origin": "Queries this contact source for the given queryString.", "Reference": "Creates query for the given queryString.", "NNUpdater": "Queries this ContactSourceService for SourceContacts which match a specific query Pattern."}
{"Origin": "Get the next value.", "Reference": "Returns the next value from the input.", "NNUpdater": "Returns the next value from the input."}
{"Origin": "Normalizes the specified URL and creates a new instance of this class.", "Reference": "Normalizes the specified URI and creates a new instance of this class.", "NNUpdater": "Removes comments from the specified string."}
{"Origin": "Makes the given visitor visit all of the instructions in this list.", "Reference": "Makes the given visitor visit all the instructions in this list.", "NNUpdater": "Makes the given visitor visit the Java class of this Class Reader."}
{"Origin": "Removes the trace associated with this CallableStatement from the Connection that created it.", "Reference": "Removes the trace associated with this CallableStatement from the", "NNUpdater": "Execute the statement."}
{"Origin": "If you actual latency will be lower than ``desirableOperationLatency``, will calculate the difference and use it as {@link BulkheadConfig}.maxWaitTime", "Reference": "If you actual latency will be lower than ``slowCallDurationThreshold``, will calculate the difference and use it as {@link BulkheadConfig}.maxWaitTime", "NNUpdater": "Desirable operation latency in millis/operation."}
{"Origin": "Convert to doublep[]", "Reference": "Convert to double[]", "NNUpdater": "Convert a collection of objects to a list of , using {@link #convert(Object, Class)}"}
{"Origin": "Provide the implementation of the PlatformDecoder for the current platform using the provided", "Reference": "Provide the implementation of the PlatformDecoder for the current platform using the provided PoolFactory", "NNUpdater": "- The platform."}
{"Origin": "add partition of buffer to consume", "Reference": "add whole buffer to consume", "NNUpdater": "Add an encoded message to the buffer"}
{"Origin": "If the date is set properly Wicket can check the to determine if the actuall data really needs to be sent to client.", "Reference": "If the date is set properly Wicket can check the to determine if the actual data really needs to be sent to client.", "NNUpdater": "If this value is true then the request should be proxied after all pre filters have been applied."}
{"Origin": "Rule a subsumes rule b, if a subsumes b AND a has got least the same expected predictive accuracy as b.", "Reference": "The defintion of subsumption is: Rule a subsumes rule b, if a subsumes b AND a has got least the same expected predictive accuracy as b.", "NNUpdater": "In particular, each trait set satisfies itself, because each trait subsumes itself."}
{"Origin": "Set the connection properties passed to the JDBC driver.", "Reference": "Sets the connection properties passed to the JDBC driver.", "NNUpdater": "prefix trimmed."}
{"Origin": "Do nothing if {@link BaseConfiguration#nocomment} is set to true.", "Reference": "Do nothing if {@link BaseOptions#noComment} is set to true.", "NNUpdater": "If already present, does nothing."}
{"Origin": "Saves all writable accounts and the default account, which can later be obtained with {@link #getDefaultAccount}.", "Reference": "Saves the default account, which can later be obtained with {@link #getOnlyOrDefaultAccount}.", "NNUpdater": "Account account = new Account(``Acct `` + i); mAccountsDbAdapter.addRecord(account); }"}
{"Origin": "Returns the full set of traversal parameters specified on the command line, including parsed intervals without merging intervals specified by the user on the command line.", "Reference": "Returns the full set of traversal intervals specified on the command line, including parsed intervals without merging intervals specified by the user on the command line.", "NNUpdater": "Parse and validate the command line parameters."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Sets {@link HtmlOptions#createOverview} field to true.", "Reference": "Sets {@code HtmlOptions.createOverview} field to true.", "NNUpdater": "Returns true if this field is indexed ({@link #getIndexOptions} is not IndexOptions.NONE)."}
{"Origin": "This operation requires the {@code secrets/get} permission.", "Reference": "This operation requires the {@code secrets/delete} permission.", "NNUpdater": "This operation requires the {@code secrets/get} permission."}
{"Origin": "Binds a new instance {@link Descriptor} using the information from the Jersey descriptor {@link InstanceBeanDescriptor}.", "Reference": "Binds a new instance {@link Binding} using the information from the Jersey descriptor {@link InstanceBinding}.", "NNUpdater": "Finds a descriptor by their {@link Descriptor#getId()}."}
{"Origin": "The {@link MessagingExceptionHandler} configured on {@link MessageProcessorChain} or {@link FlowConstruct} will be used to handle any errors that occur.", "Reference": "The {@link FlowExceptionHandler} configured on {@link MessageProcessorChain} or {@link FlowConstruct} will be used to handle any errors that occur.", "NNUpdater": "Creates a {@link Processor} that will process messages from the configured {@link MessageSource} ."}
{"Origin": "Adds a fatal exception to the message set and throws the unit as a PhaseFailedException.", "Reference": "Adds an error to the message set and throws CompilationFailedException.", "NNUpdater": "throws a NonEmptyException exception when number > 0"}
{"Origin": "If the option to use a central repository has been selected, does not indicate the central repository is configured for use.", "Reference": "If the option to use a central repository has been selected, does not indicate the central repository is configured for use simply that the checkbox allowing configuration is checked on the options panel.", "NNUpdater": "Upload central repository settings."}
{"Origin": "Report the ending barline.", "Reference": "Report the ending PartBarline.", "NNUpdater": "Report the ending barline."}
{"Origin": "Add a series for a X-Y type chart using Lists with error bars", "Reference": "Add a series for a X-Y type chart using Lists", "NNUpdater": "Add a Number series to the chart using Collections with error bars"}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Get the hex color for the primary displayed usernote of a user", "Reference": "Get the color for the primary displayed usernote of a user", "NNUpdater": "Returns color with modified alpha value."}
{"Origin": "Rotate this vector the specified radians about the given rotation axis.", "Reference": "Rotate this vector the specified radians around the given rotation axis.", "NNUpdater": "Apply a rotation to quaternion rotating the given radians about the specified axis."}
{"Origin": "Does nothing if the given node is currently not visible or target is .", "Reference": "Does nothing if the given node is currently not visible or target is {@code null}.", "NNUpdater": "Does nothing if the task is not currently locked or not an active task."}
{"Origin": "Tests that apply works.", "Reference": "See issue 1683.", "NNUpdater": "Tests that is creating a file with a date or an calendar works correctly."}
{"Origin": "Returns the value of the node as a module identifier, or null if the node is undefined.", "Reference": "Returns the value of the node as a module identifier.", "NNUpdater": "Returns the old type system type for a type assertion, or null if the function asserts that the node must not be null or undefined."}
{"Origin": "Returns a lightweight, low-level preceding-sibling axis iterator.", "Reference": "Returns a light-weight, low-level preceding-sibling axis iterator.", "NNUpdater": "Returns the low-level HTTP call."}
{"Origin": "Testing the normalize(Vector) and normalizeEquals(Vector) methods of the VMath class.", "Reference": "Testing the normalizeVector) and normalizeEquals(Vector) methods of the {@link VMath} class.", "NNUpdater": "Normalizes this vector and store the result in ."}
{"Origin": "Adds a 'followingUser' type notification with the specified request json object.", "Reference": "Adds a 'following - user' type notification with the specified request json object.", "NNUpdater": "Test @JsonNotification with a invalid json content"}
{"Origin": "Turn a toX of Either3 into a single Either with Lists of values.", "Reference": "Turn an IterableX of Either3 into a single Either with Lists of values.", "NNUpdater": "List[AnyM[Either3:lazyRight[1],Either3:lazyLeft[10]]] }"}
{"Origin": "Tests {@link Array#from(Value...)}.", "Reference": "Tests {@link XQArray#from(Value...)}.", "NNUpdater": "Operation fails."}
{"Origin": "Ingest a Matrix into an H2O Frame.", "Reference": "Ingest a Mahout Matrix into an H2O DRM.", "NNUpdater": "Transform Orc schema into H2O type."}
{"Origin": "Returns {@link List} of collapsed {@link AccordionPane}s", "Reference": "Asks {@link WebAccordion} to collapse {@link AccordionPane}s with the specified identifiers.", "NNUpdater": "Throws {@link"}
{"Origin": "Same as {@link #awaitResult(long, TimeUnit)}, but throw InterruptedException and TimeoutException as an OperationCancellation.", "Reference": "Same as {@link #awaitResult(long, TimeUnit)}, but throw InterruptedException as an OperationCancellation.", "NNUpdater": "Same as {@code await(1)}."}
{"Origin": "shows full-screen preview of the passed media", "Reference": "show full-screen preview of the item and the passed position", "NNUpdater": "Sets the playback."}
{"Origin": "Handles a netty RPC callable with logging.", "Reference": "Handles a streaming RPC callable with logging.", "NNUpdater": "If needed wraps the passed in Callable in a new {@link Callable} that propagates the current request state when the returned Callable is invoked."}
{"Origin": "Build an HTTP Ok without any content.", "Reference": "Build an HTTP No content.", "NNUpdater": "Build an HTTP Ok without any content."}
{"Origin": "Sets the quorum name for operations.", "Reference": "Sets the split brain protection name for operations.", "NNUpdater": "Sets the cluster read quorum strategy."}
{"Origin": "Returns the expression to the left of the ``::`` if it exists and is unambiguous.", "Reference": "Returns the node to the left of the ``::``.", "NNUpdater": "Set the flag to indicate that this property is to be considered unabiguous - that is, it is defined by the DAML class ."}
{"Origin": "Determine type of a store base on a store file name.", "Reference": "Determine type of a store base on provided database file.", "NNUpdater": "Stores the configuration to a file."}
{"Origin": "Set name of the Cosmos DB table.", "Reference": "Set the resource value.", "NNUpdater": "Set the name value."}
{"Origin": "Returns prefix {@code byte} for this type.", "Reference": "Returns length of this type.", "NNUpdater": "Returns the byte at {@code pos}."}
{"Origin": "Adds part of another token to the token.", "Reference": "Adds the part of a token to the token.", "NNUpdater": "Get matched token by token type."}
{"Origin": "Any graphs needed are in-memory unless explciitly added with {@link Dataset#addNamedModel}.", "Reference": "Any graphs needed are in-memory unless explicitly added with {@link Dataset#addNamedModel}.", "NNUpdater": "Operation fails."}
{"Origin": "and repositoryId = ?.", "Reference": "and type = ?.", "NNUpdater": "Engine."}
{"Origin": "Generates random trits for a transaction.", "Reference": "Generates trits for a hash.", "NNUpdater": "Generates a random bar."}
{"Origin": "Thread signaled test for {@link PredicateLock#waitForever()}", "Reference": "Thread signaled test for {@link PredicateLock#waitForTimeoutOrFail(long)}", "NNUpdater": "Deprecated."}
{"Origin": "or throws a {@link com.liferay.calendar.NoSuchResourceException} if it could not be found.", "Reference": "or throws a {@link NoSuchResourceException} if it could not be found.", "NNUpdater": "Operation fails."}
{"Origin": "n choose k. Returns 0 if n is less than k.", "Reference": "The n choose k. Returns 0 if n is less than k.", "NNUpdater": "Is this Duration shorter than the specified one."}
{"Origin": "Show {@link Toast} for exception", "Reference": "Show {@link Toast} for throwable", "NNUpdater": "Can show an error toast, if not."}
{"Origin": "List a range of recording descriptors which match a channel and stream id.", "Reference": "List a range of recording descriptors which match a channel URI fragment and stream id.", "NNUpdater": "Get the active recording id for a given counter id."}
{"Origin": "Register the runnable to process the specific pTransformId.", "Reference": "Register the runnable to process the specific pTransformId and track its execution time", "NNUpdater": "Process the queue."}
{"Origin": "Robust computation of the inverse covariance matrix.", "Reference": "Update the cholesky decomposition.", "NNUpdater": "openInverse : OPEN_INVERSE sexpr blockParams?"}
{"Origin": "See the {@link BlowfishCipher} class-level JavaDoc for more information and why it might be good to provide your own.", "Reference": "See the class-level JavaDoc for more information and why it might be good to provide your own.", "NNUpdater": "For more information, see the Amazon"}
{"Origin": "Get the channel parameter for the cluster log and snapshot replay channel.", "Reference": "Set the counter for the current state of the cluster backup.", "NNUpdater": "Get the channel parameter for the cluster log and snapshot replay channel."}
{"Origin": "Reset the leader election throttle.", "Reference": "Reset the leader election throttles.", "NNUpdater": "Adds a leader election listener."}
{"Origin": "Apply the rotation transformation of the given {@link Quaterniond} to this matrix.", "Reference": "Apply the rotation transformation of the given {@link Quaterniondc} to this matrix.", "NNUpdater": "Apply the rotation transformation of the given {@link Quaterniond} to this matrix."}
{"Origin": "Fetches the configuration settings that match the {@code options}.", "Reference": "Fetches the configuration settings that match the {@code selector}.", "NNUpdater": "Fetches all {@link BatchScanConfig}s that have been set on the given Hadoop configuration."}
{"Origin": "Autodetect a {@link FreeMarkerConfig} object via the ApplicationContext.", "Reference": "Autodetect a {@link FreeMarkerConfig} object in the {@code ApplicationContext}.", "NNUpdater": "Creates an {@link PropertyMarkerValue} object for the absolute marker value."}
{"Origin": "Invoked when the txn has been removed from the queue and is starting to execute at a local ExecutionSite", "Reference": "Invoked when the txn has been removed from the queue and is starting to execute at a local PartitionExecutor", "NNUpdater": "Invoked when a request has been matched to a mapping."}
{"Origin": "Then return all - block to get the trapped water", "Reference": "Then return total - blocks to get the trapped water.", "NNUpdater": "Get the affected blocks."}
{"Origin": "Create an instance of {@link Con }", "Reference": "Create an instance of {@link Con1 }", "NNUpdater": "Create an instance of {@link ParamType.Value }"}
{"Origin": "Delete RADIUS Configuration ### Functional Description: Delete existing RADIUS configuration.", "Reference": "Delete RADIUS configuration ### Functional Description: Delete existing RADIUS configuration.", "NNUpdater": "Extracts the RADIUS packet from a packet sent by the supplicant."}
{"Origin": "Check whether the given member is a proxy member of a proxy object.", "Reference": "Check whether the given member is a proxy member of a proxy object or is a static proxy member.", "NNUpdater": "Returns a member by ID."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Get the normalized variation of information (normalized, 0 = equal) NVI = 1 - NMI_Joint", "Reference": "Get the normalized variation of information (normalized, small values are good).", "NNUpdater": "Return the optimized Value of {@code value}."}
{"Origin": "Generates a valid document ID for a service, used to index the service in ES.", "Reference": "Generates a valid document ID for a API, used to index the API in ES.", "NNUpdater": "Get the used service list."}
{"Origin": "Returns the JDBC connection {@link #username} property.", "Reference": "Returns the JDBC connection {@link #userName} property.", "NNUpdater": "-U"}
{"Origin": "When the insertion is complete, the {@code ticker} will be {@link CountUpLatch#countUp() incremented} by 1.", "Reference": "When the insertion is complete, the {@code tracker} will be {@link CountUpLatch#countUp() incremented} by 1.", "NNUpdater": "This value is increased every time {@code loadSuccessCount} or {@code loadExceptionCount} is incremented."}
{"Origin": "Calculates all distances of atoms within this cell returning those that are within the given cutoff as a list of AtomContacts", "Reference": "Calculates all distances of atoms within this cell returning those that are within the given cutoff as a list of Contacts containing the indices of the pair and the calculated distance.", "NNUpdater": "Creates a call to the contact represented by the given string."}
{"Origin": "Converts milliseconds to a string containing hours and minutes", "Reference": "Converts milliseconds to a string containing hours and minutes or minutes and seconds", "NNUpdater": "The format used is ISO8601-like, hours:minutes:seconds.milliseconds."}
{"Origin": "WebPage on a job-by-job basis and thier values indicative of what actions should be associated with a WebPage.", "Reference": "They are assigned to a WebPage on a job-by-job basis and thier values indicative of what actions should be associated with a WebPage.", "NNUpdater": "A web page will be automatically created with the {@code pageMarkup} provided."}
{"Origin": "Gets the price that was traded, in decimal form.", "Reference": "Gets the price that was traded, together with the trade date, optional.", "NNUpdater": "Gets the future that was traded."}
{"Origin": "Create a TripTimeSubset from a given trip pattern, date and time window.", "Reference": "Create a TripTimeSubset from a given trip pattern, bitset of services running, and time window.", "NNUpdater": "Only checks specific transfers with no fromRoute, toRoute, fromTrip or toTrip defined."}
{"Origin": "Availability Zone in the same Region to increase fault tolerance in the event of a service disruption.", "Reference": "Zone in the same Region to increase fault tolerance in the event of a service disruption.", "NNUpdater": "Zone (for example, )."}
{"Origin": "RxRatpack.promise(new AsyncService().observe(``foo``)) ).getValue();", "Reference": "RxRatpack.promiseAll(new AsyncService().observe(``foo``)) ).getValue();", "NNUpdater": "Operation fails."}
{"Origin": "Returns all the push notifications devices where platform = ?.", "Reference": "Returns all the push notifications devices where userId = any ?", "NNUpdater": "Returns the children push notifications entries count of this push notifications entry."}
{"Origin": "Parse the newly generated SQL statment to get a new AST", "Reference": "Parse the newly generated SQL statement to get a new AST", "NNUpdater": "Determines whether a block of SQL is a SELECT statement."}
{"Origin": "| Then we can use this range we retrieve levels from the map.", "Reference": "| Then this range can be used to retrieve column values from the map.", "NNUpdater": "We start validation from wherever we are in the stream."}
{"Origin": "Gets the user's avatar URL, if present and in a supported format.", "Reference": "Gets the user's avatar URL, if present.", "NNUpdater": "Gets the user's avatar URL, if present and in a supported format."}
{"Origin": "Return if {@link ITokenTypeAttribute#TF_COMMON_WORD} is set.", "Reference": "Return if {@link ITokenizer#TF_COMMON_WORD} is set.", "NNUpdater": "Operation fails."}
{"Origin": "Calls {@link #reset()} and releases any held DRM resources.", "Reference": "Calls {@link #reset()} and releases any owned {@link DrmSession} references.", "NNUpdater": "If {@link OnDrmConfigHelper} is registered, it will be called during preparation to allow configuration of the DRM properties before opening the DRM session."}
{"Origin": "Removes given PacketExtension from the list of child packet extensions.", "Reference": "Removes given ExtensionElement from the list of child packet extensions.", "NNUpdater": "Returns an unmodifiable collection of the packet extensions attached to the packet."}
{"Origin": "Conducts the actual dispatch by searching up the baseType's superclass hierarchy and interface hierarchy if the sourcecode level is beyond Java 7 (due to defautl interface methods.)", "Reference": "Conducts the actual dispatch by searching up the baseType's superclass hierarchy and interface hierarchy if the sourcecode level is beyond Java 7 (due to default interface methods.)", "NNUpdater": "Generate the interface hierarchy and class hierarchy."}
{"Origin": "Prepare task event for execution on agent.", "Reference": "Prepare exe params for send REST request on node.", "NNUpdater": "Start server."}
{"Origin": "This method returns an interface that is both ``up`` and supports multicast.", "Reference": "This method returns the first interface that is both ``up`` and supports multicast.", "NNUpdater": "Returns the list of endpoints"}
{"Origin": "Return true if the given CmsTreeItem or its children is selected.", "Reference": "Return true if at least one child of the given tree item is selected.", "NNUpdater": "Returns the selected item of this menu."}
{"Origin": "Note that this performs chains construction but wil not inject {@link MuleContext} or {@link FlowConstruct} or perform any lifecycle.", "Reference": "Note that this performs chains construction but will not inject {@link MuleContext} or perform any lifecycle.", "NNUpdater": "Typically, either this property is set, or {@link #setDefaultUri(String)}, but not both."}
{"Origin": "NOTE: Amazon Glacier retains recently completed jobs for a period before deleting them; however, it eventually removes completed jobs.", "Reference": "Amazon Glacier retains recently completed jobs for a period before deleting them; however, it eventually removes completed jobs.", "NNUpdater": "Gets the snapshot of the completed jobs list for an auto ingest cluster."}
{"Origin": "Appends the information about the given handle to {@link #buf buf}.", "Reference": "Appends a string representation of the given handle to {@link #stringBuilder}.", "NNUpdater": "Writes rec file position to given {@code buf}."}
{"Origin": "Handler method converting a Jetty Connection into a Restlet Call.", "Reference": "Handler method converting a Jetty HttpChannel into a Restlet Call.", "NNUpdater": "Returns the target handler."}
{"Origin": "The timestamp for creation of the synonym.", "Reference": "The timestamp for creation of the object.", "NNUpdater": "Sets the synonymText."}
{"Origin": "Returns the (unbiased) skew of all the values within a {@link PointSet} region of a {@link Dataset}", "Reference": "Returns the (unbiased) kurtosis of all the values within a {@link PointSet} region of a {@link Dataset}", "NNUpdater": "The class of the {@link DatasetsFinder} is read from property {@link #DATASET_PROFILE_CLASS_KEY}."}
{"Origin": "remove space for SQL expression and outside parentheses", "Reference": "remove space for SQL expression", "NNUpdater": "Create a stack."}
{"Origin": "Reads the inbound request headers from the request and sets them on the {@link ServiceRequest}.", "Reference": "Reads the inbound request headers from the request and sets them on the {@link ApiRequest}.", "NNUpdater": "Returns the request headers conditions of this request key."}
{"Origin": "Waits for up to 5 seconds for a path to exist in the container.", "Reference": "Waits for up to 20 seconds for a path to exist in the container.", "NNUpdater": "Waits for up to 5 seconds for a terminal cursor position report to appear in the input stream."}
{"Origin": "Returns the input stream of this message content.", "Reference": "Returns the CachedOutputStream of this message content.", "NNUpdater": "Returns the input stream of this message content."}
{"Origin": "The value is {@link ArtifactFileMetadata#PLACEHOLDER} if the artifact's metadata is not fully captured in {@link #additionalOutputData}.", "Reference": "The value is {@link FileArtifactValue#PLACEHOLDER} if the artifact's metadata is not fully captured in {@link #additionalOutputData}.", "NNUpdater": "Equivalent to {@link #removeMetadataOutput(MetadataOutput)}."}
{"Origin": "Currently, SONA supports Flat, VXLAN and VLAN modes.", "Reference": "Currently, SONA supports Flat, VXLAN, GRE and VLAN modes.", "NNUpdater": "Currently, SONA supports Flat, VXLAN and VLAN modes."}
{"Origin": "Returns {@code true} if this module reflectively exports the given package package to the given module.", "Reference": "Returns {@code true} if this module reflectively exports or opens given package package to the given module.", "NNUpdater": "Returns {@code true} if this module exports the given package to at least the given module."}
{"Origin": "Search for package name in the sorted regular expression list, if found return the group name.", "Reference": "Search for element name in the sorted regular expression list, if found return the group name.", "NNUpdater": "Gets the search request as a regular expression pattern list."}
{"Origin": "Returns the keyFrames[] array where all the TextureRegions of the animation are stored.", "Reference": "Returns the keyframes[] array where all the frames of the animation are stored.", "NNUpdater": "Removes a list of {@link BaseTexture}s from the TextureManager."}
{"Origin": "Get the current {@link RequestScope.Instance request scope instance} and mark it as suspended.", "Reference": "Get the current {@link RequestContext request scope context} and mark it as suspended.", "NNUpdater": "Maps a {@link Scope} instance to a given annotation."}
{"Origin": "Whether to group the REST resources together.", "Reference": "How to group the REST resources together.", "NNUpdater": "Guide."}
{"Origin": "Assign available voices to the chords that have no voice assigned yet.", "Reference": "Assign available voices to the chords in this measure with no voice assigned yet.", "NNUpdater": "Assign a voice to this chord"}
{"Origin": "NOTE:This operation is eventually consistent.", "Reference": "This operation is eventually consistent.", "NNUpdater": "Sets the request action."}
{"Origin": "Ensures server received authentication request.", "Reference": "Ensures server received an extensions request.", "NNUpdater": "Set Eingangsdatum."}
{"Origin": "The option will be converted to a type.", "Reference": "The option is a: type.", "NNUpdater": "Later, the collection will be converted into the target type."}
{"Origin": "Returns true if the given class loader is in the system domain in which all permissions are granted.", "Reference": "Returns true if the given class loader is the bootstrap class loader or the platform class loader.", "NNUpdater": "Returns true if the given class loader equals to the given module's class loader."}
{"Origin": "Cancels all deadlines corresponding to the given {@code deadlineName} that are scheduled withing {@link", "Reference": "Cancels all deadlines corresponding to the given {@code deadlineName} that are scheduled within {@link", "NNUpdater": "The provided {@code deadlineName} / {@code scheduleId} combination can be used to cancel the scheduled deadline."}
{"Origin": "IMPORTANT:Because the number of workflow history events for a single workflow execution might be very large, the result returned might be split up across a number of pages.", "Reference": "Because the number of workflow history events for a single workflow execution might be very large, the result returned might be split up across a number of pages.", "NNUpdater": "Get gets the reference to workflow version."}
{"Origin": "The default resolution is {@link Resolution#DAY} since Vaadin VERSION.", "Reference": "The default resolution is {@link DateResolution#DAY} since Vaadin VERSION.", "NNUpdater": "Date: {@link LegacyDateField}(resolution: day)."}
{"Origin": "Returns the response body as a string.", "Reference": "Return the response body as a string.", "NNUpdater": "Return the response body as a string."}
{"Origin": "Returns {@link List} of expanded {@link AccordionPane}s.", "Reference": "Asks {@link WebAccordion} to collapse {@link AccordionPane}s with the specified identifiers.", "NNUpdater": "Returns a {@link List} of this {@code Cell}'s {@link DistalDendrite}s"}
{"Origin": "Initializes the execution of a task.", "Reference": "Initializes the state machine.", "NNUpdater": "Initializes the dialog"}
{"Origin": "Inserts the given instructions at the begining of this list.", "Reference": "Inserts the given instructions at the beginning of this list.", "NNUpdater": "Inserts the specified element as a component in this list at the specified ."}
{"Origin": "Removes the specified properties of the {@link NamespacedEntityId}.", "Reference": "Removes the specified properties of the {@link MetadataEntity}.", "NNUpdater": "Removes the specified properties of the {@link NamespacedEntityId}."}
{"Origin": "Called in response to the {@link RContext#destroy} method.", "Reference": "Called in response to the {@link RContext#dispose} method.", "NNUpdater": "Sends {@link RemoteDestroyAdmin#destroy()} request to the service."}
{"Origin": "Each class must represent an annotated class.", "Reference": "Each class must represent a component class.", "NNUpdater": "Each class must represent an annotated class."}
{"Origin": "Add the specified {@link Graph} to the cache.", "Reference": "Add the specified {@link Store} to the cache.", "NNUpdater": "If the {@code targetGraph} exists in the cache it returns a cached version of the {@link ActionGraphAndResolver}, else returns a new one and updates the cache."}
{"Origin": "High order byte is serverId, next 5 5 bytes are from timestamp, and low order 2 bytes are 0s.", "Reference": "High order 1 byte is serverId, next 5 bytes are from timestamp, and low order 2 bytes are 0s.", "NNUpdater": "keySize - first 4 bytes stateSize - next 4 bytes historySize - next 4 bytes key - next idSize bytes state - next stateSize bytes history - remaining bytes"}
{"Origin": "Common test method to be able to check security from any authentication plugin", "Reference": "Common test method to be able to check auth metrics from any authentication plugin", "NNUpdater": "Adds new security scan to TestStep SecurityTest config"}
{"Origin": "An example of a valid direction is {@code new Vector(1, 0, 1)}.", "Reference": "An example of a valid direction is {@code new BlockVector3(1, 0, 1)}.", "NNUpdater": "For example, a {@code List} return type can be specified as {@code ofType(new TypeDescriptor>(){})}."}
{"Origin": "Code snippets for {@link LeaseClientBuilder#buildClient()}.", "Reference": "Code snippets for {@link BlobLeaseClientBuilder#buildClient()}.", "NNUpdater": "WebClient client = WebClient.create(``URL``);"}
{"Origin": "Pauses all downloads.", "Reference": "Pauses downloads.", "NNUpdater": "Signals all downloads to stop."}
{"Origin": "Decodes a String representing a number of events into a Vector of LoggingEvents", "Reference": "Decodes a String representing a number of events into a", "NNUpdater": "Decodes a String representing a number of events into a Vector of LoggingEvents"}
{"Origin": "Checks whether or not resources in the WEB-INF folder can be access.", "Reference": "Checks whether or not resources in the web root folder can be access.", "NNUpdater": "generates web.xml to WEB-INF."}
{"Origin": "Get Stringwert.", "Reference": "Get Eingaberegister Name.", "NNUpdater": "Get OrderType."}
{"Origin": "Compare the two queues containing operator/task output by converting them to an array first.", "Reference": "Compare the two queues containing operator/task output by converting them to an array first, sort array by comparator.", "NNUpdater": "Compares two H2 rows."}
{"Origin": "Wrapper for close of ResultSet which removes this result set from being traced then calls close on the original ResultSet.", "Reference": "Wrapper for close of ResultSet which removes this result set from being traced then calls close on the original", "NNUpdater": "Set Ergebnis."}
{"Origin": "Sets the Single character used to indicate a row should be ignored when present at the start of a row.", "Reference": "Sets the character used to indicate a row should be ignored when present at the start of a row.", "NNUpdater": "Adds a row."}
{"Origin": "The current thread might be already in any request scope and in that case the scope will be changed to the scope defined by the {@link RequestScope.Instance scope instance}.", "Reference": "The current thread might be already in any request scope and in that case the scope will be changed to the scope defined by the {@link RequestContext scope context}.", "NNUpdater": "Maps a {@link Scope} instance to a given annotation."}
{"Origin": "and ``..`` in file names.", "Reference": "and ``..`` in {@link File} names.", "NNUpdater": "Adds all files in fileNames to the manifest.xml file."}
{"Origin": "Parses the {@code Vector2} represented by the given string according to the format of {@link #toString()}.", "Reference": "Sets this {@code Vector2} to the value represented by the specified string according to the format of {@link #toString()}.", "NNUpdater": "Implements the {@link #set(String, String)} method."}
{"Origin": "Returns the function annotations.", "Reference": "Returns the function body expression.", "NNUpdater": "Returns the unique annotation names for annotations on each method parameter, if any parameters have annotations, else returns null."}
{"Origin": "Configure a {@link RSocketOutboundGateway.Command} for RSocket request type.", "Reference": "Configure an {@link RSocketOutboundGateway.Command} for the RSocket request type.", "NNUpdater": "Creates a socket using socket factory."}
{"Origin": "Inserts a {@link Set} to the {@link Dataset}", "Reference": "Inserts a {@code Set} to the {@link Dataset}.", "NNUpdater": "Load a {@link Dataset} or {@link View} for the given {@link URI}."}
{"Origin": "Handles: POST /clusters/{clusterName}/servicegroups/{serviceGroupName}/services/{serviceDisplayName}", "Reference": "Handles: POST /clusters/{clusterName}/servicegroups/{serviceGroupName}/services/{serviceName}", "NNUpdater": "Handles: PUT /clusters/{clusterId}/services/{serviceId}"}
{"Origin": "Then log4j invokes the {@link #setAppenderName(String)} method to set the value of {@link #mAppenderName}.", "Reference": "Then log4j invokes the {@link #setProcessType(String)} method to set the value of {@link #mProcessType}.", "NNUpdater": "Creates an {@link AsyncAppenderFactory} of type {@link IAccessEvent} that prepares events for deferred processing"}
{"Origin": "Returns the status with the primary key or throws a {@link com.liferay.chat.NoSuchStatusException} if it could not be found.", "Reference": "Returns the status with the primary key or throws a {@link NoSuchStatusException} if it could not be found.", "NNUpdater": "Similar to {@link #getRecovery(long)} but throws an exception if no recovery is found"}
{"Origin": "IMPORTANT: After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group.", "Reference": "After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group.", "NNUpdater": "Creates a new DB parameter group."}
{"Origin": "Sets the state attribute of this User to state", "Reference": "Sets the state attribute of this User's element to state", "NNUpdater": "Sets the state if the current state {@code .equals()} the specified expected state."}
{"Origin": "This call returns true in the interpreter or a low tier compilation that does profiling.", "Reference": "This call returns true in the interpreter or a low grade compilation that does profiling.", "NNUpdater": "Returns the low-level HTTP call."}
{"Origin": "Returns the InetAddress associated with the client who created/is interacting with this Subject.", "Reference": "Returns the host name or IP associated with the client who created/is interacting with this Subject.", "NNUpdater": "If this is not known, use {@link #inetAddress(InetAddress)} instead."}
{"Origin": "Code snippet for {@link AppendBlobAsyncClient#createWithResponse(BlobHTTPHeaders, Map, BlobAccessConditions)}", "Reference": "Code snippet for {@link AppendBlobAsyncClient#createWithResponse(BlobHttpHeaders, Map, BlobAccessConditions)}", "NNUpdater": "Code snippet for {@link AppendBlobAsyncClient#createWithResponse(BlobHTTPHeaders, Map, BlobAccessConditions)}"}
{"Origin": "class|delay|cron", "Reference": "class|intervalSchedule|cron", "NNUpdater": "Determine whether the specified expression represents a valid cron pattern."}
{"Origin": "The returned context supplier is intended to be cached in the currently adopted AST.", "Reference": "The returned context reference is intended to be cached in the currently adopted AST.", "NNUpdater": "Reference: URL"}
{"Origin": "Converts short duration string (HH:MM) to milliseconds.", "Reference": "Converts short duration string (XX:YY) to milliseconds.", "NNUpdater": "Attempts to parse a string of the form [DD-[hh:]]mm:ss[.ddd] to a number of milliseconds."}
{"Origin": "Returns a new fresh folder with the given name under the temporary folder.", "Reference": "Returns a new fresh folder with the given path under the temporary folder.", "NNUpdater": "Returns a new, empty temporary folder, based on the current test class's name."}
{"Origin": "Adds a new CONSTANT_Double_info to the constant pool of this symbol table.", "Reference": "Adds a new CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table.", "NNUpdater": "Get a field constant from the constant pool."}
{"Origin": "timed invokeAll(empty collection) returns empty collection", "Reference": "timed invokeAll(empty collection) returns empty list", "NNUpdater": "timed invokeAll(empty collection) returns empty list"}
{"Origin": "Created by user info", "Reference": "Created by user", "NNUpdater": "Sets URI user-info."}
{"Origin": "### Effects: If `brandingServerBrandingId` is set, `brandingServerCustomer` is not supplied.", "Reference": "### Effects: If `brandingServerBrandingId` is set, `brandingServerCustomer` is **NOT** supplied.", "NNUpdater": "Operation fails."}
{"Origin": "In order to set the matrix to a rotation transformation without post-multiplying, use {@link #rotation(Quaterniond)}.", "Reference": "In order to set the matrix to a rotation transformation without post-multiplying, use {@link #rotation(Quaterniondc)}.", "NNUpdater": "In order to set the matrix to a rotation transformation without post-multiplying, use {@link #rotation(Quaternionf)}."}
{"Origin": "When translated into a QueryTerm object, search terms containing an operator have the operator removed from the string representation.", "Reference": "When translated into a QueryTerm object, search terms containing a qualifying operator have the operator removed from the string representation.", "NNUpdater": "Returns Operator from query parameter operator notation."}
{"Origin": "This method is currently only used for root-level serializer handling to allow for simpler caching.", "Reference": "This method is mostly used for root-level serializer handling to allow for simpler caching.", "NNUpdater": "Currently, this is only used for the body since the attachments are computed by filename."}
{"Origin": "Appends BCC address.", "Reference": "Appends CC address.", "NNUpdater": "Sets BCC addresses."}
{"Origin": "Look for contract stored by given slot contract id.", "Reference": "Look for the contract stored using the given slot contract id.", "NNUpdater": "Set Datum AE."}
{"Origin": "Sets the {@link IClassCache} for the given application.", "Reference": "Sets the {@link IGetAndSetLocator} for the given application.", "NNUpdater": "Uses the given application to find a {@link ConverterFactory} or, if application is null, uses the {@link Application#getCurrent()}."}
{"Origin": "Tests for the {@link BaseFileSystem#openFile(AlluxioURI, OpenFileOptions)} method to complete successfully.", "Reference": "Tests for the {@link BaseFileSystem#openFile(AlluxioURI, OpenFilePOptions)} method to complete successfully.", "NNUpdater": "Tests for the {@link BaseFileSystem#openFile(AlluxioURI, OpenFileOptions)} method to complete successfully."}
{"Origin": "If there is any regular output or error output, it is appended to the given s.", "Reference": "If there is any regular output or error output, it is appended to the given {@code StringBuilder}s.", "NNUpdater": "Set the properties value."}
{"Origin": "Calls {@link #discardToEnd()} and releases any held DRM resources.", "Reference": "Calls {@link #discardToEnd()} and releases any owned {@link DrmSession} references.", "NNUpdater": "If {@link OnDrmConfigHelper} is registered, it will be called during preparation to allow configuration of the DRM properties before opening the DRM session."}
{"Origin": "This is measured from the bottom, that is, the quantile estimation with the level 99% corresponds to the smallest 99% observations and 1% of the observation are above that level.", "Reference": "This is measured from the bottom, that is, Thus the quantile estimation with the level 99% corresponds to the smallest 99% observations.", "NNUpdater": "Returns the smallest (``bottom``) n values in the column, Does not change the order in this column"}
{"Origin": "Add a Content {@link Uri} to observe", "Reference": "Adds a content {@link Uri} for system observation", "NNUpdater": "Proactive Observe cancellation: Cancel the observe relation by sending a GET with Observe=1."}
{"Origin": "Preference summary should be the activated device name", "Reference": "Preference summary should be device's name", "NNUpdater": "Preference summary should be the activated device name"}
{"Origin": "This method should only be used for steps whose value is {@link #TYPE_ARGUMENT TYPE_ARGUMENT}.", "Reference": "This method should only be used for steps whose value is {@link #TYPE_ARGUMENT}.", "NNUpdater": "This method should only be used for an object or array type."}
{"Origin": "Differs from the above because it can be used on any file, rather than only managed commit log segments (and thus cannot call waitForFinalSync).", "Reference": "Differs from the above because it can be used on any file, rather than only managed commit log segments (and thus cannot call waitForFinalSync), and in the treatment of failures.", "NNUpdater": "IndexWriter#commit(Map)}, from current index segments file."}
{"Origin": "Gets the description.", "Reference": "Gets the code.", "NNUpdater": "Gets the ip."}
{"Origin": "Parses the timestamp from the collection list and returns them in reverse sorted order (most recent 1st)", "Reference": "Result is returned them in sorted order (most recent 1st)", "NNUpdater": "Returns the clipboard data."}
{"Origin": "Does a simple HEAD request to the server's /health endpoint to check if it's reachable If not an", "Reference": "Does a simple HEAD request to a configuration endpoint to check if it's reachable.", "NNUpdater": "Given a host and port, checks if server is reachable meaning that we can communicate with it."}
{"Origin": "Code snippet for {@link AppendBlobClient#appendBlockWithResponse(InputStream, long, AppendBlobRequestConditions,", "Reference": "Code snippet for {@link AppendBlobClient#appendBlockWithResponse(InputStream, long, byte[], AppendBlobRequestConditions,", "NNUpdater": "Code snippet for {@link AppendBlobClient#createWithResponse(BlobHTTPHeaders, Map, BlobAccessConditions,"}
{"Origin": "Returns true if the class has the specified annotation class.", "Reference": "Returns true if the class has the specified annotation type.", "NNUpdater": "Returns true if the class has the specified annotation type."}
{"Origin": "A typical use case would be to convert index names to curve names valid for an underlying system.", "Reference": "A typical use case would be to convert parameter metadata tenors to be valid for an underlying system.", "NNUpdater": "Set the index name list"}
{"Origin": "There are cases where a type is seen as unresolved but can be found amongst the imports of the module or within the default imports.", "Reference": "There are cases where a type is seen as unresolved but can be found amongst the imports of the module.", "NNUpdater": "Imports a module."}
{"Origin": "Checks a name to ensure that it's a legal type name.", "Reference": "Checks a name to ensure that it's a legal qualified class name.", "NNUpdater": "Ensure that:"}
{"Origin": "Returns the log compactor.", "Reference": "Returns the log writer.", "NNUpdater": "Returns the log cleaner."}
{"Origin": "This property is not returned if the dialog node has no parent.", "Reference": "This property is omitted if the dialog node has no parent.", "NNUpdater": "Returns this node's parent or an empty Optional if this node has no parent."}
{"Origin": "Parses {@link SparseVector} from the given Matrix Market string.", "Reference": "Parses {@link SparseVector} from the given Matrix Market.", "NNUpdater": "Creates an unit {@link SparseVector} of the given {@code length}."}
{"Origin": "Code snippets for {@link BlobAsyncClient#setHTTPHeaders(BlobHTTPHeaders)}", "Reference": "Code snippets for {@link BlobAsyncClient#setHTTPHeaders(BlobHttpHeaders)}", "NNUpdater": "Code snippet for {@link AppendBlobAsyncClient#createWithResponse(BlobHTTPHeaders, Map, BlobAccessConditions)}"}
{"Origin": "Get the gradle paths for the given list of modules and all the tested projects (if it is a test app).", "Reference": "Get the gradle paths for the given module and all the tested projects (if it is a test app).", "NNUpdater": "For example, it may be provided with the collection of gradle modules and collection of ide modules."}
{"Origin": "Getter for {@link #exposeHeaders}", "Reference": "Getter for {@link #allowHeaders}", "NNUpdater": "Getter Parameter Value for D-U-N-S"}
{"Origin": "Creates a {@link Behavior} that uses the given {@link WicketConsumer consumer} to do something with the component's tag.", "Reference": "Creates a {@link Behavior} that uses the given {@code SerializableConsumer consumer} to do something with the component's tag.", "NNUpdater": "wicket:id=``componentId``."}
{"Origin": "Accumulate secondarys into a LinkedListX (extended Persistent List) and Right with the supplied combiner function", "Reference": "Accumulate secondarys into a LazySeq (extended Persistent List) and Right with the supplied combiner function", "NNUpdater": "Accumulate secondarys into a LinkedListX (extended Persistent List) and Right with the supplied combiner function"}
{"Origin": "Retrieves the position in the list corresponding to itemId.", "Reference": "Retrieves the position in the list corresponding to itemId, subtracting any header views.", "NNUpdater": "Retrieves the position in the list corresponding to itemId"}
{"Origin": "Configures SSL or TLS of the default {@link VirtualHost} from the specified {@code keyCertChainFile} and cleartext {@code keyFile}.", "Reference": "Configures SSL or TLS of the {@link Server} from the specified {@code keyCertChainFile} and cleartext {@code keyFile}.", "NNUpdater": "Returns a {@code KeyTab} instance from a {@code File} object that is bound to an unknown service principal."}
{"Origin": "Constructs a immutable {@link Value} of the appropriate type based on the given {@link Key} and the element.", "Reference": "Constructs an immutable {@link Value} of the appropriate type based on the given {@link Key} and the element.", "NNUpdater": "Gets an {@link ImmutableSet} of {@link Value.Immutable}s for the block at the given location."}
{"Origin": "Phone Number", "Reference": "Phone number", "NNUpdater": "The old phone number or {@code null} if no phone number was previously set."}
{"Origin": "Set the number of expected records for this task.", "Reference": "Set the number of expected records for this connector.", "NNUpdater": "Sets the parameter map for this connection."}
{"Origin": "predict * predict the rating given a sparse appender vector", "Reference": "Predict the rating given a sparse appender vector.", "NNUpdater": "Implemented new-vector predict in terms of {@link #predict(long, SparseVector, MutableSparseVector)}."}
{"Origin": "Each of the available players is passed the provided information and the first that reports it is compatible will be returned.", "Reference": "Each of the available {@link Player} instances are passed the provided information and the first that reports that it is compatible will be returned.", "NNUpdater": "The type of the box is checked to ensure it is compatible with the ID."}
{"Origin": "Adding fields to a POJO as operator state should require a state migration.", "Reference": "Adding fields to a POJO as operator state should succeed.", "NNUpdater": "Sets the state if the current state {@code .equals()} the specified expected state."}
{"Origin": "Sets the sensitivity.", "Reference": "Set the sensitivity.", "NNUpdater": "Compares the key of two sensitivity objects, excluding the parameter sensitivity values."}
{"Origin": "Requests that the player prefetch a media item with the media id for playback.", "Reference": "Requests that the player prepare a media item with the media id for playback.", "NNUpdater": "Gets the media id for this item."}
{"Origin": "Creates a new block blob, or updates the content of an existing block blob.", "Reference": "Creates a new block blob.", "NNUpdater": "Creates a new block blob, or updates the content of an existing block blob."}
{"Origin": "Get the etag property: The etag property.", "Reference": "Get the eTag property: The eTag property.", "NNUpdater": "Set the routeFilter value."}
{"Origin": "Causes to have its method called in the event dispatch thread with low priority.", "Reference": "Causes runnable to have its run method called in the event dispatch thread with low priority.", "NNUpdater": "This method returns , if the event level has ERROR level or higher."}
{"Origin": "Checks if the deletion policy can release some index commits with the latest global checkpoint.", "Reference": "Checks if the deletion policy can delete some index commits with the latest global checkpoint.", "NNUpdater": "If the global checkpoint is equal to or above the global checkpoint the listener is waiting for, then the listener will be asynchronously notified on the executor used to construct this collection of global checkpoint listeners."}
{"Origin": "Indicates whether external XML entities are processed when unmarshalling.", "Reference": "Indicate whether external XML entities are processed when unmarshalling.", "NNUpdater": "When unmarshalling, the encoding is read directly from the XML header of the byte array."}
{"Origin": "Removing fields from a POJO as keyed state should require a state migration.", "Reference": "Removing fields from a POJO as keyed state should succeed.", "NNUpdater": "Sets the state if the current state {@code .equals()} the specified expected state."}
{"Origin": "When a layout is rendered in the layout, it is fetching resources from the app resource repository: it should see all the resources just like the app does.", "Reference": "When a layout is rendered in the layout editor, it is getting resources from the app resource repository: it should see all the resources just like the app does.", "NNUpdater": "If given layout is null, a VerticalLayout with margins set is used as a default."}
{"Origin": "Enables initial {@literal PING} barrier before any connection is usable.", "Reference": "Returns the {@link ProtocolVersion} to use.", "NNUpdater": "Whether there is any network connected."}
{"Origin": "Get the content of this element.", "Reference": "Gets the value of the content property.", "NNUpdater": "Removes all child content from this parent."}
{"Origin": "Extract the values of given field or property from the array's elements under test into a new array, this new array becoming the array under test.", "Reference": "Extract the values of given field or property from the array's elements under test into a new list, this new list becoming the object under test.", "NNUpdater": "The new array contains all of the element of followed by all of the elements ."}
{"Origin": "Converts a JSON document into a PdxInstance", "Reference": "Converts a Byte Array JSON document into a PdxInstance", "NNUpdater": "Parses a string in JSON format to a {@code Document}"}
{"Origin": "Gets the current {@link Art} value represented by this {@link Painting}.", "Reference": "Gets the current {@link ArtType} value represented by this {@link Painting}.", "NNUpdater": "Set Freigegeben."}
{"Origin": "In error message, exclude {@code @rultor} from list of commanders (REF).", "Reference": "QnAskedBy can exclude {@code @rultor} from list of commanders (REF).", "NNUpdater": "Message, (2.)"}
{"Origin": "WebElement#getText()} equals to provided {@code expectedText}.", "Reference": "WebElement#getText()} equals to provided {@code expected} one.", "NNUpdater": "WebElement#getText()} equals to provided {@code expectedText}."}
{"Origin": "Set UPC/EAN.", "Reference": "Set CU-UPC.", "NNUpdater": "Add result set."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "WARNING: Read the javadoc of {@link Component#canCallListenerInterface()} for important security-related information.", "Reference": "WARNING: Read the javadoc of {@link Component#canCallListener()} for important security-related information.", "NNUpdater": "Operation fails."}
{"Origin": "They must not be of type {@link KnownAmountPaymentPeriod}.", "Reference": "They must not be of type {@link KnownAmountSwapPaymentPeriod}.", "NNUpdater": "They must not be of type {@link KnownAmountPaymentPeriod}."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Checks whether caption and description are interpreted as html or plain text.", "Reference": "Checks whether caption and description are interpreted as HTML or plain text.", "NNUpdater": "This will use {@link HtmlConverter#textToHtml(String, boolean)} to convert plain text parts to HTML if necessary."}
{"Origin": "Determines if this BeaconManager instance is part of the process hosting the beacon scanning service.", "Reference": "Determines if this BeaconManager instance is not part of the process hosting the beacon scanning service.", "NNUpdater": "This method notifies the beacon service that the application is either moving to background mode or foreground mode."}
{"Origin": "The domain portion of the ObjectName in the query if useObjDomain is set to true 3. else, the Class Name of the MBean.", "Reference": "The domain portion of the ObjectName in the query if useObjDomainAsKey is set to true 3. else, the Class Name of the MBean.", "NNUpdater": "Returns the baseRef domain name."}
{"Origin": "Forget all entries that match the scheme+host+port of the given key, so that they can be crawled again if discovered again.", "Reference": "Forget all entries that match the scheme+host+port of the given url, so that they can be crawled again if discovered again.", "NNUpdater": "If so, forget the operations"}
{"Origin": "Keys and values are separated by {@value #SEPARATOR}.", "Reference": "Keys and values are separated by {@value #KEY_VALUE_SEPARATOR}.", "NNUpdater": "- Options and arguments may be separated by an equals sign '=' or any number of spaces."}
{"Origin": "Set the time a publication will linger in nanoseconds after being drained.", "Reference": "Set the time a network publication will linger in nanoseconds after being drained.", "NNUpdater": "Set expire time for this entity."}
{"Origin": "{@codesnippet com.azure.storage.file.share.ShareDirectoryClient.createSubDirectory#string}", "Reference": "{@codesnippet com.azure.storage.file.share.ShareDirectoryClient.createSubdirectory#string}", "NNUpdater": "{@codesnippet com.azure.storage.file.shareClient.createDirectoryWithResponse#string-map-Context}"}
{"Origin": "Created by user info", "Reference": "Created by user", "NNUpdater": "Sets URI user-info."}
{"Origin": "Retrieves the metadata for the specified {@link NamespacedEntityId}.", "Reference": "Retrieves the metadata for the specified {@link MetadataEntity}.", "NNUpdater": "Retrieves the metadata for the specified {@link NamespacedEntityId}."}
{"Origin": "BlobRange, ParallelTransferOptions, ReliableDownloadOptions, BlobRequestConditions, boolean)}", "Reference": "BlobRange, ParallelTransferOptions, DownloadRetryOptions, BlobRequestConditions, boolean)}", "NNUpdater": "String, BlobRange, ParallelTransferOptions, ReliableDownloadOptions, BlobAccessConditions, boolean)}"}
{"Origin": "Request for graceful stop then blocks until process is stopped.", "Reference": "Request for quick stop then blocks until process is stopped.", "NNUpdater": "This method does not return until the run loop is stopped via {@link #close()} or {@link Thread#interrupt()}."}
{"Origin": "For now, just consume the message and throw it away.", "Reference": "Consume the message and save it.", "NNUpdater": "This will consume the instances from the input."}
{"Origin": "This signature is the one specified in the constructor (see {@link #SignatureReader(String) SignatureReader}).", "Reference": "This signature is the one specified in the constructor (see {@link #SignatureReader}).", "NNUpdater": "- {@link #KEY_SIGNATURE}: value specified by {@link #setCreator(String)}."}
{"Origin": "Converts a {@link CreateFileOptions} object to an {@link OpenFileOptions} object with a matching Alluxio storage type.", "Reference": "Converts a {@link CreateFilePOptions} object to an {@link OpenFilePOptions} object with a matching Alluxio storage type.", "NNUpdater": "Converts a {@link CreateFileOptions} object to an {@link OpenFileOptions} object with a matching Alluxio storage type."}
{"Origin": "Called when the user reorders the policies in a service.", "Reference": "Called when the user reorders the policies in a API.", "NNUpdater": "Get the count of policies in the pipeline."}
{"Origin": "This lacks a mathematical argument, but is a handcrafted heuristic to avoid numerical problems.", "Reference": "This lacks a thorough mathematical argument, but is a handcrafted heuristic to avoid numerical problems.", "NNUpdater": "This is used to apply a mathematical operation to the sensitivity values."}
{"Origin": "Tests {@code globalRecommend(Set, int, Set, Set)}.", "Reference": "Tests {@code recommendRelatedItems()(Set, int, Set, Set)}.", "NNUpdater": "Delegate to {@link #globalRecommend(LongSet, int, LongSet, LongSet)}."}
{"Origin": "Setter for the output directory where the data files are stored.", "Reference": "Setter for the directory where the data files are stored.", "NNUpdater": "Gets the base directory where all the checkpoints are stored."}
{"Origin": "In case of failure the {@link Flux} will error.", "Reference": "In case of failure the {@link CosmosContinuablePagedFlux} will error.", "NNUpdater": "Get the id of the {@link CosmosContainer}"}
{"Origin": "Note that you do not call", "Reference": "Note that you do not call with this .", "NNUpdater": "DO NOT USE IT."}
{"Origin": "Adds a qualified ``exports dynamic`` directive to the declaration.", "Reference": "Adds a qualified ``opens`` directive to the declaration.", "NNUpdater": "Adds a ``requires transitive`` directive to the declaration."}
{"Origin": "| 2. if it's a right child, it should have a incremented column value.", "Reference": "| If it's a right child, its column should increment by 1.", "NNUpdater": "If {@code pos} is negative, it is the same as if it was 0."}
{"Origin": "Queries this search source for the given queryString.", "Reference": "Creates query for the given queryString.", "NNUpdater": "Queries this ContactSourceService for SourceContacts which match a specific query Pattern."}
{"Origin": "Gets the list of {@link CertificateProperties CertificateProperties} on this page.", "Reference": "Gets the iterable stream of {@link CertificateProperties CertificateProperties} on this page.", "NNUpdater": "Loop over the {@link CertificateProperties} and call {@link CertificateClient#getCertificate(CertificateProperties)}."}
{"Origin": "Users cannot poke the threshold values via this Condition.", "Reference": "Users must not poke the threshold values via this Condition.", "NNUpdater": "Find condition via column in first and conditions."}
{"Origin": "Parses the {@code Rectangle} represented by the given string according to the format of {@link #toString()}.", "Reference": "Sets this {@code Rectangle} to the value represented by the specified string according to the format of {@link #toString()}.", "NNUpdater": "Implements the {@link #set(String, String)} method."}
{"Origin": "Set name of the noun.", "Reference": "Set the noun.", "NNUpdater": "Invokes the operation with the specified proper noun, adjectives, and noun value on the given endpoint."}
{"Origin": "Delegateaction to the track(s) clicked on.", "Reference": "Delegate action to the track(s) clicked on.", "NNUpdater": "Set this {@link Track}'s disc number"}
{"Origin": "Receive indicator result from persistence, after it is saved into storage.", "Reference": "Receive metrics result from persistence, after it is saved into storage.", "NNUpdater": "calls settle( result, null )"}
{"Origin": "Sets the journal serializer, returning the builder for method chaining.", "Reference": "Sets the journal namespace, returning the builder for method chaining.", "NNUpdater": "Sets the default resource entry serializer, returning the configuration for method chaining."}
{"Origin": "Return the {@code Graph} from the underlying switchable.", "Reference": "Return the {@code Graph} from the underlying DatasetGraph", "NNUpdater": "Return the graph object"}
{"Origin": "(Try to) create a Flag inter (either standard FlagInter or SmallFlagInter).", "Reference": "(Try to) create and add a Flag inter (either standard FlagInter or SmallFlagInter).", "NNUpdater": "Report the list of AbstractChordInter instances (rests & heads) in the neighborhood of the specified Inter."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "If the new lookup class is not within the same package member as the old one, private members will not be accessible, and protected members will not be accessible by virtue of inheritance.", "Reference": "If the new lookup class is not within the same package member as the old one, private members will not be accessible, and protected members will not be accessible by virtue of inheritance, i.e.", "NNUpdater": "(In all other cases, public members will continue to be accessible.)"}
{"Origin": "Obtains an instance from the specified unique name.", "Reference": "Obtains an instance from the specified name.", "NNUpdater": "Obtains the type from a unique name."}
{"Origin": "Report the ID of the sample sheet that contains the provided sample.", "Reference": "Report the name of the sample sheet that contains the provided sample.", "NNUpdater": "One cannot sample the TransactionSampler directly."}
{"Origin": "The format used is ISO 8601-like: H:m:s.S.", "Reference": "The format used is ISO 8601-like: {@code HH:mm:ss.SSS}.", "NNUpdater": "Converts an ISO 8601 formatted Date String to a Java Date ISO 8601 format: yyyy-MM-dd'T'HH:mm:ss"}
{"Origin": "Get the object, and return it, throws RuntimeException", "Reference": "Get the object, and return it, throws RuntimeException if not found", "NNUpdater": "Throws a runtime exception if the string is null, empty or contains JavaScript."}
{"Origin": "This polling job tries to find another UPnP devices related to same Samsung TV and create handler for those.", "Reference": "This function tries to find another UPnP devices related to same Samsung TV and create handler for those.", "NNUpdater": "Tries to find the index of element with the given value."}
{"Origin": "{@codesnippet com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.deleteSubDirectory#String}", "Reference": "{@codesnippet com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.deleteSubdirectory#String}", "NNUpdater": "{@codesnippet com.azure.storage.file.directoryClient.deleteSubDirectoryWithResponse#string-duration-context}"}
{"Origin": "If {@code labels = ``\\0``}, settings without any label are returned.", "Reference": "If {@code labelFilter = ``\\0``}, settings without any label are returned.", "NNUpdater": "If {@code labels = ``\\0``}, settings without any label are returned."}
{"Origin": "The namespaceDocument is a BsonDocument containing the values associated with a MongoNamespace.", "Reference": "The namespace document is a BsonDocument containing the values associated with a MongoNamespace.", "NNUpdater": "C++: Add a nested namespace name to the current namespace."}
{"Origin": "Returns a supplier that returns the current language instance.", "Reference": "Returns a reference that returns the current language instance.", "NNUpdater": "Returns an instance for the current language option, or English as default language."}
{"Origin": "After the recreation, it brings back its lifecycle state to the resumed state.", "Reference": "After the recreation, it brings back its lifecycle state to the original state.", "NNUpdater": "Sets the state if the current state {@code .equals()} the specified expected state."}
{"Origin": "Create an instance of {@link CTWebProperties }", "Reference": "Create an instance of {@link CTRel }", "NNUpdater": "Create an instance of {@link Shape.NvSpPr }"}
{"Origin": "Classification ID (for files only): * `1` - public * `2` - for internal use only * `3` - confidential * `4` - strictly confidential", "Reference": "Classification ID: * `1` - public * `2` - internal * `3` - confidential * `4` - strictly confidential", "NNUpdater": "Does nothing."}
{"Origin": "Appends to a collection column, as in {@code SET l+=?}.", "Reference": "Appends to a collection column, as in {@code SET l=l+?}.", "NNUpdater": "Operation fails."}
{"Origin": "Start a Task with a Tag to identify it and with a time threshold; a task represents some work that spans some time, and you are interested in both its start time and end time.", "Reference": "End a Task with a Tag to identify it; a task represents some work that spans some time, and you are interested in both its start time and end time.", "NNUpdater": "The date_created_after."}
{"Origin": "Obtains an instance from the specified unique name.", "Reference": "Obtains an instance from the specified name.", "NNUpdater": "Obtains the type from a unique name."}
{"Origin": "or throws a {@link com.liferay.mail.NoSuchAccountException} if it could not be found.", "Reference": "or throws a {@link NoSuchAccountException} if it could not be found.", "NNUpdater": "Operation fails."}
{"Origin": "Loads the update center data, if any and if modified since last read.", "Reference": "Loads the update center data, if any.", "NNUpdater": "Return the value of the {@code IfModifiedSince} header."}
{"Origin": "Produces a Collapsed SemanticGraph with no extras.", "Reference": "Produces a Collapsed SemanticGraph.", "NNUpdater": "Set the semanticRoles."}
{"Origin": "Is has plain column or not.", "Reference": "Contains plain column or not.", "NNUpdater": "Extracts outlinks from a plain text."}
{"Origin": "Report the note which if vertically farthest from stem tail.", "Reference": "Report the highest note by default.", "NNUpdater": "Report the stem (if any) of this beam item on the desired side."}
{"Origin": "If the given language code is {@code null}, uses {@link DisplaySettings#getContentLanguage(Context)}.", "Reference": "If the given language code is {@code null}, uses {@link DisplaySettings#getShowsLanguage(Context)}.", "NNUpdater": "Operation fails."}
{"Origin": "Creates an Android framework resource repository without using a persistent cache.", "Reference": "Creates an Android framework resource repository.", "NNUpdater": "Engine."}
{"Origin": "Convert file to HTML.", "Reference": "Convert document to HTML.", "NNUpdater": "Convert the Classes in the given Package to an HTML file."}
{"Origin": "Try to detect link between this Slur instance and head on left side plus head on right.", "Reference": "Try to detect link between this Slur instance and head on left side plus head on right side.", "NNUpdater": "If head is on the wrong side of the stem, check if there is a head on the other side, located one or two step(s) further."}
{"Origin": "Slight performance increase over {@link #render(BufferBuilder)}.", "Reference": "Slight performance increase over {@link #render(VertexBuffer)}.", "NNUpdater": "Operation fails."}
{"Origin": "This implementation updates the ParsePosition if the parse succeeeds.", "Reference": "This implementation updates the ParsePosition if the parse succeeds.", "NNUpdater": "The target type."}
{"Origin": "Calculate a sample's standard deviation.", "Reference": "Calculate the standard deviation.", "NNUpdater": "testStandardDeviation2"}
{"Origin": "When transforming a vector by the resulting matrix the rotation transformation will be applied first and then the translation.", "Reference": "When transforming a vector by the resulting matrix the rotation - and possibly scaling - transformation will be applied first and then the translation.", "NNUpdater": "So when transforming a vector with the new matrix by using , the translation will be applied first!"}
{"Origin": "Returns the foo with the primary key or throws a {@link com.liferay.sampleservicebuilder.NoSuchFooException} if it could not be found.", "Reference": "Returns the foo with the primary key or throws a {@link NoSuchFooException} if it could not be found.", "NNUpdater": "Assert.instanceOf(Foo.class, foo, ``Foo expected``);"}
{"Origin": "Gets the String or Long id from the key, or null if incomplete", "Reference": "Gets the String or Long id from the key as a Value, or null if incomplete", "NNUpdater": "Gets the string value for a key."}
{"Origin": "Returns a list of backup nodes.", "Reference": "Returns a list of follower nodes.", "NNUpdater": "Returns a list of all nodes in the array nodes, excluding the local node."}
{"Origin": "This method creates a temporary VCF file and it's appropriately named index file, and will delete them on exit.", "Reference": "This method creates a temporary VCF or Bam file and its appropriately named index file, and will delete them on exit.", "NNUpdater": "Deletes the given file, if the file is a directory then method will recursively delete the content of it."}
{"Origin": "Starts the service if not started already and starts all downloads.", "Reference": "Starts the service if not started already and resumes all downloads.", "NNUpdater": "Starts the service."}
{"Origin": "Helper method to retrieve the parent folder type.", "Reference": "Helper method to retrieve the parent folder type or if none available.", "NNUpdater": "Returns the parent connector helper."}
{"Origin": "The input stream should contain an X.509 certificate chain in PEM format.", "Reference": "The input stream should contain an X.509 certificate collection in PEM format.", "NNUpdater": "Returns the X.509 certificate chain header parameter contains the X.509 public key certificate or corresponding to the key used to digitally sign the JWS or {@code null} for none."}
{"Origin": "Converts an array of bytes into an array of bytes for the characters representing the hexidecimal values of each byte in order.", "Reference": "Converts an array of bytes into an array of bytes for the characters representing the hexadecimal values of each byte in order.", "NNUpdater": "Converts a big-endian byte array into an array of doubles."}
{"Origin": "Unregister the given event from the current context (provided).", "Reference": "Unregister all methods observing the given event from the provided context.", "NNUpdater": "State Change listener callback."}
{"Origin": "Sets the storage serializer.", "Reference": "Sets the storage namespace.", "NNUpdater": "Sets the log segment size."}
{"Origin": "Gets the groups used to find an issuer curve.", "Reference": "Gets the groups used to find an issuer curve by legal entity.", "NNUpdater": "Gets the groups mapping service being used to map user-to-groups."}
{"Origin": "Creates a new {@link MetadataEntity} which consists of the given key and values following the key and values of this {@link MetadataEntity}", "Reference": "Returns a new {@link MetadataEntity} which consists of the given key and values following the key and values of this {@link MetadataEntity}.", "NNUpdater": "For example, the {@link #metadata} values will be stored in the model with a key of where is the key from the metadata object."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "The input 2011-01-15 (a Saturday) for parameter (SATURDAY) will return 2011-01-08 (one week earlier).", "Reference": "The input 2011-01-15 (a Saturday) for parameter (SATURDAY) will return 2011-01-08 (seven days earlier).", "NNUpdater": "Set Samstag."}
{"Origin": "Complete the request.", "Reference": "2.", "NNUpdater": "Marks the transfer as complete."}
{"Origin": "It tests that the method {@code addEdge} will silently add the missing nodes to the graph, then add the edge connecting them.", "Reference": "Tests that the method {@code addEdge} will silently add the missing nodes to the graph, then add the edge connecting them.", "NNUpdater": "Add an edge between {@code nodeA} and {@code nodeB}; if these nodes are not already present in this graph, then add them."}
{"Origin": "Will set Object as TAG to this request, wrapped by WeakReference", "Reference": "Will set Object as TAG to underlying AsyncHttpRequest", "NNUpdater": "Returns the serializable tag object."}
{"Origin": "Whether the channel product is a beta product", "Reference": "Whether the channel product is a betaMarker product", "NNUpdater": "Set Produkt."}
{"Origin": "Write a Chart series as rows in a CSV file.", "Reference": "Export a XYChart series into rows in a CSV file.", "NNUpdater": "Add a series to the chart using Collections"}
{"Origin": "The input 2011-01-15 (a Saturday) for parameter (SATURDAY) will return 2011-01-22 (one week later).", "Reference": "The input 2011-01-15 (a Saturday) for parameter (SATURDAY) will return 2011-01-22 (seven days later).", "NNUpdater": "Set Samstag."}
{"Origin": "Set Bewegungsdatum.", "Reference": "Set Inventurdatum.", "NNUpdater": "Set Movement Date."}
{"Origin": "Gets the dialogNodeId.", "Reference": "Gets the dialogNode.", "NNUpdater": "Gets the dialogNodeId."}
{"Origin": "the barChartProperties of the chart", "Reference": "the chartProperties of the chart", "NNUpdater": "Sets a new data object for the chart."}
{"Origin": "Gets forwarding function type of the forwarding objective.", "Reference": "Attempts to guess the forwarding function type of the given forwarding objective.", "NNUpdater": "Generates a forwarding objective builder for bridging rules."}
{"Origin": "Returns an iterator of all of the registered {@code SaslClientFactory}s where the order is based on the order of the Provider registration and/or class path order.", "Reference": "Returns a collection of all of the registered {@code SaslClientFactory}s where the order is based on the order of the Provider registration and/or class path order.", "NNUpdater": "Returns a new {@link Order} with the given {@link Direction}."}
{"Origin": "Otherwise, it traverses all objects in given array and adds their scalar values named {@code cursor#getNext()} to the result.", "Reference": "Otherwise, it traverses all objects in given array and adds their scalar values named {@code pathCursor#getNext()} to the result.", "NNUpdater": "Otherwise, it traverses all objects in given array and adds their scalar values named {@code cursor#getNext()} to the result."}
{"Origin": "This method is run everytime the service is executed", "Reference": "This method is run every time the service is executed", "NNUpdater": "The main method executed when this class is run."}
{"Origin": "If one param is a float, the other is converted to a float.", "Reference": "a/b If one param is a float, the other is converted to a float.", "NNUpdater": "Method getFloat returns the element at the given position as a float."}
{"Origin": "Get the fileContentType property: Sets the MIME content type of the file.", "Reference": "Get the contentType property: Sets the MIME content type of the file.", "NNUpdater": "Get the keyUsage value."}
{"Origin": "For more information about managing snapshot copy grants, go to", "Reference": "For more information about managing snapshot copy grants, go to Amazon Redshift Database Encryption in the Amazon Redshift", "NNUpdater": "For more information, see Managing User Permissions."}
{"Origin": "Returns the (biased) estimate of the sample variance of the values within a {@link PointSet} region of a {@link Dataset}.", "Reference": "Returns the (unbiased) estimate of the sample variance of the values within a {@link PointSet} region of a {@link Dataset}.", "NNUpdater": "The class of the {@link DatasetsFinder} is read from property {@link #DATASET_PROFILE_CLASS_KEY}."}
{"Origin": "Uses a {@link HashMap} to map keys to value collections, initialized to expect the specified number of keys.", "Reference": "Uses a hash table to map keys to value collections, initialized to expect the specified number of keys.", "NNUpdater": "Retrieve the keys related to this map as an array."}
{"Origin": "Returns the number of occurrences, or {@code -1} if the exact number is unknown.", "Reference": "Returns the result size, or {@code -1} if the exact size is unknown.", "NNUpdater": "Count the number of occurrences of the specified int code point."}
{"Origin": "Log rule execution statistics.", "Reference": "Log rule execution statistics @ INFO.", "NNUpdater": "Returns the execution log of the given the node."}
{"Origin": "Test of var method, of class HyperGeometricDistribution.", "Reference": "Test of variance method, of class HyperGeometricDistribution.", "NNUpdater": "Test of geometric method, of class DiscreteDistributions."}
{"Origin": "Load all profile names.", "Reference": "A task that reads all profile names.", "NNUpdater": "Return the list of default profile names for a given language"}
{"Origin": "Get the {@link SessionConfiguration} for the specified camera id.", "Reference": "Get the {@link SessionConfig} for the specified camera id.", "NNUpdater": "Set the session ID to be used when #useSessionId() returns true."}
{"Origin": "Obtains an instance of {@code ZoneOffset} from a date-time object.", "Reference": "Obtains an instance of {@code ZoneOffset} from a temporal object.", "NNUpdater": "Obtains an instance of {@code OffsetDateTime} from a date, time and offset."}
{"Origin": "Convert to object types, returning null if text is null.", "Reference": "Convert to object types, returning null if text is null or empty.", "NNUpdater": "IsNullOrEmpty {is null or empty}."}
{"Origin": "Returns the attack range for a {@link robocode.SentryRobot SentryRobot}.", "Reference": "Returns the border size that defines the attack range for a {@link robocode.SentryRobot SentryRobot} from the border.", "NNUpdater": "Builds and sends an {@link Event} to the Sentry server using the statically stored {@link SentryClient} instance."}
{"Origin": "Will rout the calls to {@link #markCreated(Optional)} and {@link #markModified(Optional)} accordingly.", "Reference": "Will route the calls to {@link #markCreated(Optional)} and {@link #markModified(Optional)} accordingly.", "NNUpdater": "Will rout the calls to {@link #markCreated(Optional)} and {@link #markModified(Optional)} accordingly."}
{"Origin": "Decode an action profile member to PI action group member.", "Reference": "Decode an action profile member to PI action profile member.", "NNUpdater": "Returns a member by ID."}
{"Origin": "If not, returns -1.", "Reference": "If not, returns null.", "NNUpdater": "Returns null if none available."}
{"Origin": "Sets the quorum name for operations.", "Reference": "Sets the split brain protection name for operations.", "NNUpdater": "Sets the cluster read quorum strategy."}
{"Origin": "Visit class header and get class name, access , and intefraces informatoin (step 1,2, and 3) for SVUID computation.", "Reference": "Visit class header and get class name, access , and interfaces information (step 1,2, and 3) for SVUID computation.", "NNUpdater": "Get Classname."}
{"Origin": "This factory converts the arbitrary date-time object to an instance of {@code ZoneOffset}.", "Reference": "This factory converts the arbitrary temporal object to an instance of {@code ZoneOffset}.", "NNUpdater": "This factory converts the arbitrary date-time object to an instance of {@code OffsetDateTime}."}
{"Origin": "Validates that trailing checksums should be enabled based on {@link ClientType} and the presence or S3 specific headers.", "Reference": "Validates that checksums should be enabled based on {@link ClientType} and the presence or S3 specific headers.", "NNUpdater": "Method that returns the corresponding {@link AmazonS3} client based on the {@link Region}."}
{"Origin": "or throws a {@link com.liferay.calendar.NoSuchBookingException} if it could not be found.", "Reference": "or throws a {@link NoSuchBookingException} if it could not be found.", "NNUpdater": "Operation fails."}
{"Origin": "This method will called {@link ByteBufferPool#release(ByteBuffer)} if a buffer pool has been configured.", "Reference": "This method calls {@link ByteBufferPool#release(ByteBuffer)} if a buffer pool has been configured.", "NNUpdater": "Drains this ByteBufferPool i.e."}
{"Origin": "Generate and write the html page that shows the snapshot and the state of the ZoomParams", "Reference": "Generate and write the html page that shows the snapshot and the ZoomState", "NNUpdater": "Generate and write the html page that shows the snapshot and the ZoomState"}
{"Origin": "SecretProperties secret} and call {@link SecretClient#getSecret(SecretProperties)}.", "Reference": "SecretProperties secret} and call {@link SecretClient#getSecret(String, String)}.", "NNUpdater": "SecretProperties secret} and call {@link SecretClient#getSecret(SecretProperties)}."}
{"Origin": "Removes all actors and cells from the table (same as {@link #clear()}) and additionally resets all table properties and cell, column, and row defaults.", "Reference": "Removes all actors and cells from the table (same as {@link #clearChildren()}) and additionally resets all table properties and cell, column, and row defaults.", "NNUpdater": "Removes all actors and cells from the table (same as {@link #clear()}) and additionally resets all table properties and cell, column, and row defaults."}
{"Origin": "If the number of missing elements is 32 x times the number of present elements, treat it as sparse", "Reference": "If the number of missing elements is 32x times the number of present elements, consider it as sparse.", "NNUpdater": "Returns the number of groups in this list."}
{"Origin": "Returns an immutable set containing one element.", "Reference": "Returns an unmodifiable set containing one element.", "NNUpdater": "Gets an {@link ImmutableSet} of {@link Value.Immutable}s for the block at the given location."}
{"Origin": "Compute the number of bytes that would be needed to encode a {@code uint32} field.", "Reference": "Compute the number of bytes that would be needed to encode a varInt.", "NNUpdater": "Computes the number of bytes that would be needed to encode a tag."}
{"Origin": "Create a new read/write access object.", "Reference": "Create a new read/write access object with the given default timeout.", "NNUpdater": "Set Manual."}
{"Origin": "Filter the array under test keeping only elements whose property or field specified by {@code propertyOrFieldName} is null.", "Reference": "Filter the array under test into a list composed of the elements whose property or field specified by {@code propertyOrFieldName} are null.", "NNUpdater": "Returns the value of the request header property specified by {code field} or {@code null} if there is no field with this name."}
{"Origin": "First sends a request to the BlobStore and gets a list of all blob file summaries prefixed by the given coreName.", "Reference": "First sends a request to the BlobStore and gets a list of all blob file summaries prefixed by the given blobName.", "NNUpdater": "Deletes the (job-unrelated) BLOB identified by the given BLOB key from the BLOB server."}
{"Origin": "Creates a new HTTP authorization {@link Service} decorator using the specified {@link Authorizer}s.", "Reference": "Creates a new HTTP authorization {@link HttpService} decorator using the specified {@link Authorizer}s.", "NNUpdater": "Creates a new HTTP authorization {@link Service} decorator using the specified {@link Authorizer}s."}
{"Origin": "Method that returns code to access a named state parameter.", "Reference": "Method that returns code to access a named prop parameter.", "NNUpdater": "Creates a new replicated state machine."}
{"Origin": "Do nothing if {@link BaseConfiguration#nocomment} is set to true.", "Reference": "Do nothing if {@link BaseOptions#noComment} is set to true.", "NNUpdater": "If already present, does nothing."}
{"Origin": "Executes {@link Pems#privateKeySpec(InputSupplier)} on the string which contains an encoded private key in PEM format.", "Reference": "Executes {@link Pems#privateKeySpec(ByteSource)} on the string which contains an encoded private key in PEM format.", "NNUpdater": "Returns the {@link KeySpec} that is pem encoded in the supplier."}
{"Origin": "Verify that at most {@code maxEntries} per session can be put in the cache", "Reference": "Verify that at most {@code maxEntries} per session can be put in the store", "NNUpdater": "Puts result in cache."}
{"Origin": "Creates RedeemData for P2PKH or P2PK input.", "Reference": "Creates RedeemData for P2PKH, P2WPKH or P2PK input.", "NNUpdater": "If not provided, executor service will have size {@link #DFLT_P2P_THREAD_CNT}."}
{"Origin": "Return a new {@link Terms} in which term of {@code coreNodeName} is removed", "Reference": "Return a new {@link Terms} in which terms for the {@code coreNodeName} are removed", "NNUpdater": "Returns a new persistent node."}
{"Origin": "Typically used for RPCs at best efforts (e.g., async cache).", "Reference": "This method is typically used for RPCs providing best efforts (e.g., async cache).", "NNUpdater": "Increments the counter of set attribute RPCs."}
{"Origin": "Create an initial optimistic locking value according the {@link VersionType} contract for the version property if required and inject it into the snapshot state.", "Reference": "Create an initial optimistic locking value according the {@link VersionSupport} contract for the version property if required and inject it into the snapshot state.", "NNUpdater": "Create an initial optimistic locking value according the {@link VersionType} contract for the version property if required and inject it into the snapshot state."}
{"Origin": "Returns the number of allowed parallel requests the configured {@link Router} should adhere to.", "Reference": "Returns the currently configured {@link ExchangeStrategies}.", "NNUpdater": "Returns the parallel mode."}
{"Origin": "Make the state tracker aware of the fact that the analyis has finished.", "Reference": "Make the state tracker aware of the fact that the analysis has finished.", "NNUpdater": "If there is only one Fact, the String value is the String value of the Fact."}
{"Origin": "Checks that collection {@param col} doesn't contains string {@param str}.", "Reference": "Checks that collection {@param col} doesn't contains element {@param str}.", "NNUpdater": "Get the param value."}
{"Origin": "converts a given y coordinate from ploting field coordinate to a graphic field coordinate", "Reference": "Converts a given y coordinate from plotting field coordinate to a graphic field coordinate.", "NNUpdater": "Returns the longitude value."}
{"Origin": "Return the initial pixel size used to define initial arrays (tile AA chunk, alpha line, buckets)", "Reference": "Return the initial pixel height used to define initial arrays (buckets)", "NNUpdater": "Creates the initial database."}
{"Origin": "It is up to the Authenticator implementation processing this token if an authentication attempt without an inetAddress is valid or not.", "Reference": "It is up to the Authenticator implementation processing this token if an authentication attempt without a host is valid or not.", "NNUpdater": "If this is not known, use {@link #inetAddress(InetAddress)} instead."}
{"Origin": "Useful because the granularity of the clock on some systems is low, so doing a Thread.sleep(10) may not give you a different clock value, for example.", "Reference": "(Also, useful because the granularity of the clock on some systems is low, so doing a Thread.sleep(10) may not give you a different clock value", "NNUpdater": "Get request id"}
{"Origin": "Sets {@link MediaItem2} object to render using VideoView2.", "Reference": "Sets {@link MediaItem} object to render using VideoView2.", "NNUpdater": "Sets {@link DataSourceDesc2} object to render using VideoView2."}
{"Origin": "Otherwise, the specified consumer is invoked with the leader index metadata fetched from the remote cluster.", "Reference": "Otherwise, the specified consumer is invoked with the cluster state and leader index metadata fetched from the remote cluster.", "NNUpdater": "Returns the alias / name of the remote cluster"}
{"Origin": "Returns a set of properties if saving the bean will violate the unique constraints (definded by given properties).", "Reference": "Returns a set of properties if saving the bean will violate the unique constraints (defined by given properties).", "NNUpdater": "Returns the configured properties."}
{"Origin": "Returns true if the currently set key guard matches our minimum quality requirements.", "Reference": "Returns true if the currently set key guard violates our minimum quality requirements.", "NNUpdater": "If no quality source parameter is present in the media type, {@link Quality#DEFAULT default quality} is returned."}
{"Origin": "It incorporates the zone, bulb type and command category.", "Reference": "It incorporates the bridge, zone, bulb type and command category.", "NNUpdater": "Clears the category list and adds the given category"}
{"Origin": "Finds elements via the driver's underlying W3 Selector engine.", "Reference": "Find elements via the driver's underlying W3 Selector engine.", "NNUpdater": "Creates a W3C DOM."}
{"Origin": "Restore redundancy with backoff.", "Reference": "Restore redundancy with an exponential backoff.", "NNUpdater": "Creates incompatibility map from Incompatibility objects, one rule may have several incompatibility dependencies."}
{"Origin": "Generates a code sample for using {@link FileClient#uploadRangeFromUrl(long, long, long, URI)}", "Reference": "Generates a code sample for using {@link FileClient#uploadRangeFromUrl(long, long, long, String)}", "NNUpdater": "Generates a code sample for using {@link FileClient#uploadRangeFromUrl(long, long, long, URI)}"}
{"Origin": "If typeVar is a captured wildcard, returns that wildcard; otherwise returns null.", "Reference": "If typeVar is a captured wildcard, returns that wildcard; otherwise returns {@code null}.", "NNUpdater": "Returns the matching wildcard pattern."}
{"Origin": "Set this quaternion to be a representation of the supplied axis and angle (in radians).", "Reference": "Set this quaternion to be a representation of the supplied axis and angle (in degrees).", "NNUpdater": "Set this quaternion to a rotation equivalent to the supplied axis and angle (in radians)."}
{"Origin": "Like {@link #readGenericRecords(Schema)}, but reads each filepattern in the input {@link PCollection}.", "Reference": "Like {@link #readGenericRecords(Schema)}, but for a {@link PCollection} of {@link", "NNUpdater": "Like {@link #filepattern(String)} but using a {@link ValueProvider}."}
{"Origin": "Returns the whitelisted regular expressions.", "Reference": "Returns the white regular expressions.", "NNUpdater": "compile filter string to regular expression"}
{"Origin": "Used by system internally to merge the other resources of chained operators when generating the job graph or merge the resource consumed by state backend.", "Reference": "Used by system internally to merge the other resources of chained operators when generating the job graph.", "NNUpdater": "Sets the value of the data property."}
{"Origin": "Adds a single sensitivity to the builder using metadata.", "Reference": "Adds a single sensitivity to the builder.", "NNUpdater": "Adds a control metadata."}
{"Origin": "Creates a Course object and an Instructor object for the Course.", "Reference": "Creates a course and an associated instructor for the course.", "NNUpdater": "Action: enter valid courseID and course name"}
{"Origin": "Indicates if the display name of the XRY meta key is a recognized type.", "Reference": "Indicates if the display name of the XRY key is a recognized type.", "NNUpdater": "Get the authorizationSource value."}
{"Origin": "Test of var method, of class BinomialDistribution.", "Reference": "Test of variance method, of class BinomialDistribution.", "NNUpdater": "Test of binomial method, of class DiscreteDistributions."}
{"Origin": "bold driver: Gemulla et al., Large-scale matrix factorization with distributed stochastic gradient descent, KDD 2011. constant decay: Niu et al, Hogwild!", "Reference": "bold driver: Gemulla et al., Large-times matrix factorization with distributed stochastic gradient descent, KDD 2011. constant decay: Niu et al, Hogwild!", "NNUpdater": "bold driver: Gemulla et al., Large-scale matrix factorization with distributed stochastic gradient descent, KDD 2011. constant decay: Niu et al, Hogwild!"}
{"Origin": "With natural ordering, {@link Ordering#natural()} is returned.", "Reference": "Ordering#natural()} is returned.", "NNUpdater": "Creates an empty {@code PriorityQueue} instance."}
{"Origin": "Executes {@link Pems#publicKeySpec(InputSupplier)} on the string which contains an encoded public key in PEM format.", "Reference": "Executes {@link Pems#publicKeySpec(ByteSource)} on the string which contains an encoded public key in PEM format.", "NNUpdater": "Returns the {@link KeySpec} that is pem encoded in the supplier."}
{"Origin": "This method schedules the disablement for asynchronous execution.", "Reference": "This method deactivates and disables the component immediately.", "NNUpdater": "Default value: SEQUENTIAL"}
{"Origin": "Switch to the given page, update the highlighted episode.", "Reference": "Switch to the episode at the given position.", "NNUpdater": "Switch to the given page, update the highlighted episode."}
{"Origin": "Repairs the metadata table.", "Reference": "Repairs the schema history table.", "NNUpdater": "Repairs the Flyway metadata table."}
{"Origin": "Returns an immutable list containing three elements.", "Reference": "Returns an unmodifiable list containing three elements.", "NNUpdater": "The returned List is immutable."}
{"Origin": "Tails of tails are invalid", "Reference": "Tails of tails are valid", "NNUpdater": "The specified User does not exist"}
{"Origin": "Sets SSLHostConfig infos.", "Reference": "Sets SslHostConfig infos.", "NNUpdater": "Return List of IpAddresses"}
{"Origin": "See Immutable Set Static Factory Methods for details.", "Reference": "See Unmodifiable Sets for details.", "NNUpdater": "VerificationTimes supports multiple static factory methods:"}
{"Origin": "Sets the CSS pages for the Static Website.", "Reference": "Sets the listings CSS page for the Static Website.", "NNUpdater": "Get the backupId value."}
{"Origin": "Returns a literal for the {@link Reference} policy.", "Reference": "Returns a literal for the {@link ScrService.Reference} policy.", "NNUpdater": "Get a substring of value of {@literal key} between {@literal start} and {@literal end}."}
{"Origin": "Expands the given row.", "Reference": "Expands the given item at given index.", "NNUpdater": "Expands the specified leaf nodes."}
{"Origin": "Sets playback rate using {@link PlaybackParams2}.", "Reference": "Sets playback rate using {@link PlaybackParams}.", "NNUpdater": "Sets playback rate using {@link PlaybackParams2}."}
{"Origin": "Adds the specified argument as XQuery string.", "Reference": "Adds the specified argument unchanged.", "NNUpdater": "Adds a token."}
{"Origin": "Returns an ordered range of all the sync d l objects where companyId = ?", "Reference": "Returns an ordered range of all the sync d l objects where modifiedTime > ?", "NNUpdater": "Finds an ordered range of all the articles where groupId = ?"}
{"Origin": "This is measured from the bottom, that is, the expected shortfall with the level 99% corresponds to the average of the smallest 99% of the observations.", "Reference": "This is measured from the bottom, that is, Thus the expected shortfall with the level 99% corresponds to the smallest 99% observations.", "NNUpdater": "Returns the smallest (``bottom``) n values in the column, Does not change the order in this column"}
{"Origin": "The base URL will be the application URL.", "Reference": "The base URL will be the application back-end URL.", "NNUpdater": "See URL()"}
{"Origin": "Atomically updates the current hi value with the results of applying the given delta, returning the updated value.", "Reference": "Atomically adds the given delta to the current hi value, returning the updated hi value.", "NNUpdater": "Atomically sets the element at position {@code i} to the given updated value if the current value {@code ==} the expected value."}
{"Origin": "Returns the report builder for the rootmost component that contains any of the duplicate bindings.", "Reference": "Returns the report builder for the rootmost component that contains any of the {@code bindings}.", "NNUpdater": "Test remove duplicate."}
{"Origin": "Centres this dialog on the main fame.", "Reference": "Centres this dialog on the parent window.", "NNUpdater": "Creates the help dialog for this activity."}
{"Origin": "Gets the value of the source property.", "Reference": "Gets the value of the parameter property.", "NNUpdater": "Gets the value of the links property."}
{"Origin": "If an event listener is assignable to {@link EventListener} it will registered as is.", "Reference": "If an event handler is assignable to {@link EventMessageHandler} it will registered as is.", "NNUpdater": "Adds a listener."}
{"Origin": "use_credentials: Cross-origin CORS requests for the element will have the credentials flag set.", "Reference": "USE_CREDENTIALS: Cross-origin CORS requests for the element will have the credentials flag set.", "NNUpdater": "Returns the raw credentials."}
{"Origin": "Allocates an array of the specified length in unmanaged memory to hold references to objects on the Java heap.", "Reference": "Allocates an array of the specified length to hold references to objects on the Java heap.", "NNUpdater": "Insert or update a list of unmanaged RealmObjects."}
{"Origin": "Nota: the defining points are meant to be the extrema points inside the ribbon.", "Reference": "Nota: the defining points are meant to be the precise extrema Point2D values on the borders of the ribbon.", "NNUpdater": "Returns all of data points in order."}
{"Origin": "Customer lock status: * `false` - unlocked * `true` - locked All users of this customer will be blocked and can not login anymore.", "Reference": "Customer is locked: * `false` - unlocked * `true` - locked All users of this customer will be blocked and can not login anymore.", "NNUpdater": "Creates a new customer object."}
{"Origin": "A comparison of document clustering techniques KDD workshop on text mining, 2000", "Reference": "A Comparison of Document Clustering Techniques KDD workshop on text mining.", "NNUpdater": "The way node comparison is based on a comparison of nodeId."}
{"Origin": "Doesn't support date types.", "Reference": "Doesn't support date types or structs.", "NNUpdater": "Currently supports 2 types: - ```` - ``/Date([+-Zone])/``"}
{"Origin": "Test method for {@link org.infinispan.spring.provider.SpringRemoteCacheManager#start()}.", "Reference": "Test method for {@link org.infinispan.spring.remote.provider.SpringRemoteCacheManager#start()}.", "NNUpdater": "Operation fails."}
{"Origin": "Returns the expression node to the left of the ``::`` if it exists.", "Reference": "Returns the expression to the left of the ``::`` if it exists and is unambiguous.", "NNUpdater": "Get the connections on this port."}
{"Origin": "Execute function for each chunk of arguments.", "Reference": "Execute function for each chunk of arguments and collect the result.", "NNUpdater": "Test method."}
{"Origin": "wait appears dropdawn-header with specified mame", "Reference": "wait appears dropdown-header with specified mame", "NNUpdater": "If no mapping is found, no name is set and the default image is assumed"}
{"Origin": "Runs a process using a custom timeout and a process terminator.", "Reference": "Runs a process using a custom termination check interval and a process terminator.", "NNUpdater": "Runs a process using the default timeout and a custom terminator."}
{"Origin": "(Shiro's default Authenticator allows null IPs to support localhost and proxy server environments).", "Reference": "(Shiro's default Authenticator allows null hosts to support localhost and proxy server environments).", "NNUpdater": "Use {@link #proxyAuthenticator} to set the authenticator for proxy servers."}
{"Origin": "Adds an actor as a child of this group, immediately after another child actor.", "Reference": "If the actor is already a child of this group, no changes are made.", "NNUpdater": "Adds an actor as a child of this group."}
{"Origin": "TODO: If an input result partition of an involved region is not available, i.e.", "Reference": "If an input result partition of an involved region is not available, i.e.", "NNUpdater": "Set one component."}
{"Origin": "Use {@link #destroyToNaiveMatrix()} if you do not need further updates.", "Reference": "Use {@link #destroyToPopulationMatrix()} if you do not need further updates.", "NNUpdater": "Sends {@link RemoteDestroyAdmin#destroy()} request to the service."}
{"Origin": "This method currently handles events for the classname combo box.", "Reference": "This method currently handles events for the classname JLabeledChoice", "NNUpdater": "Initializes searchTypeComboBox"}
{"Origin": "Waits until the query with the specified id has been started.", "Reference": "Waits until a very slow query has been started.", "NNUpdater": "Signals that the {@link Query} with the given queryKey has been resolved."}
{"Origin": "{@code handshake} will be null and {@code throwable} will be non-null in the case of a failed TLS connection attempt.", "Reference": "{@code handshake} will be null and {@code ioe} will be non-null in the case of a failed TLS connection attempt.", "NNUpdater": "A {@code null} CharSequence will return {@code null}."}
{"Origin": "Creates an audit entry when a service definition is deleted.", "Reference": "Creates an audit entry when a API definition is deleted.", "NNUpdater": "Creates an object from a definition element."}
{"Origin": "Schedules package actions differentiating their type among Linux and Solaris servers.", "Reference": "Schedules package actions.", "NNUpdater": "Set the dnsType value."}
{"Origin": "Returns the partition ID for the given key.", "Reference": "Returns the service ID for the given primitive ID.", "NNUpdater": "Returns the partition service."}
{"Origin": "Return the formatted string.", "Reference": "Return the formatted string in its current state.", "NNUpdater": "Creates a formatted string based on the given request and response."}
{"Origin": "If --all is specified, --interface won't be visible", "Reference": "If --all is specified, --entity won't be visible", "NNUpdater": "Returns if the specified column is enabled."}
{"Origin": "Returns the raw binary representation of the handshake header.", "Reference": "Returns the raw binary representation of the handshake message.", "NNUpdater": "The raw message is used for calculating the handshake hash sent in the FINISHED message."}
{"Origin": "Access Control Using AWS Identity and Access Management (IAM) .", "Reference": "For more information, see Access Control Using AWS Identity and Access Management (IAM).", "NNUpdater": "Access Management (IAM) user account."}
{"Origin": "Sets the console script.", "Reference": "Sets the web server script.", "NNUpdater": "Set Skript."}
{"Origin": "Should return {@code null} for values that cannot be compared under Comparability semantics.", "Reference": "Should return {@code Comparison.UNDEFINED} for values that cannot be compared under Comparability semantics.", "NNUpdater": "A {@code null} CharSequence will return {@code null}."}
{"Origin": "{@codesnippet com.azure.storage.blob.specialized.PageBlobClient.copyIncremental#URL-String}", "Reference": "{@codesnippet com.azure.storage.blob.specialized.PageBlobClient.copyIncremental#String-String}", "NNUpdater": "{@codesnippet com.azure.storage.blob.specialized.BlobClientBase.Builder.buildClient}"}
{"Origin": "Backs up the subscriptions and bookmarks databases to external storage.", "Reference": "Backs up the databases to external storage.", "NNUpdater": "Backs up database files."}
{"Origin": "If the lock list is write locked, returns LockMode.WRITE.", "Reference": "If mode is read but the lock list is write locked, returns LockMode.WRITE.", "NNUpdater": "Fetch write lock, then read lock."}
{"Origin": "Custom logic to only enable the configuration element as this is immutable and once the MuleContext is started we cannot change values.", "Reference": "MuleConfiguration for instance is immutable and once the MuleContext is started we cannot change its values.", "NNUpdater": "This class is immutable?"}
{"Origin": "If the new value is not equal to {@code getValue()}, fires a value change event.", "Reference": "If the new value is not equal to {@code getValue()}, fires a {@link ValueChangeEvent}.", "NNUpdater": "Position."}
{"Origin": "Gets a collection of bibentries and sets an ID for every entry.", "Reference": "Gets a collection of entries and sets an ID for every entry.", "NNUpdater": "Unsafely returns a fresh entry."}
{"Origin": "Obtains an instance of {@code ZonedDateTime} from an {@code OffsetDateTime}.", "Reference": "Obtains an instance of {@code ZonedDateTime} from the instant formed by combining the local date-time and offset.", "NNUpdater": "Obtains an instance of {@code OffsetDateTime} from a local date and offset time."}
{"Origin": "Called when a track info is deselected.", "Reference": "Called when a track is deselected.", "NNUpdater": "Sets new switch components."}
{"Origin": "Gets current playback position as a {@link MediaTimestamp2}.", "Reference": "Gets current playback position as a {@link MediaTimestamp}.", "NNUpdater": "Get current playback position as a {@link MediaTimestamp2}."}
{"Origin": "Internal mapper to remember and add all types for the RecyclerView.", "Reference": "Internal mapper to remember and add all view types for the items.", "NNUpdater": "Returns the height of the fast scroll bar"}
{"Origin": "They are not accessible in the handler provided as parameter.", "Reference": "They are NOT accessible in the handler provided as parameter.", "NNUpdater": "Set a property (accessible or not accessible)"}
{"Origin": "XML Catalogs, OASIS Standard V1.1, invalid path entries will be ignored.", "Reference": "XML Catalogs, OASIS Standard V1.1, if a catalog entry is invalid, it is ignored.", "NNUpdater": "Default is 1."}
{"Origin": "In order to apply the rotation transformation to an existing transformation, use {@link #rotate(Quaterniond) rotate()} instead.", "Reference": "In order to apply the rotation transformation to an existing transformation, use {@link #rotate(Quaterniondc) rotate()} instead.", "NNUpdater": "In order to apply the rotation transformation to an existing transformation, use {@link #rotate(Quaternionf) rotate()} instead."}
{"Origin": "Returns the servlet request instance.", "Reference": "Returns the current HTTP connection.", "NNUpdater": "The default behavior of this method is to return startAsync(Runnable) on the wrapped request object."}
{"Origin": "Varargs version of {@link #addState(Closure, Object, java.util.Set)}.", "Reference": "Varargs version of {@link #addState(Consumer, Object, java.util.Set)}.", "NNUpdater": "Operation fails."}
{"Origin": "This completes the switch.", "Reference": "This completes the change.", "NNUpdater": "::), return or switch."}
{"Origin": "Creates a command that can be run later which will restore a display to its current state.", "Reference": "Creates a module that can be run later which will restore a display to its current state.", "NNUpdater": "Gets the current mode of the window."}
{"Origin": "Return the underlying expression tree.", "Reference": "Return the math expression as operation tree.", "NNUpdater": "Internal method to return the underlying expression builder."}
{"Origin": "A guarded transition from native to Java.", "Reference": "An unguarded transition to Java.", "NNUpdater": "Creates a set of {@link Transition}s that will run in parallel."}
{"Origin": "Setter for the auto-pull flag.", "Reference": "Setter for the pull-after flag.", "NNUpdater": "This method is the setter for the isMilestone flag of a transaction."}
{"Origin": "Calls {@link #arrayAllocationSize(int, int, int, GraalHotSpotVMConfig)} using an injected VM configuration object.", "Reference": "Calls {@link #arrayAllocationSize(int, int, int, int)} using an injected VM configuration object.", "NNUpdater": "``String[][][]`` or ``int``) for a type reference used in an annotation parameter."}
{"Origin": "{@link CombineFn} for MAX based on {@link Min} and {@link Combine.BinaryCombineFn}.", "Reference": "{@link CombineFn} for MIN based on {@link Min} and {@link Combine.BinaryCombineFn}.", "NNUpdater": "Returns the {@link GlobalCombineFn} used by this Combine operation."}
{"Origin": "Get a table object based on the identifier.", "Reference": "Get a table object by name.", "NNUpdater": "Get table token length."}
{"Origin": "reverts local changes for this post, replacing it with the latest version from the server", "Reference": "discard local changes for this post, replacing it with the latest version from the server", "NNUpdater": "get the latest version of this post so we can show the latest likes/comments"}
{"Origin": "Get Multiply Rate.", "Reference": "Get Faktor.", "NNUpdater": "Get Faktor."}
{"Origin": "By design the return value is not a {@link WithinRangeCondition}.", "Reference": "By design the return value is not a speciailized version of a Condition.", "NNUpdater": "This validates that the value is within the outer range of valid values returned by {@link #range()}."}
{"Origin": "This method sets the value of the database column m_prj_risk.dateraised", "Reference": "This method sets the value of the database column m_prj_risk.raisedDate", "NNUpdater": "This method sets the value of the database column m_prj_risk.prjKey"}
{"Origin": "Returns the Realm Type, in the described table, of the named column.", "Reference": "Returns the {@link ColumnDetails}, in the described table, of the named column.", "NNUpdater": "Sends the packet to the table id."}
{"Origin": "Finds the table schema that can be used for a format schema (without time attributes).", "Reference": "Finds the table schema that can be used for a format schema (without time attributes and generated columns).", "NNUpdater": "Returns the type of the table."}
{"Origin": "Note: This API uses {@link Class} instead of {@link Module} to provide backwards compatibility for JVMCI clients compiled against a JDK release earlier than 9.", "Reference": "Note: This API uses {@link Class} instead of {@code Module} to provide backwards compatibility for JVMCI clients compiled against a JDK release earlier than 9.", "NNUpdater": "Prefer {@link #getDelayInformation(Stanza)} over this method for backwards compatibility."}
{"Origin": "Obtains an instance of {@code OffsetDateTime} from a date-time object.", "Reference": "Obtains an instance of {@code OffsetDateTime} from a temporal object.", "NNUpdater": "Obtains an instance of {@code OffsetDateTime} from a local date and offset time."}
{"Origin": "Primitive operation which inserts the node at the tail of the frontier.", "Reference": "Inserts the node at the tail of the frontier.", "NNUpdater": "Inserts the specified element at the end of this deque."}
{"Origin": "{@codesnippet com.azure.data.applicationconfig.configurationclient.listSettingRevisions#settingSelector}", "Reference": "{@codesnippet com.azure.data.applicationconfig.configurationclient.listRevisions#settingSelector}", "NNUpdater": "{@codesnippet com.azure.data.applicationconfig.configurationclient.listSettingRevisions#settingSelector}"}
{"Origin": "Obtains an instance from the specified unique name.", "Reference": "Obtains an instance from the specified name.", "NNUpdater": "Obtains the type from a unique name."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Create a new detached JDOQuery instance with the given projection", "Reference": "Create a new detached {@link JDOQuery} instance with the given projection", "NNUpdater": "Create a transient instance."}
{"Origin": "Tests the {@link FileSystemMaster#checkConsistency(AlluxioURI, CheckConsistencyOptions)} method when some files are consistent in a larger inode tree.", "Reference": "Tests the {@link FileSystemMaster#checkConsistency(AlluxioURI, CheckConsistencyContext)} method when some files are consistent in a larger inode tree.", "NNUpdater": "Tests the {@link FileSystemMaster#checkConsistency(AlluxioURI, CheckConsistencyOptions)} method when some files are consistent."}
{"Origin": "Add init return statments.", "Reference": "Add nil return statement.", "NNUpdater": "Initialize."}
{"Origin": "The {@link RsaKeyCreateOptions#isEnabled() enabled} field is set to true by Azure Key Vault, if not specified.", "Reference": "The {@link CreateRsaKeyOptions#isEnabled() enabled} field is set to true by Azure Key Vault, if not specified.", "NNUpdater": "The {@link Secret#isEnabled() enabled} field is set to true by key vault, if not specified."}
{"Origin": "Asserts that the cache contains the given data for {@code uriString}.", "Reference": "Asserts that the cache contains necessary data for the {@code requestSet}.", "NNUpdater": "Asserts that the given {@code Collection} contains the given values, in any order."}
{"Origin": "Creates a new leader {@link FileSystemMaster} from journal along with its dependencies, and returns the master registry containing that master.", "Reference": "Creates a new leader {@link FileSystemMaster} from journal along with its dependencies, and returns the master registry and the journal system.", "NNUpdater": "Creates a new {@link DefaultFileSystemMaster} from journal."}
{"Origin": "{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_EMOJI}", "Reference": "{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_EMOJI UNKNOWN_EMOJI}", "NNUpdater": "{@link net.dv8tion.jda.api.requests.ErrorResponse#UNKNOWN_USER UNKNOWN_USER}"}
{"Origin": "The provided {@link XMPPError XMPPError}.", "Reference": "The provided {@link StanzaError XMPPError}.", "NNUpdater": "Returns the name portion of a XMPP address."}
{"Origin": "The executor will shutdown on {@link #shutdown()}, if not detached.", "Reference": "The executors will shutdown on {@link #shutdown()}, if not detached.", "NNUpdater": "Prepares the services for shutdown, by invoking the {@link ShutdownPrepared#prepareShutdown(boolean, boolean)} method on the service if it implement this interface."}
{"Origin": "The ParcelFileDescriptor will be closed when the list becomes empty.", "Reference": "The ParcelFileDescriptor will be closed when the count becomes zero.", "NNUpdater": "The descriptor becomes invalid when the non-clone instance of the FSIndexInput that owns this descriptor is closed."}
{"Origin": "Returns the client preferences.", "Reference": "Returns the request including client preferences.", "NNUpdater": "Adds preferences via the supplied preferences string that contains new line separated preferences in the form ."}
{"Origin": "Get UPC/EAN.", "Reference": "Get TU-UPC.", "NNUpdater": "Equivalent to uriInfo.getPathParameters().getFirst(name)"}
{"Origin": "Returns the value of the {@code bitfield} field.", "Reference": "Returns the value of the {@code direction} field.", "NNUpdater": "Returns the value of the {@code to_cache} field."}
{"Origin": "Get the last time this object was used in ms.", "Reference": "Gets the last time this object was used in milliseconds.", "NNUpdater": "Get the creationTime value."}
{"Origin": "Convenience method for getScheme(host.getSchemeName())", "Reference": "Convenience method for {@code getScheme(host.getSchemeName())}", "NNUpdater": "The scheme can later be retrieved by its name using {@link #getScheme(String) getScheme} or {@link #get get}."}
{"Origin": "The meta-property for the {@code expiryDateTime} property.", "Reference": "The meta-property for the {@code expiry} property.", "NNUpdater": "The meta-property for the {@code expiry} property."}
{"Origin": "If this happens, a configuration {@link ConfigurationEvent event} will be sent to all registered listeners.", "Reference": "If this happens, a CONFIGURATION {@link ConfigurationEvent event} will be sent to all registered listeners.", "NNUpdater": "Returns Event Processing Configuration defined in this Configuration."}
{"Origin": "Convert to primitive types, returning default value if text is null.", "Reference": "Convert to duration, returning default value if text is inconvertible.", "NNUpdater": "Convert all types, both reference and primitive, to {@code Object}."}
{"Origin": "Gets policy for resource set.", "Reference": "Delete policy for resource set.", "NNUpdater": "Lists the policy for a certificate."}
{"Origin": "The alias is a boolean value located under the {@link #ENABLED} key.", "Reference": "The alias is a boolean value located under the {@link HasEnableUtil#ENABLED} key.", "NNUpdater": "Alias to {@link #aggregate(boolean)} with true"}
{"Origin": "Returns the {@link CaptureRequestConfiguration} for the {@link CaptureStage} object.", "Reference": "Returns the {@link CaptureRequestConfig} for the {@link CaptureStage} object.", "NNUpdater": "Set Capture Sequence."}
{"Origin": "Simple names for a given type.", "Reference": "Return the descriptor class for a given type.", "NNUpdater": "Sets the type names."}
{"Origin": "Get the preventEncryptionScopeOverride property: Optional.", "Reference": "Get the encryptionScopeOverridePrevented property: Optional.", "NNUpdater": "Get the encryptionKey property: Optional."}
{"Origin": "Get the FCPClient if it exists.", "Reference": "Get the PersistentRequestClient if it exists.", "NNUpdater": "The client message handler is available as the passed {@link ClientSideFCPMessageHandler} client."}
{"Origin": "Set the connection, this is usually called by subclasses when the channel is added to the pipeline.", "Reference": "Set the connection, this is called when the channel is added to the pipeline.", "NNUpdater": "Called when an item is added to this category."}
{"Origin": "Get the classloader and module finder.", "Reference": "Get the callstack.", "NNUpdater": "Gets context classloader."}
{"Origin": "Validation type is responsible for whether entity bean validation will be applied on {@link DataManager} level.", "Reference": "Validation mode affects whether entity bean validation will be applied on {@link DataManager} level.", "NNUpdater": "Set Validierungscode."}
{"Origin": "Delete persisted {@link WorkUnit}s upon job completion.", "Reference": "Delete persisted {@link WorkUnit}s and {@link JobState} upon job completion.", "NNUpdater": "Submit a given list of {@link WorkUnit}s of a job to run."}
{"Origin": "A return value of {@code -1} necessarily indicate that the map contains no mapping for the key.", "Reference": "A return value of {@code #FREE} necessarily indicate that the map contains no mapping for the key.", "NNUpdater": "Returns the value to which the specified key is mapped, or the given defaultValue if this map contains no mapping for the key."}
{"Origin": "Create Subject Alternative names with dns names.", "Reference": "Set the dns names.", "NNUpdater": "It will also register the factory under names returned by {@link FactoryNames#getNames()}} if it implements {@link FactoryNames}."}
{"Origin": "So when we got block and all is ok - call this method.", "Reference": "So when we got packet and all is ok - call this method.", "NNUpdater": "Stops the callback thread."}
{"Origin": "Creates execution sequence for pending task groups by interleaving their unique occurrences.", "Reference": "Creates execution sequence for pending task groups by interleaving batches of requested size of their occurrences.", "NNUpdater": "Sorts names by their number of occurrences."}
{"Origin": "Wait for this task to meet the expected number of records as defined by {@code expectedRecords}.", "Reference": "Wait up to the specified timeout for this task to meet the expected number of records as defined by {@code expectedRecords}.", "NNUpdater": "Records a failed call."}
{"Origin": "Therefore this is very convinient place to register scaler with Disposer as well as trigger deregistring bad font in case when scaler reports this.", "Reference": "Therefore this is very convinient place to register scaler with Disposer as well as trigger deregistering a bad font when the scaler reports this.", "NNUpdater": "Return the currently used fitness scaler {@link Function} of the GA."}
{"Origin": "Contructs a new SpanishTokenizer that returns T objects and uses the options passed in.", "Reference": "Constructs a new SpanishTokenizer that returns T objects and uses the options passed in.", "NNUpdater": "Expert: Reset the tokenizer to a new reader."}
{"Origin": "gets all tv show episodes from database", "Reference": "SYNCHRONOUSLY gets all tv show episodes from database", "NNUpdater": "Adds a show and its episodes to the database."}
{"Origin": "Obtains an instance from the specified unique name.", "Reference": "Obtains an instance from the specified name.", "NNUpdater": "Obtains the type from a unique name."}
{"Origin": "Value of the code encoded.", "Reference": "Value of the errorCode encoded.", "NNUpdater": "Returns the minimum encoded size of the given unsigned long value."}
{"Origin": "Closes the session.", "Reference": "Updates the session state.", "NNUpdater": "Removes a session."}
{"Origin": "This function implements a subset of quoted-printable encoding specification (rule REF and rule REF) as defined in RFC 1521.", "Reference": "This function fully implements the quoted-printable encoding specification (rule REF through rule REF) as defined in RFC 1521.", "NNUpdater": "Shortcut for {@code new Reference(ruleSupplier)}."}
{"Origin": "Method to get the configuration knowning the set", "Reference": "Method to get the first configuration knowning the set", "NNUpdater": "Get config."}
{"Origin": "Binds the HTTP connection.", "Reference": "Assigns an external property.", "NNUpdater": "Returns the timeout in milliseconds used when establishing an HTTP connection."}
{"Origin": "Returns the fule paths to the files checked by the user", "Reference": "Returns the full paths to the files checked by the user", "NNUpdater": "Returns the database paths to all binary files that start with the specified path."}
{"Origin": "Note that the writing process does not start until the returned {@code Mono} is subscribed to.", "Reference": "Note that the writing process does not start until the returned {@code Flux} is subscribed to.", "NNUpdater": "Allow writing the request."}
{"Origin": "Tests resilency when D2 device availability is changed.", "Reference": "Tests resiliency when D2 device availability is changed.", "NNUpdater": "Tests resiliency when D2 device is down."}
{"Origin": "Start building a new factory class-based service binding.", "Reference": "Start building a new supplier class-based service binding.", "NNUpdater": "Start building a new DELETE query that deletes the provided names."}
{"Origin": "Creates an exception from an service name.", "Reference": "Creates an exception from an API name.", "NNUpdater": "Create an instance of {@link ServerException }"}
{"Origin": "Obtains an instance from the specified unique name.", "Reference": "Obtains an instance from the specified name.", "NNUpdater": "Obtains the type from a unique name."}
{"Origin": "Removes the source location value from this list of elements.", "Reference": "Removes the source location value from this map of elements.", "NNUpdater": "Removes the source location value from this list of elements."}
{"Origin": "Make you have enabled the NA check properly using {@link #enable(RAbstractVector, RAbstractVector)} before relying on this method.", "Reference": "Make sure you have enabled the NA check properly using {@link #enable(RAbstractVector, RAbstractVector)} before relying on this method.", "NNUpdater": "If the vector is the 0-Vector (ignoring y), this method returns {@link #NONE}."}
{"Origin": "Make sure to {@link #releaseParser(SAXParser)} in a block every time you call this.", "Reference": "Make sure to {@link #releaseParser(PoolSAXParser)} in a block every time you call this.", "NNUpdater": "Test if newSAXParser() method returns SAXParser."}
{"Origin": "Send a non-mutation message to a given endpoint.", "Reference": "Send a non-mutation message to a given node.", "NNUpdater": "Send a mutation message or a Paxos Commit to a given endpoint."}
{"Origin": "Whether this codec is capable of encoding the given Java type.", "Reference": "Whether this codec is capable of processing the given Java type.", "NNUpdater": "The Java type of this column."}
{"Origin": "unlike excise we just need this endpoint gone without going through any notifications *", "Reference": "unlike excise we just need this node gone without going through any notifications *", "NNUpdater": "Of course the result list we are going to generate."}
{"Origin": "When a class B inherits from A and A is annotated as a struct, then B automatically gets the annotation, even if B's constructor is not explicitly annotated.", "Reference": "When a class B inherits from A and A is annotated as a struct, then B automatically gets the annotation, if B's constructor is not explicitly annotated.", "NNUpdater": "Determine if the supplied {@link AnnotatedElement} is annotated with a composed annotation that is meta-annotated with an annotation of the specified {@code annotationName}."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Overrides previous instances of the exact same subclass of FragmentOptions.", "Reference": "Overrides previous instances of the exact same subclass of {@code FragmentOptions}.", "NNUpdater": "Creates a copy of the BuildOptions object that contains copies of the FragmentOptions and skylark options."}
{"Origin": "List Multipart Uploads response, even if idempotent complete is possible.", "Reference": "Uploads response, even if idempotent complete is possible.", "NNUpdater": "Checks if the transfer has completed."}
{"Origin": "[A4] If the new lookup class is in a different package than the old one, protected and default (package) members will not be accessible.", "Reference": "[A6] If the new lookup class is in a different package than the old one, protected and default (package) members will not be accessible.", "NNUpdater": "Get the node package string."}
{"Origin": "Load a {@link android.graphics.drawable.Drawable} asynchronously", "Reference": "Load a {@link android.graphics.drawable.Drawable} asynchronously (convenience method)", "NNUpdater": "Returns a drawable resource id for given file."}
{"Origin": "Set UPC/EAN.", "Reference": "Set TU-UPC.", "NNUpdater": "Add result set."}
{"Origin": "Returns the opening {@link Month} within this set of bounds.", "Reference": "Returns the openAt {@link Month} within this set of bounds.", "NNUpdater": "This method returns the enum {@link Month} for the month."}
{"Origin": "The KeyStore type (jks, jceks, pkcs12, etc) for the identity and trust store for connections created by this listener.", "Reference": "The KeyStore type (jks, jceks, pkcs12, etc) for the identity and trust store for connections of a particular type.", "NNUpdater": "Gets the key store path."}
{"Origin": "Returns a copy of this date-time with the zone ID locked to the offset.", "Reference": "Returns a copy of this date-time with the zone ID set to the offset.", "NNUpdater": "Returns a copy of this OffsetDateTime with a different zone offset using the same local date-time."}
{"Origin": "Generates a valid document ID for a service, used to index the service in ES.", "Reference": "Generates a valid document ID for a api, used to index the api in ES.", "NNUpdater": "Get the used service list."}
{"Origin": "If the range of the variable has not been set yet, it will be set to be val id from the start to the end of the instruction list.", "Reference": "If the range of the variable has not been set yet, it will be set to be valid from the start to the end of the instruction list.", "NNUpdater": "Returns the start and end value of the range operator, or {@code null} if the range could not be evaluated."}
{"Origin": "Deletes the elements in the mValues list and notifies the Adapter", "Reference": "Deletes the elements in the values list and notifies the Adapter", "NNUpdater": "This function sets the list of the ListView through an adapter"}
{"Origin": "The version of this Titan graph database", "Reference": "The version of this JanusGraph graph database", "NNUpdater": "Persists a regular database version to the local database by using {@link SqlDatabase#writeDatabaseVersion(DatabaseVersion)}."}
{"Origin": "Uploading Large Archives in Parts (Multipart Upload) and Upload Part in the Amazon Glacier Developer Guide .", "Reference": "For conceptual information and underlying REST API, go to Uploading Large Archives in Parts (Multipart Upload) and Upload Part in the Amazon Glacier Developer Guide.", "NNUpdater": "Working with Archives in Amazon Glacier in the Amazon Glacier Developer Guide ."}
{"Origin": "Creates a column instance from a value provider and a renderer.", "Reference": "Creates a column instance from a value provider, presentation provider and a renderer.", "NNUpdater": "Adds a new column to this {@link Grid} with given header caption, typed renderer and value provider."}
{"Origin": "This maps either the security ID or the legal entity ID to a group.", "Reference": "This maps the legal entity ID to a group.", "NNUpdater": "- The ID of the security group for the instance."}
{"Origin": "Returns the singleton instance of the {@link SliceBackgroundWorker} for specified {@link Uri} if exists", "Reference": "Returns the singleton instance of {@link SliceBackgroundWorker} for specified {@link Uri} if exists", "NNUpdater": "Compat version of {@link Slice#bindSlice}."}
{"Origin": "A {@link FileTransferException} if the operation was attempted but failed for any of the following reasons:", "Reference": "This method throws an {@link IOException} if the operation failed, for any of the following reasons:", "NNUpdater": "Throws a {@link FileTransferException} in any of the following conditions are true, does nothing otherwise:"}
{"Origin": "Sets the schema version to the given {@link SharedRealm}.", "Reference": "Sets the schema version to the given {@link OsSharedRealm}.", "NNUpdater": "Set the schema version of the Realm."}
{"Origin": "Compare two groups based on the grouping attribute.", "Reference": "Compare two groups based on the group key", "NNUpdater": "Returns a SeriesGrouping based on the values of the series."}
{"Origin": "Adds a handle to the constant pool of the class being built.", "Reference": "Adds a method handle to the constant pool of the class being built.", "NNUpdater": "Adds a name and type to the constant pool of the class being built."}
{"Origin": "Bind contract provider model to a provider class using the supplied instance manager.", "Reference": "Bind contract provider model to a provider class using the supplied injection manager.", "NNUpdater": "Set the contract default provider priority."}
{"Origin": "The manifest produced by this service do not include checksum for each entry.", "Reference": "The manifest produced by this service do not include checksum for entries and caches manifests recently created.", "NNUpdater": "Returns classpath item manifest or if not found."}
{"Origin": "Returns all documents contained in this cluster.", "Reference": "Returns all documents contained in this cluster or an empty list if none.", "NNUpdater": "Returns the contained entity."}
{"Origin": "Return the {@code StreamManager} in a context, or the global one if the context is null or does not contain an entry for a {@code StreamManager}.", "Reference": "Return the {@code StreamManager} in a context, or the global one if the context is null or does not contain a valid entry for a {@code StreamManager}.", "NNUpdater": "Creates a new {@link TestContextManager} for the supplied test class and the configured default class name."}
{"Origin": "Sets the quorum name for lock operations.", "Reference": "Sets the split brain protection name for lock operations.", "NNUpdater": "Sets the cluster read quorum strategy."}
{"Origin": "[IF Sidecar19-SE]", "Reference": "[IF Java14]", "NNUpdater": "Test the alternate API for booting WeldContainer from an SE app."}
{"Origin": "Obtain a {@link RemoteRepository} for the data set having the specified SPARQL end point.", "Reference": "Obtain a flyweight {@link RemoteRepository} for the data set having the specified SPARQL end point.", "NNUpdater": "Engine."}
{"Origin": "Returns an AccountListItem from the specified position in the mValues list", "Reference": "Returns an AccountListItem from the specified position in the values list", "NNUpdater": "Returns the metadata."}
{"Origin": "PlaybackParams2 to the given input.", "Reference": "PlaybackParams to the given input.", "NNUpdater": "Sets playback rate using {@link PlaybackParams2}."}
{"Origin": "Setter for {@link #allowCredentials}", "Reference": "Setter for {@link #allowedCredentials}", "NNUpdater": "Return the value of the {@code Access-Control-Allow-Credentials} response header."}
{"Origin": "Obtain the {@link MongoDatabase database} with given name form the given {@link MongoDbFactory factory}.", "Reference": "Obtain the {@link MongoDatabase database} with given name form the given {@link MongoDatabaseFactory factory}.", "NNUpdater": "Will use the {@link MongoClient} instance configured in {@link #mongo()}."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Copies this expression's return type and size to the given expression.", "Reference": "Copies this expression's type to the specified expression.", "NNUpdater": "Get a expression"}
{"Origin": "The returned {@link MetadataEntity} is of the same type.", "Reference": "The returned {@link MetadataEntity.Builder} is of the same type.", "NNUpdater": "Returns a {@link Collection} with all the declared {@link MetadataType} subtypes for the indicated {@link MetadataType} {@code type}."}
{"Origin": "Returns an immutable map containing a single mapping.", "Reference": "Returns an unmodifiable map containing a single mapping.", "NNUpdater": "Returns an immutable map of named bindings."}
{"Origin": "Generates a code sample for using {@link ShareDirectoryClient#deleteSubDirectoryWithResponse(String, Duration,", "Reference": "Generates a code sample for using {@link ShareDirectoryClient#deleteSubdirectoryWithResponse(String, Duration,", "NNUpdater": "Generates a code sample for using {@link DirectoryClient#deleteSubDirectoryWithResponse(String, Duration,"}
{"Origin": "The expected indentation should be the same as the indentation of the node which is the parent of the target modifier node.", "Reference": "The expected indentation should be the same as the indentation of the target node.", "NNUpdater": "Set the basic offset."}
{"Origin": "Kills the current branch of the traversal by not incremening the counters of any related nodes.", "Reference": "Kills the current branch of the traversal by not incrementing the counters of any related nodes.", "NNUpdater": "Get the tracking branch for the given branch, or null if the given branch doesn't track anything."}
{"Origin": "Check if the last item in key signature has some trailing space (before any head).", "Reference": "Check if last item in key signature has some trailing space (before any head).", "NNUpdater": "- {@link #KEY_SIGNATURE}: value specified by {@link #setCreator(String)}."}
{"Origin": "Marks the action as analyzing.", "Reference": "Marks the action as scanning.", "NNUpdater": "Marks the tuple at the specified offset as null."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Get or create a storage block by the name.", "Reference": "Gets or creates a buffer block by the name.", "NNUpdater": "Gets the BlockMeta from this storage dir by its block ID or throws IOException."}
{"Origin": "Calculates Minimum - Nulls are handled as zeros.", "Reference": "Calculates Minimum - Nulls are ignored.", "NNUpdater": "Calculates the minimum of this elements according to their natural order."}
{"Origin": "and repositoryId = ?.", "Reference": "and parentFolderId = ?.", "NNUpdater": "Engine."}
{"Origin": "Test of var method, of class Exponential.", "Reference": "Test of variance method, of class Exponential.", "NNUpdater": "Test of exponentialCdf method, of class ContinuousDistributions."}
{"Origin": "If you want to extend a value (e.g.", "Reference": "If you like to extend an option (e.g.", "NNUpdater": "If you want to change the type use {@link #setType(ValueType)}."}
{"Origin": "Returns the ssh configuration entry which includes host and identity file location", "Reference": "Returns the ssh configuration entry which includes host, identity file location and Host Key checking policy", "NNUpdater": "Gets connect point of this entry."}
{"Origin": "Extracts the underlying quotes from the {@link CurveInputs} instances and returns them in a map.", "Reference": "Extracts the underlying quotes from the {@link RatesCurveInputs} instances and returns them in a map.", "NNUpdater": "Extracts the underlying quotes from the {@link CurveInputs} instances and returns them in a map."}
{"Origin": "Sets the minimum session timeout.", "Reference": "Sets the session timeout.", "NNUpdater": "Sets the minimum session timeout."}
{"Origin": "Gets the {@link Value.Mutable} for the {@link CatType} of this {@link CatData}.", "Reference": "Gets the {@link Value.Mutable} for the {@link CatType} of this {@link Cat}.", "NNUpdater": "Test HCat tableIn and tableOut EL functions (phase 3) which returns the HCat table from URI"}
{"Origin": "Copy the contents of a Bucket to a RandomAccessThing at a specific offset.", "Reference": "Copy the contents of a Bucket to a RandomAccessBuffer at a specific offset.", "NNUpdater": "Returns the service-generated id for the bucket."}
{"Origin": "This method is used only to initialize the acceptReplacers field.", "Reference": "This method is used only to initialize the headerReplacers field.", "NNUpdater": "Initialize Jena."}
{"Origin": "To add or remove access for an AWS account to copy or restore a manual DB snapshot, or to make the manual DB snapshot public or private, use the ModifyDBSnapshotAttribute API.", "Reference": "To add or remove access for an AWS account to copy or restore a manual DB snapshot, or to make the manual DB snapshot public or private, use the", "NNUpdater": "Creates a new DB instance from a DB snapshot."}
{"Origin": "Computes the average for each pixel across all bands in the {@link Planar} image.", "Reference": "Computes the minimum for each pixel across all bands in the {@link Planar} image.", "NNUpdater": "Computes the average for each pixel across all bands in the {@link Planar} image."}
{"Origin": "{@code timeDifferenceMs} can be negative but it's absolute value must not be larger than current window ``before`` value (which would result in a negative window size).", "Reference": "{@code timeDifferenceMs} can be negative but its absolute value must not be larger than current window ``before`` value (which would result in a negative window size).", "NNUpdater": "If not called, the default value is {@link #DEFAULT_FLOW_CONTROL_WINDOW})."}
{"Origin": "If they are not the same an AssertionFailedError is thrown.", "Reference": "AssertionFailedError is thrown.", "NNUpdater": "AssertionFailedError is thrown with the given message."}
{"Origin": "Asynchronously gets a service.", "Reference": "Asynchronously gets a api.", "NNUpdater": "Returns a class name property."}
{"Origin": "Tests this matcher against the given {@link DiscordRequest}.", "Reference": "Tests this matcher against the given {@link DiscordWebRequest}.", "NNUpdater": "Tests this event's properties against the given filter using a case sensitive match."}
{"Origin": "Add optimized insert value.", "Reference": "Add insert value.", "NNUpdater": "Insert a Row"}
{"Origin": "Creates a new internal Jetty connector.", "Reference": "Creates a new Jetty connection factory.", "NNUpdater": "Returns the Local Port of the jetty Server."}
{"Origin": "Constructor a new instance using OAuth VERSION scopes.", "Reference": "Constructs a new instance using OAuth VERSION scopes.", "NNUpdater": "Provides the OAuth scopes to check for access tokens."}
{"Origin": "See {@link GlobalCheckpointTracker#updateAllocationIdsFromMaster(long, Set, Set)} for details.", "Reference": "See {@link GlobalCheckpointTracker#updateFromMaster(long, Set, Set, Set)} for details.", "NNUpdater": "See {@link GlobalCheckpointTracker#updateAllocationIdsFromMaster(long, Set, Set)} for details."}
{"Origin": "This test asserts that only one state is added to the stateflowgraph.", "Reference": "This test asserts that only one state is added to the state-flow graph.", "NNUpdater": "Asserts that the specified is an empty start."}
{"Origin": "Update the metadata version for the given key (cluster or store).", "Reference": "Update the metadata versions for the given keys (cluster or store).", "NNUpdater": "Update the metadata version for the given key (cluster or store)."}
{"Origin": "{@code import ratpack.rx2.RxRatpack; import ratpack.test.exec.ExecHarness; import io.reactivex.Observable;", "Reference": "{@code import ratpack.rx2.RxRatpack; import ratpack.test.exec.ExecHarness; import io.reactivex.Single;", "NNUpdater": "import static ratpack.rx.RxRatpack.asPromise;"}
{"Origin": "We include all flags that enable CPU instructions as we want best possible performance for the code.", "Reference": "We include all flags that enable AMD64 CPU instructions as we want best possible performance for the code.", "NNUpdater": "Set the attribute names we want to display."}
{"Origin": "Sets the value of the 'ValueType' field.", "Reference": "Sets the value of the 'valueType' field.", "NNUpdater": "Returns the encoding of the next field value."}
{"Origin": "The LOCATION on Ontario Lake should not be overwritten since Ontario (STATE_OR_PROVINCE) does not span Ontario Lake.", "Reference": "The ORGANIZATION on Ontario Bank should not ve overrwritten since Ontario (STATE_OR_PROVINCE) does not span Ontario Bank.", "NNUpdater": "The LOCATION on Ontario Place should not be overwritten since Ontario (STATE_OR_PROVINCE) does not span Ontario Place."}
{"Origin": "This method should only be used for steps whose value is {@link #TYPE_ARGUMENT TYPE_ARGUMENT}.", "Reference": "This method should only be used for steps whose value is {@link #TYPE_ARGUMENT}.", "NNUpdater": "This method should only be used for an object or array type."}
{"Origin": "Registers a new content observer for the media library", "Reference": "Registers a new library observer for the media library", "NNUpdater": "last cluster state and status observed by this observer."}
{"Origin": "Returns the height of the specified row, or 0 if the table layout has not been validated.", "Reference": "Returns the height of the specified row.", "NNUpdater": "Size computing algorithm: 1) Get layout_width and layout_height."}
{"Origin": "Specifies the component's horizontal width, measured in pixels.", "Reference": "Specifies the horizontal width of the %type%, measured in pixels.", "NNUpdater": "Returns the region's width."}
{"Origin": "Test of parse method, of class FinishedMessageParser.", "Reference": "Test of parse method, of class FinishedParser.", "NNUpdater": "Test of read method, of class Arff."}
{"Origin": "Create Subject Alternative names with emails.", "Reference": "Set the emails.", "NNUpdater": "It will also register the factory under names returned by {@link FactoryNames#getNames()}} if it implements {@link FactoryNames}."}
{"Origin": "If nodes returned are to be further used, they must be finalized via {@link ANode#finish()}.", "Reference": "Before nodes are added to the result, they must be finalized via {@link ANode#finish()}.", "NNUpdater": "If there are more, {@link #run(int, ExecutorService)} must be used."}
{"Origin": "We make sure that trying to update the field works if the user has the ``correct`` role, but failes if it doesn't.", "Reference": "We make sure that trying to update the field works if the user has the ``correct`` role, but fails if it doesn't.", "NNUpdater": "This allows us to make sure it doesn't receive future messages."}
{"Origin": "Create new {@link Builder} based on an existing {@link BaseEvent} instance and and {@link EventContext}.", "Reference": "Create new {@link Builder} based on an existing {@link CoreEvent} instance and and {@link EventContext}.", "NNUpdater": "Is responsible for calling {@link EventSource#onEvent(InboundEvent)} and all registered {@link EventListener} instances."}
{"Origin": "Test of npara method, of class MultivariateGaussian.", "Reference": "Test of length method, of class MultivariateGaussian.", "NNUpdater": "Test of predict method, of class GaussianDPMM."}
{"Origin": "Create a {@link Jwt} Validator that contains all standard validators as well as any supplied in the parameter list.", "Reference": "Create a {@link Jwt} Validator that contains all standard validators when an issuer is known.", "NNUpdater": "Validates the {@code item} using item validators added using {@link #withValidator(Validator)} and returns the result of the validation as a list of validation results."}
{"Origin": "Gets a property of type {@link PropertyType#PATH}, interpreting the value properly, replacing supported environment variables.", "Reference": "Gets a property of type {@link PropertyType#PATH}.", "NNUpdater": "Gets the value of the float property."}
{"Origin": "Returns whether or not specified {@link SVGElement} fits this {@link SvgSelector} conditions.", "Reference": "Returns whether or not specified {@link SVGElement} matches this {@link SvgSelector} conditions.", "NNUpdater": "Render SVG content directly to output stream"}
{"Origin": "Parent will have modified time to set to {@link LayerConfiguration#DEFAULT_MODIFIED_TIME}.", "Reference": "Parent will have modification time set to {@link LayerConfiguration#DEFAULT_MODIFICATION_TIME}.", "NNUpdater": "Not compatible with {@link #ifETagDoesntMatch(String)} or {@link #ifModifiedSince(Date)}"}
{"Origin": "Returns true if the method m is visible from code in the class from.", "Reference": "Returns true if the classmember m is visible from code in the class from.", "NNUpdater": "Returns true if the class member m is visible from code in the class from."}
{"Origin": "Set Balancing.", "Reference": "Set Saldierung.", "NNUpdater": "Balancing."}
{"Origin": "The option will be converted to a type.", "Reference": "The option is a: type.", "NNUpdater": "Later, the collection will be converted into the target type."}
{"Origin": "Returns a curve node for a CDS quoted in points upfront.", "Reference": "Returns a curve node with points upfront convention.", "NNUpdater": "Visit the {@link BlockQuoteNode}."}
{"Origin": "Recursively find all operators under root, that are of class clazz, and put them in result.", "Reference": "Recursively find all operators under root, that are of class clazz or are the sub-class of clazz, and put them in result.", "NNUpdater": "Puts result in cache."}
{"Origin": "Convert to object types, returning null if text is null.", "Reference": "Convert to object types, returning null if text is null or empty.", "NNUpdater": "IsNullOrEmpty {is null or empty}."}
{"Origin": "Sets the transformed layout.", "Reference": "Transform the partition.", "NNUpdater": "Size computing algorithm: 1) Get layout_width and layout_height."}
{"Origin": "A resource in a named modules may be encapsulated so that it cannot be located by code in other modules.", "Reference": "A resource in a named module may be encapsulated so that it cannot be located by code in other modules.", "NNUpdater": "Returns a full set of module adapters, including module adapters for child modules."}
{"Origin": "Creates an entity and populates its state based on the dbObject given.", "Reference": "Creates an entity and populates its state based on the document given.", "NNUpdater": "Creates a field based on the given data type."}
{"Origin": "Sets the entity.", "Reference": "Set the entity.", "NNUpdater": "Sets the entityName."}
{"Origin": "An empty NumericDocValues which returns zero for every document", "Reference": "An empty NumericDocValues which returns no documents", "NNUpdater": "Returns NumericDocValues for the reader, or {@link #emptyNumeric()} if it has none."}
{"Origin": "Setter for the URL of the content review icon associated with this item", "Reference": "Setter for the css class of the content review icon associated with this item", "NNUpdater": "Initializes this list item."}
{"Origin": "Returns {@link RolapConnectionProperties#UseContentChecksum} is set to false.", "Reference": "Returns if {@link RolapConnectionProperties#UseContentChecksum} is set to false.", "NNUpdater": "Operation fails."}
{"Origin": "Returns an {@link InputSupplier} for a given entry.", "Reference": "Gets the {@link Manifest} inside the given jar.", "NNUpdater": "To change implementation, please use the {@link #setSupplier(java.util.function.Function) setSupplier} method."}
{"Origin": "Returns whether or not specified {@link SVGElement} fits this {@link SvgSelector} selector conditions.", "Reference": "Returns whether or not specified {@link SVGElement} matches this {@link SvgSelector} conditions.", "NNUpdater": "Creates a new unformatted {@link TextBuilder.Selector} with the given selector."}
{"Origin": "bounded predict * predict the rating given a sparse appender vector", "Reference": "Predict the rating given a sparse appender vector.", "NNUpdater": "Implemented new-vector predict in terms of {@link #predict(long, SparseVector, MutableSparseVector)}."}
{"Origin": "One way to ensure this is to always call {@link #declareLabel declared} before calling this method.", "Reference": "One way to ensure this is to always call {@link #declareLabel} before calling this method.", "NNUpdater": "This is equivalent to calling:"}
{"Origin": "Felix constructor documentation for more information on framework configuration options.", "Reference": "Refer to the Felix constructor documentation for more information on framework configuration options.", "NNUpdater": "Felix constructor documentation for more information on framework configuration options."}
{"Origin": "The choices are: 1 = top, 2 = vertically centered, 3 = aligned at the bottom.", "Reference": "The choices are: 1 = aligned at the top, 2 = vertically centered, 3 = aligned at the bottom.", "NNUpdater": "Adds the lower navigation bar and the bottom text (from the -bottom option) at the bottom of page."}
{"Origin": "Verifies that the given {@code emailContent} is the same as the content given in the file at {@code filePathParam}.", "Reference": "Verifies that the given {@code emailContent} is the same as the content given in the file at {@code fileName}.", "NNUpdater": "Verifies that main content specified id ``mainContent`` in currently loaded page has the same HTML content as the content given in the file at {@code filePath}."}
{"Origin": "Returns a better disabled icon than BasicLookAndFeel offers.", "Reference": "Returns better disabled icon than {@link BasicLookAndFeel} offers.", "NNUpdater": "Installs look and feel in one simple call."}
{"Origin": "This will set the margin between the annotations ``outer`` rectangle defined by /Rect and the border.", "Reference": "This will set the difference between the annotations ``outer`` rectangle defined by /Rect and the border.", "NNUpdater": "Returns a Rect representing the intersection of this Rect with the given"}
{"Origin": "Compute the total number of transferred addresses.", "Reference": "Get the total number of addresses in range.", "NNUpdater": "Returns total number of all rules."}
{"Origin": "Convenience method for calling {@link #newGenericExecuteException(TemplateCallableModel, boolean, String)}.", "Reference": "Convenience method for calling {@link #newGenericExecuteException(String, TemplateCallableModel, boolean, Throwable)}", "NNUpdater": "Convenience method for {@link #genericMethodType(int)}."}
{"Origin": "Backs up all buckets for the device to the given node.", "Reference": "Backs up the given flow bucket.", "NNUpdater": "Backs up database files."}
{"Origin": "Make JobDirectoryManifestService beans are configured as expected.", "Reference": "Make JobDirectoryManifestService beans is configured as expected.", "NNUpdater": "Gets the manifest as a JSON template."}
{"Origin": "Runs the given {@code runnable} at most {@code retryCount} times until it passes, leaving {@code intervalMillis} milliseconds between the invocations.", "Reference": "Runs the given {@code runnable} at most {@code attemptsCount} times until it passes, leaving {@code intervalMillis} milliseconds between the invocations.", "NNUpdater": "The {@code intervalMillis} must be greater than or equal to {@link PeriodicWork#MIN_PERIODIC_INTERVAL_MILLIS}."}
{"Origin": "Removes a query focus from the stack.", "Reference": "Removes the current query focus from the stack.", "NNUpdater": "When a peer changes its status from focus to not focus or the reverse."}
{"Origin": "It satisfies the general contract of the {@link Object#hashCode", "Reference": "It satisfies the general contract of the {@link Object#hashCode Object.hashCode} method.", "NNUpdater": "It satisfies the general contract of the {@link Object#hashCode Object.hashCode} method."}
{"Origin": "NativeLinkable}.", "Reference": "NativeLinkableGroup}.", "NNUpdater": "Returns our {@link #getBuildDeps()}, limited to the subset of those which are {@link NativeLinkable}."}
{"Origin": "Returns a new Run with the new status, and with the status of the given, completed step set accordingly.", "Reference": "Returns a new Run with the status of the given completed step set accordingly.", "NNUpdater": "Returns the inheritance name."}
{"Origin": "Sets the groups used to find an issuer curve.", "Reference": "Sets the groups used to find an issuer curve by legal entity.", "NNUpdater": "Set issuer attributes."}
{"Origin": "Sets the amount of damage caused by the event", "Reference": "Sets the raw amount of damage caused by the event", "NNUpdater": "Sets the durability of this item"}
{"Origin": "Apply the rotation transformation of the given {@link Quaterniond} to this matrix and store the result in .", "Reference": "Apply the rotation transformation of the given {@link Quaterniondc} to this matrix and store the result in .", "NNUpdater": "Apply the rotation transformation of the given {@link Quaternionf} to this matrix and store the result in ."}
{"Origin": "Gets the {@link EncryptionScope} used to encrypt this blob's content on the server.", "Reference": "Gets the {@code encryption scope} used to encrypt this blob's content on the server.", "NNUpdater": "Encrypt blob content using perBlobKey if not null 2."}
{"Origin": "If version is null, ``latest`` or ``$LATEST``, then it returns the highest version available in the system for the package.", "Reference": "If version is null, PackageUtils.LATEST or PackagePluginHolder.LATEST, then it returns the highest version available in the system for the package.", "NNUpdater": "and groupId = ?."}
{"Origin": "Configuration)", "Reference": "Dynamic Configuration)", "NNUpdater": "Get config."}
{"Origin": "Gets the threshold parameter value.", "Reference": "Get the threshold parameter value.", "NNUpdater": "Set an individual bias weight value."}
{"Origin": "Tests the {@link FileSystemMaster#checkConsistency(AlluxioURI, CheckConsistencyOptions)} method when a file is not the correct size.", "Reference": "Tests the {@link FileSystemMaster#checkConsistency(AlluxioURI, CheckConsistencyContext)} method when a file is not the correct size.", "NNUpdater": "Tests the {@link FileSystemMaster#checkConsistency(AlluxioURI, CheckConsistencyOptions)} method when all files are consistent."}
{"Origin": "Returns list of nodes matching defined line and column number.", "Reference": "Returns list of nodes matching defined line number, column number and token type.", "NNUpdater": "Returns a list of all nodes in the array nodes, excluding the local node."}
{"Origin": "Deletes an external ID.", "Reference": "Inserts or updates an external ID.", "NNUpdater": "Set External Line ID."}
{"Origin": "Calls the specified converter function with the current Maybe instance during assembly time and returns its result.", "Reference": "Calls the specified converter function during assembly time and returns its resulting value.", "NNUpdater": "Returns a Maybe that is based on applying a specified function to the item emitted by the source Maybe, where that function returns a MaybeSource."}
{"Origin": "Get OpenID IDP configurations ### Functional Description: Retrieve a list of configured OpenID Connect IDPs.", "Reference": "Get list of OpenID Connect IDP configurations ### Functional Description: Retrieve a list of configured OpenID Connect IDPs.", "NNUpdater": "Id IN a collection of id values."}
{"Origin": "Reports the percentile value from the given list ordered in a non-descending order.", "Reference": "Reports the percentile value from the continuous distribution described by a given list of samples.", "NNUpdater": "Returns the value at the given quantile."}
{"Origin": "Marks {@code protoMember}, throwing if it is explicitly excluded, or if its enclosing type is also specifically included.", "Reference": "Marks {@code protoMember}, throwing if it is explicitly excluded.", "NNUpdater": "Returns {@code true} if the parameter is annotated with {@link ModelAttribute} or, if in default resolution mode, for any method parameter that is not a simple type."}
{"Origin": "This option allows to configure each configuration file based on the location.", "Reference": "This option allows to configure each configuration fille based on the karaf.home location.", "NNUpdater": "Initializes the Configuration Object based on the configuration file."}
{"Origin": "Get all the jobs present in the wiki.", "Reference": "Get all the intervals/jobs present in the wiki.", "NNUpdater": "GET /rest/admin/jobs -> Get a list of jobs."}
{"Origin": "Return a single {@link ReflectiveMethodResolver}.", "Reference": "Return the specified {@link MethodResolver} delegates, if any.", "NNUpdater": "Get the 'reflective' type of the given type."}
{"Origin": "This is useful for typical blocks in manual JavaMail code.", "Reference": "blocks in manual JavaMail code.", "NNUpdater": "Set Manuell."}
{"Origin": "Two objects are considered different if {@code value.compareTo(reference) != 0}", "Reference": "Two objects are considered different if {@code value.equals(reference) == false}", "NNUpdater": "{@code getReference().location().toString()}."}
{"Origin": "Expands all tree nodes in a single call.", "Reference": "Expands all tree nodes.", "NNUpdater": "Expands the specified leaf nodes."}
{"Origin": "Tests for defaults {@link CreateOptions}.", "Reference": "Tests for defaults {@link GetWorkerOptions}.", "NNUpdater": "Defaults to ``AUTO``."}
{"Origin": "Modified by user info", "Reference": "Modified by user", "NNUpdater": "Sets URI user-info."}
{"Origin": "Obtains an instance from the specified unique name.", "Reference": "Obtains an instance from the specified name.", "NNUpdater": "Obtains the type from a unique name."}
{"Origin": "The {@link EcKeyCreateOptions#getCurve() key curve} can be optionally specified.", "Reference": "The {@link CreateEcKeyOptions#getCurveName() key curve} can be optionally specified.", "NNUpdater": "The {@link EcKeyCreateOptions#getCurve() key curve} can be optionally specified."}
{"Origin": "Used by track model container (e.g.", "Reference": "Only exposed to track model container (e.g.", "NNUpdater": "Set this {@link Track}'s disc number"}
{"Origin": "IMPORTANT: The source DB instance must have backup retention enabled.", "Reference": "The source DB instance must have backup retention enabled.", "NNUpdater": "IMPORTANT: The source DB instance must have backup retention enabled."}
{"Origin": "Requests that the player prefetch the media items for playback.", "Reference": "Requests that the player prepare the media items for playback.", "NNUpdater": "Requests that the player prefetch the media items for playback."}
{"Origin": "Getting Search Suggestions in the Amazon CloudSearch Developer Guide .", "Reference": "CloudSearch Developer Guide.", "NNUpdater": "For more information, see Sorting Results in the Amazon CloudSearch Developer Guide."}
{"Origin": "Computes the minimum for each pixel across all bands in the {@link Planar} image.", "Reference": "Computes the minimum for each pixel across selected bands in the {@link Planar} image.", "NNUpdater": "Computes the average for each pixel across all bands in the {@link Planar} image."}
{"Origin": "Sets current date as e-mails sent date.", "Reference": "Sets current date as the sent date.", "NNUpdater": "The range_date_sent."}
{"Origin": "Sets the value of the cryptAlgorithmType property.", "Reference": "Sets the value of the algorithmName property.", "NNUpdater": "Sets the value of the ole property."}
{"Origin": "In case of failure the {@link Flux} will error.", "Reference": "In case of failure the {@link CosmosContinuablePagedFlux} will error.", "NNUpdater": "Get the id of the {@link CosmosContainer}"}
{"Origin": "Adds a network interface (aka port) into a given bridge of openstack node.", "Reference": "Adds or removes a network interface (aka port) into a given bridge of openstack node.", "NNUpdater": "Returns the router bridge device ID."}
{"Origin": "Sets the amount of time, in milliseconds, to wait between adjustments in pool sizes for a given host, to allow enough time for the adjustments to take effect.", "Reference": "Sets the amount of time to wait between adjustments in pool sizes for a given host, to allow enough time for the adjustments to take effect.", "NNUpdater": "Sets the {@code businessDayAdjustment} property in the builder."}
{"Origin": "Constuct a trace log event.", "Reference": "Constuct a fatal log event.", "NNUpdater": "Always log an event."}
{"Origin": "Returns the QuorumConfig for the given name, creating one if necessary and adding it to the collection of known configurations.", "Reference": "Returns the {@link SplitBrainProtectionConfig} for the given name, creating one if necessary and adding it to the collection of known configurations.", "NNUpdater": "Returns the {@link FlakeIdGeneratorConfig} for the given name, creating one if necessary and adding it to the collection of known configurations."}
{"Origin": "This is another deliberatly racy call, that should only be done in controlled circumstances, e.g.", "Reference": "This is another deliberately racy call, that should only be done in controlled circumstances, e.g.", "NNUpdater": "NodeEntry#addReverseDepAndCheckIfDone}."}
{"Origin": "timed invokeAll(,,null) throws NPE", "Reference": "timed invokeAll(,,null) throws NullPointerException", "NNUpdater": "timed invokeAll(empty collection) returns empty list"}
{"Origin": "All {@link ForeignKeyIndex} types {@link DomainApplicationIndex} {@link EppResourceIndex}", "Reference": "All {@link ForeignKeyIndex} types {@link EppResourceIndex}", "NNUpdater": "If the resource is imported, {@link ForeignKeyIndex} and {@link EppResourceIndex} are also created."}
{"Origin": "This method checks if the region of {@code path} starting at {@code pathOffset} matches the path segments in {@code segments}.", "Reference": "This method checks if the region of {@code path} starting at {@code pathOffset} matches the path pathSegments in {@code pathSegments}.", "NNUpdater": "Append path segments to the existing path."}
{"Origin": "Indicates whether this filter needs to use the secondary, non-SQL method getMatchingFiles().", "Reference": "Indicates whether this filter needs to use the secondary, non-SQL method applyAlternateFilter().", "NNUpdater": "The template needs to still query {@link #isCopyMethodOnValueInstance()} to determine whether to use {@code [expression]."}
{"Origin": "This only functions after we have been attached to a hierarchy.", "Reference": "This only works after this preference has been attached to a hierarchy.", "NNUpdater": "Initializes the function and checks for visibility."}
{"Origin": "The {@link RsaKeyCreateOptions#getKeyType() keyType} indicates the type of key to create.", "Reference": "The {@link CreateRsaKeyOptions#getKeyType() keyType} indicates the type of key to create.", "NNUpdater": "Get the Type of {@link IN}."}
{"Origin": "Set this {@link AxisAngle4f} to be equivalent to the given {@link Quaterniond}.", "Reference": "Set this {@link AxisAngle4f} to be equivalent to the given {@link Quaterniondc}.", "NNUpdater": "Set this {@link AxisAngle4f} to be equivalent to the given {@link Quaterniondr}."}
{"Origin": "Create or obtain a {@link CallableStatement} from the pool.", "Reference": "Creates or obtains a {@link CallableStatement} from the pool.", "NNUpdater": "Execute the statement."}
{"Origin": "If the JAR file has a {@code Main-Class} attribute in its main manifest then its value is the {@link", "Reference": "If the JAR file has a {@code Main-Class} attribute in its main manifest then its value is the module {@link", "NNUpdater": "Sets the main class."}
{"Origin": "It is used for adapting this data provider to a filter type provided by a Component such as ComboBox.", "Reference": "This can be used for adapting this data provider to a filter type provided by a Component such as ComboBox.", "NNUpdater": "Initializes searchTypeComboBox"}
{"Origin": "Creates query for the given queryString.", "Reference": "Queries this search source for the given queryString.", "NNUpdater": "-D"}
{"Origin": "Create or obtain a {@link PreparedStatement} from the pool.", "Reference": "Creates or obtains a {@link PreparedStatement} from the pool.", "NNUpdater": "Execute a SQL statement using the given parameters."}
{"Origin": "Creates a {@link MetadataCoder}.", "Reference": "Returns the singleton {@link MetadataCoder} instance.", "NNUpdater": "Returns a {@link CoderProvider} which uses the {@link ProtoCoder} for {@link Message proto messages}."}
{"Origin": "Inserts the node at the tail of the frontier.", "Reference": "Primitive operation which inserts the node at the tail of the frontier.", "NNUpdater": "Inserts the specified element at the end of this deque."}
{"Origin": "Returns the codec's supported type for decoding {@code requestedMimeType} on the current device, or {@code null} if the codec can't be used.", "Reference": "Returns the codec's supported MIME type for media of type {@code mimeType}, or {@code null} if the codec can't be used.", "NNUpdater": "Returns a {@link CodecDescriptor} for the given type or null if none found."}
{"Origin": "Remove all free glyphs that are assigned the provided group.", "Reference": "Remove all free glyphs that are only assigned the provided group.", "NNUpdater": "Process the provided set of parts."}
{"Origin": "Add insert optimize result uint.", "Reference": "Add insert optimize result unit into units.", "NNUpdater": "Sets true if conflict between int and uInt."}
{"Origin": "Returns the tasks entry with the primary key or throws a {@link com.liferay.tasks.NoSuchTasksEntryException} if it could not be found.", "Reference": "Returns the tasks entry with the primary key or throws a {@link NoSuchTasksEntryException} if it could not be found.", "NNUpdater": "Gets the task body."}
{"Origin": "If no sld file, throws an exception", "Reference": "If no sld file, throws an appropriate exception", "NNUpdater": "validates an style document."}
{"Origin": "Use this method if setting this option is not required and to express that it may be .", "Reference": "Builds the option and marks it as not required Use this method if setting this option is not required and to express that it may be .", "NNUpdater": "May be if prefixes are not set."}
{"Origin": "Gets the value of the descrption property.", "Reference": "Gets the value of the description property.", "NNUpdater": "Gets the value of the links property."}
{"Origin": "Gets the amount of available items in the network of the type passed in, checking NBT or not.", "Reference": "Gets the number of available items in the network satisfying the given matcher.", "NNUpdater": "Checks if items, damage and NBT are equal and the items are stackable."}
{"Origin": "This makes it hard to debug because if task throws an exception, its call stack ends in the execution engine that actually starts a thread that serves the task.", "Reference": "This makes it hard to debug because if a task throws an exception, its call stack ends in the execution engine that actually starts a thread that serves the task.", "NNUpdater": "Task execution here throws {@link IgniteCheckedException}."}
{"Origin": "Creates new {@link DayOfMonth} in UTC.", "Reference": "Creates new {@link DayOfMonth}.", "NNUpdater": "Creates new {@link DayOfMonth} in UTC."}
{"Origin": "Sets the entities.", "Reference": "Set the entities.", "NNUpdater": "Gets the categories."}
{"Origin": "The option is a: type.", "Reference": "The option is a:", "NNUpdater": "Returns the {@link OptionsBase} class the defines the given option, null if the option isn't recognized."}
{"Origin": "Test of from method, of class Statistics.", "Reference": "Test of fromJson method, of class Statistics.", "NNUpdater": "Test of smogIndex method, of class ReadabilityStatistics."}
{"Origin": "Infer a {@link Schema} from an AVRO-generated SpecificRecord.", "Reference": "Infer a {@link Schema} from either an AVRO-generated SpecificRecord or a POJO.", "NNUpdater": "Generate an Avro file of schema (key: String, value String) containing the records (``i``, ``#i``) for start <= i < end."}
{"Origin": "Deletes the element at the specified position.", "Reference": "Removes the element at the specified position.", "NNUpdater": "Removes the specified element from the list."}
{"Origin": "Creates an empty object literal, `{}`.", "Reference": "Creates an object-literal with zero or more elements, `{}`.", "NNUpdater": "TemplateLiteral ( Expression )"}
{"Origin": "Creates an iterable that iterates in parallel over a three iterables.", "Reference": "Creates an iterable that iterates in parallel over three iterables.", "NNUpdater": "Run the algorithm."}
{"Origin": "Initializes this.audioFormats", "Reference": "Initializes audioFormats", "NNUpdater": "Initializes this SpeechMarker with the given name, front end, properties, and AudioSource predecessor."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Sets the partition storage level.", "Reference": "Sets the storage configuration.", "NNUpdater": "Sets the partition identifier."}
{"Origin": "Test that updating of baseline autoadjustment settings via control.sh actually influence cluster's baseline.", "Reference": "Test that updating of baseline auto_adjustment settings via control.sh actually influence cluster's baseline.", "NNUpdater": "Returns the value of the {@code measureUsesContext} field."}
{"Origin": "Testing the isSPD (is symmetric positive definite) method of CholeskyDecomposition class.", "Reference": "Testing the isSPD (is symmetric positive definite) method of", "NNUpdater": "for testing."}
{"Origin": "showIndex.", "Reference": "showTagArticles.", "NNUpdater": "showInit."}
{"Origin": "Creates an instance of {@link RowFactory} using provided {@link RowTypeFactory} and {@link GetterFactory}.", "Reference": "Creates an instance of {@link RowFactory} using provided {@link SchemaFactory} and {@link GetterFactory}.", "NNUpdater": "Creates a {@link Row} from the list of values and {@link #getSchema()}."}
{"Origin": "Create an {@link RSocketOutboundGatewaySpec} builder for request-reply gateway based on provided {@code route}.", "Reference": "Create an {@link RSocketOutboundGatewaySpec} builder for request-reply gateway based on provided {@code route} and optional variables to expand route template.", "NNUpdater": "Create an {@link ReactiveHttpMessageHandlerSpec} builder for request-reply gateway based on provided {@code uri}."}
{"Origin": "retuns the sum of all positions of the constituent tracking tokens.", "Reference": "Returns the sum of all positions of the constituent tracking tokens.", "NNUpdater": "Gets the list of all tokens"}
{"Origin": "Apply the rotation transformation of the given {@link Quaterniond} to this matrix and store the result in .", "Reference": "Apply the rotation transformation of the given {@link Quaterniondc} to this matrix and store the result in .", "NNUpdater": "Apply the rotation transformation of the given {@link Quaternionf} to this matrix and store the result in ."}
{"Origin": "Constructs a URL to save the data to", "Reference": "Constructs a final path save the data to", "NNUpdater": "testExport"}
{"Origin": "Returns the ratio of stack traces indicating back pressure to total number of sampled stack traces.", "Reference": "Returns the back pressure ratio of the given subtask index.", "NNUpdater": "Stack traces are not currently populated by GWT."}
{"Origin": "Obtains an instance from the specified unique name.", "Reference": "Obtains an instance from the specified name.", "NNUpdater": "Obtains the type from a unique name."}
{"Origin": "Prints out the created certificate issuer details when a response has been received.", "Reference": "Subscribes to the call and prints out the updated certificate operation details when a response has been received.", "NNUpdater": "Prints out the returned certificate issuer details when a response has been received."}
{"Origin": "Hack to avoid disappearing footer when changing the predefined styles at runtime in Safari", "Reference": "Workaround to avoid disappearing footer when changing the predefined styles at runtime in Safari", "NNUpdater": "Converts the list of Safari extensions to a JsonArray"}
{"Origin": "If the offsets list is empty, then an offset of 0 is used for each array.", "Reference": "If the offsets list is empty, then an offset of 0 is used for each sequence.", "NNUpdater": "If this is null then {@link #executor} is used, if this is also null then the default is used"}
{"Origin": "Indicates if the way is ready to handle new messages.", "Reference": "Indicates if the way is available to handle new messages.", "NNUpdater": "Add the ready keys to the selected key set."}
{"Origin": "Handles an iterate commit.", "Reference": "Handles an iterator next commit.", "NNUpdater": "Handles a log write."}
{"Origin": "Add a duration (with the same time unit as the current duration)", "Reference": "Add a amount (with the same time unit as the current duration)", "NNUpdater": "Obtains an instance of {@code Duration} from a duration in a specified unit."}
{"Origin": "Gets the additional trade information, defaulted to an empty instance.", "Reference": "Gets the additional information, defaulted to an empty instance.", "NNUpdater": "Gets the trade attributes."}
{"Origin": "Returns if annotation is present on given accessible object.", "Reference": "Returns if annotation is present on given annotated element.", "NNUpdater": "If no such comparator is present, this implementation returns {@code null}."}
{"Origin": "Gets the nodeType.", "Reference": "Gets the newType.", "NNUpdater": "Gets the name for this node."}
{"Origin": "Returns the favorite site with the primary key or throws a {@link com.liferay.so.NoSuchFavoriteSiteException} if it could not be found.", "Reference": "Returns the favorite site with the primary key or throws a {@link NoSuchFavoriteSiteException} if it could not be found.", "NNUpdater": "Returns the favorite sites before and after the current favorite site in the ordered set where groupId = ?"}
{"Origin": "Create an unnamed, parented {@link InstanceManager}.", "Reference": "Create an unnamed, parented {@link InjectionManager}.", "NNUpdater": "Creates a FileManager."}
{"Origin": "Starts continuous task.", "Reference": "Starts local continuous task.", "NNUpdater": "Gets the version."}
{"Origin": "Since category uses ``totalPointsPossible`` property instead of ``pointsPossible`` property, as in Assignments", "Reference": "Fix for Category NPE reported in SAK-14519 Since category uses ``totalPointsPossible`` property instead of ``pointsPossible`` property, as in Assignments", "NNUpdater": "The meta-property for the {@code yieldCurvePoints} property."}
{"Origin": "They must not be of type {@link KnownAmountPaymentPeriod}.", "Reference": "They must not be of type {@link KnownAmountSwapPaymentPeriod}.", "NNUpdater": "They must not be of type {@link KnownAmountPaymentPeriod}."}
{"Origin": "Get the address of the datagram's data field.", "Reference": "Get the datagram's data field.", "NNUpdater": "Sets the value of the 'actions' field."}
{"Origin": "Temporary method to upgrade from oldStaffBarlines to staffBarlines.", "Reference": "Upgrade from oldStaffBarlines to staffBarlines.", "NNUpdater": "Create a staff info, using the staffCandidate that corresponds to the staff lines."}
{"Origin": "Given a pattern and a string, returns a list with the values of the captured groups in the pattern.", "Reference": "Given a pattern, which contains one or more capturing groups, and a String, returns a list with the values of the captured groups in the pattern.", "NNUpdater": "2014-09-09-Holiday"}
{"Origin": "The {@link KeyCreateOptions} is required.", "Reference": "The {@link CreateKeyOptions} is required.", "NNUpdater": "The {@link RsaKeyCreateOptions#getKeySize() keySize} can be optionally specified."}
{"Origin": "See Immutable Map Static Factory Methods for details.", "Reference": "See Unmodifiable Maps for details.", "NNUpdater": "VerificationTimes supports multiple static factory methods:"}
{"Origin": "Make sure we can get the {@link GenieHostInfo} instance even if EC2 metadata fails.", "Reference": "Make sure we can get the {@link GenieHostInfo}.", "NNUpdater": "Make sure we can get a valid job resource when all conditions are met."}
{"Origin": "Equivalent to: {@code .weightInit(WeightInit.DISTRIBUTION).dist(distribution)}", "Reference": "Equivalent to: {@code .weightInit(new WeightInitDistribution(distribution))}", "NNUpdater": "Use {@link #initWeights(int[], WeightInit, Distribution, char, INDArray)} to control this"}
{"Origin": "Computes the median for each pixel across all bands in the {@link Planar} image.", "Reference": "Computes the median for each pixel across selected bands in the {@link Planar} image.", "NNUpdater": "Computes the average for each pixel across all bands in the {@link Planar} image."}
{"Origin": "Determines the display value of the supplied {@code Object}, HTML-escaped as required.", "Reference": "Determine the display value of the supplied {@code Object}, HTML-escaped as required.", "NNUpdater": "The text must be valid html."}
{"Origin": "Converts Hex encoded string to byte[] if necessary.", "Reference": "Converts a Hex encoded string to a byte array.", "NNUpdater": "Converts byte data to a Hex-encoded string in lower case."}
{"Origin": "Sets the value of the 'BloomFilter' field", "Reference": "Sets the value of the 'bloomFilter' field.", "NNUpdater": "Determines whether a given bloom filter is compatible with this bloom filter."}
{"Origin": "Amazon Redshift returns all resources that match any combination of the specified keys and values.", "Reference": "Redshift returns all resources that match any combination of the specified keys and values.", "NNUpdater": "Describes the SQL Query to execute on an Amazon Redshift database for an"}
{"Origin": "Generate a FormType from a string.", "Reference": "Generate a FormTypes from a string.", "NNUpdater": "Adds a form field to the form and sets its initial value."}
{"Origin": "Append TLVMsg to the TLVList.", "Reference": "Append TLVMsg to the TLV list.", "NNUpdater": "Returns TLV body of padding TLV."}
{"Origin": "Gets the value of the 'KeepDeletedCells' field", "Reference": "Gets the value of the 'keepDeletedCells' field.", "NNUpdater": "Gets the value of the 'paramName' field."}
{"Origin": "This method sets the value of the database column m_prj_project.projectType", "Reference": "This method sets the value of the database column m_prj_project.type", "NNUpdater": "This method sets the value of the database column m_prj_project.accountId"}
{"Origin": "Returns the provided default value in case 'standard' valu is .", "Reference": "Returns the provided default value in case 'standard' value is .", "NNUpdater": "If param value is not given by the shortName (short option) then if the default value is defined return it."}
{"Origin": "Return type of method signature as a byte value as defined in Constants", "Reference": "Return type of method signature as a byte value as defined in", "NNUpdater": "Returns the result type signature for the method."}
{"Origin": "Loop over the {@link KeyProperties key} and call {@link KeyClient#getKey(KeyProperties key properties)}.", "Reference": "Loop over the {@link KeyProperties key} and call {@link KeyClient#getKey(String, String)}.", "NNUpdater": "Loop over the {@link KeyProperties key} and call {@link KeyClient#getKey(KeyProperties key properties)}."}
{"Origin": "Sets the alignment of the items in the list.", "Reference": "Sets the horizontal alignment of the list items.", "NNUpdater": "Sets the alignment of widgets within the horizontal group."}
{"Origin": "Atomize Java items.", "Reference": "Return Java items.", "NNUpdater": "Atomize Java items."}
{"Origin": "Constuct a trace log event.", "Reference": "Constuct a debug log event.", "NNUpdater": "Always log an event."}
{"Origin": "Inspects a given {@link Throwable} as well as its nested causes, in order to look for a specific exception class.", "Reference": "Inspects a given {@link Throwable} as well as its nested causes, in order to look for a specific set of exception classes.", "NNUpdater": "Converts the {@link Throwable} to a {@link Status}, taking into account exceptions specific to Armeria as well and the protocol package."}
{"Origin": "Returns an iterator on all registered commands.", "Reference": "Returns a sorted collection of all registered commands.", "NNUpdater": "Constructor."}
{"Origin": "Returns the server list for the requested cluster.", "Reference": "Returns the configured server list for the requested cluster.", "NNUpdater": "Returns the requested function."}
{"Origin": "Creates a service name for the deployment unit to define the service.", "Reference": "Creates a service name for the batch environment service.", "NNUpdater": "Get the define ID for a given material parameter."}
{"Origin": "Warning: the conditional comments don't work when injected dynamically with JavaScript (i.e.", "Reference": "Warning: the conditional comments don't work when injected dynamically with", "NNUpdater": "Add a link to the JavaScript file."}
{"Origin": "If this node is Object Node and has value for specified property, {@code this} is returned to allow chaining; otherwise {@link IllegalArgumentException} is thrown.", "Reference": "If this node is Object Node and has value for specified property, {@code this} is returned to allow chaining; otherwise exception is thrown.", "NNUpdater": "If the property is missing and no default value has been specified a {@link ConfigurationPropertyException} is thrown"}
{"Origin": "Returns a copy of this date with the specified field altered.", "Reference": "Returns a copy of this date with the specified field set to a new value.", "NNUpdater": "Returns a copy of this OffsetDate with the year altered."}
{"Origin": "Sets the {@link SharedKeyCredential} used to authorize requests sent to the service.", "Reference": "Sets the {@link StorageSharedKeyCredential} used to authorize requests sent to the service.", "NNUpdater": "Sets the SAS token used to authorize requests sent to the service"}
{"Origin": "The string ``back`` is special-cased to provide Referrer support, when Referrer is not present `alt` or ``/`` is used.", "Reference": "The string ``back`` is special-cased to provide Referrer support, when Referrer is not present ``/`` is used.", "NNUpdater": "Load referrer of fileConfigToLabelTypeMappingList by the set-upper of referrer."}
{"Origin": "Creates all folders at once.", "Reference": "Creates all directories at once.", "NNUpdater": "Lists the files or folders which match the given prefix using pagination."}
{"Origin": "Note that the returned {@link Bits} instance MUST be consumed in order.", "Reference": "NOTE: that the returned {@link Bits} instance MUST be consumed in order.", "NNUpdater": "Note that the returned {@link Bits} instance MUST be consumed in order."}
{"Origin": "This method must only be used for type references whose sort is {@link #THROWS THROWS}.", "Reference": "This method must only be used for type references whose sort is {@link #THROWS}.", "NNUpdater": "A {@link UserException} is throws when:"}
{"Origin": "Write a Chart series as columns in a CSV file.", "Reference": "Export a Chart series in columns in a CSV file.", "NNUpdater": "Add a series to the chart using Collections"}
{"Origin": "Determines whether a character is lower case according to {@linkplain Character#isLowerCase(char) Java's definition}.", "Reference": "Determines whether a BMP character is lower case according to {@linkplain Character#isLowerCase(char) Java's definition}.", "NNUpdater": "Converts char to lower case {@link Character#toLowerCase(int)}."}
{"Origin": "Returns the split point number, 1-based.", "Reference": "Returns a unique id for each runAsync, 1-based.", "NNUpdater": "Computes and returns the best split point."}
{"Origin": "Fails silently if no match found.", "Reference": "Fails silently if the student does not exist.", "NNUpdater": "If no match is found -1 will be returned."}
{"Origin": "Objects of the following type(s) are allowed in the list {@link CTAbsSizeAnchor } {@link CTRelSizeAnchor }", "Reference": "Objects of the following type(s) are allowed in the list {@link CTRelSizeAnchor } {@link CTAbsSizeAnchor }", "NNUpdater": "Objects of the following type(s) are allowed in the list {@link Styles.LatentStyles.LsdException }"}
{"Origin": "Sets item to self and waiter to null, to avoid garbage retention after matching or cancelling.", "Reference": "Sets item (of a request node) to self and waiter to null, to avoid garbage retention after matching or cancelling.", "NNUpdater": "Does not wait for any further action to complete (i.e., returns immediately after confirming)"}
{"Origin": "Create error value with given reason and error details.", "Reference": "Create error value with given type, reason and details.", "NNUpdater": "Sets the error attribute with errorCode."}
{"Origin": "{@code protocol} and {@code proxy} will be non-null and {@code throwable} will be null when the connection is successfully established.", "Reference": "{@code protocol} and {@code proxy} will be non-null and {@code ioe} will be null when the connection is successfully established.", "NNUpdater": "A {@code null} CharSequence will return {@code null}."}
{"Origin": "Get the set of all custom providers registered for the given service provider contract in the underlying {@link ServiceLocator HK2 service locator} container.", "Reference": "Get the set of all custom providers registered for the given service provider contract in the underlying {@link InstanceManager instance manager} container.", "NNUpdater": "Get the iterable of all providers (custom and default) registered for the given service provider contract in the underlying {@link ServiceLocator HK2 service locator} container."}
{"Origin": "Basic test of Layer containing automatic modules", "Reference": "Basic test of layer containing automatic modules", "NNUpdater": "Basic test of --limit-modules to limit which platform modules are observable."}
{"Origin": "Returns the sync d l object with the primary key or throws a {@link com.liferay.sync.NoSuchDLObjectException} if it could not be found.", "Reference": "Returns the sync d l object with the primary key or throws a {@link NoSuchDLObjectException} if it could not be found.", "NNUpdater": "DataFileWriter#sync()} while writing."}
{"Origin": "This factory creates a {@code ZonedDateTime} from a date-time and time-zone.", "Reference": "Obtains an instance of {@code ZonedDateTime} from a local date-time.", "NNUpdater": "Checks if this date-time is equal to another date-time."}
{"Origin": "Checks for internet connection and then initializes the recycler view with 25 categories of the searched query", "Reference": "Checks for internet connection and then initializes the recycler view with all(max 500) categories of the searched query", "NNUpdater": "Constructor."}
{"Origin": "Creates CronDefinition instance matching quartz specification;", "Reference": "Creates CronDefinition instance matching Quartz specification", "NNUpdater": "Quartz: 1-7 or SUN-SAT"}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Remove the {@link Query} at the given position from this playlist", "Reference": "Remove the {@link PlaylistEntry} at the given position from this playlist", "NNUpdater": "Remove the {@link Query} at the given position from this playlist"}
{"Origin": "You are running on JDK6 which comes with JAX-WS {0} API, but this tool requires JAX-WS {1} API.", "Reference": "You are running on JDK6 or newer which comes with JAX-WS {0} API, but this tool requires JAX-WS {1} or newer API.", "NNUpdater": "Add custom JAX-RS provider to the list of providers"}
{"Origin": "Allocate a block of memory of the given size in bytes, and return a pointer to that memory.", "Reference": "Allocate a block of memory of the given size in bytes and update memory allocation tracker accordingly.", "NNUpdater": "Returns the allocated byte size of the given bitmap."}
{"Origin": "Inserts the given instructions at the begining of this list.", "Reference": "Inserts the given instructions at the beginning of this list.", "NNUpdater": "Inserts the specified element as a component in this list at the specified ."}
{"Origin": "Returns the app with the primary key or throws a {@link com.liferay.marketplace.NoSuchAppException} if it could not be found.", "Reference": "Returns the app with the primary key or throws a {@link NoSuchAppException} if it could not be found.", "NNUpdater": "Returns the {@link App app}'s {@link JobManager}"}
{"Origin": "Convert to primitive types, returning default value if text is null.", "Reference": "Convert to integer, returning default value if text is inconvertible.", "NNUpdater": "Convert all types, both reference and primitive, to {@code Object}."}
{"Origin": "caller should not modify leavingEndpoints", "Reference": "caller should not modify leavingNodes", "NNUpdater": "caller should not modify leavigEndpoints"}
{"Origin": "Waits until the given element is either hidden or deleted.", "Reference": "Waits until the given locator corresponds to either a hidden or a deleted element.", "NNUpdater": "Waits for up to 10 seconds until the given thread can be executed."}
{"Origin": "Check that the default base section paint is not null, and that you can never set it to null.", "Reference": "Check that the default section paint is not null, and that you can never set it to null.", "NNUpdater": "never returns empty"}
{"Origin": "Returns a new fresh folder with the given path under the temporary folder.", "Reference": "Returns a new fresh folder with the given paths under the temporary folder.", "NNUpdater": "Returns a new, empty temporary folder, based on the current test class's name."}
{"Origin": "Setup starts 4 process instances of oneTaskProcess and 1 instance of oneTaskProcess2", "Reference": "Setup starts 4 process instances of oneTaskProcess and 1 instance of otherOneTaskProcess", "NNUpdater": "See {@link #createOneTaskTestProcess()}."}
{"Origin": "Applies a list ontology changes to a collection of ontologies.", "Reference": "Apply ontology changes.", "NNUpdater": "Answer a new ontology model which will process in-memory models of ontologies in the given language."}
{"Origin": "The input file must be a list of whitespace-separated verb-lemma-POS triples, one verb form per line.", "Reference": "The input file must be a list of tab-separated verb-POS pairs, one verb per line.", "NNUpdater": "Get method's http verbs."}
{"Origin": "Using the starting mark found for each alteration item, defines all slices.", "Reference": "Using the starting mark found for each alteration item, defines all roi.", "NNUpdater": "Using the starting mark found for each alteration item, defines all slices."}
{"Origin": "It determines time duration that you should wait for permission and reserves it for you, if you'll be able to wait long enough.", "Reference": "It determines time duration that you should wait for the given number of permits and reserves it for you, if you'll be able to wait long enough.", "NNUpdater": "The same as {@link #waitForRpc()} except that you are allowed to specify the max wait time."}
{"Origin": "Pieces a List of CoreMaps back together using word and setting a white space between each word TODO: remove this (listToString does the same thing)", "Reference": "Pieces a List of CoreMaps back together using word and setting a white space between each word TODO: remove this (SentenceUtils.listToString does the same thing - why 2 separate classes)", "NNUpdater": "Test remove word with object."}
{"Origin": "Checks whether memory cache key (image URI) for current ImageView is actual", "Reference": "Checks whether memory cache key (image URI) for current ImageAware is actual", "NNUpdater": "Incoming drawable will be displayed in {@link android.widget.ImageView ImageView} during image loading."}
{"Origin": "Initializes the resource to edit according to the uuid provided via the tag's attribute ``uuid``.", "Reference": "Returns the resource to edit according to the uuid provided via the tag's attribute ``uuid``.", "NNUpdater": "Gets a new and unique time uuid in milliseconds."}
{"Origin": "Tests intersecting a non-empty list with an subset of iteself.", "Reference": "Tests intersecting a non-empty list with an subset of itself.", "NNUpdater": "Constructs a non empty list from the given elements."}
{"Origin": "or throws a {@link com.liferay.calendar.NoSuchNotificationTemplateException} if it could not be found.", "Reference": "or throws a {@link NoSuchNotificationTemplateException} if it could not be found.", "NNUpdater": "Operation fails."}
{"Origin": "Test that all Closure singletones hold singleton pattern in serialization/deserialization process.", "Reference": "Test that all Closure singletons hold singleton pattern in serialization/deserialization process.", "NNUpdater": "Test that all Transformer singletons hold singleton pattern in serialization/deserialization process."}
{"Origin": "For {@link Type#ERROR} or {@link Type#EXIT} actions this can be provided as part of the factory method.", "Reference": "For {@link ActionType#ERROR} or {@link ActionType#EXIT} actions this can be provided as part of the factory method.", "NNUpdater": "For example, a {@code List} return type can be specified as {@code ofType(new TypeDescriptor>(){})}."}
{"Origin": "Appends a declaration of the given label to {@link #buf buf}.", "Reference": "Appends a declaration of the given label to {@link #stringBuilder}.", "NNUpdater": "Writes rec file position to given {@code buf}."}
{"Origin": "This method obtains the extension as the textual part of the filename after the last dot.", "Reference": "This method obtains the extension as the textual part of the fileName after the last dot.", "NNUpdater": "The extension of a file is the part of the name after the last dot, including the dot."}
{"Origin": "Implements {@link PacketListener}.", "Reference": "Implements {@link StanzaListener}.", "NNUpdater": "Removes a packet listener."}
{"Origin": "Returns the authenticating user's retweet of this tweet, or null when the tweet was created before this feature was enabled.", "Reference": "Returns the authenticating user's retweet's id of this tweet, or -1L when the tweet was created before this feature was enabled.", "NNUpdater": "Add a status to the index."}
{"Origin": "Removes and returns the node at the head of the frontier.", "Reference": "Primitive operation which removes and returns the node at the head of the frontier.", "NNUpdater": "Retrieves and removes the head of this queue."}
{"Origin": "Queries this contact source for the given queryString.", "Reference": "Creates query for the given queryString.", "NNUpdater": "Queries this ContactSourceService for SourceContacts which match a specific query Pattern."}
{"Origin": "The {@link KeyCreateOptions#getExpires() expires} and {@link", "Reference": "The {@link CreateKeyOptions#getExpiresOn() expires} and {@link", "NNUpdater": "Set the {@link LocalDateTime expires} time value."}
{"Origin": "The get key operation is applicable to all key types and it requires the {@code keys/get} permission.", "Reference": "This operation requires the {@code keys/delete} permission.", "NNUpdater": "Gets the key."}
{"Origin": "Returns the (unbiased) skew of all the values within a {@link Dataset}", "Reference": "Returns the (unbiased) kurtosis of all the values within a {@link Dataset}", "NNUpdater": "Returns a read-only Iterable on the values of the Dataset."}
{"Origin": "Returns registrable part of the domain for the given domain name of {@code null} if given domain represents a public suffix.", "Reference": "Returns registrable part of the domain for the given domain name or {@code null} if given domain represents a public suffix.", "NNUpdater": "Returns registrable part of the domain for the given domain name or {@code null} if given domain represents a public suffix."}
{"Origin": "Get Payroll movement with concept is paid and is invoiced", "Reference": "Get Payroll movement with concept is invoiced", "NNUpdater": "Get payroll by search key"}
{"Origin": "Prepare the collection of CLI tasks (inputs, books, scripts, samples).", "Reference": "Prepare the collection of CLI tasks (inputs, books, samples).", "NNUpdater": "Prepare the collection of CLI tasks (inputs, books, scripts)."}
{"Origin": "Checks a given class.", "Reference": "Checks the given class.", "NNUpdater": "Checks whether fields indexing is enabled for objects of the given {@code cls}."}
{"Origin": "Runs the pig script using PigRunner API if version VERSION or above.", "Reference": "Runs the pig script using PigRunner.", "NNUpdater": "Step that runs a Pig script on your job flow using the default Pig version."}
{"Origin": "Also, you can add no more than 30 thousand OOV words to a model.", "Reference": "Also, you can add no more than 90 thousand OOV words to a model.", "NNUpdater": "Sets the outOfVocabularyWords."}
{"Origin": "Provides a list of all connection wrappers corresponding to a given environment.", "Reference": "Provides a list of all connection configs corresponding to a given environment.", "NNUpdater": "Provides the legacy environment's major version number."}
{"Origin": "If this lookup object has private access, then the caller class is the lookupClass.", "Reference": "If this lookup object has full privilege access, then the caller class is the lookupClass.", "NNUpdater": "Set Lookup ClassName."}
{"Origin": "The curves themselves are provided in {@link ScenarioMarketData} using {@link CurveId} as the identifier.", "Reference": "The curves themselves are provided in {@link ScenarioMarketData} using {@link RatesCurveId} as the identifier.", "NNUpdater": "The curves themselves are provided in {@link CalculationMarketData} using {@link CurveId} as the identifier."}
{"Origin": "Add a list of documents to the Solr server.", "Reference": "Add a list of documents to the Solr client.", "NNUpdater": "Create a SolrClient based on the type of Solr specified."}
{"Origin": "Report the pitch position of the nth item, within the given clef.", "Reference": "Report the pitch position of the nth item, within the given clef kind.", "NNUpdater": "Report the last clef (if any) in this measure, tagged with the provided staff"}
{"Origin": "Creates a flux of {@link PagedResponse} starting from the first page.", "Reference": "Creates a Flux of {@link PagedResponse} starting from the first page.", "NNUpdater": "Creates a LiveData of PagedLists, given the NullPaddedList.Config."}
{"Origin": "Kafka Consumer properties are generated as follows:", "Reference": "Kafka Consumer properties are generated as follows: 1.", "NNUpdater": "Sets the Kafka version to be used."}
{"Origin": "Returns the builder for the settings used for calls to labelAudio.", "Reference": "Returns the builder for the settings used for calls to listEvaluationJobs.", "NNUpdater": "Gets the labels used to filter settings based on their {@link ConfigurationSetting#label() label} in the service."}
{"Origin": "Wraps this Subject and serializes the calls to the onSubscribe, onNext, onError and onComplete methods, making them thread-safe.", "Reference": "Wraps this FlowableProcessor and serializes the calls to the onSubscribe, onNext, onError and onComplete methods, making them thread-safe.", "NNUpdater": "Run onNext, onComplete and onError on a supplied {@link Consumer} {@link Runnable} scheduler factory like {@link SchedulerGroup}."}
{"Origin": "propagate any exception thrown drop events if invocation of {@link #process(BaseEvent)} returns null.", "Reference": "propagate any exception thrown drop events if invocation of {@link #process(CoreEvent)} returns null.", "NNUpdater": "Creates a new instance of {@link org.spongepowered.api.event.inventory.DropItemEvent.Dispense}."}
{"Origin": "Complexity: 5 trigonometric functions, 2 sqrt.", "Reference": "Complexity: 5 trigonometric functions, 1-2 sqrt.", "NNUpdater": "Distance is (sqrt(1.0 / support(%)) * (1.0 / (i==0 ?"}
{"Origin": "Returns this {@code Option} if it is nonempty, otherwise return the alternative.", "Reference": "Converts this {@code Option} to an {@link Either}.", "NNUpdater": "Return the actual {@link Exception} thrown."}
{"Origin": "Convert to object types, returning null if text is null.", "Reference": "Convert to object types, returning null if text is null or empty.", "NNUpdater": "IsNullOrEmpty {is null or empty}."}
{"Origin": "Updates Notifications Tab settings switches state based on the master switch state", "Reference": "Updates Notifications current settings switches state based on the master switch state", "NNUpdater": "Sets the state if the current state {@code .equals()} the specified expected state."}
{"Origin": "checks that no scores or freqs are infinite", "Reference": "checks that no scores are infinite", "NNUpdater": "Return the intersection point between provided infinite line and the infinite vertical line at provided abscissa."}
{"Origin": "Turn a toX of Eithers into a single Either with Lists of values.", "Reference": "Turn an IterableX of Eithers into a single Either with Lists of values.", "NNUpdater": "By constrast with {@link Eithers#sequencePresent(IterableX)}, if any Eithers are empty the result is an empty Either"}
{"Origin": "anonymous: Cross-origin CORS requests for the element will not have the credentials flag set.", "Reference": "ANONYMOUS: Cross-origin CORS requests for the element will not have the credentials flag set.", "NNUpdater": "Override this method to configure cross origin requests processing."}
{"Origin": "If not set, a random {@link UUID} is generated with {@link UUID#randomUUID()}.", "Reference": "If not set, a random {@link RequestId} is generated with {@link RequestId#random()}.", "NNUpdater": "Returns a {@link SchemaBuilder} for a Point field."}
{"Origin": "prevent the passed smart toast type from being shown by setting its counter to the max - this should be used to disable long press toasts when the user long presses to multiselect since they alraady know they can do it", "Reference": "prevent the passed smart toast type from being shown by setting its counter to the max - this should be used to disable long press toasts when the user long presses to multiselect since they already know they can do it", "NNUpdater": "Enable / Disable the drag operation with long press on the ViewHolder."}
{"Origin": "Sets the responseType.", "Reference": "Set the responseType.", "NNUpdater": "Sets the nodeType."}
{"Origin": "Returns an action to release a the given file descriptor and free the given native socket address.", "Reference": "Returns an action to release the given file descriptor and socket addresses.", "NNUpdater": "Binds this server socket to the given local socket address with a maximum backlog of 50 unaccepted connections."}
{"Origin": "Note that the returned instance must be {@link RequestScope.Instance#release() released} manually once not needed anymore to prevent memory leaks.", "Reference": "Note that the returned context must be {@link RequestContext#release() released} manually once not needed anymore to prevent memory leaks.", "NNUpdater": "Returns an instance of T that is not equal to the instance of T returned by {@link #getRedObject()}."}
{"Origin": "Nota: the defining points are meant to be the extrema points inside the parallelogram.", "Reference": "Nota: the defining points are meant to be the extrema points on the borders of the parallelogram.", "NNUpdater": "Returns all of data points in order."}
{"Origin": "This increases the likelihood of selecting an instance that is hosted in the same data centre as the process.", "Reference": "This increases the likelihood of selecting an instance that is hosted in the same rack as the process.", "NNUpdater": "Center."}
{"Origin": "Check equality between a String and a char[] object, specifying (offset,len) pairs for limiting the fragments to be checked.", "Reference": "Check equality between a CharSequence and a char[] object, specifying (offset,len) pairs for limiting the fragments to be checked.", "NNUpdater": "Serialize {@code char} into byte array with following scheme: [{@link #CHAR_FLAG}] + [char_bytes]."}
{"Origin": "You must call the {@link #initializeWithoutRunning(SpecialTimestampsSupplier, TimelockService, KeyValueService,", "Reference": "You must call the {@link #initializeWithoutRunning(SpecialTimestampsSupplier, TimelockService, KeyValueService, TransactionService,", "NNUpdater": "Operation fails."}
{"Origin": "Returns whether this instance deploys to the given zone, either implicitly or explicitly", "Reference": "Returns whether this deployment spec specifies the given zone, either implicitly or explicitly", "NNUpdater": "Deploys the given tester application to the given zone."}
{"Origin": "Returns all the push notifications devices where platform = ?.", "Reference": "Returns all the push notifications devices where userId = any ?", "NNUpdater": "Returns the children push notifications entries count of this push notifications entry."}
{"Origin": "Get type of the report.", "Reference": "Get delimiter of the report.", "NNUpdater": "Get Kann Berichte erstellen."}
{"Origin": "Get Externer Kunde Nr..", "Reference": "Get Memo_Delivery.", "NNUpdater": "Get Line No."}
{"Origin": "A utility method to destroy a MockTrezor device.", "Reference": "A utility method to destroy the MockTrezor device.", "NNUpdater": "Destroys the factory."}
{"Origin": "insert an async processor (with dedicated thread, multiple subscribers)", "Reference": "insert an async processor (with dedicated queue, multiple subscribers)", "NNUpdater": "insert an async processor (with dedicated thread, multiple subscribers)"}
{"Origin": "Should subscriptions be considered part of a group even if using a unicast endpoint, should it be considered an individual even if using a multicast endpoint, or should the use of a unicast/multicast endpoint infer the usage.", "Reference": "Should network subscriptions be considered part of a group even if using a unicast endpoint, should it be considered an individual even if using a multicast endpoint, or should the use of a unicast/multicast endpoint infer the usage.", "NNUpdater": "Gets the currently pinned Endpoint at this Endpoint."}
{"Origin": "Compresses and stores an integer value to the specified byte array.", "Reference": "Compresses and stores an integer value at the beginning of the byte array.", "NNUpdater": "Compresses and stores an integer value to the specified byte array."}
{"Origin": "Get the username (email) of the current user.", "Reference": "Get the email of the current user.", "NNUpdater": "GET /users/:username -> get User with the corresponding ``email``"}
{"Origin": "For information about computing a SHA256 tree hash, see", "Reference": "For information about computing a SHA256 tree hash, see Computing Checksums.", "NNUpdater": "For more information about how load is computed, see"}
{"Origin": "For conceptual information and the underlying REST API, go to", "Reference": "For conceptual information and the underlying REST API, go to Initiate a Job and Downloading a Vault Inventory", "NNUpdater": "Implementation of getStream REST API."}
{"Origin": "This method returns a collector allowing streams to be gathered into an {@link ImmutableMap}.", "Reference": "This method returns a collector allowing streams to be gathered into an {@link ImmutableMap}, retaining insertion order.", "NNUpdater": "Gets an {@link ImmutableSet} of {@link Value.Immutable}s for the block at the given location."}
{"Origin": "Set the URI of this request header.", "Reference": "Sets the URI of this request header.", "NNUpdater": "Sets the request header of this message."}
{"Origin": "Fetch metric in {@link org.terasology.telemetry.Metrics} and send to the server.", "Reference": "Fetch metric in {@link org.terasology.context.Context} and send to the server.", "NNUpdater": "Registers a {@link org.terasology.logic.console.commands.Command}."}
{"Origin": "This method returns the PSK identity as clear text.", "Reference": "This method returns the PSK identity as public information.", "NNUpdater": "Set the key for raw private key or full X509 mode."}
{"Origin": "R is a rotation transformation specified by the given quaternion, S is a scaling transformation which scales the axes by and is an {@link #isAffine() affine} matrix.", "Reference": "R is a rotation - and possibly scaling - transformation specified by the given quaternion, S is a scaling transformation which scales the axes by and is an {@link #isAffine() affine} matrix.", "NNUpdater": "Apply the rotation transformation of the given {@link Quaternionfc} to this {@link #isAffine() affine} matrix and store the result in ."}
{"Origin": "Includes iPhone, iPod Touch, Android, Windows Phone 7, Palm WebOS, etc.", "Reference": "Includes iPhone, iPod Touch, Android, Windows Phone 7 and 8, BB10, WebOS, Playstation Vita, etc.", "NNUpdater": "Includes iPhone, iPod Touch, Android, Windows Phone 7, Palm WebOS, etc."}
{"Origin": "Returns the attachment with the primary key or throws a {@link com.liferay.mail.NoSuchAttachmentException} if it could not be found.", "Reference": "Returns the attachment with the primary key or throws a {@link NoSuchAttachmentException} if it could not be found.", "NNUpdater": "Set Anlage."}
{"Origin": "Returns the destination's {@link Navigator}.", "Reference": "Returns the name associated with this destination's {@link Navigator}.", "NNUpdater": "Return the active RegionNavigatorDialog."}
{"Origin": "Whenever there is a palindrome, the result increments by 1.", "Reference": "Whenever there is a palindrome, the count increments by 1.", "NNUpdater": "Increments finalStatus counter by 1."}
{"Origin": "Checks if the source can be parsed as FpML.", "Reference": "Basic check to see if the source can probably be parsed as FpML.", "NNUpdater": "Returns if the variable cannot be parsed as an int."}
{"Origin": "Test of var method, of class Exponential.", "Reference": "Test of variance method, of class Exponential.", "NNUpdater": "Test of exponentialCdf method, of class ContinuousDistributions."}
{"Origin": "BatchOptions#getMaximumSizeInBytes()}.", "Reference": "CreateBatchOptions#getMaximumSizeInBytes()}.", "NNUpdater": "BatchOptions#getMaximumSizeInBytes()}."}
{"Origin": "Sets the {@link EncryptionScope encryption scope} that is used to encrypt blob contents on the server.", "Reference": "Sets the {@code encryption scope} that is used to encrypt blob contents on the server.", "NNUpdater": "Set the encryptionAlgorithm property: The algorithm used to produce the encryption key hash."}
{"Origin": "Configure a sslConfig for the http service using the legacy configuration", "Reference": "Configure a SSLConfig.Builder for the http service using the legacy configuration", "NNUpdater": "Configure HTTP client."}
{"Origin": "Main method to invoke this demo about how to analyze sentiment of a text input.", "Reference": "Main method to invoke this demo about how to analyze the sentiment of an input text.", "NNUpdater": "Add the sentiment."}
{"Origin": "Returns a response with a 2XX status code, with up to 3 attempts, or throws.", "Reference": "Returns a response with a 2XX status code, with up to 10 attempts, or throws.", "NNUpdater": "Sets the response address."}
{"Origin": "Constructs an instance of TableAdminClient with the given instanceName and bigtableTableAdminSettings", "Reference": "Constructs an instance of TableAdminClient with the given settings.", "NNUpdater": "check to see if the a given userid is an admin admin is group 1"}
{"Origin": "Fourth, it is easy to keep a precise record of the number of elements in the stack, since each element has to know how tall the stack is.", "Reference": "It is easy to keep a precise record of the number of elements in the stack, since each element has to know how tall the stack is.", "NNUpdater": "Returns an array of StackTraceElement."}
{"Origin": "If Main Branch = 100 LOCs and the ``largest long-lived branch`` is 120 LOCs, I'm expecting to consider the value 120.", "Reference": "If Main Branch = 100 LOCs and the ``largest branch`` is 120 LOCs, I'm expecting to consider the value 120.", "NNUpdater": "Creates reference to the new branch with {@code branch} from default branch."}
{"Origin": "The supplier lookup decides which lookup method is the best given the parent {@link ExecutableNode} or {@link RootNode} and the provided languageClass.", "Reference": "The reference lookup decides which lookup method is the best given the parent {@link ExecutableNode} or {@link RootNode} and the provided languageClass.", "NNUpdater": "Set Lookup ClassName."}
{"Origin": "Obtains the type from a unique name.", "Reference": "Obtains an instance from the specified name.", "NNUpdater": "Obtains the type from a unique name."}
{"Origin": "It is assumed that XRY meta key string is recognized.", "Reference": "It is assumed that XRY key string is recognized.", "NNUpdater": "The default encoding scheme is applied."}
{"Origin": "Create or obtain a {@link PreparedStatement} from my pool.", "Reference": "Creates or obtains a {@link PreparedStatement} from my pool.", "NNUpdater": "Execute a SQL statement using the given parameters."}
{"Origin": "Prefer the chest tab as it is the biggest (with default config).", "Reference": "Prefer the chest tab (for no reason).", "NNUpdater": "Returns the default {@code KeyTab} instance that is bound to an unknown service principal."}
{"Origin": "Returns the index of the last entry in the segment.", "Reference": "Returns the last index in the segment.", "NNUpdater": "Returns the site path."}
{"Origin": "Get OpenID Connect authentication resources ### Functional Description: Provides information about OpenID Connect authentication options.", "Reference": "Get OpenID Connect authentication resources ## \u26a0 Deprecated since version VERSION ### Functional Description: Provides information about OpenID Connect authentication options.", "NNUpdater": "Connect token for a user authenticated by your backend authentication process."}
{"Origin": "If that lookup fails as well, it's assumed that the XMPP server lives at the host resolved by a DNS lookup at the specified domain on the specified default port.", "Reference": "If that lookup fails as well, it's assumed that the XMPP server lives at the host resolved by a DNS A lookup at the specified domain on the specified default port.", "NNUpdater": "If that lookup fails as well, it's assumed that the XMPP server lives at the host resolved by a DNS lookup at the specified domain on the specified default port."}
{"Origin": "Obtains an instance of {@code Chrono} from a locale.", "Reference": "Obtains an instance of {@code Chronology} from a locale.", "NNUpdater": "Obtains an instance of {@code Chronology} from a locale."}
{"Origin": "A call to {@link Map.Entry#setValue} on the returned entry will always throw {@link UnsupportedOperationException}.", "Reference": "A call to {@link Map.Entry#setValue} on the returned entry will always throw {@link", "NNUpdater": "If {@code true} is returned, {@link #operateTranspose(VECTOR)} should not throw {@code UnsupportedOperationException}."}
{"Origin": "Set Menge in Catch Weight Einheit.", "Reference": "Set Geliefert Catch.", "NNUpdater": "Catch value."}
{"Origin": "Sets split button icon", "Reference": "Sets menu icon", "NNUpdater": "Returns the resource type name."}
{"Origin": "Error responses are never streaming so we always use {@link SyncResponseHandlerAdapter}.", "Reference": "Error responses are never streaming so we always use {@link AsyncResponseHandler}.", "NNUpdater": "This will override any handler set by calling {@link SyncManager#setDefaultSessionErrorHandler(SyncSession.ErrorHandler)}."}
{"Origin": "Create a {@link PooledConnectionImpl.PStmtKey} for the given arguments.", "Reference": "Creates a {@link PooledConnectionImpl.PStmtKey} for the given arguments.", "NNUpdater": "Return the pooled connection to its pool."}
{"Origin": "Perform a click on a ``content menu`` sub-menu entry.", "Reference": "Perform a click on a ``edit menu`` sub-menu entry.", "NNUpdater": "Handles menu selections for menu entries created with {@link #addMenuItems(Menu, cgeo.geocaching.Geocache)}."}
{"Origin": "Gets the {@link Value.Mutable} for the {@link FoxType} of this {@link FoxData}.", "Reference": "Gets the {@link Value.Mutable} for the {@link FoxType} of this {@link Fox}.", "NNUpdater": "Operation fails."}
{"Origin": "Proliferating cell nuclear antigens (1PLR, 3HI8) are structurally equivalent C3 homotrimers.", "Reference": "Proliferating cell nuclear antigens (3IFV, 3HI8) are structurally equivalent C3 homotrimers.", "NNUpdater": "The cell that is returned is a {@link CellType#BLANK}."}
{"Origin": "Get the {@link ReferenceType} for a class name.", "Reference": "Get the main and nested {@link ReferenceType}s for the sketch.", "NNUpdater": "Get Classname."}
{"Origin": "Group: consumer", "Reference": "Group: producer", "NNUpdater": "Guide."}
{"Origin": "Queries this contact source for the given searchString.", "Reference": "Creates query for the given searchString.", "NNUpdater": "Queries this ContactSourceService for SourceContacts which match a specific query Pattern."}
{"Origin": "### Effects: Newly transmitted password is set.", "Reference": "### Effects: User's password is resetted to the provided password.", "NNUpdater": "-P"}
{"Origin": "NOTE: The information you get via notification is same that you get by calling DescribeJob.", "Reference": "The information you get via notification is same that you get by calling", "NNUpdater": "Get Notiz."}
{"Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}", "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveFromRangeEnd }{@code >}}", "NNUpdater": "Create an instance of {@link JAXBElement }{@code <}{@link CTStrokeChild }{@code >}}"}
{"Origin": "Resets the log unit server via the BatchProcessor.", "Reference": "Resets the log unit server via the SequentialProcessor.", "NNUpdater": "Resets the log unit server via the BatchProcessor."}
{"Origin": "this will return a Duration with 2004 {@link TimeUnit#MILLISECONDS}.", "Reference": "will return a Duration of 1996 {@link TimeUnit#MILLISECONDS}.", "NNUpdater": "{@link TimeUnit#MILLISECONDS} {@code PX} {@link TimeUnit#SECONDS} {@code EX}"}
{"Origin": "Returns {@link RDFFormat#NTRIPLES}.", "Reference": "Returns {@link RDFFormat#NTRIPLES_RDR}.", "NNUpdater": "Extracts the IRI of the resource from rdf:ID, rdf:nodeID or rdf:about attribute."}
{"Origin": "Amazon Redshift returns all snapshots that match any combination of the specified keys and values.", "Reference": "Redshift returns all snapshots that match any combination of the specified keys and values.", "NNUpdater": "Describes the SQL Query to execute on an Amazon Redshift database for an"}
{"Origin": "If the last node itself is known type then that will be considered as the parent.", "Reference": "If the last node itself is known type then that will be considered as nearest known EntityId.", "NNUpdater": "A node is considered an ancestor of itself."}
{"Origin": "This implementation attempts to resolve any session ID that may exist in the context argument by first passing it to the {@link #resolveSession(Map)} method.", "Reference": "This implementation attempts to resolve any session ID that may exist in the context argument by passing it to the {@link #resolveSession(Map)} method.", "NNUpdater": "Just delegates to {@link #aggregateResolveState() resolve state}."}
{"Origin": "Such ``real`` brace is then removed from system groups.", "Reference": "Such ``true`` braced group is then removed from system groups.", "NNUpdater": "Guide."}
{"Origin": "After install, this function checks whether everything went properly or not.", "Reference": "After install, this function checks whether everything went properly.", "NNUpdater": "Wait for the connection to be established, returning the server version if everything went ok"}
{"Origin": "In order to set the matrix to a rotation transformation without post-multiplying, use {@link #rotation(Quaterniond)}.", "Reference": "In order to set the matrix to a rotation transformation without post-multiplying, use {@link #rotation(Quaterniondc)}.", "NNUpdater": "In order to set the matrix to a rotation transformation without post-multiplying, use {@link #rotation(Quaternionf)}."}
{"Origin": "Removes the element at the specified position in the elements array, adjusting head and tail as necessary.", "Reference": "Removes the element at the specified position in the elements array.", "NNUpdater": "Retrieves and removes the head of this queue."}
{"Origin": "This method logs a warning if the class cannot be registered.", "Reference": "This method LOGs a warning if the class cannot be registered.", "NNUpdater": "This method returns {@code null} if the class cannot be found or not defined in the specified module."}
{"Origin": "Obtains an instance from the specified unique name.", "Reference": "Obtains an instance from the specified name.", "NNUpdater": "Obtains the type from a unique name."}
{"Origin": "Setter for {@link #exposeOnlyRequestedHeader}", "Reference": "Setter for {@link #allowOnlyRequestedHeader}", "NNUpdater": "Add a response header to expose."}
{"Origin": "Receives an {@linkplain XmlTag} and returns the View class that is represented by the tag.", "Reference": "Receives an {@link XmlTag} and returns the View class that is represented by the tag.", "NNUpdater": "*** tag *****"}
{"Origin": "Apply a CreateTable change to the model.", "Reference": "Apply a CreateIndex change to the model.", "NNUpdater": "Create a draft change."}
{"Origin": "Get the number of times this object has been borrowed.", "Reference": "Gets the number of times this object has been borrowed.", "NNUpdater": "Borrowed from MongoDB Java driver version 2."}
{"Origin": "Creates an entity and populates its state based on the dbObject given.", "Reference": "Creates an entity and populates its state based on the document given.", "NNUpdater": "Creates a field based on the given data type."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Atomically sets the values to the given updated values only if the current encoded value {@code ==} the expected value.", "Reference": "Atomically sets the values to the given updated values only if the current encoded value {@code ==} the expected encoded value.", "NNUpdater": "Atomically sets the element at position {@code i} to the given updated value if the current value {@code ==} the expected value."}
{"Origin": "Returns {@code true} if the specified provider is built by the vendor.", "Reference": "Returns {@code true} if the specified factory is built by the vendor.", "NNUpdater": "Set {@link ReloadStrategy} for {@link ConfigurationProvider}s built by this builder"}
{"Origin": "A directional arrow is a single arrow drawn in the middle of two points of a polyline to provide a visual cue for direction of movement between the two points.", "Reference": "A directional arrow is a single arrow drawn in the middle of two points to provide a visual cue for direction of movement between the two points.", "NNUpdater": "Computes the distance between two coordinates"}
{"Origin": "Returns the current entry's site path.", "Reference": "Returns the sitemap entry.", "NNUpdater": "Returns the handler."}
{"Origin": "Trade attributes, provide the ability to associate arbitrary information with a trade in a key-value map.", "Reference": "Trade attributes provide the ability to associate arbitrary information in a key-value map.", "NNUpdater": "Adds a security attribute to the map of attributes."}
{"Origin": "PolicyEnforcedException exception, see Error Responses.", "Reference": "For more information about the PolicyEnforcedException exception, see Error Responses.", "NNUpdater": "@see {@link Error#getCause()}"}
{"Origin": "Get value of the Cosmos DB resource throughput.", "Reference": "Get the resource value.", "NNUpdater": "Setting the throughput for a table helps you manage performance and is part of the provisioned throughput feature of DynamoDB."}
{"Origin": "Receives an {@link XmlTag} and returns the View class that is represented by the tag.", "Reference": "Receives a {@link ViewIdInfo} and returns the name of the View class that is implied by it.", "NNUpdater": "*** tag *****"}
{"Origin": "Retrieves SoftwareVersion data.", "Reference": "Retrieves Software Version data.", "NNUpdater": "Adds all other containers in the software system to this view."}
{"Origin": "Menge in Preiseinheit eff..", "Reference": "Get Abzurechnen eff..", "NNUpdater": "Set Bestellmenge."}
{"Origin": "Sets the identifier of the transaction.", "Reference": "Sets the identifier of the command.", "NNUpdater": "Sets the label"}
{"Origin": "Create or obtain a {@link PreparedStatement} from my pool.", "Reference": "Creates or obtains a {@link PreparedStatement} from my pool.", "NNUpdater": "Execute a SQL statement using the given parameters."}
{"Origin": "Creates an Android framework resource repository.", "Reference": "Creates an Android framework resource repository without using a persistent cache.", "NNUpdater": "Engine."}
{"Origin": "ensure that CTHMerge & CTTcBorders go in poi-ooxml.jar", "Reference": "ensure that CTHMerge and CTTcBorders go in poi-ooxml.jar", "NNUpdater": "Create an instance of {@link JAXBElement }{@code <}{@link Tc }{@code >}}"}
{"Origin": "Find all the arrays that are members of the SameLen annotation associated with the array named in arrayExpression along the current path.", "Reference": "Find all the sequences that are members of the SameLen annotation associated with the sequence named in sequenceExpression along the current path.", "NNUpdater": "Queries the SameLen Checker to return the type that the SameLen Checker associates with the given tree."}
{"Origin": "Helper Method: gets Concept AVG value of a payroll between 2 dates (Old Compatibility)", "Reference": "Helper Method: gets Concept AVG value of a payroll between 2 dates", "NNUpdater": "Getter Parameter Value for Global Payroll Concept"}
{"Origin": "Sets the deployment.", "Reference": "Set the deployment.", "NNUpdater": "If it's ``deployment`` (which is default), deployment settings are used."}
{"Origin": "Checks if this factory creates s that simply return the specified column.", "Reference": "Checks if this factory creates s that simply return a column value.", "NNUpdater": "This implementation simply checks for a {@code null} return value from {@link #getProperty(String)}."}
{"Origin": "Returns the field component set by {@link #withField(com.haulmont.cuba.gui.components.Component)}.", "Reference": "Returns the field component set by {@link #withField(com.haulmont.cuba.gui.components.HasValue)}.", "NNUpdater": "Operation fails."}
{"Origin": "This method tests iteration consistency of a lsinfo {@link PlaylistFileResponse} result against a known value.", "Reference": "This method tests iteration consistency of a playlistinfo {@link PlaylistFileResponse} result against a known value.", "NNUpdater": "Set this {@link Playlist}'s {@link Query}s"}
{"Origin": "Creates a new {@code AtomicTreeMapBuilder}.", "Reference": "Creates a new {@code AtomicNavigableMapBuilder}.", "NNUpdater": "Creates a {@code TreeMap} of the given entries using the given key comparator."}
{"Origin": "Check for expected local values and types in the LiveStackFrame", "Reference": "Check for expected local values in the LiveStackFrame", "NNUpdater": "Updates the LiveFrame with the statistics in the given NISTAlign."}
{"Origin": "Group: consumer", "Reference": "Group: producer", "NNUpdater": "Guide."}
{"Origin": "Sets the prompt.", "Reference": "Set the prompt.", "NNUpdater": "Prints the shell prompt."}
{"Origin": "Create a symbolic link to an existing file.", "Reference": "Creates a symbolic link to an existing file.", "NNUpdater": "Returns the expected absolute path for the symbolic link to the current log file, or {@code"}
{"Origin": "Any creature that you cast through Vizier of the Menagerie (ie the card on top of your deck) is castable at instant speed.", "Reference": "Any creature that you cast through Vizier of the Menagerie (ie the card on top of your deck) is cast-able at instant speed.", "NNUpdater": "This card draws 4 cards from the deck."}
{"Origin": "Returns an immutable map containing eight mappings.", "Reference": "Returns an unmodifiable map containing eight mappings.", "NNUpdater": "Returns an immutable map of named bindings."}
{"Origin": "Returns the specified session attribute of a session.", "Reference": "Returns the value of a session attribute.", "NNUpdater": "Updates a session attribute."}
{"Origin": "Method getJobID returns the Hadoop running job JobID.", "Reference": "Method getProcessStepID returns the Hadoop running job JobID.", "NNUpdater": "Gets or creates job instance."}
{"Origin": "Index is guaranteed to be available inside that read action, unless this method is already called with read access allowed.", "Reference": "Indexes are guaranteed to be available inside that read action, unless this method is already called with read access allowed.", "NNUpdater": "Can only be called with getLive access."}
{"Origin": "Calculates the prime factors of the decimation rate up to a maximum decimation rate of 700.", "Reference": "Calculates the prime factors of the decimation rate.", "NNUpdater": "Set Wechselkurs."}
{"Origin": ": {@link BigInteger}'s toByteArray returns eventually longer arrays because of the leading sign-bit.", "Reference": ": {@code {@link BigInteger}}'s toByteArray returns eventually longer arrays because of the leading sign-bit.", "NNUpdater": "The {@link SLBigNumber} type of"}
{"Origin": "Expected 2 barriers for the Serial GC and 5 for G1 (3 pre + 2 post) The (2 or 4) barriers are emitted while initializing the fields of the WeakReference instance.", "Reference": "Expected 2 barriers for the card mark GCs and 5 for G1 (3 pre + 2 post) The (2 or 4) barriers are emitted while initializing the fields of the WeakReference instance.", "NNUpdater": "Checks whether all channels are blocked meaning that barriers have been received from all channels"}
{"Origin": "Enable transfer-encoding", "Reference": "Specified whether transfer-encoding is enabled", "NNUpdater": "The default implementation sets the value of the {@link #contentTransferEncoding contentTransferEncoding} attribute."}
{"Origin": "Apply a ``not equal`` constraint", "Reference": "Applies a ``not equals`` criteria predicate.", "NNUpdater": "Applies a ``not equals`` criteria predicate."}
{"Origin": "Returns {@code true} if this module permanently exports the given package to the given module.", "Reference": "Returns {@code true} if this module exports or opens a package to the given module via its module declaration.", "NNUpdater": "Returns {@code true} if this module statically exports the given package to the given module."}
{"Origin": "Generate a ChallengeStatus from a string.", "Reference": "Generate a ChallengeStatuses from a string.", "NNUpdater": "Get the encoded challenge in the last challenge."}
{"Origin": "Set up m_validator from SchemaPlus.", "Reference": "Set up m_validator and m_schemaPlus from SchemaPlus.", "NNUpdater": "Reset the static {@link #settings} to ."}
{"Origin": "Encodes the given object using the configured {@link #serializer()}.", "Reference": "Encodes the given object using the configured {@link #userSerializer}.", "NNUpdater": "Encodes the {@link IRequestHandler} to {@link Url}."}
{"Origin": "Returns a writable, fixed size buffer containing the payload.", "Reference": "Returns a readonly, fixed size buffer containing the payload.", "NNUpdater": "Returns a byte array of the specified size."}
{"Origin": "Delete all dir trees under a given 'dir' that don't start with a given 'prefix'.", "Reference": "Delete all dir trees under a given 'dir' that don't start with one of a set of given 'prefixes'.", "NNUpdater": "Unzips zipName --> dirName, removing dirName first"}
{"Origin": "Amalgamate all pre-destroy callbacks and return a read only list", "Reference": "Amalgamate all pre-destroy callbacks and return a read only set", "NNUpdater": "Set the pre destroy method."}
{"Origin": "Clears the entire undo/redo cache for all objects", "Reference": "Clears the entire undo/redo cache for given display", "NNUpdater": "Flip the top redo command over to the undo stack, after applying it"}
{"Origin": "Code snippets for {@link BlobAsyncClient#downloadWithResponse(BlobRange, ReliableDownloadOptions,", "Reference": "Code snippets for {@link BlobAsyncClient#downloadWithResponse(BlobRange, DownloadRetryOptions,", "NNUpdater": "String, BlobRange, ParallelTransferOptions, ReliableDownloadOptions, BlobAccessConditions, boolean)}"}
{"Origin": "When 'false' is set, prevents user gestures but keeps the option to refresh programatically,", "Reference": "When 'false' is set, prevents user gestures but keeps the option to refresh programmatically,", "NNUpdater": "Close the modal programmatically."}
{"Origin": "Returns the response object with list of dhcp servers without counters.", "Reference": "Returns results with aggregate of counters.", "NNUpdater": "Resets the member selector."}
{"Origin": "Returns the last sync d l object in the ordered set where companyId = ?", "Reference": "Returns the last sync d l object in the ordered set where repositoryId = ?", "NNUpdater": "Finds the gadget where companyId = ?"}
{"Origin": "Test the case with Blob_Not_Found errors from most servers, and Blob_Deleted at just one server.", "Reference": "Test the case with Blob_Not_Found errors from most servers, and Blob_Deleted, Blob_Expired or", "NNUpdater": "Returns the {@link BlobInfo} for the target blob."}
{"Origin": "Adds in memory files to the array list passed in.", "Reference": "Adds in-Alluxio files to the array list passed in.", "NNUpdater": "Adds all files in specified directories to a list."}
{"Origin": "Decorates all {@link Service}s with the specified {@link DecoratingServiceFunction}.", "Reference": "Decorates all {@link HttpService}s with the specified {@link DecoratingHttpServiceFunction}.", "NNUpdater": "Returns the {@link ClientOptions} with the specified {@link ClientOptionValue}s."}
{"Origin": "Removes all keys that satisfy a given predicate from the metadata of the specified {@link NamespacedEntityId}.", "Reference": "Removes all keys that satisfy a given predicate from the metadata of the specified {@link MetadataEntity}.", "NNUpdater": "Removes all keys that satisfy a given predicate from the metadata of the specified {@link NamespacedEntityId}."}
{"Origin": "The expected value for this NBT entry", "Reference": "The expected value for this NBT", "NNUpdater": "Handles the NBT tag Request from player of the id"}
{"Origin": "Count the total file size, including id files, of {@link DatabaseStore}s.", "Reference": "Count the total file size, including id files, of {@link DatabaseFile}s.", "NNUpdater": "This is defined as {@code totalCreateTime / (createSuccessCount + createExceptionCount)}."}
{"Origin": "Returns the provided default value in case 'standard' valu is .", "Reference": "Returns the provided default value in case 'standard' value is .", "NNUpdater": "If param value is not given by the shortName (short option) then if the default value is defined return it."}
{"Origin": "stream().forEach returns elements in the collection", "Reference": "collection.forEach returns elements in the collection", "NNUpdater": "The type of the data stream is that of the elements in the collection."}
{"Origin": "Returns bounds of the split line part.", "Reference": "Returns bounds of the menu line part.", "NNUpdater": "Returns the value amount of the split"}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Returns the server command for the specified control byte (soon obsolete).", "Reference": "Returns the server command for the specified control byte.", "NNUpdater": "Adds a command listener to the command port cmdPortServer."}
{"Origin": "Scheduler: {@code combineLatest} does not operate by default on a particular {@link Scheduler}.", "Reference": "Scheduler: {@code combineLatestArray} does not operate by default on a particular {@link Scheduler}.", "NNUpdater": "Scheduler: {@code combineLatestDelayError} does not operate by default on a particular {@link Scheduler}."}
{"Origin": "If wrapping fails, returns null.", "Reference": "If the wrapping fails, then null is returned.", "NNUpdater": "If any input fails, the returned future fails immediately."}
{"Origin": "Note that a MutableInteger isn't and can't be equal to an Integer.", "Reference": "Note that a MutableLong isn't and can't be equal to an Long.", "NNUpdater": "Gets the 'to' value as a primitive integer."}
{"Origin": "Updates existing generated Component file.", "Reference": "Updates existing generated Component.", "NNUpdater": "Adds to generated temporary files."}
{"Origin": "Group: consumer", "Reference": "Group: producer", "NNUpdater": "Guide."}
{"Origin": "Second, there is roughly a linear ramp up to {@link #TARGET_RECORDS}, after which backoff occurs.", "Reference": "Second, after {@link #TARGET_RECORDS} accesses, backoff occurs.", "NNUpdater": "The result is equivalent to {@code new Cons<>(element, this)}."}
{"Origin": "Allows to create alignment with the following feature - aligned blocks are aligned to block with the current alignment if the one if found; block with the given alignment is checked otherwise.", "Reference": "Allows to create alignment with the following feature - aligned blocks are aligned to block with the current alignment if the one if found; block with the given {@code 'base'} alignment is checked otherwise.", "NNUpdater": "Note that the actual entrySize will be aligned by the configured {@linkplain #entryAndValueAlignment(Alignment) entry and value alignment}."}
{"Origin": "Returns a {@code JBIterable} that groups this iterable into lists of the specified size.", "Reference": "Splits this {@code JBIterable} into iterable of iterables of the specified size.", "NNUpdater": "Returns a {@code JBIterable} that applies {@code function} to each element of this iterable."}
{"Origin": "Calculates the frequency offset required to mix the incoming signal to the desired output baseband", "Reference": "Calculates the frequency offset required to mix the incoming signal to center the desired frequency within the channel", "NNUpdater": "We reset the coarse and fine frequency control values when the tuner channel source has changed frequency (PPM) or sample rate"}
{"Origin": "Gets the {@link EncryptionScope} used to encrypt this blob's content on the server.", "Reference": "Gets the {@code encryption scope} used to encrypt this blob's content on the server.", "NNUpdater": "Encrypt blob content using perBlobKey if not null 2."}
{"Origin": "Tests that the conjunct future returns upon completion the collection of all future values.", "Reference": "Tests that the conjunct future returns upon completion the collection of all future values in the same order in which the futures were inserted.", "NNUpdater": "Returns a future that wraps the given future for obtaining the debug bridge with a timeout."}
{"Origin": "Combined list of {@link BufferEdge} is passed to {@link DeclarationAssembler} for merging.", "Reference": "Combined list of {@link ByteFragmentAtOffset} is passed to {@link DeclarationAssembler} for merging.", "NNUpdater": "Operation fails."}
{"Origin": "Initiate controlled shutdown of the transport thread.", "Reference": "Initiate controlled shutdown of all transport threads.", "NNUpdater": "Restore a snapshot."}
{"Origin": "Starts the server with the given properties.", "Reference": "Starts the integration with the given properties.", "NNUpdater": "Joins the cluster."}
{"Origin": "Disable compaction on the {@link PartitionId} {@code id}.", "Reference": "Enable or disable compaction on the {@link PartitionId} {@code id}.", "NNUpdater": "Shutdown the BlobStore with given {@link PartitionId} {@code id}."}
{"Origin": "Convert to object types, returning null if text is null.", "Reference": "Convert to object types, returning null if text is null or empty.", "NNUpdater": "IsNullOrEmpty {is null or empty}."}
{"Origin": "Plugins should communicate via FCP instead of passing objects of their own Java classes even if they are running within the same node because this encourages implementation of FCP servers, which in turn allows people to write alternative user interfaces for plugins.", "Reference": "Thus, plugins should communicate via FCP instead of passing objects of their own Java classes even if they are running within the same node because this encourages implementation of FCP servers, which in turn allows people to write alternative user interfaces for plugins.", "NNUpdater": "New plugin"}
{"Origin": "Returns an immutable set containing three elements.", "Reference": "Returns an unmodifiable set containing three elements.", "NNUpdater": "Gets an {@link ImmutableSet} of {@link Value.Immutable}s for the block at the given location."}
{"Origin": "closes the window, i.e., if the parent is not null and implements the WindowListener interface it calls the windowClosing method", "Reference": "closes the window, i.e., if the parent is not null and implements the", "NNUpdater": "Set Fenster."}
{"Origin": "This method schedules the enablement for asynchronous execution.", "Reference": "This method enables and activates the component immediately.", "NNUpdater": "Default value: SEQUENTIAL"}
{"Origin": "Converts a Swagger parameter to an instance of {@link Body}.", "Reference": "Converts a Swagger parameter to an instance of {@link Entity}.", "NNUpdater": "Converts an url-encoded body into a {@link MultiMap} with a given encoding."}
{"Origin": "Create a variant of {@code java.util.Properties} that automatically adapts non-String values to String representations on {@link Properties#getProperty}.", "Reference": "Create a variant of {@link java.util.Properties} that automatically adapts non-String values to String representations in {@link Properties#getProperty}.", "NNUpdater": "Calls {@link #createDataset(String, String, DatasetProperties)} and passes empty properties."}
{"Origin": "Returns this layer's parent unless this is the {@linkplain #empty empty layer}, which has no parent.", "Reference": "Returns the list of this layer's parents unless this is the {@linkplain #empty empty layer}, which has no parents and so an empty list is returned.", "NNUpdater": "Returns the empty layer."}
{"Origin": "To configure vault notifications, send a PUT request to the subresource of the vault.", "Reference": "To configure vault notifications, send a PUT request to the notification-configuration subresource of the vault.", "NNUpdater": "Set the key vault reference."}
{"Origin": "Processes the given message in the page and session identified by the given websocket connection.", "Reference": "Processes the given message in the page and session identified by the given Web Socket connection.", "NNUpdater": "Asynchronously opens a websocket connection and returns a {@link Future} to obtain the connection."}
{"Origin": "Gets the primitive target conversion type.", "Reference": "Gets the target primitive conversion type.", "NNUpdater": "Returns the registry."}
{"Origin": "Removes all the tags from the {@link NamespacedEntityId}", "Reference": "Removes all the tags from the {@link MetadataEntity}", "NNUpdater": "Removes all the tags from the {@link NamespacedEntityId}"}
{"Origin": "If you specify both tag keys and tag values in the same request,", "Reference": "If you specify both tag keys and tag values in the same request, Amazon", "NNUpdater": "Returns a tag or attribute name."}
{"Origin": "Strings greater than 500 chars get converted to Text and back.", "Reference": "Strings greater than some number of chars get converted to Text and back.", "NNUpdater": "Must be greater than zero and less than 2048."}
{"Origin": "Actually invoke the {@code afterCompletion} methods of the given Spring ReactiveTransactionSynchronization objects.", "Reference": "Actually invoke the {@code afterCompletion} methods of the given TransactionSynchronization objects.", "NNUpdater": "Invoke {@link ModelAttribute @ModelAttribute} methods"}
{"Origin": "Scheduler: {@code onErrorResumeNext} does not operate by default on a particular {@link Scheduler}.", "Reference": "Scheduler: {@code onErrorResumeWith} does not operate by default on a particular {@link Scheduler}.", "NNUpdater": "Scheduler: {@code onErrorReturnItem} does not operate by default on a particular {@link Scheduler}."}
{"Origin": "Returns the entry with the primary key or throws a {@link com.liferay.contacts.NoSuchEntryException} if it could not be found.", "Reference": "Returns the entry with the primary key or throws a {@link NoSuchEntryException} if it could not be found.", "NNUpdater": "Returns the {@code ZipEntry} for the given base entry name or {@code null} if not found."}
{"Origin": "Whether this configuration is for a partial synchronization Realm.", "Reference": "Returns whether this configuration is for a fully synchronized Realm or not.", "NNUpdater": "Sets whether a quorum synchronization is required for query operations, returning the configuration for method chaining."}
{"Origin": "Sets the {@code referenceEntityIds} property in the builder from an array of objects.", "Reference": "Sets the {@code legalEntityIds} property in the builder from an array of objects.", "NNUpdater": "Sets the {@code restructuringClause} property in the builder."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Decodes a byte array where each byte represents an ascii '0' or '1'.", "Reference": "Decodes a byte array where each byte represents an ASCII '0' or '1'.", "NNUpdater": "Converts a byte array into a {@link ByteString}."}
{"Origin": "Set name of the Cosmos DB Gremlin database.", "Reference": "Set the resource value.", "NNUpdater": "Gets the cosmos database properties"}
{"Origin": "Sets a secondary record unit ID for this record.", "Reference": "Sets a secondary record unit ID for this record on loading the record.", "NNUpdater": "Returns the schema of the dataset."}
{"Origin": "Returns the previous day-of-week adjuster, which adjusts the date to be the previous of the specified day-of-week after the specified date.", "Reference": "Returns the previous day-of-week adjuster, which adjusts the date to the first occurrence of the specified day-of-week before the date being adjusted.", "NNUpdater": "Test get day of week."}
{"Origin": "Start building a new factory instance-based service binding.", "Reference": "Start building a new supplier instance-based service binding.", "NNUpdater": "Start building a new DELETE query that deletes the provided names."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Workflow datatype exception test.", "Reference": "Workflow datatmodel type exception test.", "NNUpdater": "Get gets the reference to workflow version."}
{"Origin": "Name of schedule", "Reference": "Name of task", "NNUpdater": "Suspend a schedule."}
{"Origin": "Removes a URI from the list of redirects.", "Reference": "Removes a URI from the collection.", "NNUpdater": "Removes a URI from the collection."}
{"Origin": "Creates a {@code For}-comprehension of 7 Iterables.", "Reference": "Creates a {@code For}-comprehension of 7 Options.", "NNUpdater": "{@code Stream} equivalent: {@link Stream#flatMap} (using a function that produces streams, not iterables)."}
{"Origin": "Returns the argument if it yields no results.", "Reference": "Replaces the function with the argument if it yields no results.", "NNUpdater": "Checks if the specified expression yields a binary item."}
{"Origin": "Returns matched property name or if name is not matched.", "Reference": "Returns matched name or if name is not matched.", "NNUpdater": "Return true if a file path is matched by this FileType"}
{"Origin": "Usage: java QuoteAttributionTest familywordsfile animatefile gendernamesfile", "Reference": "Usage: java QuoteAttributionTest familywordsfile animatefile gendernamesfile charactersfile modelfile", "NNUpdater": "usage."}
{"Origin": "The account will continue to have student access.", "Reference": "Downgrades an instructor account to student account.", "NNUpdater": "Creates a Student object."}
{"Origin": "If false, the built-in (non-CuDNN) implementation for ConvolutionLayer will be used", "Reference": "If true, the built-in (non-CuDNN) implementation for ConvolutionLayer will be used", "NNUpdater": "Returns the {@code Module} with the given name in this layer, or if not in this layer, the {@linkplain #parent parent} layer."}
{"Origin": "Set the modelId.", "Reference": "Set the model.", "NNUpdater": "Sets the model."}
{"Origin": "Makes the given visitor visit all of the instructions in this list.", "Reference": "Makes the given visitor visit all the instructions in this list.", "NNUpdater": "Makes the given visitor visit the Java class of this Class Reader."}
{"Origin": "Skips bytes from a stream.", "Reference": "Skips bytes from an input byte stream.", "NNUpdater": "Skips {@code byteCount} bytes in this stream."}
{"Origin": "Adds/Updates {@link ConfigHelper#CLUSTER_ENV_STACK_SELECT_PACKAGES_PROPERTY} from stack", "Reference": "Adds/Updates {@link ConfigHelper#CLUSTER_ENV_STACK_PACKAGES_PROPERTY} from stack", "NNUpdater": "Operation fails."}
{"Origin": "Count number of {@link AggregationExceptions} updates contained in the given list of {@link CPOWrapper}.", "Reference": "Count number of {@link AggregationExceptions} updates contained in the given list of {@link ContentProviderOperation}.", "NNUpdater": "Creates an {@link AggregationData} by adding the given sequence of values, based on the definition of the given {@link Aggregation}."}
{"Origin": "This is not applicable for in-place updates; use {@link #write(AddUpdateCommand, long, int)}.", "Reference": "This is not applicable for in-place updates; use {@link #write(AddUpdateCommand, long)}.", "NNUpdater": "Operation fails."}
{"Origin": "NOTE: If you upload a part whose size is smaller than the part size you specified in your initiate multipart upload request and that part is not the last part, then the upload part request will succeed.", "Reference": "If you upload a part whose size is smaller than the part size you specified in your initiate multipart upload request and that part is not the last part, then the upload part request will succeed.", "NNUpdater": "Get a new multipart boundary delimiter."}
{"Origin": "So if you want to be sure that your {@link IGetAndSetLocator} is handled in all situations then call this method twice with your implementations.", "Reference": "So if you want to be sure that your {@link IPropertyLocator} is handled in all situations then call this method twice with your implementations.", "NNUpdater": "Note your thread will be blocked during execution - if you want to call the function asynchronously, see {@link #callAsync(String)}."}
{"Origin": "Called at the end of a request, after sending the response.", "Reference": "By default called at the end of each request, after sending the response.", "NNUpdater": "- The end date of the request."}
{"Origin": "If namespacing is disabled, the namespace parameter is ignored and the method returns a list containing the single resource repository returned by {@link #getAppResources(boolean)}.", "Reference": "If namespacing is disabled, the namespace parameter is ignored and the method returns a list containing the single resource repository returned by {@link #getAppResources()}.", "NNUpdater": "If it is not found, then the {@link Loader#getResource(Class, String)} method is used."}
{"Origin": "if numeratorTree is a + b and divisor greater than 1, and a and b are less than the length of some array, then (a + b) / divisor is less than the length of that array.", "Reference": "if numeratorTree is a + b and divisor greater than 1, and a and b are less than the length of some sequence, then (a + b) / divisor is less than the length of that sequence.", "NNUpdater": "TransferInput, CFStore)} for details."}
{"Origin": "Generates a valid document ID for a service referenced by a contract, used to retrieve the service from ES.", "Reference": "Generates a valid document ID for a API referenced by a contract, used to retrieve the API from ES.", "NNUpdater": "Store the subItem."}
{"Origin": "Add a duration (with the same time unit as the current duration)", "Reference": "Subtract an amount (with the same time unit as the current amount)", "NNUpdater": "Obtains an instance of {@code Duration} from a duration in a specified unit."}
{"Origin": "Returns the members of this action profile group.", "Reference": "Returns the list of member references of this action profile group.", "NNUpdater": "Gets the collection of all members in the group."}
{"Origin": "Calls methods to find and parse a credential file in one of the default locations.", "Reference": "Calls methods to find and parse a credential file in various locations.", "NNUpdater": "For example: at(locations)"}
{"Origin": "The module has the given set of concealed packages and is defined to the given class loader.", "Reference": "The module has the given set of packages and is defined to the given class loader.", "NNUpdater": "The module has the given set of packages and is defined to the given class loader."}
{"Origin": "It shuts down and releases the {@link ManagedChannel} if reference count reaches zero.", "Reference": "It shuts down the underlying channel if reference count reaches zero.", "NNUpdater": "Shuts down the virtual machine and releases the compute resources it uses."}
{"Origin": "Parses {@link CompressedVector} from the given Matrix Market string.", "Reference": "Parses {@link CompressedVector} from the given Matrix Market.", "NNUpdater": "Creates a new {@link CompressedVector} from the given {@code array} with compressing (copying) the underlying array."}
{"Origin": "Gets the icon URL of the guild, if present and in a supported format.", "Reference": "Gets the icon URL of the guild, if present.", "NNUpdater": "Gets the icon URL of the guild, if present and in a supported format."}
{"Origin": "This method returns the value of the database column s_user.dateofbirth", "Reference": "This method returns the value of the database column s_user.birthday", "NNUpdater": "This method returns the value of the database column litemall_user.update_time"}
{"Origin": "If {@link #IGNORE_OVERFLOW} is true and one of the bounds is outside the Short range, then that bound is set to the bound of the Short range.", "Reference": "If {@link #ignoreOverflow} is true and one of the bounds is outside the Short range, then that bound is set to the bound of the Short range.", "NNUpdater": "Gets the period range, which the field is bound by."}
{"Origin": "Object#hashCode Object.hashCode} method.", "Reference": "It satisfies the general contract of the {@link Object#hashCode Object.hashCode} method.", "NNUpdater": "It satisfies the general contract of the {@link Object#hashCode Object.hashCode} method."}
{"Origin": "Exceptions include the ArgumentAttr.argumentTypeCache, changes to which may be preserved if localCache is null.", "Reference": "Exceptions include the ArgumentAttr.argumentTypeCache, changes to which may be preserved if localCache is null and errors reported outside of the speculatively attributed tree.", "NNUpdater": "IllegalArgumentException if this is a Cache type that doesn't have a LocalCacheInternalMap."}
{"Origin": "Encode a PiActionGroupMember to a ActionProfileMember.", "Reference": "Encode a PiActionProfileMember to a ActionProfileMember.", "NNUpdater": "Returns a member by ID."}
{"Origin": "Returns the column criterion currently used to sort the table.", "Reference": "Returns the column used as a criterion to sort the table.", "NNUpdater": "Get the column for the given table, if the sort column is for this table."}
{"Origin": "Stream the results of this query as a list, grouped by an attribute.", "Reference": "Group the results of this query by an attribute.", "NNUpdater": "Applies an aggregation that gives the current maximum of the data stream at the given position by the given key."}
{"Origin": "It cancels timeout task and checks if add-entry operation is not completed yet.", "Reference": "Checks if add-operation is completed", "NNUpdater": "Cancels the heartbeat timer."}
{"Origin": "Second scenario: press button -> two windows appear, press button in the 2nd window -> 3rd window appears on top, press Esc three times -> all windows should be closed", "Reference": "Second scenario: press first button -> two windows appear, press button in the 2nd window -> 3rd window appears on top, press Esc three times -> all windows should be closed", "NNUpdater": "Press action on the screen."}
{"Origin": "The option will be converted to a", "Reference": "The option will be converted to a type.", "NNUpdater": "A {@code null} source value will be converted to an empty List."}
{"Origin": "See {@link #filterBlocks(Predicate, boolean)} to adjust this behavior.", "Reference": "See {@link #filter(Predicate, boolean)} to adjust this behavior.", "NNUpdater": "To override this behavior, see {@link #choices(Text, Map, boolean, boolean)}."}
{"Origin": "Randomize between -1 and 1, use the specified seed.", "Reference": "Use the specified seed.", "NNUpdater": "-S seed"}
{"Origin": "NOTE:This operation is eventually consistent.", "Reference": "This operation is eventually consistent.", "NNUpdater": "Sets the request action."}
{"Origin": "Returns the index, in the described table, for the named column.", "Reference": "Returns the column key, in the described table, for the named column.", "NNUpdater": "Returns metadata for the table named tableName"}
{"Origin": "Tells if this node command is installed.", "Reference": "Tells if this node command is globally installed.", "NNUpdater": "Checks if PATH_INSTALLED event comes up after intent whose master is this node is installed."}
{"Origin": "Configure a sslConfig for the gateway using the legacy configuration", "Reference": "Configure a SSLConfig.Builder for the gateway using the legacy configuration", "NNUpdater": "Set the gateway's Configuration, then create and configure the Connectors"}
{"Origin": "Otherwise, returns the least upper bound of the two annotations.", "Reference": "If the type hierarchy has no infinite ascending chain, returns the least upper bound of the two annotations.", "NNUpdater": "Returns the approximate lower bound value"}
{"Origin": "Sets the option to allow queries to run across all partitions of the collection.", "Reference": "Sets the option to allow empty result pages in feed response.", "NNUpdater": "Sets the set of replicas for the resource."}
{"Origin": "By overriding this method extending classes may change what is interpretated as a repetition of the header (e.g.", "Reference": "By overriding this method extending classes may change what is interpretated as a column name containing line or a repetition of such line.", "NNUpdater": "Sub-classes may override this method to change the default behavior."}
{"Origin": "Trailer headers are read automcatically at the end of the stream and can be obtained with the getResponseFooters() method.", "Reference": "Trailer headers are read automatically at the end of the stream and can be obtained with the getResponseFooters() method.", "NNUpdater": "Determines it the trailer is a XRef stream or not."}
{"Origin": "Returns the leaf type of the underlying expression or the given type", "Reference": "Returns the type of the leaf property of the path.", "NNUpdater": "Returns the component types of the given type."}
{"Origin": "return the largest prefix for the input path.", "Reference": "Return the largest prefix for the input path.", "NNUpdater": "Prefix the given path with the application path."}
{"Origin": "Returns the long value if this primitive value is of type long.", "Reference": "Returns the long value if this primitive value is of size 8", "NNUpdater": "Returns a long value from the specified array."}
{"Origin": "Get Resource Definition Snippet Block.", "Reference": "Get HTTP Resource Definition Snippet Block.", "NNUpdater": "Get Object Initializer Snippet Block."}
{"Origin": "Default implementation returns {@link SessionResult#RESULT_CODE_NOT_SUPPORTED}.", "Reference": "Default implementation returns {@link SessionResult#RESULT_ERROR_NOT_SUPPORTED}.", "NNUpdater": "The default is {@link XPathEvaluationType#STRING_RESULT}."}
{"Origin": "Set the Date that this Token expires", "Reference": "Set the ZonedDateTime that this Token expires", "NNUpdater": "Set the {@link LocalDateTime expires} time value."}
{"Origin": "Add an action, replacing any existing action of the (exact) same class.", "Reference": "Add an action, replacing any existing actions of the (exact) same class.", "NNUpdater": "Extract action information from the context."}
{"Origin": "If Hazelcast Security is not enabled, then only the given group name is compared to configuration.", "Reference": "If Hazelcast Security is not enabled, then only the given cluster name is compared to configuration.", "NNUpdater": "Attaches a single security group."}
{"Origin": "Converts {@code data} to a string in {@value #ENCODING_CHARSET} format.", "Reference": "Converts {@code data} to a string in {@see #ENCODING_CHARSET} format.", "NNUpdater": "Assumes {@code string} is in {@link StandardCharsets#UTF_8} format."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Returns a function that checks that a particular MongoDB pipeline is generated to implement a query.", "Reference": "Returns a function that checks that a particular MongoDB query has been called.", "NNUpdater": "Returns a consumer that checks that a particular Druid query is generated to implement a query."}
{"Origin": "Starts all downloads except those that have a non-zero {@link Download#stopReason}.", "Reference": "Resumes all downloads except those that have a non-zero {@link Download#stopReason}.", "NNUpdater": "Call {@link #startDownloads()} to let them to be started."}
{"Origin": "Action to launch a browser on (local) Audiveris handbook", "Reference": "Action to launch a browser on application wiki", "NNUpdater": "Action to launch a browser on (local) Audiveris handbook"}
{"Origin": "Parses {@link DenseVector} from the given Matrix Market string.", "Reference": "Parses {@link DenseVector} from the given Matrix Market.", "NNUpdater": "Creates an unit {@link DenseVector} of the given {@code length}."}
{"Origin": "Get Minimum Level.", "Reference": "Get Mindestmenge.", "NNUpdater": "Get Ebene."}
{"Origin": "Returns the session client ID.", "Reference": "Returns the session timeout.", "NNUpdater": "Returns the request version."}
{"Origin": "Checks the dirty status of the 'reprUrl' field.", "Reference": "Checks the dirty status of the 'headers' field.", "NNUpdater": "See URL()"}
{"Origin": "Obtains an instance from the specified unique name.", "Reference": "Obtains an instance from the specified name.", "NNUpdater": "Obtains the type from a unique name."}
{"Origin": "Casts the {@code DateTime} to {@ChronoLocalDateTime} with the same chronology.", "Reference": "Casts the {@code DateTime} to {@code ChronoLocalDateTime} with the same chronology.", "NNUpdater": "Returns a new {@code ChronoLocalDateTime} with the {@code date} and {@code time}."}
{"Origin": "Returns enum value for predefined input dialog action which was clicked in the dialog, e.g.", "Reference": "Returns result action which was clicked in the dialog, e.g.", "NNUpdater": "Runs the specified commands, decorated by a progress dialog, and calls {@link BaseXDialog#action} if the dialog is closed."}
{"Origin": "Returns an immutable list containing seven elements.", "Reference": "Returns an unmodifiable list containing seven elements.", "NNUpdater": "The returned List is immutable."}
{"Origin": "Set list of index keys.", "Reference": "Set the resource value.", "NNUpdater": "Get the keys."}
{"Origin": "This operation requires the certificates/setissuers permission.", "Reference": "This operation requires the {@code certificates/update} permission.", "NNUpdater": "This operation requires the {@code certificates/managecontacts} permission."}
{"Origin": "Returns the input stream of this message content.", "Reference": "Returns the CachedOutputStream of this message content.", "NNUpdater": "Returns the input stream of this message content."}
{"Origin": "Returns a string that is used as the key to create input version attributes in the transformer output header and metadata for all Cinder inputs.", "Reference": "Returns a the key used to identify input version attributes in the transformer output header and metadata.", "NNUpdater": "Returns a new transformer to be used."}
{"Origin": "Inflate compressed data from a buffer.", "Reference": "Inflates compressed data from a buffer.", "NNUpdater": "Turns a compressed buffer from {@link #VRInput_GetSkeletalBoneDataCompressed GetSkeletalBoneDataCompressed} and turns it back into a bone transform array."}
{"Origin": "See {@link FastCornerIntensity} for more details.", "Reference": "See {@link FastCornerDetector} for more details.", "NNUpdater": "Common interface for creating a {@link boofcv.alg.feature.detect.intensity.ShiTomasiCornerIntensity} from different image types."}
{"Origin": "The MediaLibrary will call `onChange(boolean ongoing)` if the media library changed.", "Reference": "The MediaLibrary will call `onLibraryChanged()` if the media library changed.", "NNUpdater": "Returns the transport-specific options for this service."}
{"Origin": "Get the order of classpath elements, as an ordered set.", "Reference": "Get the order of classpath elements, uniquified and in order.", "NNUpdater": "Find an order."}
{"Origin": "Services incoming range write calls.", "Reference": "Services incoming multi write calls.", "NNUpdater": "Sets the internal client router."}
{"Origin": "Stops all downloads.", "Reference": "Pauses all downloads.", "NNUpdater": "Signals all downloads to stop."}
{"Origin": "This method creates a mapping from each index source lookup symbol (directly applied to the index) to the corresponding probe key Input", "Reference": "This method creates a mapping from each index source lookup variable (directly applied to the index) to the corresponding probe key Input", "NNUpdater": "Creates the index for Graylog2 including the mapping"}
{"Origin": "or throws a {@link com.liferay.sampleservicebuilder.NoSuchFooException} if it could not be found.", "Reference": "or throws a {@link NoSuchFooException} if it could not be found.", "NNUpdater": "[``foo``, ``bar``] -> '{``foo``: true, ``bar``: true}'"}
{"Origin": "/api/v1/topology/:id/profiling/stop/:host-port/:timeout -> profiling stop.", "Reference": "/api/v1/topology/:id/profiling/stop/:host-port -> profiling stop.", "NNUpdater": "Operation fails."}
{"Origin": "Gets the gRPC server address.", "Reference": "Returns the gRPC server URI.", "NNUpdater": "Gets the address of the underlying RPC endpoint."}
{"Origin": "Tests resilency when ingress device is down.", "Reference": "Tests resiliency when ingress device is down.", "NNUpdater": "Tests resiliency when ingress device is down."}
{"Origin": "Returns an immutable list containing zero elements.", "Reference": "Returns an unmodifiable list containing zero elements.", "NNUpdater": "The returned List is immutable."}
{"Origin": "Obtains the type from a unique name.", "Reference": "Obtains an instance from the specified name.", "NNUpdater": "Obtains the type from a unique name."}
{"Origin": "This is the smallest positive power of B that equal to or greater than the given n.", "Reference": "This is the smallest positive power of B that equal to or greater than the given n and equal to a mathematical integer.", "NNUpdater": "Returns the index of the smallest value in an list that is greater than (or optionally equal to) a specified value."}
{"Origin": "WARNING: Read the javadoc of {@link Component#canCallListenerInterface(Method)} for important security-related information.", "Reference": "WARNING: Read the javadoc of {@link Component#canCallListenerInterface()} for important security-related information.", "NNUpdater": "Operation fails."}
{"Origin": "Updates frequencies by values and features.", "Reference": "Calculates frequencies for each feature.", "NNUpdater": "Set the features."}
{"Origin": "Originally in a strategy support class - giving a chance to override them to improve efficiency and utilize the different strategies", "Reference": "Originally in a strategy support class - giving a chance to override them to improve efficiency and utilise the different strategies", "NNUpdater": "Concurrent query test."}
{"Origin": "Maps all index descriptors according to {@link #indexReferenceNoLocking(IndexDescriptor2)}.", "Reference": "Maps all index descriptors according to {@link #indexReferenceNoLocking(IndexDescriptor)}.", "NNUpdater": "E.g setZIndex() becomes ``zIndex``."}
{"Origin": "Returns this document's {@link #CONTENT_URL} field.", "Reference": "Returns this document's {@link #CONTENT_URL} field or .", "NNUpdater": "Returns the field's {@link ValueType}"}
{"Origin": "Sets a metadata property for the specified {@link NamespacedEntityId}.", "Reference": "Sets a metadata property for the specified {@link MetadataEntity}.", "NNUpdater": "Sets a metadata property for the specified {@link NamespacedEntityId}."}
{"Origin": "See {@link #withChrono(Chrono)} for more details on overriding.", "Reference": "See {@link #withChrono(Chronology)} for more details on overriding.", "NNUpdater": "A query for the {@code Chronology}."}
{"Origin": "Returns the (unbiased) estimate of the sample standard deviation of the values within a {@link PointSet} region of a {@link Dataset}.", "Reference": "Returns the (unbiased) skew of all the values within a {@link PointSet} region of a {@link Dataset}", "NNUpdater": "The class of the {@link DatasetsFinder} is read from property {@link #DATASET_PROFILE_CLASS_KEY}."}
{"Origin": "For example, this demonstrates loading from the models jar file, which you therefore need to include in the classpath for ParserDemo to work.", "Reference": "For example, this demonstrates loading a grammar from the models jar file, which you therefore need to include on the classpath for ParserDemo to work.", "NNUpdater": "Loading of the CRFPP models."}
{"Origin": "This method first finds strongly connected components (SCCs) on a graph made by TypeData by Tarjan's algorithm.", "Reference": "This method first finds strongly connected components (SCCs) in a TypeData graph by Tarjan's algorithm.", "NNUpdater": "Check for cycles in the graph reachable from start node n. This is done by attempting to find strongly connected components."}
{"Origin": "returns BufferFragment that is currently focused * or null if nothing or BufferListFragment is focused", "Reference": "returns BufferFragment that is currently focused or null", "NNUpdater": "Takes focus from current focused widget (if any), and sets current focused widget to null"}
{"Origin": "Get current authentication session.", "Reference": "Get current authorization session.", "NNUpdater": "Get Nutzersitzung."}
{"Origin": "Returns a list of section names for the course with ID courseId.", "Reference": "Returns a list of section names for the course with valid ID courseId.", "NNUpdater": "Finds the rowID (at course page) number of a course based on course ID"}
{"Origin": "Gets the SessionToken2 as VersionedParcelable for the session that this controller is connected to.", "Reference": "Gets the SessionToken in media2 as VersionedParcelable for the session that this controller is connected to.", "NNUpdater": "Gets the SessionToken2 as bundle for the session that this controller is connected to."}
{"Origin": "Creates a new tracing {@link Service} decorator using the specified {@link HttpTracing} instance.", "Reference": "Creates a new tracing {@link HttpService} decorator using the specified {@link HttpTracing} instance.", "NNUpdater": "Creates a new tracing {@link Client} decorator using the specified {@link Tracing} instance and the remote service name."}
{"Origin": "This indicator says if --entity and --defaultSearchResult parameter are visible.", "Reference": "This indicator says if --interface and --defaultSearchResult parameter are visible.", "NNUpdater": "(Default: false)"}
{"Origin": "then a new BasicDocument is used instead.", "Reference": "then a new {@code BasicDocument} is used instead.", "NNUpdater": "Document(XWikiDocument, XWikiContext)"}
{"Origin": "see {@link BlockFlowerPot#getActualState(IBlockState, IBlockAccess, BlockPos)}", "Reference": "see {@link FlowerPotBlock#getActualState(BlockState, IWorldReader, BlockPos)}", "NNUpdater": "Creates a new {@link ChangeBlockEvent.SourceBlock}."}
{"Origin": "Writes the response into the writer.", "Reference": "Writes the Solr response.", "NNUpdater": "Writes the function to given ClassVisitor."}
{"Origin": "Wait until one or all of a array of element locators are displayed.", "Reference": "Wait until one or all of an array of element locators are displayed.", "NNUpdater": "Wait until the ``until`` condition returns true or time runs out."}
{"Origin": "First scenario: press button -> two windows appear, press Esc two times -> all windows should be closed", "Reference": "First scenario: press first button -> two windows appear, press Esc two times -> all windows should be closed", "NNUpdater": "Press action on the screen."}
{"Origin": "The {@code keyImportOptions} is required and its fields {@link KeyImportOptions#getName() name} and {@link", "Reference": "The {@code keyImportOptions} is required and its fields {@link ImportKeyOptions#getName() name} and {@link", "NNUpdater": "Sets the parsing options."}
{"Origin": "Checks whether the frontier contains not yet expanded nodes.", "Reference": "Primitive operation which checks whether the frontier contains not yet expanded nodes.", "NNUpdater": "Pops nodes of already explored states from the head of the frontier and checks whether there are still some nodes left."}
{"Origin": "Computes the maximum for each pixel across all bands in the {@link Planar} image.", "Reference": "Computes the maximum for each pixel across selected bands in the {@link Planar} image.", "NNUpdater": "Computes the average for each pixel across all bands in the {@link Planar} image."}
{"Origin": "User has accepted EULA.", "Reference": "User has generated private key.", "NNUpdater": "Returns the best variant for a given resource according the the client preferences: accepted languages, accepted character sets, accepted media types and accepted encodings."}
{"Origin": "The input stream should contain an X.509 certificate chain in PEM format.", "Reference": "The input stream should contain an X.509 certificate collection in PEM format.", "NNUpdater": "Returns the X.509 certificate chain header parameter contains the X.509 public key certificate or corresponding to the key used to digitally sign the JWS or {@code null} for none."}
{"Origin": "Counts the number of elements in the input iterable that match the predicate.", "Reference": "Returns the number of occurrences of the provided object in the iterable.", "NNUpdater": "Returns a {@code Collector} accepting elements of type {@code T} that counts the number of input elements."}
{"Origin": "Returns the builder for the settings used for calls to labelAudio.", "Reference": "Returns the builder for the settings used for calls to getEvaluation.", "NNUpdater": "Gets the labels used to filter settings based on their {@link ConfigurationSetting#label() label} in the service."}
{"Origin": "Check whether the given member is a proxy member of a proxy object.", "Reference": "Check whether the given member is a proxy member of a proxy object or is a static proxy member.", "NNUpdater": "Returns a member by ID."}
{"Origin": "This method must only be used for type references whose sort is {@link #METHOD_FORMAL_PARAMETER METHOD_FORMAL_PARAMETER}.", "Reference": "This method must only be used for type references whose sort is {@link #METHOD_FORMAL_PARAMETER}.", "NNUpdater": "(The method {@link Population#populationSort()} is called by this method.)"}
{"Origin": "Bind a named double-valued parameter.", "Reference": "Bind multiple values to a named query parameter.", "NNUpdater": "Binds a new query parameter."}
{"Origin": "Helper method to remove an Artifact.", "Reference": "Helper method to remove an output file.", "NNUpdater": "Returns the parent Artifact containing this Artifact."}
{"Origin": "In case of {@link IOException} throw an {@link AssertionError} instead", "Reference": "In case of {@link IOException} throw an {@link", "NNUpdater": "Utility method to throw an {@link AssertionError} given a {@link BasicErrorMessageFactory}."}
{"Origin": "Calls {@link #executeSqlScript(Context, SQLiteDatabase, String, boolean)} with transactional set to true.", "Reference": "Calls {@link #executeSqlScript(Context, Database, String, boolean)} with transactional set to true.", "NNUpdater": "Wrapper for {@link SupportSQLiteDatabase#query(SupportSQLiteQuery)}."}
{"Origin": "Performs the Trigger check comparing the received event with itself (this trigger)", "Reference": "Performs the trigger check comparing the received event with itself (this trigger)", "NNUpdater": "The name of the metric."}
{"Origin": "Checks to see if reclaimed or reused.", "Reference": "Checks to see if reclaimed or reused and matches registration id.", "NNUpdater": "Checks identifier (for e.g."}
{"Origin": "Make a new label with this as a value component.", "Reference": "Make a new label with this {@code String} as a value component.", "NNUpdater": "label1 and label2 in X.Y.Z-label1-lable2."}
{"Origin": "List of group IDs", "Reference": "List of user IDs", "NNUpdater": "Returns a list of routers and their bounds."}
{"Origin": "It also accepts unprefixed locators, treated as 'file:'.", "Reference": "It also accepts unprefixed locators, treated as files.", "NNUpdater": "httl.properties: template.directory=/META-INF/templates"}
{"Origin": "In case of failure the {@link Flux} will error.", "Reference": "In case of failure the {@link CosmosContinuablePagedFlux} will error.", "NNUpdater": "Get the id of the {@link CosmosContainer}"}
{"Origin": "Returns the edit groups.", "Reference": "Returns the element views.", "NNUpdater": "Returns the sitemap data."}
{"Origin": "Set the etag property: The etag property.", "Reference": "Set the eTag property: The eTag property.", "NNUpdater": "Set the routeFilter value."}
{"Origin": "TODO - perhaps a method like setCellTypeAndValue(int, Object) should be introduced to avoid this", "Reference": "TODO - perhaps a method like setCellTypeAndValue(CellType, Object) should be introduced to avoid this", "NNUpdater": "Otherwise this returns the result of {@link Cell#getCellTypeEnum()}."}
{"Origin": "Send request for execution via {@link #cliIo}.", "Reference": "Send request for execution via corresponding singleIo from {@link #ios} or sticky singleIo.", "NNUpdater": "When the ``also`` command is run, it will receive all of the arguments passed to this method as {@link io.bootique.cli.Cli} instance."}
{"Origin": "Gets an ordered list of visible screens", "Reference": "Gets a copy of the ordered list of visible screens", "NNUpdater": "Gets ordered list of Ignite instance names."}
{"Origin": "If the preference is not set, a pathname in a temporary directory is generated, which is automatically deleted on shutdown.", "Reference": "If the preference is not set, a random pathname in a temporary directory is generated, which is automatically deleted on shutdown.", "NNUpdater": "Test whether the path is valid."}
{"Origin": "This method maps a {@link ServerErrorCode} to a {@link RouterErrorCode}, and then makes corresponding state update.", "Reference": "This method maps a {@link ServerErrorCode} to a {@link RouterErrorCode}.", "NNUpdater": "Equivalent to {@code onFailure(``onFailure``, consumer)}."}
{"Origin": "Handles: PUT /clusters/{clusterName}/servicegroups/{serviceGroupName}/services/{serviceDisplayName}", "Reference": "Handles: PUT /clusters/{clusterName}/servicegroups/{serviceGroupName}/services/{serviceName}", "NNUpdater": "Handles: POST /clusters/{clusterId}/services/{serviceId}"}
{"Origin": "Note that the {@link Columns#NAME} column's enabled state is ignored as it will always be enabled.", "Reference": "Note that the {@link Column#NAME} column's enabled state is ignored as it will always be enabled.", "NNUpdater": "Note that the {@link Columns#NAME} column's enabled state is ignored as it will always be enabled."}
{"Origin": "Chops a token to the specified length and adds dots.", "Reference": "Chops a token to the specified length.", "NNUpdater": "For package names which include multiple dots, dots after the leftmost are removed."}
{"Origin": "Test if a node is an inner class node, and if it is, then checks if the enclosing method is skipped.", "Reference": "Tests if a node is an inner class node, and if it is, then checks if the enclosing method is skipped.", "NNUpdater": "Checks if this is a node."}
{"Origin": "Scenario: - CA is only in service trust store, missing from gateway trust store - Gateway does not trust service, as it does not trust CA - Service trusts gateway via CA", "Reference": "Scenario: - CA is only in API trust store, missing from gateway trust store - Gateway does not trust API, as it does not trust CA - API trusts gateway via CA", "NNUpdater": "[BC]}"}
{"Origin": "Converts an array of raw binary data into an array of ascii 0 and 1 chars.", "Reference": "Converts an array of raw binary data into an array of ASCII 0 and 1 chars.", "NNUpdater": "Converts a byte array into a {@link ByteString}."}
{"Origin": "Set the pattern for the training set files.", "Reference": "Set the output format for the crossfolder.", "NNUpdater": "Set the name displayed in links."}
{"Origin": "Defaults to 64.", "Reference": "Defaults to 10.", "NNUpdater": "Defaults to ``AUTO``."}
{"Origin": "Generates a code sample for using {@link ShareDirectoryAsyncClient#deleteSubDirectory(String)} ()}", "Reference": "Generates a code sample for using {@link ShareDirectoryAsyncClient#deleteSubdirectory(String)} ()}", "NNUpdater": "Generates a code sample for using {@link DirectoryClient#deleteSubDirectoryWithResponse(String, Context)}"}
{"Origin": "Writes an entry to the currently open file, if any.", "Reference": "Writes a compilation unit to the currently open file, if any.", "NNUpdater": "Writes entry synchronously."}
{"Origin": "Set the fileContentType property: Sets the MIME content type of the file.", "Reference": "Set the contentType property: Sets the MIME content type of the file.", "NNUpdater": "Set the key usage."}
{"Origin": "Obtains an instance of {@code OffsetDateTime} from a local date and offset time.", "Reference": "Obtains an instance of {@code OffsetDateTime} from a {@code ZonedDateTime}.", "NNUpdater": "Obtains an instance of {@code OffsetDateTime} from a date, time and offset."}
{"Origin": "or throws a {@link com.liferay.knowledgebase.NoSuchArticleException} if it could not be found.", "Reference": "or throws a {@link NoSuchArticleException} if it could not be found.", "NNUpdater": "Operation fails."}
{"Origin": "Otherwise, the results returned match the parameters given in {@code options}.", "Reference": "Otherwise, the results returned match the parameters given in {@code selector}.", "NNUpdater": "Sets the {@code data} property in the builder."}
{"Origin": "Adds a ``LogicalImager`` data source to the case database using a background task in a separate thread and the given settings instead of those provided by the selection and configuration panel.", "Reference": "Adds a ``raw`` data source to the case database using a background task in a separate thread and the given settings instead of those provided by the selection and configuration panel.", "NNUpdater": "Adds a memory image data source to the case database using a background task in a separate thread and the given settings instead of those provided by the selection and configuration panel."}
{"Origin": "This information is useful for implicit and safe casting.", "Reference": "This information is useful for optional arguments with default value.", "NNUpdater": "This method is useful when validating that there will be no casting errors."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Set the upper 4x3 submatrix of this {@link Matrix4f} to the given {@link Matrix4x3f} and don't change the other elements.", "Reference": "Set the upper 4x3 submatrix of this {@link Matrix4f} to the given {@link Matrix4x3fc} and don't change the other elements.", "NNUpdater": "Set the left 3x3 submatrix of this {@link Matrix4x3f} to that of the given {@link Matrix4x3f} and don't change the other elements."}
{"Origin": "Returns the function that matches the current request or the specified error code.", "Reference": "Returns the function that matches the current request or the specified error code best.", "NNUpdater": "Returns the function that matches the current request or the specified error code."}
{"Origin": "This methods checks that this node, and all its nodes recursively, do not contain elements that were introduced in more recent versions of the ASM API than the given version.", "Reference": "This method checks that this node, and all its children recursively, do not contain elements that were introduced in more recent versions of the ASM API than the given version.", "NNUpdater": "Applies the given settings to all of the unary API methods in this service."}
{"Origin": "Returns the formatted unique name of the type.", "Reference": "Returns the formatted name of the type.", "NNUpdater": "Returns the name of the specified project formatted as a java type."}
{"Origin": "Gets a Date value from a WmiResult as a String", "Reference": "Gets a Date value from a WmiResult as a String in ISO 8601 format", "NNUpdater": "Gets the Variant type from the WmiResult."}
{"Origin": "Obtains the type from a unique name.", "Reference": "Obtains an instance from the specified name.", "NNUpdater": "Obtains the type from a unique name."}
{"Origin": "Register a known set of audio or video transcoders.", "Reference": "Registers a known set transcoding engines.", "NNUpdater": "Get the local content of a specific content type (like audio or video)."}
{"Origin": "Returns a boolean indicating whether the session is open.", "Reference": "Returns the session timeout.", "NNUpdater": "Returns a member by ID."}
{"Origin": "Calls {@link Plugin#didDeclareProperty(TypeSpec.Builder, PropertyGenerator, FieldSpec)} on all the bundled plugins", "Reference": "Calls {@link Plugin#afterDeclareProperty(TypeSpec.Builder, PropertyGenerator, FieldSpec)} on all the bundled plugins", "NNUpdater": "Calls {@link Plugin#didDeclareProperty(TypeSpec.Builder, PropertyGenerator, FieldSpec)} on all the bundled plugins"}
{"Origin": "Set the upper left 3x3 submatrix of this {@link Matrix4d} to that of the given {@link Matrix4d} and don't change the other elements.", "Reference": "Set the upper left 3x3 submatrix of this {@link Matrix4d} to that of the given {@link Matrix4dc} and don't change the other elements.", "NNUpdater": "Set the upper left 3x3 submatrix of this {@link Matrix4d} to that of the given {@link Matrix4d} and don't change the other elements."}
{"Origin": "Access Control Using AWS Identity and Access Management (IAM) .", "Reference": "For more information, see Access Control Using AWS Identity and Access Management (IAM).", "NNUpdater": "Access Management (IAM) user account."}
{"Origin": "Extract the result of given method invocation from the array's elements under test into a new array, this new array becoming the array under test.", "Reference": "Extract the result of given method invocation from the array's elements under test into a list, this list becoming the object under test.", "NNUpdater": "Extract the result of given method invocation on the Iterable's elements under test into a new list of the given class, this new List becoming the object under test."}
{"Origin": "Returns the required Java version of this plugin.", "Reference": "Returns the minimumJava version of this plugin.", "NNUpdater": "This has the same effect as invoking addPlugin(stack, IAuthorizationPlugin, REQUIRED)."}
{"Origin": "When a message-driven enpoint supports retry implicitly, this header is incremented for each delivery attempt.", "Reference": "When a message-driven endpoint supports retry implicitly, this header is incremented for each delivery attempt.", "NNUpdater": "Returns the message execution policy."}
{"Origin": "Remove every generated files corresponding to a wiki.", "Reference": "Remove every generated files corresponding to a color theme.", "NNUpdater": "Adds to generated temporary files."}
{"Origin": "Get the VM URL for the embedded ActiveMQ Broker", "Reference": "Get the failover VM URL for the embedded ActiveMQ Broker", "NNUpdater": "Get the MQTT broker port"}
{"Origin": "Code snippets for {@link LeaseClientBuilder#buildClient()}.", "Reference": "Code snippets for {@link BlobLeaseClientBuilder#buildClient()}.", "NNUpdater": "WebClient client = WebClient.create(``URL``);"}
{"Origin": "Alias for {@link Future#of(ExecutorService, CheckedFunction0)}", "Reference": "Alias for {@link Future#of(Executor, CheckedFunction0)}", "NNUpdater": "Alias for {@link TreeMap#of(K, V, K, V)}"}
{"Origin": "Unsafe version of: {@link #shaderc_spvc_compile_into_hlsl compile_into_hlsl}", "Reference": "Unsafe version of: {@link #shaderc_spvc_initialize_for_hlsl initialize_for_hlsl}", "NNUpdater": "Operation fails."}
{"Origin": "Resolves a collection of root modules to create a configuration.", "Reference": "Resolves a collection of root modules, with service binding, to create configuration.", "NNUpdater": "Resolves the resource configuration."}
{"Origin": "What we need to do here is to release this PooledConnection from our pool...", "Reference": "PooledConnection from our pool...", "NNUpdater": "Return the pooled connection to its pool."}
{"Origin": "Checks whether the extension of the filename is one of those specified.", "Reference": "Checks whether the extension of the fileName is one of those specified.", "NNUpdater": "Checks whether the extension of the filename is one of those specified."}
{"Origin": "Adds a list of Strings as the payloads of the request.", "Reference": "Adds a single byte array to the payload of the request.", "NNUpdater": "Converts list of strings to nullable array of strings."}
{"Origin": "This can result in motion of elements backwards or forwards in the array.", "Reference": "This can result in forward or backwards motion of array elements.", "NNUpdater": "Gets the screen size in pixels."}
{"Origin": "Depending on what fields each label has, other things will be .", "Reference": "Depending on what fields each label has, other things will be {@code null}.", "NNUpdater": "label1 and label2 in X.Y.Z-label1-lable2."}
{"Origin": "This operation DOES NOT have a side effect on the position, limit or mark for the buffer.", "Reference": "Note: This operation DOES NOT have a side effect on the position, limit or mark for the buffer.", "NNUpdater": "Returns the Part of speach."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "May return empty if this call is not qualified (no ``.", "Reference": "May return null if this call is not qualified (no ``.", "NNUpdater": "Checks whether the map is currently empty."}
{"Origin": "ControllerInfo, String, int, Bundle)} when the parent is changed.", "Reference": "ControllerInfo, String, int, LibraryParams)} when the parent is changed until it's unsubscribed.", "NNUpdater": "``String[][][]`` or ``int``) for a type reference used in an annotation parameter."}
{"Origin": "NOTE:You cannot delete a cache subnet group if it is associated with any cache clusters.", "Reference": "You cannot delete a cache subnet group if it is associated with any cache clusters.", "NNUpdater": "You cannot delete an application version that is associated with a running environment."}
{"Origin": "Decorates and binds the specified {@link ServiceWithRoutes} at multiple {@link Route}s of the default {@link VirtualHost}.", "Reference": "Decorates and binds the specified {@link HttpServiceWithRoutes} at multiple {@link Route}s of the default {@link VirtualHost}.", "NNUpdater": "Decorates and binds the specified {@link ServiceWithRoutes} at multiple {@link Route}s of the default {@link VirtualHost}."}
{"Origin": "Sets the strategy name for a given action mnemonic.", "Reference": "Sets the strategy names for a given action mnemonic.", "NNUpdater": "Returns the action context implementation for a given spawn action."}
{"Origin": "Setter for {@link #allowOnlyRequestedMethod}", "Reference": "Setter for {@link #allowAllRequestedHeaders}", "NNUpdater": "Tests electRouter() method."}
{"Origin": "These entries are suitable for populating {@code Map} instances using the {@link Maps2#ofEntries Maps.ofEntries()} method.", "Reference": "These entries are suitable for populating {@code Map} instances using the {@link Maps2#ofEntries Maps2.ofEntries()} method.", "NNUpdater": "Creates a {@code TreeMap} of the given entries using the given key comparator."}
{"Origin": "Iterate over all the {@link SecretProperties secret} by each page and call {@link SecretClient#getSecret(SecretProperties)} .", "Reference": "Iterate over all the {@link SecretProperties secret} by each page and call {@link SecretClient#getSecret(String, String)}.", "NNUpdater": "Iterate over all the {@link SecretProperties secret} by each page and call {@link SecretClient#getSecret(SecretProperties)} ."}
{"Origin": "Deletes a specified feedback entry.", "Reference": "Delete a specified feedback entry.", "NNUpdater": "Sets a filter to use on the feedback messages model"}
{"Origin": "Use the {@link #add(EntityStructure)} method, this method throws an exception.", "Reference": "Use the {@link #add(EntityStructure)} method!", "NNUpdater": "If {@link #hasNext()} returns false, calling this method throws {@link MessageInsufficientBufferException}."}
{"Origin": "In case of failure the {@link Flux} will error.", "Reference": "In case of failure the {@link CosmosContinuablePagedFlux} will error.", "NNUpdater": "Get the id of the {@link CosmosContainer}"}
{"Origin": "Decorates {@link Service}s under the specified directory.", "Reference": "Decorates {@link HttpService}s under the specified directory.", "NNUpdater": "Creates a new {@link CompositeServiceEntry} whose {@link Service} is bound at the specified path pattern."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Any function operating on a {@code *_compiler_t} must offer the basic thread-safety guarantee.", "Reference": "Any function operating on a {@code *_context_t} must offer the basic thread-safety guarantee.", "NNUpdater": "Operation fails."}
{"Origin": "Prepends the stringly representation of byte value into buffer, given the coder and final index.", "Reference": "Prepends constant and the stringly representation of value into buffer, given the coder and final index.", "NNUpdater": "Return a field by index."}
{"Origin": "Get authentication resources ### Functional Description: Provides information about authentication options.", "Reference": "Get authentication resources ## \u26a0 Deprecated since version VERSION ### Functional Description: Provides information about authentication options.", "NNUpdater": "The default is to use any authentication mechanisms registered by {@link #configure(AuthenticationManagerBuilder)}."}
{"Origin": "Set Exclude of Total Calculation.", "Reference": "Set Hide Grand Total.", "NNUpdater": "Get the timestamp value."}
{"Origin": "Unregister the MBean located under the given {@link ObjectName}", "Reference": "Unregisters the MBean located under the given {@link ObjectName}, if it exists.", "NNUpdater": "State Change listener callback."}
{"Origin": "Resolves a collection of root modules to create a configuration.", "Reference": "Resolves a collection of root modules, with service binding, to create configuration.", "NNUpdater": "Resolves the resource configuration."}
{"Origin": "Atomically sets the hi int value to the given updated value only if the current value {@code ==} the expected value.", "Reference": "Atomically sets the hi value to the given updated value only if the current value {@code ==} the expected value.", "NNUpdater": "Atomically sets the element at position {@code i} to the given updated value if the current value {@code ==} the expected value."}
{"Origin": "Also, puts the new names->nodes map in the TsurgeonPattern that called copy.", "Reference": "Also, puts the new names->nodes map in the TsurgeonMatcher that called copy.", "NNUpdater": "2014-09-09-Holiday"}
{"Origin": "Connects the channel to a group.", "Reference": "Connects the channel to a cluster.", "NNUpdater": "Returns the type UID of the channel group."}
{"Origin": "Sets the credentials.", "Reference": "Set the credentials.", "NNUpdater": "Sets the password."}
{"Origin": "*, and END as siblings, so they can all be indented relative to the parent unmatched call from {@link #buildUnmatchedCallChildren()}", "Reference": "*, and END as siblings, so they can all be indented relative to the parent unmatched call from {@link #buildUnmatchedCallChildren(ASTNode, Alignment)}", "NNUpdater": "Creates a {@code UnmatchedArgsBinding} for a setter that consumes {@code String[]} objects."}
{"Origin": "For each ChildGlideModule, write an Indexer with an Annotation with the class name.", "Reference": "For each LibraryGlideModule, write an Indexer with an Annotation with the class name.", "NNUpdater": "Creates an new {@code IndexWriter} object for updates to a given partition."}
{"Origin": "Remove query at given position from current playlist", "Reference": "Remove entry at given position from current playlist", "NNUpdater": "Remove query at given position from current playlist"}
{"Origin": "Unbinds the currently bound bean if any.", "Reference": "Removes the currently set bean, if any.", "NNUpdater": "Unbinds a thread and a naming context."}
{"Origin": "Assigns the current checkbox value to the option specified in the constructor.", "Reference": "Assigns the current value.", "NNUpdater": "Finds the URI for the specified prefix."}
{"Origin": "This method is currently only used for root-level serializer handling to allow for simpler caching.", "Reference": "This method is mostly used for root-level serializer handling to allow for simpler caching.", "NNUpdater": "Currently, this is only used for the body since the attachments are computed by filename."}
{"Origin": "Create sections out of the foreground pixels found in a provided buffer and contained in the specified region of interest.", "Reference": "Create sections out of the foreground pixels found in the specified region of interest of a provided buffer.", "NNUpdater": "Returns the region's width."}
{"Origin": "Returns unmodifiable map of module name to hash string.", "Reference": "Returns unmodifiable map of module name to hash", "NNUpdater": "Returns map of machine attributes."}
{"Origin": "Get customer keypair ### Functional Description: Retrieve the customer resque keypair.", "Reference": "Get customer's key pair ### Functional Description: Retrieve the customer rescue key pair.", "NNUpdater": "Creates a new customer object."}
{"Origin": "or throws a {@link com.liferay.pushnotifications.NoSuchDeviceException} if it could not be found.", "Reference": "or throws a {@link NoSuchDeviceException} if it could not be found.", "NNUpdater": "Operation fails."}
{"Origin": "more complete search to see if this is a valid package name", "Reference": "More complete search to see if this is a valid package name.", "NNUpdater": "Checks if the transfer has completed."}
{"Origin": "Obtains an instance from the specified unique name.", "Reference": "Obtains an instance from the specified name.", "NNUpdater": "Obtains the type from a unique name."}
{"Origin": "Parses the timestamp from the collection list and returns them in reverse sorted order (most recent 1st)", "Reference": "Result is returned them in sorted order (most recent 1st)", "NNUpdater": "Returns the clipboard data."}
{"Origin": "Set up m_validator from SchemaPlus.", "Reference": "Set up m_validator and m_schemaPlus from SchemaPlus.", "NNUpdater": "Reset the static {@link #settings} to ."}
{"Origin": "Used to store a few UI related settings for the current session only.", "Reference": "Used to store a few UI related settings in the PreferencesService (serialized to db)", "NNUpdater": "Returns a channel provider."}
{"Origin": "Tests the {@link FileSystemMaster#checkConsistency(AlluxioURI, CheckConsistencyOptions)} method when no files are consistent.", "Reference": "Tests the {@link FileSystemMaster#checkConsistency(AlluxioURI, CheckConsistencyContext)} method when no files are consistent.", "NNUpdater": "Tests the {@link FileSystemMaster#checkConsistency(AlluxioURI, CheckConsistencyOptions)} method when no files are consistent."}
{"Origin": "Tests the text index.", "Reference": "Tests the attribute index.", "NNUpdater": "Adds a text entry to the index."}
{"Origin": "Get one time download id for zipped images (media)", "Reference": "Get one time download id for an image (media)", "NNUpdater": "Copy file to archive."}
{"Origin": "Sets the intent.", "Reference": "Set the intent.", "NNUpdater": "Sets the intentName."}
{"Origin": "The {@link Flux} will contain one or several feed response of the obtained items.", "Reference": "The {@link CosmosContinuablePagedFlux} will contain one or several feed response of the obtained items.", "NNUpdater": "The {@link Flux} will contain one or several feed response of the obtained containers."}
{"Origin": "As service binding involves resolution then it may fail with {@link", "Reference": "Post-resolution consistency checks may fail with {@code", "NNUpdater": "Examples Specifying Link Resolution"}
{"Origin": "This makes it hard to debug because if task throws an exception, its call stack ends in the execution engine that actually starts a thread that serves the task.", "Reference": "This makes it hard to debug because if a task throws an exception, its call stack ends in the execution engine that actually starts a thread that serves the task.", "NNUpdater": "Task execution here throws {@link IgniteCheckedException}."}
{"Origin": "Code for reading alt site records from a table *", "Reference": "Code for reading sample name and alt site records from a table *", "NNUpdater": "(ALT_REWRITE (ALT ...) (-> (ALT ...))); rewrite might nested in subrule"}
{"Origin": "Stub of {@link Plugin#didDeclareGetter(TypeSpec.Builder, PropertyGenerator, MethodSpec)} for subclasses to override", "Reference": "Stub of {@link Plugin#afterDeclareGetter(TypeSpec.Builder, PropertyGenerator, MethodSpec)} for subclasses to override", "NNUpdater": "Operation fails."}
{"Origin": "Get the fileContentEncoding property: Specifies which content encodings have been applied to the file.", "Reference": "Get the contentEncoding property: Specifies which content encodings have been applied to the file.", "NNUpdater": "Reads the contents of a file."}
{"Origin": "Make sure to {@link #releaseParser(SAXParser)} in a block every time you call this.", "Reference": "Make sure to {@link #releaseDOMBuilder(PoolDOMBuilder)} in a block every time you call this.", "NNUpdater": "Test if newSAXParser() method returns SAXParser."}
{"Origin": "Test of parseSuppressionRules method, of class SuppressionParser.", "Reference": "Test of parseSuppressionRules method, of class SuppressionParser for the v1.0 suppressions XML Schema.", "NNUpdater": "Test of getRules method, of class AbstractSuppressionAnalyzer for suppression file on the classpath."}
{"Origin": "Sets the {@link MediaSource}s to be used by the test runner.", "Reference": "Sets a {@link MediaSource} to be used by the test runner.", "NNUpdater": "Sets a {@link DefaultTrackSelector} to be used by the test runner."}
{"Origin": "Tests the ability to register, invoke and auto-unregister {@link CacheUtilizationProvider.CleanupListener} instances.", "Reference": "Tests the ability to register, invoke and auto-unregister {@link ThrottleSourceListener} instances.", "NNUpdater": "Operation fails."}
{"Origin": "Group: producer", "Reference": "Group: consumer", "NNUpdater": "post-processor producer -> copy producer -> inputProducer"}
{"Origin": "Set a player's current username", "Reference": "Set a player's current usernamee", "NNUpdater": "-U"}
{"Origin": "Sets new {@link ISeedingStrategy}.", "Reference": "Sets new {@link SeedingStrategy}.", "NNUpdater": "Sets new {@link ISeedingStrategy}."}
{"Origin": "Returns an immutable list containing five elements.", "Reference": "Returns an unmodifiable list containing five elements.", "NNUpdater": "The returned List is immutable."}
{"Origin": "Obtains the provider of the class {@code clazz} and name {@code bindingName} that is scoped in the current scope, if any.", "Reference": "Obtains the provider of the class {@code clazz} and name {@code bindingName}.", "NNUpdater": "Obtains the provider of the class {@code clazz} and name {@code bindingName} that is scoped in the current scope, if any."}
{"Origin": "Tests the {@link AlluxioURI#AlluxioURI(String, String, String)} constructor to build a URI from its different components.", "Reference": "Tests the {@link AlluxioURI#AlluxioURI(String, Authority, String)} constructor to build a URI from its different components.", "NNUpdater": "Tests the {@link AlluxioURI#AlluxioURI(String)} constructor for basic HDFS paths."}
{"Origin": "Get the identifier representing the exception thrown", "Reference": "Get the binding pattern representing the exception thrown", "NNUpdater": "Get the label name"}
{"Origin": "The cleanup should be registered after the fd is set in the FileDescriptor.", "Reference": "The cleanup should be registered after the handle is set in the FileDescriptor.", "NNUpdater": "Set Manual."}
{"Origin": "This is a place holder in case in the future we wish to be able to reload aggregates.", "Reference": "Place holder in case in the future we wish to be able to reload aggregates.", "NNUpdater": "Tells whether or not this provider may be able to find the pojo with specified id"}
{"Origin": "gets all actors from database.", "Reference": "Gets all actors from database.", "NNUpdater": "Uses the finder cache."}
{"Origin": "Logs collection, string and throws {@link java.lang.AssertionError}, if contains.", "Reference": "Logs collection, element and throws {@link java.lang.AssertionError}, if contains.", "NNUpdater": "Creates a String of {@code CharSequence}."}
{"Origin": "Sets the label.", "Reference": "Set the label.", "NNUpdater": "Gets the PictureLabelValue for this label."}
{"Origin": "Returns a task manager services configuration for the tests", "Reference": "Returns a configuration for the tests.", "NNUpdater": "Mapping of containers names to containers configuration."}
{"Origin": "Generates random transaction trits with the provided trytes, trunk and hash.", "Reference": "Generates transaction trits with the provided trytes, trunk and hash.", "NNUpdater": "Generates a random alphanumeric string of the given length."}
{"Origin": "Scheduler: {@code combineLatest} does not operate by default on a particular {@link Scheduler}.", "Reference": "Scheduler: {@code combineLatestArray} does not operate by default on a particular {@link Scheduler}.", "NNUpdater": "Scheduler: {@code combineLatestDelayError} does not operate by default on a particular {@link Scheduler}."}
{"Origin": "A is built when the JAR is created.", "Reference": "A class is built when the JAR is created.", "NNUpdater": "The main method executed when this class is run."}
{"Origin": "Gets the name of the associated quorum if any.", "Reference": "Gets the name of the associated split brain protection if any.", "NNUpdater": "Returns the cluster read quorum strategy."}
{"Origin": "- java.lang.StringUTF16.compress([CI[BII)I", "Reference": "Intrinsic for {@code java.lang.StringUTF16.compress([CI[BII)I}.", "NNUpdater": "Test method for {@link java.sql.ResultSet#getBytes(String)}."}
{"Origin": "Sets decryption as succeeded", "Reference": "Sets crypto job as succeeded", "NNUpdater": "Adds the decryption private key of the recipient."}
{"Origin": "Queries this search source for the given searchPattern.", "Reference": "Creates query for the given searchPattern.", "NNUpdater": "Search All cases"}
{"Origin": "Test for [JACKSON-328], precedence of ``getter-as-setter`` (for Lists) versus field for same property.", "Reference": "Test precedence of ``getter-as-setter`` (for Lists) versus field for same property.", "NNUpdater": "Operation fails."}
{"Origin": "If the divider character isn't found in the word, then the whole string becomes the word, and lemma and tag are .", "Reference": "If the divider character isn't found in the word, then the whole string becomes the word, and lemma and tag are {@code null}.", "NNUpdater": "Sets the word."}
{"Origin": "{@codesnippet com.azure.storage.blob.specialized.BlobClientBase.startCopyFromURL#String}", "Reference": "{@codesnippet com.azure.storage.blob.specialized.BlobClientBase.beginCopy#String-Duration}", "NNUpdater": "{@codesnippet com.azure.storage.blob.specialized.BlobClientBase.Builder.buildClient}"}
{"Origin": "The configuration is saved under the config name defined by {@link QuorumConfig#getName()}.", "Reference": "The configuration is saved under the config name defined by {@link SplitBrainProtectionConfig#getName()}.", "NNUpdater": "If there is no config found by the name, it will return the configuration with the name {@code default}."}
{"Origin": "Checks if a CatalogResolver is available.", "Reference": "Checks if the catalog manager is available.", "NNUpdater": "CatalogResolver should throw CatalogException."}
{"Origin": "A candidate package name is derived from an entry using the characters up to, but not including, the last forward slash.", "Reference": "A candidate package name is derived from the name using the characters up to, but not including, the last forward slash.", "NNUpdater": "Throws an exception if the path argument to load() starts with more than one forward slash ('/')"}
{"Origin": "Set the default query timeout that will be used for {@link java.sql.Statement Statement}s created from this connection.", "Reference": "Sets the default query timeout that will be used for {@link java.sql.Statement Statement}s created from this connection.", "NNUpdater": "Add statement."}
{"Origin": "Indicates whether this charset is known to be registered in the IANA", "Reference": "Tells whether or not this charset is registered in the IANA Charset", "NNUpdater": "per IANA as of 20100419"}
{"Origin": "This call prevents automatic {@link RequestScope.Instance#release() release} of the scope instance once the task that runs in the scope has finished.", "Reference": "This call prevents automatic {@link RequestContext#release() release} of the scope context once the task that runs in the scope has finished.", "NNUpdater": "Maps a {@link Scope} instance to a given annotation."}
{"Origin": "Sets the {@link Service} and returns the {@link ServerBuilder} that this {@link ServiceBindingBuilder} was created from.", "Reference": "Sets the {@link HttpService} and returns the {@link ServerBuilder} that this {@link ServiceBindingBuilder} was created from.", "NNUpdater": "Returns a {@link ServiceBindingBuilder} which is for binding a {@link Service} fluently."}
{"Origin": "Aggregate given void publishers into a new {@literal Mono} that will be fulfilled when all of the given {@literal sources} have been fulfilled.", "Reference": "Aggregate given publishers into a new {@literal Mono} that will be fulfilled when all of the given {@literal sources} have been fulfilled.", "NNUpdater": "Aggregate given void publisher into a new a {@literal Mono} that will be fulfilled when all of the given {@literal"}
{"Origin": "Withings API into a list of {@link CaloriesBurned} {@link DataPoint} objects.", "Reference": "Withings API into a list of {@link CaloriesBurned1} {@link DataPoint} objects.", "NNUpdater": "Withings API into a list of {@link StepCount1} {@link DataPoint} objects."}
{"Origin": "Target {@link #on(Class) method} has to be {@link #to() called} before it can return its reference.", "Reference": "Target {@link #of(Class) method} has to be {@link #get() called} before it can return its reference.", "NNUpdater": "Target {@link #on(Class) method} has to be {@link #to() called} before it can return its reference."}
{"Origin": "Code snippets for {@link DataLakePathClient#setAccessControl(PathAccessControl)}", "Reference": "Code snippets for {@link DataLakePathClient#setAccessControlList(List, String, String)}", "NNUpdater": "Return the value of the {@code Access-Control-Request-Method} request header."}
{"Origin": "Bugsnag.onBreadcrumb(new OnBreadcrumb() { public boolean run(Breadcrumb breadcrumb) { return false; ignore the breadcrumb } })", "Reference": "Bugsnag.onBreadcrumb(new OnBreadcrumbCallback() { public boolean run(Breadcrumb breadcrumb) { return false; ignore the breadcrumb } })", "NNUpdater": "Bugsnag.beforeRecordBreadcrumb(new BeforeRecordBreadcrumb() { public boolean send(Breadcrumb breadcrumb) { return false; ignore the breadcrumb } })"}
{"Origin": "Get all Pinot realtime table names.", "Reference": "Get all realtime table names.", "NNUpdater": "Creates table names for given types."}
{"Origin": "RAF is more robust, but does not allow concurrent access (parallel read and writes).", "Reference": "but does not allow concurrent access (parallel read and writes).", "NNUpdater": "Returns the parallel mode."}
{"Origin": "query by given selectBuilder", "Reference": "Query by given selectBuilder", "NNUpdater": "Execute the select query and the update query if provided."}
{"Origin": "Removes all the sync d l objects where companyId = ?", "Reference": "Removes all the sync d l objects where repositoryId = ?", "NNUpdater": "Removes the feed where userId = ?"}
{"Origin": "when add/rm/mv element", "Reference": "when add/rm element", "NNUpdater": "Performs a touch command."}
{"Origin": "Whether or not this is a visible gas.", "Reference": "Whether or not this gas is hidden.", "NNUpdater": "Gets the IIcon associated with this Gas."}
{"Origin": "Sets the right border for a region of cells by manipulating the cell style of the individual cells on the right", "Reference": "Sets the right border style for a region of cells by manipulating the cell style of the individual cells on the right", "NNUpdater": "Sets the left border for a region of cells by manipulating the cell style of the individual cells on the left"}
{"Origin": "Creates the jdeps file artifact if needed.", "Reference": "Creates the jdeps file path if needed.", "NNUpdater": "Returns the parent Artifact containing this Artifact."}
{"Origin": "Returns the configured CSS head include resources.", "Reference": "Returns the schema configured CSS head include resources.", "NNUpdater": "Returns the configured JavaScript head include resources."}
{"Origin": "Convert to object types, returning null if text is null.", "Reference": "Convert to object types, returning null if text is null or empty.", "NNUpdater": "IsNullOrEmpty {is null or empty}."}
{"Origin": "Download or stream an image (media) from an shared album.", "Reference": "Download or stream an image (media) from an shared album HEAD only returns headers, no data", "NNUpdater": "Creates an {@link AlbumPlaylist} from an {@link Album} and sets the current {@link Query} to the {@link Query} at idx."}
{"Origin": "Tests assert that the setting can be deleted after unlock the setting.", "Reference": "Tests assert that the setting can be deleted after clear read-only of the setting.", "NNUpdater": "Unlocks the block"}
{"Origin": "Tests for pattern = { stringScalar } intSequence.", "Reference": "Tests for pattern = { scalar } intSequence { scalar }.", "NNUpdater": "2014-09-09-Holiday"}
{"Origin": "Configures SSL/TLS for HTTPS Jetty Server / Client", "Reference": "Configures SSL/TLS for HTTPS Jetty Server", "NNUpdater": "Create a Listener."}
{"Origin": "Called by {@link MediaSession2Stub#getItem(IMediaController2, String)}.", "Reference": "Called by {@link MediaSession2Stub#getItem(IMediaController2, int, String)}.", "NNUpdater": "Called when a controller requested to prefetch for playing a specific mediaId through {@link MediaController2#prefetchFromMediaId(String, Bundle)}."}
{"Origin": "See comment in DirectoryTaxonomyWriter.addToCache(CategoryPath, int) for an explanation why we clean 2/3rds of the cache, and not just one entry.", "Reference": "See comment in DirectoryTaxonomyWriter.addToCache(CategoryPath, int) for an explanation why we clean 1/3rd of the cache, and not just one entry.", "NNUpdater": "See {@link #search(String, Strand, String, int, byte[])} for explanation of parameters"}
{"Origin": "Compares if the file md5 matches a given md5 hash", "Reference": "Compares if the file hash matches a given hash", "NNUpdater": "Compares if the file md5 matches a given md5 hash"}
{"Origin": "Returns the k b comment with the primary key or throws a {@link com.liferay.knowledgebase.NoSuchCommentException} if it could not be found.", "Reference": "Returns the k b comment with the primary key or throws a {@link NoSuchCommentException} if it could not be found.", "NNUpdater": "Gets a comment by the specified id."}
{"Origin": "Registers implementing class of the Transform algorithm with algorithmURI", "Reference": "Registers implementing class of the SignatureAlgorithm with algorithmURI", "NNUpdater": "Registers implementing class of the SignatureAlgorithm with algorithmURI"}
{"Origin": "If several time values are inferred, pick up the highest one and reject the mappings that led to other values.", "Reference": "If several time values are inferred, pick up the lowest one and reject the mappings that led to other values.", "NNUpdater": "Valid Values: |"}
{"Origin": "This method can be overridden by Realm implementations, but the default is adequate when an instance of is used to represent authenticated", "Reference": "String)} can be overridden by Realm implementations, but the default is adequate when an instance of is used to represent authenticated Principals from this Realm.", "NNUpdater": "Returns the identity or key of this user on the Realm Object Server."}
{"Origin": "Determines whether a character is a letter or digit according to {@linkplain Character#isLetterOrDigit(char) Java's definition}.", "Reference": "Determines whether a character is a BMP letter or digit according to {@linkplain Character#isLetterOrDigit(char) Java's definition}.", "NNUpdater": "If the punctuation is being skipped or the character is a letter, digit, or underscore, is returned."}
{"Origin": "Call back after receiving FileMessageHeader.", "Reference": "Call back after receiving a streamed file.", "NNUpdater": "handles receiving an event."}
{"Origin": "We must access this directly rather than via method Thread.getId() because getId() is not final, and has been known to be overridden in ways that do not preserve unique mappings.", "Reference": "We must access this directly rather than via method Thread.getId() because getId() has been known to be overridden in ways that do not preserve unique mappings.", "NNUpdater": "This method should not be overridden."}
{"Origin": "Returns all the sync d l objects where companyId = ?", "Reference": "Returns all the sync d l objects where repositoryId = ?", "NNUpdater": "Returns the feed where userId = ?"}
{"Origin": "Send a message from this node to all nodes (including self)", "Reference": "Send a message from this node to all nodes in serial (including self), and receive it back", "NNUpdater": "Returns the cluster definition."}
{"Origin": "Returns an immutable map containing nine mappings.", "Reference": "Returns an unmodifiable map containing nine mappings.", "NNUpdater": "Returns an immutable map of named bindings."}
{"Origin": "The expected format is: --add-exports /=(,)*", "Reference": "{@code --add-exports /=(,)* }", "NNUpdater": "Process the Add-Exports or Add-Exports-All value."}
{"Origin": "Execute http request and produce a response.", "Reference": "Execute http response.", "NNUpdater": "Execute the HTTP request and discard the response."}
{"Origin": "Add entity value synonym.", "Reference": "Create entity value synonym.", "NNUpdater": "Sets the synonymText."}
{"Origin": "Store the specified Realm properties and child (Realm)", "Reference": "Store the specified CredentialHandler properties and child (CredentialHandler)", "NNUpdater": "Returns a Map of realm-id to realm-settings."}
{"Origin": "Sets the dialogNode.", "Reference": "Set the dialogNode.", "NNUpdater": "Sets the dialogNodeId."}
{"Origin": "Get the value of a property in a specific buck rule body.", "Reference": "Get the value of a named property in a specific buck rule body.", "NNUpdater": "Gets the value of the rules property."}
{"Origin": "For more information about the vault locking process,", "Reference": "For more information about the vault locking process, Amazon Glacier Vault Lock.", "NNUpdater": "For more information, see the Amazon"}
{"Origin": "Set Repeated type.", "Reference": "Set Time Unit.", "NNUpdater": "Set OrderType."}
{"Origin": "Gets the value of the 'RowKey' field", "Reference": "Gets the value of the 'rowKey' field.", "NNUpdater": "Gets the row key for a row object."}
{"Origin": "When a term is reactivated, it's invoice candidate needs to be deleted.", "Reference": "When a term is reactivated, its invoice candidate needs to be deleted.", "NNUpdater": "When a term is reactivated, its invoice candidate needs to be deleted."}
{"Origin": "Deletes the feedback question and the responses associated to it.", "Reference": "Deletes a feedback question cascade its responses and comments.", "NNUpdater": "Gets a question+response bundle for questions with responses that is visible to the user for a feedback session."}
{"Origin": "Returns the host address associated with this exception.", "Reference": "Returns the host associated with this exception.", "NNUpdater": "Returns the DatastoreError associated with this exception."}
{"Origin": "See {@link #begin(TxnMode)} for more details an options.", "Reference": "See {@link #begin(TxnType)} for more details an options.", "NNUpdater": "See {@link Messages#format(String, Object...)} for more details."}
{"Origin": "Helper method to register wiki components from a given document.", "Reference": "Register wiki components from a given document.", "NNUpdater": "Helper method to register wiki components from a given document."}
{"Origin": "Encode {@link DataMap} as a ByteString using {@link ByteString} unsafeWrap.", "Reference": "Encode {@link DataMap} as a JSON ByteString using {@link ByteString} unsafeWrap.", "NNUpdater": "Returns a read-only {@link ByteBuffer} representing this {@link ByteKey}."}
{"Origin": "Sets the space between children.", "Reference": "Sets the horizontal space between children.", "NNUpdater": "Sets the specified value to the {@code baseline.withContext} field."}
{"Origin": "Getting Search Suggestions in the Amazon CloudSearch Developer Guide .", "Reference": "CloudSearch Developer Guide.", "NNUpdater": "For more information, see Sorting Results in the Amazon CloudSearch Developer Guide."}
{"Origin": "Returns the list of available devices for the current platform, if any", "Reference": "Returns the list of available devices for the current platform and any custom user devices, if any", "NNUpdater": "Returns the object representing the local device."}
{"Origin": "If there is no separate publisher ID property defined, this group name will also be used as a WAN publisher ID.", "Reference": "If there is no separate publisher ID property defined, this cluster name will also be used as a WAN publisher ID.", "NNUpdater": "Clears the WAN queues for the wan replication name and publisher ID defined by the command parameters."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Creates an instance of {@code TokenVerifier} from the given string on a JWT of the given class.", "Reference": "Creates an instance of {@code TokenVerifier} for the given token.", "NNUpdater": "Given a JwtToken string, build a JsonWebToken Principal from it using"}
{"Origin": "Retrieves the uid and primary gid of the user running Alluxio-FUSE.", "Reference": "Retrieves the uid of the given user.", "NNUpdater": "Pins the Pool."}
{"Origin": "Test an {@link Array} used as a FIFO queue.", "Reference": "Test an {@link XQArray} used as a FIFO queue.", "NNUpdater": "Returns an iterator over this buffer's elements."}
{"Origin": "Set Maximum Level.", "Reference": "Set Maximalmenge.", "NNUpdater": "Set Ebene."}
{"Origin": "Get the storage blocks map.", "Reference": "Get the buffer blocks map.", "NNUpdater": "Get Ids of the blocks in current StorageDir"}
{"Origin": "All descendants, in the top-down order.", "Reference": "All descendants, in any order.", "NNUpdater": "Add all parent ClassLoaders of a class in top-down order, the same as in the JRE."}
{"Origin": "Extract the values of given fields/properties from the object under test into an array, this new array becoming the object under test.", "Reference": "Extract the values of given fields/properties from the object under test into a list, this new list becoming the object under test.", "NNUpdater": "Extract the result of given method invocation on the Iterable's elements under test into a new list of the given class, this new List becoming the object under test."}
{"Origin": "If arrayLengthAccess node is an array length field access and the other node is less than or equal to that array length, then refine the other nodes type to less than the array length.", "Reference": "If lengthAccess node is an sequence length field or method access and the other node is less than or equal to that sequence length, then refine the other nodes type to less than the sequence length.", "NNUpdater": "If {@code type} is an array then the length of the values array determines the reallocated array length."}
{"Origin": "Notify this object that it has been registered as a listener with a source for receiving events described by the named event", "Reference": "Notify this object that it has been registered as a listener with a source for receiving events described by the named event This object is responsible for recording this fact.", "NNUpdater": "Notify this object that it has been registered as a listener with a source for receiving events described by the named event This object is responsible for recording this fact."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Returns the identifier of this action profile group.", "Reference": "Returns the ID of this action profile group.", "NNUpdater": "Returns the id of this entry."}
{"Origin": "Then pick the second highest from the array and insert to result according to k.", "Reference": "Insert the person to result according to k.", "NNUpdater": "JDBC VERSION Insert the contents of the insert row into the result set and the database."}
{"Origin": "Returns true to indicate that we can paint a representation of the", "Reference": "Returns true to indicate that we can paint a representation of the Object.", "NNUpdater": "Returns the default paint."}
{"Origin": "Gets information about the certificate which represents the {@link CertificateProperties} from the key vault.", "Reference": "Gets a pending {@link CertificateOperation} from the key vault.", "NNUpdater": "Gets information about the certificate which represents the {@link CertificateProperties} from the key vault."}
{"Origin": "Returns whether or not this qualifier has sequence with offset of -1.", "Reference": "Returns whether or not this qualifier has sequence with the specified offset.", "NNUpdater": "Result has (column, version, kvtype, id, value)"}
{"Origin": "Allows to capture and then assert on a {@link Throwable} more easily when used with Java 8 lambdas.", "Reference": "Allows to capture and then assert on a {@link Throwable} (easier done with lambdas).", "NNUpdater": "Gets the Throwable that was passed to {@link #onResponseComplete(Exception)}, if any."}
{"Origin": "The return map keys are index, type, field (as specified in the request).", "Reference": "The return map keys are index, field (as specified in the request).", "NNUpdater": "Returns the field's {@link ValueType}"}
{"Origin": "Run 4F with fixed parameters and compare the result to a golden standard.", "Reference": "Run LMCLUS with fixed parameters and compare the result to a golden standard.", "NNUpdater": "Run 4F with fixed parameters and compare the result to a golden standard."}
{"Origin": "Redirects the {@link AarConfiguration} inherited from another repository to point to this one, so that the other repository can be garbage collected.", "Reference": "Redirects the {@link RepositoryConfiguration} inherited from another repository to point to this one, so that the other repository can be garbage collected.", "NNUpdater": "Engine."}
{"Origin": "This merges the two objects - {@code this} and the specified time - to form an instance of {@code OffsetDateTime}.", "Reference": "This merges the two objects - {@code this} and the specified time - to form an instance of {@code ZonedDateTime}.", "NNUpdater": "Checks if this date-time is equal to another date-time."}
{"Origin": "The input file must be a list of tab-separated verb-POS pairs, one verb per line.", "Reference": "The input file must be a list of whitespace-separated verb-lemma-POS triples, one verb form per line.", "NNUpdater": "Get method's http verbs."}
{"Origin": "List of certificates used to verify signed tokens", "Reference": "Used to verify access tokens", "NNUpdater": "Returns the username."}
{"Origin": "Attempts to add an endpoint to the replicas for this datacenter, adding to the endpoints set if successful.", "Reference": "Attempts to add an endpoint to the replicas for this datacenter, adding to the replicas set if successful.", "NNUpdater": "Adds replicas to replicasPerDatacenter (Map of datacenter to List of replicas) and availableReplicaCountPerDatacenter (Map of datacenter to count of available replicas)"}
{"Origin": "Return all keys matching the search query, without pagination nor facets", "Reference": "Return all rule ids matching the search query, without pagination nor facets", "NNUpdater": "Selects facets to return for the domain."}
{"Origin": "If Servlet VERSION is used, the cookie will be marked as HttpOnly.", "Reference": "By default the cookie will be marked as HttpOnly.", "NNUpdater": "Assert whether the cookie must be HTTP only."}
{"Origin": "Adds libraries from the given {@link NativeLinkable}.", "Reference": "Adds libraries from the given {@link NativeLinkableGroup}.", "NNUpdater": "Returns our {@link #getBuildDeps()}, limited to the subset of those which are {@link NativeLinkable}."}
{"Origin": "See {@link Args#getBlockingExecutor}.", "Reference": "See {@link Args#getOffloadExecutor}.", "NNUpdater": "Create {@link BuildExecutorArgs} using {@link DistBuildExecutorArgs}."}
{"Origin": "Returns the (biased) estimate of the sample standard deviation of the values within a {@link Dataset}.", "Reference": "Returns the (unbiased) kurtosis excess of all the values within a {@link Dataset}", "NNUpdater": "testStandardDeviation2"}
{"Origin": "Note: This API uses {@link Class} instead of {@link Module} to provide backwards compatibility for JVMCI clients compiled against a JDK release earlier than 9.", "Reference": "Note: This API uses {@link Class} instead of {@code Module} to provide backwards compatibility for JVMCI clients compiled against a JDK release earlier than 9.", "NNUpdater": "Prefer {@link #getDelayInformation(Stanza)} over this method for backwards compatibility."}
{"Origin": "Tokenize a CharSequence based on the given CharSequence delimiter.", "Reference": "Tokenize a CharSequence based on the given CharSequence.", "NNUpdater": "Return the lines of a CharSequence as a List of String."}
{"Origin": "does NOT escape character data in val, must already be valid XML", "Reference": "does NOT escape character data in val; it must already be valid XML.", "NNUpdater": "Checks if the specified character is a valid XML VERSION character."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Associates this cache configuration to a quorum.", "Reference": "Associates this cache configuration to a split brain protection.", "NNUpdater": "Returns the cluster read quorum strategy."}
{"Origin": "Access Control Using AWS Identity and Access Management (IAM) .", "Reference": "For more information, see Access Control Using AWS Identity and Access Management (IAM).", "NNUpdater": "Access Management (IAM) user account."}
{"Origin": "Returns the formatted date in UTC zone of the signing date.", "Reference": "Returns the formatted date in UTC zone of the signing date for the request.", "NNUpdater": "Compares this date-time to another date-time based on the UTC equivalent date-times then offset."}
{"Origin": "When a class B inherits from A and A is annotated as a dict, then B automatically gets the annotation, even if B's constructor is not explicitly annotated.", "Reference": "When a class B inherits from A and A is annotated as a dict, then B automatically gets the annotation, if B's constructor is not explicitly annotated.", "NNUpdater": "Determine if the supplied {@link AnnotatedElement} is annotated with a composed annotation that is meta-annotated with an annotation of the specified {@code annotationName}."}
{"Origin": "For information about computing a SHA256 tree hash, see", "Reference": "For information about computing a SHA256 tree hash, see Computing Checksums.", "NNUpdater": "For more information about how load is computed, see"}
{"Origin": "Obtains an instance of {@code ZoneId} from an identifier ensuring that the identifier is valid and available for use.", "Reference": "Obtains an instance of {@code ZoneId} from an ID ensuring that the ID is valid and available for use.", "NNUpdater": "Obtains an instance of {@code TimeZone} from an identifier ensuring that the identifier is valid and available for use."}
{"Origin": "You definitely get them more than 50% off sometimes.", "Reference": "You definitely get them more than 30% off sometimes.", "NNUpdater": "You definitely get them more than 30% off sometimes."}
{"Origin": "Create new note.", "Reference": "Creating new note.", "NNUpdater": "Creates and returns a new vulnerability Note"}
{"Origin": "Build a lazy resolution message from the given supplier.", "Reference": "Build a lazily resolving message from the given supplier.", "NNUpdater": "Perform the wait."}
{"Origin": "Sets each pixel in the output image to sgn*log( 1 + sgn*input(x,y)) of the input image.", "Reference": "Sets each pixel in the output image to sgn*log( val + sgn*input(x,y)) of the input image.", "NNUpdater": "Retrieves {@link InputStream} of image by URI."}
{"Origin": "Gets the value of the cycle property.", "Reference": "Gets the value of the cycleOption property.", "NNUpdater": "Gets the value of the links property."}
{"Origin": "Gets the value of default user (login or username).", "Reference": "Gets the value of default user (login or user name).", "NNUpdater": "Log the user using the given params after identifying if the login is a 3pid, a username or a phone number"}
{"Origin": "Non-null password.", "Reference": "Non-empty password.", "NNUpdater": "-P"}
{"Origin": "If {@code options} is {@code null}, then all the {@link ConfigurationSetting configuration settings} are fetched with their current values.", "Reference": "If {@code selector} is {@code null}, then all the {@link ConfigurationSetting configuration settings} are fetched with their current values.", "NNUpdater": "{@codesnippet com.azure.data.appconfiguration.ConfigurationClient.setSettingWithResponse#ConfigurationSetting-boolean-Context}"}
{"Origin": "This will return the {@link Key key} with key material included of its latest version.", "Reference": "This will return the {@link KeyVaultKey key} with key material included of its latest version.", "NNUpdater": "This operation can then be used to get the full key with its key material from {@code keyProperties}."}
{"Origin": "Sets the behavior.", "Reference": "Set the behavior.", "NNUpdater": "Sets the value of the fillcolor property."}
{"Origin": "Set Global ID.", "Reference": "Set Data import.", "NNUpdater": "Get a reference set by ID"}
{"Origin": "Convert to primitive types, returning default value if text is null.", "Reference": "Convert to double, returning default value if text is inconvertible.", "NNUpdater": "Convert all types, both reference and primitive, to {@code Object}."}
{"Origin": "Validates whether the character is possible in the context of the set of possible base 64 values.", "Reference": "Validates whether decoding the final trailing character is possible in the context of the set of possible base 64 values.", "NNUpdater": "Gets the PossibleValues attribute of the FormElement object."}
{"Origin": "If {@code labels = ``abc1234``}, settings with a label equal to ``abc1234`` are returned.", "Reference": "If {@code labelFilter = ``abc1234``}, settings with a label equal to ``abc1234`` are returned.", "NNUpdater": "If {@code labels = ``abc1234``}, settings with a label equal to ``abc1234`` are returned."}
{"Origin": "Can be called from any move thread.", "Reference": "It can be called from any move thread.", "NNUpdater": "Can be called from every thread."}
{"Origin": "| lhsPatternBind consequenceInvocation? )", "Reference": "| lhsPatternBind consequenceInvocation* ) SEMICOLON?", "NNUpdater": "lhsUnary := ( lhsExists | lhsNot | lhsEval | lhsForall | lhsAccumulate | LEFT_PAREN lhsOr RIGHT_PAREN | lhsPatternBind ) SEMICOLON?"}
{"Origin": "Group: producer", "Reference": "Group: consumer", "NNUpdater": "post-processor producer -> copy producer -> inputProducer"}
{"Origin": "Gets policy for resource set.", "Reference": "Delete policy for resource set.", "NNUpdater": "Lists the policy for a certificate."}
{"Origin": "Sets the {@link jodd.madvoc.ActionRequest#nextActionPath(String) next action request} for the chain.", "Reference": "Sets the {@link jodd.madvoc.ActionRequest#setNextActionPath(String) next action request} for the chain.", "NNUpdater": "Action classes are annotated with {@link jodd.madvoc.meta.MadvocAction} annotation or extends a class annotated with the same annotation."}
{"Origin": "web applications), consider using a controller with component pooling and/or caching.", "Reference": "web applications), consider using a controller with component pooling.", "NNUpdater": "Max poolingi"}
{"Origin": "Gets the list of {@link CertificateContact contacts} on this page.", "Reference": "Gets the iterable stream of {@link CertificateContact contacts} on this page.", "NNUpdater": "Lists the certificate contacts for a specified key vault."}
{"Origin": "Close the {@link Closeable} as a null-safety.", "Reference": "Attempt to close the supplied {@link Closeable}, silently swallowing any exceptions.", "NNUpdater": "Closes all given Closeables."}
{"Origin": "SETTER: Is this table a stream type?", "Reference": "SETTER: Is this table a Stream table?", "NNUpdater": "Setter for property type."}
{"Origin": "Set the default query timeout that will be used for {@link Statement}s created from this connection.", "Reference": "Sets the default query timeout that will be used for {@link Statement}s created from this connection.", "NNUpdater": "Default value - {@link #DEFAULT_HTTP_CONNECT_TIMEOUT this}"}
{"Origin": "Fires {@link FocusTracker#focusChanged(boolean)} event for involved components.", "Reference": "Fires {@link GlobalFocusListener#focusChanged(Component, Component)} event.", "NNUpdater": "This method fires a {@link UriFragmentChangedEvent}"}
{"Origin": "According the the spec the key is the ``first keySize characters of chromosome name, padded with zeroes if needed.", "Reference": "According the the spec the key is the ``first keySize characters of chromosome name``", "NNUpdater": "The key (name) of a tag."}
{"Origin": "Appends an internal name, a type descriptor or a type signature to {@link #buf buf}.", "Reference": "Appends an internal name, a type descriptor or a type signature to {@link #stringBuilder}.", "NNUpdater": "Prepare a pooled {@link TcpClient}"}
{"Origin": "Set the name used to draw the attachement icon.", "Reference": "Set the name used to draw the attachment icon.", "NNUpdater": "Returns the resource type name."}
{"Origin": "Construct BlobDataSource from the underneath byte channel which is associated with the entity struct.", "Reference": "Construct BlobDataSource from the underneath byte channel which is associated with the entity object.", "NNUpdater": "Wrap the byte channel associated with the given entity as the EntityBodyStream."}
{"Origin": "Uses the {@link HandlerMapping#BEST_MATCHING_PATTERN_ATTRIBUTE} best matching pattern.", "Reference": "Uses the {@link HandlerMapping#BEST_MATCHING_PATTERN_ATTRIBUTE} best matching pattern if available.", "NNUpdater": "2014-09-09-Holiday"}
{"Origin": "As per the JLS, {@code Value} is a sub-type of of the raw type {@code Value}.", "Reference": "As per the JLS, {@code Value} is a sub-type of the raw type {@code Value}.", "NNUpdater": "Returns the property's value as a {@link RawValue}."}
{"Origin": "TODO: Change this into deselectTrack(TrackInfo)", "Reference": "TODO: Change this into deselectTrack(TrackInfo) (b/132928418)", "NNUpdater": "Set this {@link Track}'s disc number"}
{"Origin": "Tests that an MqttConnack packet can be encoded successfully without throwing any exceptions.", "Reference": "Tests that an MqttConnAck packet can be encoded successfully without throwing any exceptions.", "NNUpdater": "Tests that an MqttConnect packet can be encoded successfully without throwing any exceptions."}
{"Origin": "If an event listener is assignable to {@link EventListener} it will registered as is.", "Reference": "If an event handler is assignable to {@link EventMessageHandler} it will registered as is.", "NNUpdater": "Adds a listener."}
{"Origin": "The {@link Flux} will contain one or several feed response of the read cosmos items.", "Reference": "The {@link CosmosContinuablePagedFlux} will contain one or several feed response of the read cosmos items.", "NNUpdater": "The {@link Flux} will contain one or several feed response pages of the read cosmos trigger properties."}
{"Origin": "The Struct complies with the {@link #SCHEMA} for the MySQL connector.", "Reference": "The Struct complies with the versioned source schema for the MySQL connector.", "NNUpdater": "For example, for input path swift:my-container-name/my-path/file, the output would be my-path/file."}
{"Origin": "Returns true if field jvmType is set (has been assigned a value) and false otherwise", "Reference": "Returns true if field type is set (has been assigned a value) and false otherwise", "NNUpdater": "Returns true if field status is set (has been assigned a value) and false otherwise"}
{"Origin": "Installs split button mouseover listener.", "Reference": "Installs menu button mouseover listener.", "NNUpdater": "Adds hover listener."}
{"Origin": "Call from main thread.", "Reference": "Call from main thread or camera thread.", "NNUpdater": "Get the result on the executor thread."}
{"Origin": "MessageSourceContact in the supplied list.", "Reference": "ComparableEvtObj in the supplied list.", "NNUpdater": "Returns the index of this contact node in its parent group."}
{"Origin": "Return the {@code HttpClient} used for {@linkplain #createAsyncRequest(URI, HttpMethod) asynchronous execution}.", "Reference": "Return the {@code CloseableHttpAsyncClient} used for {@linkplain #createAsyncRequest(URI, HttpMethod) asynchronous execution}.", "NNUpdater": "Return a {@link MutableHttpRequest} for a {@link HttpMethod#GET} request for the given URI"}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Get an enumeration of the keys of the JSONObject.", "Reference": "The order of the keys is undefined.", "NNUpdater": "The order of the keys is undefined."}
{"Origin": "Creates new {@link AggregationExpression} that returns the year number in ISO 8601-2018 format in the factory timezone (default UTC).", "Reference": "Creates new {@link AggregationExpression} that returns the year number in ISO 8601-2018 format.", "NNUpdater": "Creates new {@link AggregationExpression} that returns the year number in ISO 8601-2018 format in the factory timezone (default UTC)."}
{"Origin": "Once the prefetch is done, the session will change its playback state to {@link SessionPlayer2#PLAYER_STATE_PAUSED}.", "Reference": "Once the prepare is done, the session will change its playback state to {@link SessionPlayer2#PLAYER_STATE_PAUSED}.", "NNUpdater": "Once the prefetch is done, the session will change its playback state to {@link SessionPlayer2#PLAYER_STATE_PAUSED}."}
{"Origin": "Test processing of nested objects, see bug 36384.", "Reference": "Tests processing of nested objects, see bug 36384.", "NNUpdater": "See NOF bug-517."}
{"Origin": "Finds the resource with the given name on the class path of this class loader.", "Reference": "Finds a resource with the given name in the modules defined to this class loader or its class path.", "NNUpdater": "Finds the resource with the given name in the modules defined to this class loader or its class path."}
{"Origin": "FilterEvaluator should return {@link Optional#absent()} when the link doesn't match any filters", "Reference": "FilterEvaluator should return {@link Optional.empty()} when the link doesn't match any filters", "NNUpdater": "Optional#empty() Optional.empty()}."}
{"Origin": "Access Control Using AWS Identity and Access Management (IAM) .", "Reference": "For more information, see Access Control Using AWS Identity and Access Management (IAM).", "NNUpdater": "Access Management (IAM) user account."}
{"Origin": "config LoadBalancer factory.", "Reference": "config load balancer policy.", "NNUpdater": "Deletes the specified load balancer."}
{"Origin": "The process method which take a MaryData object in parameter, compute the features of the utterance referenced in the parameter and return a new", "Reference": "The process method which take a Utterance object in parameter, compute the features of the utterance referenced in the parameter and return a new", "NNUpdater": "The limit parameter in the request."}
{"Origin": "Returns an Observable that emits the results of a specified combiner function applied to combinations of n items emitted, in sequence, by the n ObservableSources emitted by a specified ObservableSource.", "Reference": "Returns an Observable that emits the results of a specified combiner function applied to combinations of items emitted, in sequence, by an Iterable of other ObservableSources.", "NNUpdater": "Returns an Observable that emits only the first {@code count} items emitted by the source Observable."}
{"Origin": "Wrap an object, if necessary.", "Reference": "Wraps the given object if necessary.", "NNUpdater": "Performs {@code 'soft wrap' -> 'hard wrap'} conversion for soft wrap at the given offset if any."}
{"Origin": "Returns an immutable set containing nine elements.", "Reference": "Returns an unmodifiable set containing nine elements.", "NNUpdater": "Reads between one and ten bytes."}
{"Origin": "Reset the value given the timestamp, value and reals.", "Reference": "Reset the value given the timestamp and value.", "NNUpdater": "Returns a {@link LegacySQLTypeName#TIMESTAMP} field value."}
{"Origin": "{@codesnippet com.azure.data.applicationconfig.configurationclient.getSetting#string-string}", "Reference": "{@codesnippet com.azure.data.applicationconfig.configurationclient.getConfigurationSetting#string-string}", "NNUpdater": "{@codesnippet com.azure.data.applicationconfig.configurationclient.deleteSetting#string-string}"}
{"Origin": "If {@code useIndex} is true, the join scans polygons and uses an index of geometries built prior to invoking the join to lookup matches.", "Reference": "If {@code useIndex} is true, the join scans query windows and uses an index of geometries built prior to invoking the join to lookup matches.", "NNUpdater": "Returns a {@link SqlJoinOperator.JoinType}, never null."}
{"Origin": "IMPORTANT: After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group.", "Reference": "After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group.", "NNUpdater": "Creates a new DB parameter group."}
{"Origin": "Reads the MainClass attribute", "Reference": "Reads the ModuleMainClass attribute", "NNUpdater": "Sets the main class."}
{"Origin": "Create a new detached JDOQuery instance with the given projection", "Reference": "Create a new detached {@link JDOQuery} instance with the given projection", "NNUpdater": "Create a transient instance."}
{"Origin": "The number of transports active within the image liveness timeout.", "Reference": "Count of observed active transports within the image liveness timeout.", "NNUpdater": "Returns the protocols the client supports."}
{"Origin": "It is upto to caller of this method to close the stream.", "Reference": "It is up to to caller of this method to close the stream.", "NNUpdater": "The stream wrapped inside the source, if any, is NOT explicitely closed after parsing, it is the responsibility of the caller to close the stream."}
{"Origin": "Callback when created ledger.", "Reference": "Callback when metadata store has responded.", "NNUpdater": "Callback when created ledger."}
{"Origin": "(20%)", "Reference": "(30%)", "NNUpdater": "Default: 20"}
{"Origin": "Returns the sync d l objects before and after the current sync d l object in the ordered set where companyId = ?", "Reference": "Returns the sync d l objects before and after the current sync d l object in the ordered set where modifiedTime > ?", "NNUpdater": "Returns the sync d l object ID of this sync d l object."}
{"Origin": "The negative of {@code endsNotWith} is {@link #endsWith}.", "Reference": "The negative of {@code endsNotWith} is {@link #endingWith}.", "NNUpdater": "Ends the session."}
{"Origin": "Returns an java.time.Instant object that is offset by a number of milliseconds from now.", "Reference": "Returns an java.time.Instant object that is offset by a number of hours from now.", "NNUpdater": "Obtains an instance of {@code OffsetTime} from an {@code Instant}."}
{"Origin": "[A4] If the new lookup class is in a different package than the old one, protected and default (package) members will not be accessible.", "Reference": "[A6] If the new lookup class is in a different package than the old one, protected and default (package) members will not be accessible.", "NNUpdater": "Get the node package string."}
{"Origin": "returns true when data migration is complete and all v2 metrics tables have been deleted; false otherwise", "Reference": "returns true when data migration is complete and all v2 metrics tables data has been migrated for configured resolutions ; false otherwise", "NNUpdater": "Returns true if field isCompleted is set (has been assigned a value) and false otherwise"}
{"Origin": "Test that verbose does not corrumpt file not found exceptions", "Reference": "Test that verbose does not corrupt file not found exceptions", "NNUpdater": "FileNotFoundException is thrown."}
{"Origin": "If it runs in a transaction, then the transaction has to be empty (no operations executed yet) and after the execution you will be in a new transaction.", "Reference": "If the DB has an active transaction, then the transaction has to be empty (no operations executed yet) and after the execution you will be in a new transaction.", "NNUpdater": "Set Transaktion."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Checks that collection {@param col} contains string {@param str}.", "Reference": "Checks that collection {@param col} contains element {@param elem}.", "NNUpdater": "Get the param value."}
{"Origin": "Checks if an WebSocket request matches this Annotation and Path.", "Reference": "Checks if an WebSocket request matches this annotation and path.", "NNUpdater": "Creates a {@link WebSocketCreator} that uses the given handler class/instance for the WebSocket connections."}
{"Origin": "See Immutable Map Static Factory Methods for details.", "Reference": "See Unmodifiable Maps for details.", "NNUpdater": "VerificationTimes supports multiple static factory methods:"}
{"Origin": "Finds a resolved module in this configuration, or if not in this configuration, the {@linkplain #parent parent} configurations.", "Reference": "Finds a resolved module in this configuration, or if not in this configuration, the {@linkplain #parents parent} configurations.", "NNUpdater": "This conversion uses {@linkplain StrategiesSupplier#builder() default strategies}."}
{"Origin": "Return {@link SessionResult#RESULT_CODE_SUCCESS} to proceed the command.", "Reference": "Return {@link SessionResult#RESULT_SUCCESS} to proceed the command.", "NNUpdater": "Otherwise, this will return a {@link ReadWriteEvent} for which {@link ReadWriteEvent#isNull()} returns ."}
{"Origin": "Returns the {@link NativeBleDescriptor} for the given UUID in case you need lower-level access.", "Reference": "Returns the {@link BleDescriptorWrapper} for the given UUID in case you need lower-level access.", "NNUpdater": "In case you need the full type name, use {@link #getName()}."}
{"Origin": "Handles the patch operations, delegating actions to sub-class implementations.", "Reference": "Handles the patch operations.", "NNUpdater": "Handles an {@link HttpMethod#PATCH PATCH} request."}
{"Origin": "the name will normally start with the prefix ``trace`` followed by a 9 digit number followed by a ``.log`` suffix.", "Reference": "the name will start with the prefix ``trace`` followed by a 9 digit number followed by a ``.log`` suffix.", "NNUpdater": "The comparison is based on the period unit followed by the period range followed by the rule ID."}
{"Origin": "Implementation attempts to locate the redirect uri from request and check with service registry to find a matching oauth service.", "Reference": "Implementation attempts to locate the client id from request and check with service registry to find a matching oauth service.", "NNUpdater": "Adds the service to the Service Registry."}
{"Origin": "Get methods from all interfaces.", "Reference": "Gets methods from all interfaces.", "NNUpdater": "Find overridden methods from all super classes and all implemented interfaces."}
{"Origin": "Convert to doublep[]", "Reference": "Convert to double[]", "NNUpdater": "Convert a collection of objects to a list of , using {@link #convert(Object, Class)}"}
{"Origin": "Returns a copy of this runtime, with the given authenticator.", "Reference": "Returns a copy of this runtime, with the given endpoint authenticator.", "NNUpdater": "Returns the authenticator Restlet."}
{"Origin": "Sets the {@link Scheduler} used to process API responses.", "Reference": "Set the token to authenticate a {@link Router} to the Discord REST API.", "NNUpdater": "Creates a new {@link APIResponse} to model the default response of a {@link Method}, and inserts it into the {@link Operation} responses."}
{"Origin": "The default is 2 threads.", "Reference": "The default is 4 threads.", "NNUpdater": "JCache's default)."}
{"Origin": "Setter for {@link #exposeOnlyRequestedHeader}", "Reference": "Setter for {@link #allowOnlyRequestedHeader}", "NNUpdater": "Add a response header to expose."}
{"Origin": "Invoke Builder.provides(String service, Set providers)", "Reference": "Builder.provides(Provides[] provides)", "NNUpdater": "Returns the providers that are of type {@link org.jclouds.providers.ProviderMetadata#TABLE}."}
{"Origin": "testFinishBeforeOthers", "Reference": "testInitializeTxnBeforeOthers", "NNUpdater": "Finish the test."}
{"Origin": "an ascii string; non-ascii data is escaped with hex notation NB: not always uniquely reversible", "Reference": "An ascii string; non-ascii data is escaped with hex notation.", "NNUpdater": "Converts a byte array into a {@link ByteString}."}
{"Origin": "Get the {@linkplain ExecutionEvent execution events} as a {@link List}.", "Reference": "Get the {@linkplain Event events} as a {@link List}.", "NNUpdater": "Returns the serialized {@link ExecutionConfig}."}
{"Origin": "Includes fields from the given annotation maps.", "Reference": "Includes fields from the manual annotation maps.", "NNUpdater": "Includes fields from the manual annotation maps."}
{"Origin": "Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using", "Reference": "Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using ModifyDBCluster.", "NNUpdater": "Once you've created a DB parameter group, you need to associate it with your DB instance using ModifyDBInstance ."}
{"Origin": "Returns the text displayed by the button.", "Reference": "Returns the text displayed by the %type%.", "NNUpdater": "Get the displayed text."}
{"Origin": "Tests the {@link FileSystemMaster#mount(AlluxioURI, AlluxioURI, MountOptions)} method.", "Reference": "Tests the {@link FileSystemMaster#mount(AlluxioURI, AlluxioURI, MountContext)} method.", "NNUpdater": "Tests the {@link FileSystemMaster#delete(AlluxioURI, DeleteFileOptions)} method."}
{"Origin": "Unregisters all the MBeans registered through {@link #registerMBeans()}.", "Reference": "Unregisters all the MBeans registered through {@link #registerMBeans(Collection)}.", "NNUpdater": "Returns set of all bean names."}
{"Origin": "Configures the {@link MessagingExceptionHandler} that should be used to handle any errors that occur in this scope.", "Reference": "Configures the {@link FlowExceptionHandler} that should be used to handle any errors that occur in this scope.", "NNUpdater": "Handlers for errors and warnings that occur during a migration."}
{"Origin": "Enqueue given object (append after tail).", "Reference": "Append given object to the tail.", "NNUpdater": "Append the given value."}
{"Origin": "The option will be converted to a", "Reference": "The option will be converted to a type.", "NNUpdater": "A {@code null} source value will be converted to an empty List."}
{"Origin": "Returns the sync d l objects before and after the current sync d l object in the ordered set where parentFolderId = ?.", "Reference": "Returns the sync d l objects before and after the current sync d l object in the ordered set where modifiedTime > ?", "NNUpdater": "Returns the sync d l object ID of this sync d l object."}
{"Origin": "Creates a new unformatted {@link TranslatableText} with the given {@link Translation} and arguments.", "Reference": "Creates a new unformatted {@link TranslatableText} with the given {@link Translation}.", "NNUpdater": "Creates a new unformatted {@link TextBuilder.Translatable} with the given {@link Translation} and arguments."}
{"Origin": "Places elements into order by ascending {@link #rawScore}.", "Reference": "Places elements into order by increasing normalized {@link #getScore()}.", "NNUpdater": "Returns the raw score percentage."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "This method allows you to specify IterationListeners for this model.", "Reference": "This method allows you to specify trainingListeners for this model.", "NNUpdater": "Perform one training iteration."}
{"Origin": "Returns the selection listener that will be notified.", "Reference": "Returns the wakeup listener that will be notified.", "NNUpdater": "Returns the paths in the selection."}
{"Origin": "Sets the value.", "Reference": "Set the value.", "NNUpdater": "Sets the valueText."}
{"Origin": "If not, then this method adds a {@link ExtendedThrowableProxyConverter} instance to the end of the chain.", "Reference": "If not, then this method adds a {@link ThrowableProxyConverter} instance to the end of the chain.", "NNUpdater": "If not, then this method adds a {@link ExtendedThrowableProxyConverter} instance to the end of the chain."}
{"Origin": "Encodes the commit time into a key.", "Reference": "Encodes the txId into a key.", "NNUpdater": "Returns the member version."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Test of npara method, of class BernoulliDistribution.", "Reference": "Test of length method, of class BernoulliDistribution.", "NNUpdater": "Test of bernoulli method, of class DiscreteDistributions."}
{"Origin": "Calls {@link #getBlockDefinitionsJsonPaths()} and {@link #getBlockExtensions()}.", "Reference": "Calls {@link #getBlockDefinitionsJsonPaths()} and {@link #configureBlockExtensions()}.", "NNUpdater": "Operation fails."}
{"Origin": "Each {@link ExpressionId} should be unique.", "Reference": "Each {@link NameId} should be unique.", "NNUpdater": "Returns all whitelisted messages for this model, each with a unique id."}
{"Origin": "Assert or condition.", "Reference": "Assert conditions.", "NNUpdater": "Optimize or condition."}
{"Origin": "LabelNode if necessary.", "Reference": "Creates a new LabelNode if necessary.", "NNUpdater": "label1 and label2 in X.Y.Z-label1-lable2."}
{"Origin": "Creates a new {@link CreateIndexRequestBuilder} with the settings obtained from {@link #indexSettings()}, augmented by the given builder", "Reference": "Creates a new {@link CreateIndexRequestBuilder} with the settings obtained from {@link #indexSettings()}.", "NNUpdater": "Create a {@link OneTimeWorkRequest.Builder} with the given message."}
{"Origin": "Resolves a collection of root modules, with service binding, and with this configuration as its parent, to create a new configuration.", "Reference": "Resolves a collection of root modules, with this configuration as its parent, to create a new configuration.", "NNUpdater": "Resolves the resource configuration."}
{"Origin": "Returns whether the given site path points to a sub sitemap folder.", "Reference": "Returns whether the given resource is a sub sitemap folder.", "NNUpdater": "Creates a sub-sitemap from the subtree of the current sitemap starting at the given entry."}
{"Origin": "Repeatedly subscribe to the source {@literal numRepeat} times.", "Reference": "Repeatedly subscribe to the source {@code numRepeat} times.", "NNUpdater": "-F discretizerstring"}
{"Origin": "Finds all constraint annotations defined for the given member and returns them in a list of constraint descriptors.", "Reference": "Finds all constraint annotations defined for the given constrainable and returns them in a list of constraint descriptors.", "NNUpdater": "Finds all constraint annotations defined for the given field/method and returns them in a list of constraint descriptors."}
{"Origin": "Returns an offset date-time formed from this date at the specified time.", "Reference": "Returns a zoned date-time formed from this date at the specified time.", "NNUpdater": "Returns a ChronoLocalDateTime formed from this date at the specified time."}
{"Origin": "Processes the timestamping of the Signature.", "Reference": "Processes the time-stamping of the Signature.", "NNUpdater": "WicketTester."}
{"Origin": "A convenient blocking call that can be used, typically during table deletion, to wait for the table to become deleted by polling the table every 5 seconds.", "Reference": "A convenient blocking call that can be used, typically during table deletion, to wait for the table to become deleted.", "NNUpdater": "Returns the table with the specified logical table name."}
{"Origin": "get the preference key which stores the number of times the feature associated with the smart toast type has been used", "Reference": "returns the preference key which stores the number of times the feature associated with the smart toast type has been used", "NNUpdater": "Stores the parsed calendrical."}
{"Origin": "Put all the DynamoDB annotations.", "Reference": "Put all the DynamoDB annotations present on the annotated element.", "NNUpdater": "Developer Guide."}
{"Origin": "Defines whether optional tranformation of SPACE characters is to be used", "Reference": "Defines whether optional transformation of SPACE characters is to be used", "NNUpdater": "Required."}
{"Origin": "Adds the address of a Gremlin Server to the list of servers a {@link Client} will try to contact to send requests to.", "Reference": "Adds an address representing a group of Gremlin Servers, which will be added to the list of servers a {@link Client} will try to contact to send requests to.", "NNUpdater": "Sends a message to the server."}
{"Origin": "Obtains an instance from the specified unique name.", "Reference": "Obtains an instance from the specified name.", "NNUpdater": "Obtains the type from a unique name."}
{"Origin": "Try to find class source via getResourceAsStream().", "Reference": "Try to find class source using the internal repository instance.", "NNUpdater": "Equivalent to {@code transform(``transform``, func)}."}
{"Origin": "If more messages are sent or received, theses messages are dropped.", "Reference": "If more messages are sent, these messages are dropped.", "NNUpdater": "Set if messages are sent in an asynchronous fashion."}
{"Origin": "Each returned attribute will be prefixed with value provided in the prefix.", "Reference": "Each returned attribute will be prefixed with the string value provided in the prefix.", "NNUpdater": "The attribute values will be returned as an {@code Object[]} array from each projection call."}
{"Origin": "Returns the {@link logger} object used by the default implementation of the {@code Injector}.", "Reference": "Returns the {@link Logger} object used by the default implementation of the {@code Injector}.", "NNUpdater": "Specifies {@link jodd.madvoc.injector.RequestScopeInjector request scope injector} configuration."}
{"Origin": "or throws a {@link com.liferay.calendar.NoSuchNotificationTemplateException} if it could not be found.", "Reference": "or throws a {@link NoSuchNotificationTemplateException} if it could not be found.", "NNUpdater": "Operation fails."}
{"Origin": "Get the estimate for a preference.", "Reference": "Get the estimate for a getEntry.", "NNUpdater": "This will check if this Preference is persistent, get the SharedPreferences from the {@link PreferenceManager}, and get the value."}
{"Origin": "New attribute statement.", "Reference": "New attribute statement attribute statement.", "NNUpdater": "Add statement."}
{"Origin": "Set the index of the referenced table to use for this constraint.", "Reference": "Set the unique constraint of the referenced table to use for this constraint.", "NNUpdater": "Build an ELEMENT constraint: VALUE = TABLE[INDEX-OFFSET] where TABLE is an array of variables."}
{"Origin": "Structural Specification for more details.", "Reference": "The OWL 2 Structural Specification for more details.", "NNUpdater": "Returns the equivalent structural type."}
{"Origin": "Apply {@link #coerce(String, Type, CNode, DataContext)} method to a collection item.", "Reference": "Apply {@link #coerce(String, Type, TreeNode, DataContext)} method to a collection item.", "NNUpdater": "Operation fails."}
{"Origin": "See {@link #setPadding(int, int, int, int)}", "Reference": "See {@link #setPadding(float, float, float, float)}", "NNUpdater": "See {@link #logLikelihoodRatio(long, long, long, long)}."}
{"Origin": "Gets Java types from Soy type.", "Reference": "Gets Java type from Soy type.", "NNUpdater": "Creates a new SoyList initialized from the given values."}
{"Origin": "This method get the storeQuery and return the corresponding output and its types.", "Reference": "This method get the onDemandQuery and return the corresponding output and its types.", "NNUpdater": "Returns the types used in this query"}
{"Origin": "Create error value with given type, reason and details.", "Reference": "Create error value with given reason and error details.", "NNUpdater": "Returns the error value."}
{"Origin": "Returns the resource types.", "Reference": "Returns the resourceTypes.", "NNUpdater": "Returns the types map."}
{"Origin": "Second, the very last access will always be recorded.", "Reference": "The very last access will always be recorded.", "NNUpdater": "Adds a recorded duration in nanoseconds."}
{"Origin": "Properties in those configs (e.g.", "Reference": "Properties in those XML configs (e.g.", "NNUpdater": "Sets the configurations for this application."}
{"Origin": "Adds a control metadata.", "Reference": "Adds a packet metadata.", "NNUpdater": "Adds a control metadata."}
{"Origin": "Submits a Runnable task for execution and returns a Future representing that task.", "Reference": "Submits a {@link RepeatedTask} for execution and returns a Future representing that task.", "NNUpdater": "Parses for specific command task."}
{"Origin": "stores that the list of permissions has been asked", "Reference": "remember that the list of permissions has been asked", "NNUpdater": "This stores a complete object that has been parsed."}
{"Origin": "The {@link EcKeyCreateOptions#getCurve() key curve} can be optionally specified.", "Reference": "The {@link CreateEcKeyOptions#getCurveName() key curve} can be optionally specified.", "NNUpdater": "The {@link EcKeyCreateOptions#getCurve() key curve} can be optionally specified."}
{"Origin": "Sets the value of the 'KeepDeletedCells' field.", "Reference": "Sets the value of the 'keepDeletedCells' field.", "NNUpdater": "Sets the value of the 'paramName' field."}
{"Origin": "Any data that overlaps existing data from the {@link DataHolder} will take priority and be overwritten from the pre-existing data from the {@link DataHolder}.", "Reference": "Any data that overlaps existing data from the {@link ValueContainer} will take priority and be overwritten from the pre-existing data from the {@link ValueContainer}.", "NNUpdater": "Set the 'from' data type name."}
{"Origin": "Loads the list of {@link BlockExtension}s that support the block definitions in this activity.", "Reference": "Sets up the list of {@link BlockExtension}s that support the block definitions in this activity.", "NNUpdater": "Gets a list of {@link ScheduledTaskEntry}s on this block."}
{"Origin": "Decode dashes (encoded in {@link CamelMessagingHeadersInjectAdapter}", "Reference": "Decode dashes (encoded in {@link CamelMessagingHeadersInjectAdapter} Dash encoding and decoding is required by JMS.", "NNUpdater": "Reset fields annotated with {@link FindView @FindView} and {@link FindViews @FindViews} to {@code null}."}
{"Origin": "Returns the account with the primary key or throws a {@link com.liferay.mail.NoSuchAccountException} if it could not be found.", "Reference": "Returns the account with the primary key or throws a {@link NoSuchAccountException} if it could not be found.", "NNUpdater": "Account account = new Account(``Acct `` + i); mAccountsDbAdapter.addRecord(account); }"}
{"Origin": "Checks for internet connection and then initializes the recycler view with all(max 500) categories of the searched query", "Reference": "Checks for internet connection and then initializes the recycler view with 25 categories of the searched query", "NNUpdater": "Constructor."}
{"Origin": "Also noteworthy is that no clean up is performed if an error occurs in the midst of a transfer: files that have been copied (even partially) are left in the destination.", "Reference": "In that case, no clean up is performed if an error occurs in the midst of a transfer: files that have been copied (even partially) are left in the destination.", "NNUpdater": "Send an error message."}
{"Origin": "Logs collection, string and throws {@link java.lang.AssertionError}, if not.", "Reference": "Logs collection, element and throws {@link java.lang.AssertionError}, if not.", "NNUpdater": "Creates a String of {@code CharSequence}."}
{"Origin": "Chesks if the model page menu entry should be visible.", "Reference": "Checks if the model page menu entry should be visible.", "NNUpdater": "Closes the menu."}
{"Origin": "Add the argument to the value of this integer.", "Reference": "Add the argument to the value of this long.", "NNUpdater": "Returns the Soy integer value."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "First, try to find the exact identical instance of the tile object, if not found, then try to find a tile has the same title.", "Reference": "First, try to find the exact identical instance of the tile object, if not found, then try to find a tile has the same id.", "NNUpdater": "Checks if this tile can connect to another tile"}
{"Origin": "Closes the current writer", "Reference": "Closes and removes the current writer", "NNUpdater": "Stop."}
{"Origin": "Method is able to create form incoming class and {@link Descriptor jersey descriptor} a {@link ForeignDescriptor} which is provided by underlying DI provider.", "Reference": "Method is able to create form incoming class and {@link Binding jersey descriptor} a {@link ForeignDescriptor} which is provided by underlying DI provider.", "NNUpdater": "Finds a descriptor by their {@link Descriptor#getId()}."}
{"Origin": "To return a list of vaults that begins at a specific vault, set the request parameter to the vault ARN you obtained from a previous List Vaults request.", "Reference": "To return a list of vaults that begins at a specific vault, set the marker request parameter to the vault ARN you obtained from a previous List Vaults request.", "NNUpdater": "Set the key vault reference."}
{"Origin": "Optimizes a function, which may return an empty sequence if the first argument yields nothing.", "Reference": "Optimizes a function that returns an empty sequence when the first argument is empty as well.", "NNUpdater": "Checks if the specified expression yields a string or binary item."}
{"Origin": "Compares that two secrets are equal.", "Reference": "Compares that two secrets are equal and not null.", "NNUpdater": "Compares two CharSequences, returning if they are equal."}
{"Origin": "1. a conventional compass needle pointing north/south (false, default) 2. a pointer arrow that indicates the device's real world orientation on the map (true)", "Reference": "false - a conventional compass needle pointing north/south (false, default) true - a pointer arrow that indicates the device's real world orientation on the map (true)", "NNUpdater": "Return orientation of line relative to east."}
{"Origin": "Read the blob metadata document in the CosmosDB collection, retrying as necessary.", "Reference": "Read the blob metadata document in the CosmosDB collection.", "NNUpdater": "Returns the MongoCollection object for the collection in db dbName."}
{"Origin": "Rethrow a {@link Throwable} as an unchecked exception.", "Reference": "Rethrows a {@link Throwable} as an unchecked exception.", "NNUpdater": "Rethrow an {@link java.lang.Throwable} preserving the stack trace but making it unchecked."}
{"Origin": "The address should be parseable by {@link InetAddress#getByName(String)}.", "Reference": "The address should be parseable by {@link InetAddress#getAllByName(String)}.", "NNUpdater": "If this is not known, use {@link #inetAddress(InetAddress)} instead."}
{"Origin": "The user who created the comment.", "Reference": "The user uuid who created the comment.", "NNUpdater": "Sets the user id of the user who changed the content in this file."}
{"Origin": "Iterate over all the {@link KeyProperties key} by page and call {@link KeyClient#getKey(KeyProperties key properties)}.", "Reference": "Iterate over all the {@link KeyProperties key} by page and call {@link KeyClient#getKey(String, String)}.", "NNUpdater": "Iterate over all the {@link KeyProperties key} by page and call {@link KeyClient#getKey(KeyProperties key properties)}."}
{"Origin": "whether it gives you labeled or unlabeled bracketings depends on the value of the {@code labelConstituents} parameter", "Reference": "whether it gives you labeled or unlabeled bracketings depends on the value of the parameter", "NNUpdater": "Depends on the given action value."}
{"Origin": "If {@code keys = ``abc*``}, settings with a key starting with ``abc`` are returned.", "Reference": "If {@code keyFilter = ``abc*``}, settings with a key starting with ``abc`` are returned.", "NNUpdater": "If {@code keys = ``abc*``}, settings with a key starting with ``abc`` are returned."}
{"Origin": "Sets the units of this drug order", "Reference": "Sets the doseUnits of this drug order", "NNUpdater": "Most units are related to other units."}
{"Origin": "This method logs a warning if the class cannot be registered.", "Reference": "This method LOGs a warning if the class cannot be registered.", "NNUpdater": "This method returns {@code null} if the class cannot be found or not defined in the specified module."}
{"Origin": "Handles an iterate commit.", "Reference": "Handles an iterator next commit.", "NNUpdater": "Handles a log write."}
{"Origin": "Updates the feedback response identified by {@code newAttributes.getId()}.", "Reference": "Updates a feedback response with {@link FeedbackResponseAttributes.UpdateOptions}.", "NNUpdater": "Operation fails."}
{"Origin": "The option is a:", "Reference": "The option is a: type.", "NNUpdater": "Returns the {@link OptionsBase} class the defines the given option, null if the option isn't recognized."}
{"Origin": "If any of the fields in or the s timeField is missing from the JOSN inputIndex an exception is thrown", "Reference": "If any of the fields in or the s timeField is missing from the JSON inputIndex an exception is thrown", "NNUpdater": "Returns an IndexService for the specified index if exists otherwise a {@link IndexNotFoundException} is thrown."}
{"Origin": "Set this matrix to the rotation transformation of the given {@link Quaterniond}.", "Reference": "Set this matrix to the rotation transformation of the given {@link Quaterniondc}.", "NNUpdater": "Set this matrix to the rotation transformation of the given {@link Quaternionf}."}
{"Origin": "Reset all labels in the instruction list.", "Reference": "Resets all the labels in the instruction list.", "NNUpdater": "The instruction which produces the input value to this instruction."}
{"Origin": "Attempt to get a user by EID or ID (if that fails)", "Reference": "Attempt to get a user by AID, EID or ID", "NNUpdater": "Get user by user id."}
{"Origin": "Executes a long work instances on a single node and verifies that it took enough time and executed on the expected node (the other one since Policy.ALWAYS)", "Reference": "Executes a long work instances on a single node and verifies that it took enough time and executed on the expected node.", "NNUpdater": "It will add the nodeType (type = map), create a new entry in the node childs map with a empty list, since this node represents a new parent node."}
{"Origin": "escapes character data in val", "Reference": "escapes character data in val and attributes", "NNUpdater": "The nullValue of the type"}
{"Origin": "Tests for the {@link BaseFileSystem#mount(AlluxioURI, AlluxioURI, MountOptions)} method.", "Reference": "Tests for the {@link BaseFileSystem#mount(AlluxioURI, AlluxioURI, MountPOptions)} method.", "NNUpdater": "Tests for the {@link BaseFileSystem#mount(AlluxioURI, AlluxioURI, MountOptions)} method."}
{"Origin": "For transforms returned via GET data_frame/transforms, see the @link{TransportGetTransformAction}", "Reference": "For transforms returned via GET _transform, see the @link{TransportGetTransformAction}", "NNUpdater": "For use by {@code DirectGroupByKeyOnly} {@link PTransform PTransforms}."}
{"Origin": "Based on vmchk/checkinterntable.c r1.3", "Reference": "Based on runtime/vmchk/checkinterntable.c", "NNUpdater": "Operation fails."}
{"Origin": "Sets the inetAddress from where the authentication attempt occurs.", "Reference": "Sets the host name or IP string from where the authentication attempt occurs.", "NNUpdater": "If this is not known, use {@link #inetAddress(InetAddress)} instead."}
{"Origin": "Shuts down the managed channel.", "Reference": "Tries to gracefully shut down the managed channel.", "NNUpdater": "Shuts down the request worker."}
{"Origin": "Sequences an event.", "Reference": "Sequences the given event.", "NNUpdater": "Adds an event."}
{"Origin": "Convert to object types, returning null if text is null.", "Reference": "Convert to object types, returning null if text is null or empty.", "NNUpdater": "IsNullOrEmpty {is null or empty}."}
{"Origin": "Asserts that all channels of the processor channel combination, processed the correct number of messages", "Reference": "Asserts that source channel, processed the correct number of messages", "NNUpdater": "Asserts that the expected minimum number of messages were processed by the modules in the stream and that no errors occurred."}
{"Origin": "Returns the list of unique classpath element paths as URLs, in classloader resolution order.", "Reference": "Returns an ordered list of unique classpath element and module URLs.", "NNUpdater": "Parses the classpath into an array of URLs"}
{"Origin": "This exist for backward compatibility and exist for internal usage only (do not call this method explicitly).", "Reference": "This exist for backward compatibility and for internal usage only (do not call this method explicitly).", "NNUpdater": "This function is only for internal usage only and should not be called."}
{"Origin": "If set to false, an exception in CuDNN will be propagated back to the user.", "Reference": "If set to false, an exception in the helper will be propagated back to the user.", "NNUpdater": "Return an unchecked {@link RuntimeException} to be thrown that will bubble upstream."}
{"Origin": "This method allows you to specify IterationListeners for this model.", "Reference": "This method allows you to specify trainingListeners for this model.", "NNUpdater": "Perform one training iteration."}
{"Origin": "If no such module has been set, or if something wrong occurred, null will be returned.", "Reference": "If no valid module has been set null will be returned.", "NNUpdater": "If there is no such key or if the value is not positive, returns {@code null}."}
{"Origin": "Tries to refine the compile-time type of this variable through the type of the bound expression.", "Reference": "Tries to refine the type of this variable through the type of the bound expression.", "NNUpdater": "Sequence type of values bound to this variable."}
{"Origin": "sort a list object: {@code List>}", "Reference": "sort a list of objects: {@code List>}", "NNUpdater": "Returns the metadata."}
{"Origin": "Better way to change consumers are use {@link DataCarrier#consume}", "Reference": "Better way to change consumeDriver are use {@link DataCarrier#consume}", "NNUpdater": "consumer begin to run when {@link DataCarrier#produce(T)} begin to work with 20 millis consume cycle."}
{"Origin": "Defaults to {@link DefaultInstructionAckSource}.", "Reference": "DefaultInstructionAckSource}.", "NNUpdater": "Defaults to ``AUTO``."}
{"Origin": "It is just the logging that guava tries to do that may disrupt thing when initializing the logging infrastructure.", "Reference": "It is just the logging that Guava tries to do that may disrupt thing when initializing the logging infrastructure.", "NNUpdater": "Sets the format to use when logging responses."}
{"Origin": "Upcalled from embedded mode to (really) commit suicide.", "Reference": "Upcalled from embedded mode via JNI to (really) commit suicide.", "NNUpdater": "Upcalled from embedded mode to (really) commit suicide."}
{"Origin": "This is another deliberately racy call, that should only be done in controlled circumstances, e.g.", "Reference": "This is another deliberatly racy call, that should only be done in controlled circumstances, e.g.", "NNUpdater": "NodeEntry#addReverseDepAndCheckIfDone}."}
{"Origin": "Calculate the area of all and blocks", "Reference": "Calculate the area of:", "NNUpdater": "Blocks the specified subnet."}
{"Origin": "Sets the {@link UUID} of the request.", "Reference": "Sets the {@link RequestId}.", "NNUpdater": "Returns a {@link SchemaBuilder} for a Point field."}
{"Origin": "Selects the option(s) with the given text.", "Reference": "Selects the option with the given text.", "NNUpdater": "Returns the {@link OptionsBase} class the defines the given option, null if the option isn't recognized."}
{"Origin": "Provide a {@link Mutate} {@link PTransform} to write data to a Cassandra database.", "Reference": "Provide a {@link Write} {@link PTransform} to write data to a Cassandra database.", "NNUpdater": "Returns a new {@link Write} that will write to the current {@link Sink} using the specified {@link PTransform} to compute the number of shards."}
{"Origin": "or throws a {@link com.liferay.knowledgebase.NoSuchTemplateException} if it could not be found.", "Reference": "or throws a {@link NoSuchTemplateException} if it could not be found.", "NNUpdater": "Operation fails."}
{"Origin": "The {@link RequestScope.Instance scope instance} is NOT released by the method (this must be done explicitly).", "Reference": "The {@link RequestContext scope context} is NOT released by the method (this must be done explicitly).", "NNUpdater": "Maps a {@link Scope} instance to a given annotation."}
{"Origin": "When an interceptor throws an unexpected exception, asynchronous callers are left hanging.", "Reference": "When an interceptor throws an unexpected exception, asynchronous calls are canceled.", "NNUpdater": "If an UnexpectedExceptionInformation is not found for the status code the default UnexpectedExceptionInformation will be returned."}
{"Origin": "Return the {@link SharedMemory} channel that the Plugin and its related classes use for outgoing messages to the upstream service.", "Reference": "Return the {@link InterProcessCommunication} channel that the Plugin and its related classes use for outgoing messages to the upstream service.", "NNUpdater": "Returns the upstream {@link Format} in which samples are being queued."}
{"Origin": "Returns a {@link Function} which produces a {@link Service} wrapped with an {@link ExceptionFilteredHttpResponseDecorator}.", "Reference": "Returns a {@link Function} which produces an {@link HttpService} wrapped with an {@link ExceptionFilteredHttpResponseDecorator}.", "NNUpdater": "Returns a new {@link HttpResponseException} instance with the specified {@link HttpStatus}."}
{"Origin": "Handle a single syncrhonization request for the given server by adding the needed files to the payload.", "Reference": "Handle a single synchronization request for the given server by adding the needed files to the payload.", "NNUpdater": "Sets entity for the request or the content from the response."}
{"Origin": "Set the peer address only if the previous peer address that had the same peer ID.", "Reference": "Sets a new PeerAddress, but only if the previous had the same peer ID.", "NNUpdater": "Updates the peer's PeerAddress: Adds the relay addresses to the peer address, updates the firewalled flags, and bootstraps to announce its new relay peers."}
{"Origin": "When using CuDNN and an error is encountered, should fallback to the non-CuDNN implementatation be allowed?", "Reference": "When using CuDNN or MKLDNN and an error is encountered, should fallback to the non-helper implementation be allowed?", "NNUpdater": "Finds the best fallback for the given exception type and apply it to the exception or throw the original error if no fallback found."}
{"Origin": "Assign a voice to this chord, and to the related ones.", "Reference": "Assign a voice to this chord, and recursively propagate to the following chords related by beam or tie.", "NNUpdater": "Assign a voice to this chord"}
{"Origin": "Add insert optimize result unit into units.", "Reference": "Add optimized insert value.", "NNUpdater": "JDBC VERSION Insert the contents of the insert row into the result set and the database."}
{"Origin": "Creates a default DBScan", "Reference": "Creates a default DBSCAN", "NNUpdater": "Creates a new DB instance from a DB snapshot."}
{"Origin": "BytesRef: int[] floats encoded as integers values, 2 bytes for each dimension", "Reference": "BytesRef: int[] floats encoded as integers values, 2 bytes for each dimension, length of vector", "NNUpdater": "Writes the binary content of the given byte array as UTF-8 bytes."}
{"Origin": "The factory itself is bound in a per-lookup scope.", "Reference": "The supplier itself is bound in a per-lookup scope.", "NNUpdater": "InScope {in ('a', 'b')}."}
{"Origin": "Creates a jar file from the resources and given dex file array.", "Reference": "Creates a jar file from the resources (including dex file arrays).", "NNUpdater": "Get a new jar file stream from the given file."}
{"Origin": "We defer initialization of this member until after the atomic bucket creation phase is over.", "Reference": "Overridden to defer initialization of this member until after the atomic bucket creation phase is over.", "NNUpdater": "Order of initialization is"}
{"Origin": "Returns a {@link PointerBuffer} view of the {@code data.l} field.", "Reference": "Returns a {@link CLongBuffer} view of the {@code data.l} field.", "NNUpdater": "Returns a {@link YGValue}.Buffer view of the {@code resolvedDimensions} field."}
{"Origin": "See Immutable List Static Factory Methods for details.", "Reference": "See Unmodifiable Lists for details.", "NNUpdater": "The returned List is immutable."}
{"Origin": "returns the ``me`` fragment from the sites tab", "Reference": "returns the ``me`` fragment from the sites page", "NNUpdater": "Set the resource id for the fragmentContainer for this hub."}
{"Origin": "Get the value of reportFormat.", "Reference": "Get the value of junitFailOnCVSS.", "NNUpdater": "Get Kann Berichte erstellen."}
{"Origin": "Helper to get a list of user eids in a group", "Reference": "Helper to get a list of user display ids in a group", "NNUpdater": "Get Nutzer 1."}
{"Origin": "The node type(s) that are implicitly allocated to this", "Reference": "The node type that is implicitly allocated to this", "NNUpdater": "Gets the free count."}
{"Origin": "The default value of this attribute is {@code 40}.", "Reference": "The default value of this attribute is {@code VERSION}.", "NNUpdater": "The model supports k = 5 ... 50."}
{"Origin": "The return value indicates whether a frame could be skipped.", "Reference": "The return value indicates whether the full frame could be skipped.", "NNUpdater": "Returns whether the buffer being processed should be dropped."}
{"Origin": "Gets the resolution of the bitstream that this instance represents.", "Reference": "Gets the height of the bitstream that this instance represents.", "NNUpdater": "Gets the local millisecond instant of this instance."}
{"Origin": "Stub of {@link Plugin#didDeclareProperty(TypeSpec.Builder, PropertyGenerator, FieldSpec)} for subclasses to override", "Reference": "Stub of {@link Plugin#afterDeclareProperty(TypeSpec.Builder, PropertyGenerator, FieldSpec)} for subclasses to override", "NNUpdater": "Operation fails."}
{"Origin": "Removes the given {@code key} from the local entity map, and then broadcasts the removal to all nodes in the cluster.", "Reference": "Removes the given {@code key} from the local entity map, and broadcasts the operation to all nodes in the cluster.", "NNUpdater": "Returns the local clusters."}
{"Origin": "The entity is validated such that the account is allowed to log in before returning.", "Reference": "Validates the user account such that the user is allowed to log in.", "NNUpdater": "The message of the exception is ``The validated object is null``."}
{"Origin": "Creates a new {@link MetadataEntity} which consists of the given key and values following the key and values of this {@link MetadataEntity}", "Reference": "Creates a new {@link MetadataEntity} which consists of the given key and values following the key and values of this {@link MetadataEntity} and is of type of the given key.", "NNUpdater": "For example, the {@link #metadata} values will be stored in the model with a key of where is the key from the metadata object."}
{"Origin": "This is a mutually exclusive option to {@link #samlServiceProvider(ServiceProviderResolver)}", "Reference": "This is a mutually exclusive option to {@link #saml2Login(ServiceProviderResolver)}", "NNUpdater": "Mutually exclusive with {@link #fromSubscription(String)}."}
{"Origin": "Return the response body as a string.", "Reference": "Return the response body converted to String.", "NNUpdater": "Return the response body as a string."}
{"Origin": "{@value #getExtension()}}", "Reference": "{@value #getExtensions()}}", "NNUpdater": "Operation fails."}
{"Origin": "Stub of {@link Plugin#willDeclareGetter(TypeSpec.Builder, PropertyGenerator, MethodSpec.Builder)} for subclasses to override", "Reference": "Stub of {@link Plugin#beforeDeclareGetter(TypeSpec.Builder, PropertyGenerator, MethodSpec.Builder)} for subclasses to override", "NNUpdater": "Operation fails."}
{"Origin": "Returns the length of this path.", "Reference": "its number of steps.", "NNUpdater": "Returns the absolute file path."}
{"Origin": "Position attributes, provide the ability to associate arbitrary information with a position in a key-value map.", "Reference": "Position attributes provide the ability to associate arbitrary information in a key-value map.", "NNUpdater": "Moves the item placed at position {@code fromPosition} to the position {@code toPosition}."}
{"Origin": "Returns a new Coord4D from a ByteBuf.", "Reference": "Returns a new Coord4D from a PacketBuffer.", "NNUpdater": "Returns a new Coord4D from a ByteBuf."}
{"Origin": "Sets the list of package groups and the order they should occur in the file.", "Reference": "Sets the list of package groups for type imports and the order they should occur in the file.", "NNUpdater": "Sets the modifiable list of root groups."}
{"Origin": "Can be used to get the Mimetype", "Reference": "Can be used to get the MimeType", "NNUpdater": "If MIME type unknown, show list with all apps."}
{"Origin": "Gets a localized message string based on the locale determined by the", "Reference": "Gets a localized message string based on the locale determined by the FacesContext.", "NNUpdater": "Returns a String describing this resource loader, which is (localized to the system default locale) ."}
{"Origin": "Wrap this {@link ClassPathLoader} with a {@link ClassLoader} facade.", "Reference": "Wrap this {@code ClassPathLoader} with a {@code ClassLoader} facade.", "NNUpdater": "From {@link Class#getClassLoader() callingClass.getClassLoader() }"}
{"Origin": "Returns the {@link ImageCapture.CaptureMode}.", "Reference": "Returns the {@link CaptureMode}.", "NNUpdater": "Set Capture Sequence."}
{"Origin": "However, the problem with exposing the information is that people running from an IDE can observe stale data from old class files left from a previous build of a JAR.", "Reference": "However, people running from an IDE will observe stale data from old class files left from a previous build of a JAR.", "NNUpdater": "Delete the all dependency files from a given application."}
{"Origin": "Quotes can be used to include spaces.", "Reference": "The input can be wrapped with quotes.", "NNUpdater": "and / with _ and removes all spaces and double/single quotes."}
{"Origin": "To build the logical StaffBarline's, PartBarline's and Measures, the strategy is:", "Reference": "To build the logical StaffBarlineInter's, PartBarline's and Measures, the strategy is:", "NNUpdater": "Insert a barline inter as part of the logical barline."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "If an element has many classes then this will match against each of them.", "Reference": "If an element has multiple classes, then this will match against each of them.", "NNUpdater": "Iterate over a number of filter rules and match them against the given request."}
{"Origin": "Saves the last gallery.", "Reference": "Saves the last gallery for a given key.", "NNUpdater": "Returns a list of gallery items (resources) for the currently selected gallery and resource type id."}
{"Origin": "Invalidates are not allowed more frequently than {@link ControllerLeaderLocator::MILLIS_BETWEEN_INVALIDATE} millis.", "Reference": "Invalidates are not allowed more frequently than {@link ControllerLeaderLocator::MIN_INVALIDATE_INTERVAL_MS} millis.", "NNUpdater": "The {@code intervalMillis} must be greater than or equal to {@link PeriodicWork#MIN_PERIODIC_INTERVAL_MILLIS}."}
{"Origin": "Retrieves the genre name for this track.", "Reference": "Retrieves the genres for this track.", "NNUpdater": "Reads and parses the genre from the file and fires events for each genre."}
{"Origin": "Get the application-configured HK2 service locator.", "Reference": "Get the application-configured instance manager.", "NNUpdater": "Get the iterable of all providers (custom and default) registered for the given service provider contract in the underlying {@link ServiceLocator HK2 service locator} container."}
{"Origin": "Returns the singleton component database instance.", "Reference": "Returns the component database for the current project", "NNUpdater": "Returns an instance that is possibly shared (singleton)."}
{"Origin": "Adds an address representing a group of Gremlin Servers, which will be added to the list of servers a {@link Client} will try to contact to send requests to.", "Reference": "Adds the address of a Gremlin Server to the list of servers a {@link Client} will try to contact to send requests to.", "NNUpdater": "Resets the member selector."}
{"Origin": "It is convenient to create the map entries using the {@link Maps2#entry Maps.entry()} method.", "Reference": "It is convenient to create the map entries using the {@link Maps2#entry Maps2.entry()} method.", "NNUpdater": "Returns the site path."}
{"Origin": "The meta-property for the {@code price} property.", "Reference": "The meta-property for the {@code tradedPrice} property.", "NNUpdater": "The meta-property for the {@code initialPrice} property."}
{"Origin": "In case the {@code parent} instance manager is not specified, the locator will not be parented.", "Reference": "In case the {@code parent} injection manager is not specified, the locator will not be parented.", "NNUpdater": "Returns the method binding which is the parent of the specified node, as a node may be parented by a lambda, method reference or a method."}
{"Origin": "Returns {@link SessionToken2} so that developers create their own {@link androidx.media2.MediaController2} instance.", "Reference": "Returns {@link SessionToken} so that developers create their own {@link androidx.media2.MediaController} instance.", "NNUpdater": "Gets {@link Set} of {@link SessionToken2} for {@link MediaSessionService2} regardless of their activeness."}
{"Origin": "Note that the returned {@link Bits} instance MUST be consumed in order.", "Reference": "NOTE: that the returned {@link Bits} instance MUST be consumed in order.", "NNUpdater": "Note that the returned {@link Bits} instance MUST be consumed in order."}
{"Origin": "Use reflection to discover and report on the bigdata build information.", "Reference": "Method used to discover and report on the bigdata build information.", "NNUpdater": "A {@link BigdataValueFactoryImpl}"}
{"Origin": "You can restore to any point in time before the time identified by the", "Reference": "You can restore to any point in time before the time identified by the LatestRestorableTime property.", "NNUpdater": "Retrieves the historic item for a given at a certain point in time through a {@link PersistenceService} identified by the ."}
{"Origin": "This method sets the value of the database column m_prj_risk.probalitity", "Reference": "This method sets the value of the database column m_prj_risk.probability", "NNUpdater": "This method sets the value of the database column m_prj_risk.prjKey"}
{"Origin": "One way to ensure this is to always call {@link #declareLabel declared} before calling this method.", "Reference": "One way to ensure this is to always call {@link #declareLabel} before calling this method.", "NNUpdater": "This is equivalent to calling:"}
{"Origin": "Attempt to transform this Monad to the same type as the supplied Monoid (using mapToType on the monoid interface)", "Reference": "Attempt to transform this Stream to the same type as the supplied Monoid (using mapToType on the monoid interface)", "NNUpdater": "Monoid add = Monoid.of(1,Semigroups.intSum);"}
{"Origin": "Test for bug described in {@link URL}.", "Reference": "Test for bug described in URL", "NNUpdater": "See URL()"}
{"Origin": "write the list produced by calling extractResourcesToFolder to the given file with system line separator compact sikulixcontent format", "Reference": "write the list as it is produced by calling extractResourcesToFolder to the given file with system line separator compact sikulixcontent format", "NNUpdater": "Returns the list of deleted folders resources in reversed order."}
{"Origin": "Resolves all keys within the given chain.", "Reference": "Resolves all keys within the given chain to their equivalent put operations.", "NNUpdater": "Returns a new QName."}
{"Origin": "Unless overridden by the {@link #setCipher} method, the default instance is a {@link BlowfishCipher}.", "Reference": "Unless overridden by the {@link #setCipherService} method, the default instance is an {@link AesCipherService}.", "NNUpdater": "Gets the Java Cryptography Architecture transformation corresponding to the suite's underlying cipher algorithm."}
{"Origin": "Get Quantity Invoiced.", "Reference": "Get Berechn.", "NNUpdater": "Get Berechn."}
{"Origin": "Method handles the case where there are downstream operators awaiting last pass evaluation is not re-triggered by the last {@link IChunkMessage} output from an upstream operator.", "Reference": "Method handles the case where there are downstream operators awaiting last pass evaluation or at-once evaluation is not re-triggered by the last {@link IChunkMessage} output from an upstream operator.", "NNUpdater": "The last completed future is the same as retrieved with {@link #last()}."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Get the {@link TransportAction} for an {@link Action}, throwing exceptions if the action isn't available.", "Reference": "Get the {@link TransportAction} for an {@link ActionType}, throwing exceptions if the action isn't available.", "NNUpdater": "Get Aktion."}
{"Origin": "However, since we inject the ConstantAnnotationMarker the Annotation proxy types for ahead-of-time allocated annotations implement two interfaces.", "Reference": "However, since we inject the constant-annotation-marker interface the Annotation proxy types for ahead-of-time allocated annotations implement two interfaces.", "NNUpdater": "annotation* SEMICOLON"}
{"Origin": "Configure a {@code Function} to evaluate a {@link RSocketOutboundGateway.Command} for RSocket request type at runtime against a request message.", "Reference": "Configure a {@link Function} to evaluate an {@link RSocketOutboundGateway.Command} for the RSocket request type at runtime against a request message.", "NNUpdater": "Sets the {@see SocketOptions#IP_TOS} value for every packet sent by this socket."}
{"Origin": "see {@link InstanceInfo#getDefaultAddress()} for explanation on why the hostname is used as the default address", "Reference": "see {@link InstanceInfo#getHostName()} for explanation on why the hostname is used as the default address", "NNUpdater": "(Default: false)"}
{"Origin": "Test that a JAR file with a Main-Class attribute that is not a valid", "Reference": "Test that a JAR file with a Main-Class attribute that is not a qualified type name.", "NNUpdater": "Generates a JAR file that contains zero or more classes with a static main method."}
{"Origin": "This factory converts the arbitrary date-time object to an instance of {@code LocalTime}.", "Reference": "This factory converts the arbitrary temporal object to an instance of {@code LocalTime}.", "NNUpdater": "This factory converts the arbitrary date-time object to an instance of {@code LocalDateTime}."}
{"Origin": "It can be configured by adjusting the aeron.client.liveness.timeout property on the media driver.", "Reference": "It can be configured by adjusting the {@code aeron.client.liveness.timeout} property on the media driver.", "NNUpdater": "Is a media driver active in the current mapped CnC buffer?"}
{"Origin": "A convenient blocking call that can be used, typically during table creation, to wait for the table to become active by polling the table every 5 seconds.", "Reference": "A convenient blocking call that can be used, typically during table creation, to wait for the table to become active.", "NNUpdater": "Returns the table with the specified logical table name."}
{"Origin": "The reconnectionDelay property takes a positive integer representing the number of milliseconds to wait between each failed connection attempt to the server.", "Reference": "The reconnectionDelay property takes a positive {@link Duration} value representing the time to wait between each failed connection attempt to the server.", "NNUpdater": "Sets the initial redelivery delay in milliseconds"}
{"Origin": "Returns the content for the specified pre value.", "Reference": "Returns textual contents for a rectangle.", "NNUpdater": "Returns a pre value for the specified id."}
{"Origin": "The {@link KeyCreateOptions#isEnabled() enabled} field is set to true by Azure Key Vault, if not specified.", "Reference": "The {@link CreateKeyOptions#isEnabled() enabled} field is set to true by Azure Key Vault, if not specified.", "NNUpdater": "The {@link Secret#isEnabled() enabled} field is set to true by key vault, if not specified."}
{"Origin": "Amazon SimpleDB to optimize requests and generally produce better throughput.", "Reference": "SimpleDB to optimize requests and generally produce better throughput.", "NNUpdater": "Setting the throughput for a table helps you manage performance and is part of the provisioned throughput feature of DynamoDB."}
{"Origin": "This operation retrieves the subresource of the specified vault.", "Reference": "This operation retrieves the notification-configuration subresource of the specified vault.", "NNUpdater": "Retrieves the contents of the specified file, or opens it externally."}
{"Origin": "Returns JSON value with the specified content.", "Reference": "Returns JSON value with the specified string content.", "NNUpdater": "Returns the element at the specified index."}
{"Origin": "Converts a BucketOptions to a DBObject for use by the Java driver.", "Reference": "Converts a BucketOptions to a Document for use by the Java driver.", "NNUpdater": "Converts a java object to a mongo-compatible object (possibly a DBObject for complex mappings)"}
{"Origin": "Appends the name of the given label to {@link #buf buf}.", "Reference": "Appends the name of the given label to {@link #stringBuilder}.", "NNUpdater": "Writes rec file position to given {@code buf}."}
{"Origin": "If available, the value is returned, otherwise a new uid is generated and placed within the {@link Map}.", "Reference": "If available, the value is returned, otherwise a new name is generated and returned.", "NNUpdater": "If the value is not set, the given {@code defaultValue} is returned, if the {@link Value} is even supported."}
{"Origin": "This year-month will be passed to the formatter {@link DateTimeFormatter#print(TemporalAccessor) print method}.", "Reference": "This year-month will be passed to the formatter {@link DateTimeFormatter#format(TemporalAccessor) print method}.", "NNUpdater": "This time will be passed to the formatter {@link DateTimeFormatter#format(TemporalAccessor) format method}."}
{"Origin": "Returns a value with the given element type containing the items in this list.", "Reference": "Returns a value with the type of the given expression.", "NNUpdater": "Creates an array containing all items of this value."}
{"Origin": "Returns the global {@link MeterRegistry} to which components are registered.", "Reference": "Returns the global {@link MetricRegistry} to which components are registered.", "NNUpdater": "Returns the global {@link MeterRegistry} to which components are registered."}
{"Origin": "Sets the bottom border for a region of cells by manipulating the cell style of the individual cells on the bottom", "Reference": "Sets the bottom border style for a region of cells by manipulating the cell style of the individual cells on the bottom", "NNUpdater": "Sets the left border for a region of cells by manipulating the cell style of the individual cells on the left"}
{"Origin": "Send request to the server with early blockwise negociation through block2 option.", "Reference": "Send request to the server with early blockwise negotiation through block2 option.", "NNUpdater": "Sends a message to the server."}
{"Origin": "Removes a job.", "Reference": "Unregisters a job.", "NNUpdater": "Gets or creates job instance."}
{"Origin": "Convert to primitive types, returning default value if text is null.", "Reference": "Convert to boolean, returning default value if text is inconvertible.", "NNUpdater": "Convert all types, both reference and primitive, to {@code Object}."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Converts an int array to an Integer {@link List}.", "Reference": "Adapts an int array to an Integer {@link List}.", "NNUpdater": "Converts the provided Integer List to an int array."}
{"Origin": "Installs this {@link ExTreeModel} into the specified {@link WebExTree}.", "Reference": "Installs this {@link ExTreeModel} into the specified {@link WebTree}.", "NNUpdater": "Given indexField = a, tag = tag, would produce the following String: {!tag=a}."}
{"Origin": "Create a QuickConnection object from a GuacamoleConfiguration and get an ID and place it on the tree, returning the new connection identifier value.", "Reference": "Create a SimpleConnection object from a GuacamoleConfiguration and get an ID and place it on the tree, returning the new connection identifier value.", "NNUpdater": "Creates a new connection and returns the new connection, with identifier field populated."}
{"Origin": "{@code EPOCH_MONTH} -", "Reference": "{@code PROLEPTIC_MONTH} -", "NNUpdater": "{@code PROLEPTIC_MONTH} -"}
{"Origin": "This defines the bond group that the discount factors are for.", "Reference": "This defines the group that the discount factors are for.", "NNUpdater": "Set Compensation base amount."}
{"Origin": "The {@link Flux} will contain one or several feed response of the obtained users.", "Reference": "The {@link CosmosContinuablePagedFlux} will contain one or several feed response of the obtained users.", "NNUpdater": "The {@link Flux} will contain one or several feed response of the obtained containers."}
{"Origin": "Sets the value of the 'InMemory' field.", "Reference": "Sets the value of the 'inMemory' field.", "NNUpdater": "Sets the specified value to the {@code enable_huge_pages} field."}
{"Origin": "Get the instance of Smack interoperation layer implementation class", "Reference": "Get the instance of Smack interoperability layer implementation class", "NNUpdater": "For example, for the address ``EMAIL/Smack``, ``Smack`` would be returned."}
{"Origin": "Set the {@code HttpClient} used for {@linkplain #createAsyncRequest(URI, HttpMethod) asynchronous execution}.", "Reference": "Set the {@code CloseableHttpAsyncClient} used for {@linkplain #createAsyncRequest(URI, HttpMethod) asynchronous execution}.", "NNUpdater": "Return a {@link MutableHttpRequest} for a {@link HttpMethod#GET} request for the given URI"}
{"Origin": "Handle Coin IQ.", "Reference": "CallPeer.", "NNUpdater": "Get accounts for a specific coin type."}
{"Origin": "This needs to be done in any case, whetere FutureChannelCreator return failed or success!", "Reference": "This needs to be done in any case, whether FutureChannelCreator returns failed or success!", "NNUpdater": "Needs to be called before the first call to open."}
{"Origin": "Returns an immutable set containing six elements.", "Reference": "Returns an unmodifiable set containing six elements.", "NNUpdater": "The number of intents expected is twenty: six for VPLS 1, six for VPLS 2. four for VPLS 3, four for VPLS 4."}
{"Origin": "NOTE: This operation is eventually consistent.", "Reference": "This operation is eventually consistent.", "NNUpdater": "Sets the request action."}
{"Origin": "You can make this request at any time during an in-progress multipart upload before you complete the upload (see CompleteMultipartUpload.", "Reference": "You can make this request at any time during an in-progress multipart upload before you complete the upload (see", "NNUpdater": "A message posting method for the postmessage service."}
{"Origin": "Set the non-stroking color in the DeviceRGB color space.", "Reference": "Set the non-stroking color in the DeviceCMYK color space.", "NNUpdater": "Set the non stroking color, specified as RGB or Gray."}
{"Origin": "Returns the Java type corresponding to the return type of the given method descriptor.", "Reference": "Returns the {@link Type} corresponding to the return type of the given method descriptor.", "NNUpdater": "Returns the {@link Type} corresponding to the return type of the given method descriptor."}
{"Origin": "Creates new {@link DayOfMonth} in UTC.", "Reference": "Creates new {@link DayOfMonth}.", "NNUpdater": "Creates new {@link DayOfMonth} in UTC."}
{"Origin": "Maven coordinates: org.apache.camel:camel-spark", "Reference": "Maven coordinates: org.apache.camel:camel-spark-rest", "NNUpdater": "A helper method to return the StreamCaching instance for a given {@link org.apache.camel.CamelContext} if one is enabled"}
{"Origin": "Removing fields from a POJO as operator state should require a state migration.", "Reference": "Removing fields from a POJO as operator state should succeed.", "NNUpdater": "Sets the state if the current state {@code .equals()} the specified expected state."}
{"Origin": "Send request to the server with early blockwise negociation through block2 option.", "Reference": "Send request to the server with early blockwise negotiation through block2 option.", "NNUpdater": "Sends a message to the server."}
{"Origin": "Returns an immutable {@link Map} that is backed by the given {@link CConfiguration}.", "Reference": "Returns a {@link Map} that is backed by the given {@link CConfiguration}.", "NNUpdater": "Gets an {@link ImmutableSet} of {@link Value.Immutable}s for the block at the given location."}
{"Origin": "NOTE: You cannot authorize ingress from an EC2 security group in one region to an Amazon RDS DB instance in another.", "Reference": "You cannot authorize ingress from an EC2 security group in one region to an Amazon RDS DB instance in another.", "NNUpdater": "NOTE: You cannot authorize ingress from an EC2 security group in one Region to an Amazon RDS DB instance in another."}
{"Origin": "This method maps a {@link ServerErrorCode} to a {@link RouterErrorCode}, and then makes corresponding state update.", "Reference": "This method maps a {@link ServerErrorCode} to a {@link RouterErrorCode}", "NNUpdater": "Equivalent to {@code onFailure(``onFailure``, consumer)}."}
{"Origin": "Loop over the {@link SecretProperties secret} and call {@link SecretClient#getSecret(SecretProperties baseSecret)} .", "Reference": "Loop over the {@link SecretProperties secret} and call {@link SecretClient#getSecret(String, String)}.", "NNUpdater": "Loop over the {@link SecretProperties secret} and call {@link SecretClient#getSecret(SecretProperties baseSecret)} ."}
{"Origin": "Tries to receive up to max_num_msgs_to_receive messages in one go", "Reference": "Tries to receive up to max_msgs_to_receive messages in one go", "NNUpdater": "Set the name of the queue(s) to receive messages from."}
{"Origin": "Adds a new tag for the specified {@link NamespacedEntityId}.", "Reference": "Adds a new tag for the specified {@link MetadataEntity}.", "NNUpdater": "Adds a new tag for the specified {@link NamespacedEntityId}."}
{"Origin": "After that, this method does not set the lease as active, but instead reserves that IP for only the MAC provided.", "Reference": "After that, this method does not set the lease as leased, but instead reserves that IP for only the MAC provided.", "NNUpdater": "Data for the current leaseRequest, or null if there is no active leaseSet request."}
{"Origin": "Retunrs the configuration name this {@code Configurable}.", "Reference": "Returns the configuration name this {@code Configurable}.", "NNUpdater": "This method checks that if all the configurable properties have a value."}
{"Origin": "Returns the built-in service account's credential for the application if running on", "Reference": "This is the built-in service account if running on Google", "NNUpdater": "Creates a credential object for the Bigquery client using application default credentials."}
{"Origin": "Fetch the given user's list of starred artists", "Reference": "Fetch the given user's list of loved artists", "NNUpdater": "Set the starred state of this header widget."}
{"Origin": "Action triggered when the execution of this Node has finished.", "Reference": "Callback invoked when the execution of this node has finished.", "NNUpdater": "HandlerWrapper, ActionNode)} to perform the action and to schedule the next action node."}
{"Origin": "Receives a PendingEvent and add it as a RecordedEvent in the EventStorage if it is an event type that should be recorded.", "Reference": "Receives a PendingEvent and add it as a RecordedEvent in the RecordedEventStore if it is an event type that should be recorded.", "NNUpdater": "Add the event into the {@link Window}"}
{"Origin": "FtBasic can consume twice the input stream.", "Reference": "FtBasic can consume twice the input stream in case of a RsText.", "NNUpdater": "This will consume the instances from the input."}
{"Origin": "Kept for compatibility with NativeScript.", "Reference": "Kept for source-level compatibility with NativeScript.", "NNUpdater": "This method is kept only for compatibility and may get removed at any version in the future."}
{"Origin": "For each array in the intersection, get the offsets for this and other.", "Reference": "For each sequence in the intersection, get the offsets for this and other.", "NNUpdater": "Get the intersection."}
{"Origin": "Removes virtual port.", "Reference": "Removes virtual port related flow rules.", "NNUpdater": "Removes a port from the ServerPortRegistry and any Service it belongs to."}
{"Origin": "{@codesnippet com.azure.data.appconfiguration.configurationasyncclient.setSettingWithResponse#ConfigurationSetting-boolean}", "Reference": "{@codesnippet com.azure.data.appconfiguration.configurationasyncclient.setConfigurationSettingWithResponse#ConfigurationSetting-boolean}", "NNUpdater": "{@codesnippet com.azure.data.appconfiguration.configurationasyncclient.setSettingWithResponse#ConfigurationSetting-boolean}"}
{"Origin": "Method is used for appending the given Fields instance to this instance, into a new Fields instance.", "Reference": "Method is used for appending the given Fields instance to this instance, into a new Fields instance suitable for use as a field declaration.", "NNUpdater": "Method subtract returns the difference between this instance and the given fields instance."}
{"Origin": "Creates a ModuleReference to an exploded module.", "Reference": "Creates a ModuleReference to a possibly-patched exploded module.", "NNUpdater": "Returns a {@code ModuleReference} to an exploded module on the file system."}
{"Origin": "Find RAS_Node for specified node id.", "Reference": "Find RASNode for specified node id.", "NNUpdater": "CounterId."}
{"Origin": "Create or obtain a {@link PreparedStatement} from the pool.", "Reference": "Creates or obtains a {@link PreparedStatement} from the pool.", "NNUpdater": "Execute a SQL statement using the given parameters."}
{"Origin": "Get the names of any classes referenced in the type descriptors of annotation parameters.", "Reference": "Find the names of any classes referenced in the type descriptors of annotation parameters.", "NNUpdater": "Set the derived type."}
{"Origin": "However, it is strongly recommended that you set up an Amazon SNS topic and specify it in your initiate job request so that Amazon", "Reference": "However, it is strongly recommended that you set up an Amazon SNS topic and specify it in your initiate job request so that Amazon Glacier can notify the topic after it completes the job.", "NNUpdater": "A target can be either an Amazon SQS queue or an Amazon SNS topic."}
{"Origin": "Setter for {@link #exposeHeaders}", "Reference": "Setter for {@link #exposedHeaders}", "NNUpdater": "expose as protected"}
{"Origin": "Set Catch Weight Menge in Preiseinheit.", "Reference": "Set Abgerechnet.", "NNUpdater": "Catch value."}
{"Origin": "If such value node exists {@code this} is returned to allow chaining; otherwise {@link IllegalArgumentException} is thrown.", "Reference": "If such value node exists {@code this} is returned to allow chaining; otherwise exception is thrown.", "NNUpdater": "If such argument is {@code false}, then an {@link IllegalArgumentException} will be thrown."}
{"Origin": "If no class with the given name exists, null is returned", "Reference": "If no class with the given name exists, null is returned unless phantom refs are allowed.", "NNUpdater": "If no textual value exists for the element, or if only whitespace exists, the empty string is returned."}
{"Origin": "Note that new constant types may be added in future versions of the Java Virtual Machine.", "Reference": "Note that new constant types may be added in future versions of the", "NNUpdater": "Note that new constant types may be added in future versions of the"}
{"Origin": "{@codesnippet com.azure.data.appconfiguration.configurationasyncclient.addSetting#string-string-string}", "Reference": "{@codesnippet com.azure.data.appconfiguration.configurationasyncclient.addConfigurationSetting#string-string-string}", "NNUpdater": "{@codesnippet com.azure.data.appconfiguration.configurationasyncclient.addSetting#string-string-string}"}
{"Origin": "Setter for {@link #allowOrigins}", "Reference": "Setter for {@link #allowedOrigins}", "NNUpdater": "Set the origins to allow, e.g."}
{"Origin": "Test ModuleModule with a JAR file containing a .class file in the top level directory.", "Reference": "Test ModuleFinder with a JAR file containing a .class file in the top level directory.", "NNUpdater": "Returns a {@code ModuleReference} to represent a modular JAR on the file system."}
{"Origin": "Iterate over all the {@link KeyProperties key} by page and call {@link KeyClient#getKey(KeyProperties key properties)}.", "Reference": "Iterate over all the {@link KeyProperties key} by page and call {@link KeyClient#getKey(String, String)}.", "NNUpdater": "Iterate over all the {@link KeyProperties key} by page and call {@link KeyClient#getKey(KeyProperties key properties)}."}
{"Origin": "Returns the (unbiased) kurtosis excess of all the values within a {@link Dataset}", "Reference": "Returns the (biased) estimate of the sample standard deviation of the values within a {@link Dataset}.", "NNUpdater": "Returns a read-only Iterable on the values of the Dataset."}
{"Origin": "Main method to invoke this demo about how to recognize entities of a text input.", "Reference": "Main method to invoke this demo about how to recognize the entities of an input text.", "NNUpdater": "Test list all the classifiers."}
{"Origin": "Submits a notification for drawing.", "Reference": "Submits a bubble notification for drawing.", "NNUpdater": "Returns the message delivery policy."}
{"Origin": "Creates single folders.", "Reference": "Creates single directory.", "NNUpdater": "Creates a {@link Single} that emits a list."}
{"Origin": "Makes the recent (sort by create time) articles with the specified fetch size.", "Reference": "Makes the recent (sort by create time desc) articles with the specified fetch size.", "NNUpdater": "Fills random articles."}
{"Origin": "Check if CertConstraintParameters has a trusted match, if it does call next() for any following constraints.", "Reference": "Check if ConstraintsParameters has a trusted match, if it does call next() for any following constraints.", "NNUpdater": "If so, it call {@link #checkValue(ValidationMessage.Builder, List, JsonNode)}."}
{"Origin": "Returns an instance of a GLSL data type for the given {@link DataType}.", "Reference": "Returns an instance of a GLSL data type for the given {@link ShaderVariable}.", "NNUpdater": "Set the 'to' data type name."}
{"Origin": "Handles: DELETE /clusters/{clusterName}/servicegroups/{serviceGroupName}/services/{serviceDisplayName}", "Reference": "Handles: DELETE /clusters/{clusterName}/servicegroups/{serviceGroupName}/services/{serviceName}", "NNUpdater": "Handles: PUT /clusters/{clusterId}/services/{serviceId}"}
{"Origin": "The {@link EcKeyCreateOptions} parameter is required.", "Reference": "The {@link CreateEcKeyOptions} parameter is required.", "NNUpdater": "{@codesnippet com.azure.keyvault.keys.keyclient.createEcKeyWithResponse#keyOptions-Context}"}
{"Origin": "Skip until the given string is matched in the stream, but ignoring chars initially escaped by a '\\'.", "Reference": "Skip until the given string is matched in the stream, but ignoring chars initially escaped by a '\\' and any EL expressions.", "NNUpdater": "Appends to a StringBuilder the String src where non-ASCII and XML special chars are escaped."}
{"Origin": "Returns null.", "Reference": "Returns empty string.", "NNUpdater": "IsNullOrEmpty {is null or empty}."}
{"Origin": "The list of arrays may not be empty.", "Reference": "The list of sequences may not be empty.", "NNUpdater": "Note that the path doesn't support modification of fields inside arrays of arrays."}
{"Origin": "Get the Biome for a specified id.", "Reference": "Get the GlowBiome for a specified id.", "NNUpdater": "Returns a copy of the biome data."}
{"Origin": "Return a string suitable for sending in a ``Cookie`` header as defined in RFC 2109 for backward compatibility with cookie version 0", "Reference": "Return a string suitable for sending in a {@code ``Cookie``} header as defined in RFC 2109 for backward compatibility with cookie version 0", "NNUpdater": "Test rejection of Set-Cookie header."}
{"Origin": "Use the {@linkplain #addDelivery(Delivery, TimeWindow)} instead.", "Reference": "Use the {@linkplain #addDelivery(DeliveryJob, TimeWindow)} instead.", "NNUpdater": "The particular form of delivery is determined by the type of"}
{"Origin": "Run an MRTask Job to add up sums in @_sums", "Reference": "Run an MRTask Job to add up sums.", "NNUpdater": "Returns the column means for a matrix."}
{"Origin": "Return the number of tasks that are pending for processing.", "Reference": "Return the number of tasks that are pending for processing (excluding the scheduled tasks).", "NNUpdater": "Any tasks that are successfully assigned to a worker will be moved from pendingTasks to runningTasks."}
{"Origin": "Returns the clusters that have been created during processing or if none were created.", "Reference": "Returns the clusters that have been created during processing or an empty list if no documents were present.", "NNUpdater": "Sets the create."}
{"Origin": "Set Externer Kunde Nr..", "Reference": "Set Memo_Delivery.", "NNUpdater": "Set Line No."}
{"Origin": "Heap.", "Reference": "Update heap.", "NNUpdater": "Returns the physical read I/O-access of this heap."}
{"Origin": "Sets the cluster name.", "Reference": "Sets the cluster identifier.", "NNUpdater": "Sets the client protocol."}
{"Origin": "Access Control Using AWS Identity and Access Management (IAM) .", "Reference": "For more information, see Access Control Using AWS Identity and Access Management (IAM).", "NNUpdater": "Access Management (IAM) user account."}
{"Origin": "Set Import Account.", "Reference": "Set Import - Kontendefinition.", "NNUpdater": "Set Konto."}
{"Origin": "Returns the (biased) skew of all the values within a {@link PointSet} region of a {@link Dataset}", "Reference": "Returns the (biased) estimate of the sample variance of the values within a {@link PointSet} region of a {@link Dataset}.", "NNUpdater": "The class of the {@link DatasetsFinder} is read from property {@link #DATASET_PROFILE_CLASS_KEY}."}
{"Origin": "Make sure all resolved targets are instances of {@link NativeLinkable}.", "Reference": "Make sure all resolved targets are instances of {@link NativeLinkableGroup}.", "NNUpdater": "Returns our {@link #getBuildDeps()}, limited to the subset of those which are {@link NativeLinkable}."}
{"Origin": "The detailed format of the region ID depends on the group.", "Reference": "The detailed format of the region ID depends on the group supplying the data.", "NNUpdater": "Adds the specified group to the list of subgroups that this group is composed of."}
{"Origin": "Test the NGramFilterFactory", "Reference": "Test the NGramFilterFactory with old defaults", "NNUpdater": "Test ClassicFilterFactory"}
{"Origin": "Sends a request to write a list of addresses.", "Reference": "Sends a request to write a list of entries.", "NNUpdater": "Sends an HTTP request and returns the response."}
{"Origin": "set consumers to this Carrier.", "Reference": "set consumeDriver to this Carrier.", "NNUpdater": "consumer begin to run when {@link DataCarrier#produce(T)} begin to work with 20 millis consume cycle."}
{"Origin": "Creates index in elastic search given mapping.", "Reference": "Creates index in elastic search given a mapping.", "NNUpdater": "Creates the index for Graylog2 including the mapping"}
{"Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}", "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveFromRangeEnd }{@code >}}", "NNUpdater": "Create an instance of {@link JAXBElement }{@code <}{@link CTStrokeChild }{@code >}}"}
{"Origin": "Obtains an instance from the specified unique name.", "Reference": "Obtains an instance from the specified name.", "NNUpdater": "Obtains the type from a unique name."}
{"Origin": "Returns the query string.", "Reference": "Returns the Ickle query string.", "NNUpdater": "-D"}
{"Origin": "Returns the program opcodes as a string, for example ``[1234] DUP HASH160``", "Reference": "Returns the program opcodes as a string, for example ``[1234] DUP HASH160``, or ````.", "NNUpdater": "Returns the program opcodes as a string, for example ``[1234] DUP HASH160``"}
{"Origin": "Returns a List of item childs that holds information about offline messages to view or delete.", "Reference": "Returns a List of item children that holds information about offline messages to view or delete.", "NNUpdater": "Returns a List of item childs that holds information about offline messages to view or delete."}
{"Origin": "when its position becomes known.", "Reference": "when its bytecode offset becomes known.", "NNUpdater": "when its bytecode offset becomes known."}
{"Origin": "Set Application Registration.", "Reference": "Set File Handler.", "NNUpdater": "DO NOT USE."}
{"Origin": "The default value of this option is 30000 which corresponds to 30 seconds.", "Reference": "The default value of this option is to 30 seconds.", "NNUpdater": "uses default value of 15 seconds for timeout"}
{"Origin": "Executes the console script.", "Reference": "Executes the webserver script.", "NNUpdater": "Executes JavaScript in this window."}
{"Origin": "The supported fields are Year, DayOfYear and MillisOfDay.", "Reference": "The supported fields are Year, MonthOfDay, DayOfMonth and MillisOfDay.", "NNUpdater": "Returns day of year for the year and month."}
{"Origin": "Enables or disables this action based on the currently active folder's has a parent, this action will be enabled, if not it will be disabled.", "Reference": "Enables or disables this action based on the currently active folder's has a parent and current tab is not locked, this action will be enabled, if not it will be disabled.", "NNUpdater": "-1 will be returned if it the limit disabled."}
{"Origin": "The {@link RsaKeyCreateOptions} is required.", "Reference": "The {@link CreateRsaKeyOptions} is required.", "NNUpdater": "The {@link RsaKeyCreateOptions#getKeySize() keySize} can be optionally specified."}
{"Origin": "Initialized adjacency list for graph with n nodes.", "Reference": "Initialized adjacency list for graph with numberOfNodes nodes.", "NNUpdater": "Instead each weight is set to propertyDefaultValue."}
{"Origin": "Calls {@link #setQuery(Query, QueryListenOptions, Class)} with the default {@link", "Reference": "Calls {@link #setQuery(Query, MetadataChanges, Class)} with metadata changes excluded.", "NNUpdater": "-D"}
{"Origin": "Checks whether this option has deprecated keys.", "Reference": "Checks whether this option has fallback keys.", "NNUpdater": "Checks whether attribute is deprecated by looking up ``deprecated`` in its description."}
{"Origin": "Register a cleanup for the current raw fd.", "Reference": "Register a cleanup for the current handle.", "NNUpdater": "Register a container, used for later cleanup"}
{"Origin": "Computes the median for each pixel across all bands in the {@link Planar} image.", "Reference": "Computes the median for each pixel across selected bands in the {@link Planar} image.", "NNUpdater": "Computes the average for each pixel across all bands in the {@link Planar} image."}
{"Origin": "Obtains an immutable pair of two objects inferring the generic types.", "Reference": "Creates an immutable pair of two objects inferring the generic types.", "NNUpdater": "Obtains an instance of from a single rule-amount pair."}
{"Origin": "Checks the dirty status of the 'reprUrl' field.", "Reference": "Checks the dirty status of the 'headers' field.", "NNUpdater": "See URL()"}
{"Origin": "Serializes the contextNode into the OutputStream, but suppresses all Exceptions.", "Reference": "Serializes the {@code contextNode} into the OutputStream, but suppresses all Exceptions.", "NNUpdater": "Serializes the contextNode into the OutputStream, but suppresses all Exceptions."}
{"Origin": "Test method for {@link org.infinispan.spring.provider.SpringRemoteCacheManager#start()}.", "Reference": "Test method for {@link org.infinispan.spring.remote.provider.SpringRemoteCacheManager#start()}.", "NNUpdater": "Operation fails."}
{"Origin": "Creates a new {@link CoreEvent} based on an existing {@link CoreEvent} instance and and {@link EventContext}.", "Reference": "Creates a new {@link CoreEvent} based on an existing {@link CoreEvent} instance and a {@link EventContext}.", "NNUpdater": "Is responsible for calling {@link EventSource#onEvent(InboundEvent)} and all registered {@link EventListener} instances."}
{"Origin": "Delete user keypair ### Functional Description: Delete the user's keypair.", "Reference": "Delete user's key pair ### Functional Description: Delete the user's key pair.", "NNUpdater": "Delete the given user."}
{"Origin": "Record an {@link ExecutionEvent} for a dynamically registered container or test.", "Reference": "Record an {@link Event} for a dynamically registered container or test.", "NNUpdater": "Evaluate all {@link ContainerExecutionCondition} extensions registered for the supplied {@link ExtensionContext}."}
{"Origin": "Obtain a {@link RemoteRepository} for a data set managed by the remote service.", "Reference": "Obtain a flyweight {@link RemoteRepository} for a data set managed by the remote service.", "NNUpdater": "Returns the document library file entry remote service."}
{"Origin": "Returns a {@link Single} which contains an instance of {@link RxBleDevice}.", "Reference": "Returns an instance of {@link RxBleDevice}.", "NNUpdater": "Create the {@link RxBleDeviceMock} instance using the configured values."}
{"Origin": "Invoked by selection operations to process the cancelled-key set", "Reference": "Invoked by selection operations to process the cancelled keys", "NNUpdater": "Set Prozess."}
{"Origin": "Returns the gadget with the primary key or throws a {@link com.liferay.opensocial.NoSuchGadgetException} if it could not be found.", "Reference": "Returns the gadget with the primary key or throws a {@link NoSuchGadgetException} if it could not be found.", "NNUpdater": "and gadgetKey = ?"}
{"Origin": "Returns {@link RDFFormat#NTRIPLES}.", "Reference": "Returns {@link RDFFormat#NTRIPLES_RDR}.", "NNUpdater": "Extracts the IRI of the resource from rdf:ID, rdf:nodeID or rdf:about attribute."}
{"Origin": "Returns all the sync d l objects where parentFolderId = ?.", "Reference": "Returns all the sync d l objects where modifiedTime > ?", "NNUpdater": "Returns the number of sync d l objects where type = ?"}
{"Origin": "Override to control whether {@link CamelContext} should be setup per test or per class.", "Reference": "Tells whether {@link CamelContext} should be setup per test or per class.", "NNUpdater": "Whether or not the snapshot target can be closed early."}
{"Origin": "Sends a request and returns immediately without getting a response.", "Reference": "Sends a request and waits until the request is flushed to network.", "NNUpdater": "Sends the response back to the client."}
{"Origin": "Returns the {@link Service}.", "Reference": "Returns the {@link HttpService}.", "NNUpdater": "Returns the {@link Route} of the {@link #service()}."}
{"Origin": "If {@code keys = ``*``}, settings with any key are returned.", "Reference": "If {@code keyFilter = ``*``}, settings with any key are returned.", "NNUpdater": "If {@code keys = ``*``}, settings with any key are returned."}
{"Origin": "Compare the contents of two files to determine if they are equal or not.", "Reference": "Compare the contents of two {@link File}s to determine if they are equal or not.", "NNUpdater": "Compares two CharSequences, returning if they are equal."}
{"Origin": "Returns the next {@link Query} but does not update the internal {@link Query} iterator.", "Reference": "Returns the next {@link PlaylistEntry} but does not update the internal {@link PlaylistEntry} iterator.", "NNUpdater": "Returns the next {@link Query} but does not update the internal {@link Query} iterator."}
{"Origin": "Returns whether or not an empty oauth token should be used for oauth1.", "Reference": "Returns whether or not add an empty oauth token for oauth1 while generating Base string.", "NNUpdater": "Sets the o auth token ID of this o auth token."}
{"Origin": "Convert Tinkerpop's comparison operators to Titan's", "Reference": "Convert Tinkerpop's comparison operators to JanusGraph's", "NNUpdater": "The following are descriptions of each comparison operator."}
{"Origin": "Optionally replace the outer most component with a new component.", "Reference": "Optionally replace the head component with a new component.", "NNUpdater": "Creates component."}
{"Origin": "return the child of a node mapping to the input childname", "Reference": "Return the child of a node mapping to the input child name.", "NNUpdater": "Gets the index of the specified child in this node's child list."}
{"Origin": "Returns a container with the service type corresponding to the name of a services configuration file.", "Reference": "Returns the service type corresponding to the name of a services configuration file if it is a valid Java identifier.", "NNUpdater": "Returns the binary name of the class corresponding to this type."}
{"Origin": "Returns an immutable list containing an arbitrary number of elements.", "Reference": "Returns an unmodifiable list containing an arbitrary number of elements.", "NNUpdater": "Return the list of all field names."}
{"Origin": "Return a {@link InetSocketAddress} for the remote socket.", "Reference": "Return a {@link SocketAddress} for the remote socket.", "NNUpdater": "Gets the source/destination IP address and port."}
{"Origin": "returns the my site fragment from the sites tab", "Reference": "returns the my site fragment from the sites page", "NNUpdater": "Gets the siteId of the given user's My Workspace Generally ~userId but may not be"}
{"Origin": "Returns a string describing module export.", "Reference": "Returns a string describing module opens.", "NNUpdater": "Returns the name of the calendar."}
{"Origin": "Map package name to the new name.", "Reference": "Maps a package name to its new name.", "NNUpdater": "Returns package name from name space."}
{"Origin": "Get Is Reversed with original Accounting.", "Reference": "Get Document Type for Payment.", "NNUpdater": "Getter Parameter Value for Project Accounting"}
{"Origin": "The {@link RsaKeyCreateOptions#getKeyType() keyType} indicates the type of key to create.", "Reference": "The {@link CreateRsaKeyOptions#getKeyType() keyType} indicates the type of key to create.", "NNUpdater": "Get the Type of {@link IN}."}
{"Origin": "See {@link Args#getBlockingExecutor}.", "Reference": "See {@link Args#getOffloadExecutor}.", "NNUpdater": "Create {@link BuildExecutorArgs} using {@link DistBuildExecutorArgs}."}
{"Origin": "Add a duration with the given time unit.", "Reference": "Subtract an amount with the given time unit.", "NNUpdater": "Obtains an instance of {@code Duration} from a duration in a specified unit."}
{"Origin": "Also noteworthy is that no clean up is performed if an error occurs in the midst of a transfer: files that have been copied (even partially) are left in the destination.", "Reference": "No clean up is performed if an error occurs in the midst of a transfer: files that have been copied (even partially) are left in the destination.", "NNUpdater": "Send an error message."}
{"Origin": "This method wraps raw in the character provided by {@link #getNameEscape()}.", "Reference": "This method escapes raw using method {@link #escapeName(String)}.", "NNUpdater": "Like {@link #URLEnc(String, Charset)} but doesn't escape the slash character ({@code /})."}
{"Origin": "Use pipelined hash join for SERVICE node.", "Reference": "Use pipelined hash join for inlined VALUES node.", "NNUpdater": "Evaluate using a hash join."}
{"Origin": "Issue a request with the given {@link Method} to the provided resource URI.", "Reference": "Issue a request with the given {@link HttpMethod} to the provided resource URI.", "NNUpdater": "Issue a request with the given {@link HttpMethod} to the provided resource URI."}
{"Origin": "Authenticate by session.", "Reference": "Authenticate by session and ignite security.", "NNUpdater": "Set Nutzersitzung."}
{"Origin": "Create an unnamed, parented {@link ServiceLocator}.", "Reference": "Create a {@link InstanceManager}.", "NNUpdater": "Return a default configuration StreamManager with a {@link LocatorFile}, {@link LocatorURL}, and {@link LocatorClassLoader}"}
{"Origin": "Uses {@link JpaExecutor#poll()} to executes the JPA operation.", "Reference": "Use {@link JpaExecutor#poll()} to executes the JPA operation.", "NNUpdater": "Returns the JPA entity id."}
{"Origin": "and repositoryId = ?.", "Reference": "and parentFolderId = ?.", "NNUpdater": "Engine."}
{"Origin": "create new Mbean and when set from ClassLoader Objectname", "Reference": "Create new Mbean and when set from ClassLoader Objectname.", "NNUpdater": "Create a RuleSet from a file name resource."}
{"Origin": "The detailed format of the region ID depends on the group.", "Reference": "The detailed format of the region ID depends on the group supplying the data.", "NNUpdater": "Adds the specified group to the list of subgroups that this group is composed of."}
{"Origin": "Stips aux and mark edges when we are splitting into a clause.", "Reference": "Strips aux and mark edges when we are splitting into a clause.", "NNUpdater": "Gets the map containing the aux data for this stack"}
{"Origin": "reduce a structure to a single-atom representation (e.g.", "Reference": "Reduce a structure to a single-atom representation (e.g.", "NNUpdater": "Force the atom arrays to regenerate based on {@link #getStructureIdentifiers()}."}
{"Origin": "Go through the list of available clients in the queue and call {@link HThriftClient#close()} on each.", "Reference": "Go through the list of available clients in the queue and call {@link HClient#close()} on each.", "NNUpdater": "Tests the {@link Permission#setUserFromThriftClient()} method."}
{"Origin": "Warn the events stream that there was a GCM status update.", "Reference": "Warn the events stream that there was a push status update.", "NNUpdater": "Retrieve the GCM registration token."}
{"Origin": "Get thread pool used for multi-project searches.", "Reference": "Gets the thread pool used for multi-project searches.", "NNUpdater": "Get Projekt."}
{"Origin": "Assigns a native mirror object to the given RObject object.", "Reference": "Assigns a native mirror object to the given RBaseObject object.", "NNUpdater": "(Internal use only) Resets all {@link NativeObject}s."}
{"Origin": "Returns the adapter, which allows to inflate the child views of tabs.", "Reference": "Returns the adapter, which allows to inflate the views, which are associated with tabs.", "NNUpdater": "Inflate the in-track view for the action of the given MIME-type, collapsing duplicate values."}
{"Origin": "For example, consider a zone with a cutover from 01:00 to 01:59:", "Reference": "For example, consider a zone with a gap from 01:00 to 01:59:", "NNUpdater": "Obtains an instance of {@code ChronoLocalDateTime} using seconds from the local epoch of 1970-01-01T00:00:00."}
{"Origin": "{@link Keys#SKIN_MOISTURE}", "Reference": "{@link Keys#DOLPHIN_SKIN_MOISTURE}", "NNUpdater": "Returns {@link LazyInstance} for default {@link Skin}."}
{"Origin": "GETTER: Is this table a stream type?", "Reference": "GETTER: Is this table a Stream table?", "NNUpdater": "Returns the table definition."}
{"Origin": "Get the graph node at the file location ptr.", "Reference": "Get the graph node.", "NNUpdater": "Get the location of the rule file(s)."}
{"Origin": "Calling this operation sends a handshake to every account in the organization.", "Reference": "Calling this operation sends a handshake to every invited account in the organization.", "NNUpdater": "Set Organisation."}
{"Origin": "Returns the current widget that has focus.", "Reference": "Returns the focused widget.", "NNUpdater": "Takes focus from current focused widget (if any), and sets focus to provided widget"}
{"Origin": "Builds a {@link DiffList} based on the differences appended to this builder.", "Reference": "Builds a {@link DiffResult} based on the differences appended to this builder.", "NNUpdater": "Creates a {@link KeyAsyncClient} based on options set in the builder."}
{"Origin": "Removes elements from a collection, as in {@code SET l-=[1,2,3]}.", "Reference": "Removes elements from a collection, as in {@code SET l=l-[1,2,3]}.", "NNUpdater": "Operation fails."}
{"Origin": "Sets the state of the loaded and prints some debug information", "Reference": "Sets the error message and print debug information", "NNUpdater": "Prints the state with number"}
{"Origin": "Configuring Availability Options in the Amazon CloudSearch Developer Guide .", "Reference": "CloudSearch Developer Guide.", "NNUpdater": "For more information, see Sorting Results in the Amazon CloudSearch Developer Guide."}
{"Origin": "Primarily used fro debugging", "Reference": "Primarily used for debugging", "NNUpdater": "Primarily used for debugging gradients."}
{"Origin": "Get cache affinity awareness group which is compatible with the mapping.", "Reference": "Get cache Partition Awareness group which is compatible with the mapping.", "NNUpdater": "Get the current awareness as list of cognitions."}
{"Origin": "Tests the behaviour of the various section related methods.", "Reference": "Tests various section related method.", "NNUpdater": "Creates a Section, add it to this Section and returns it."}
{"Origin": "Test of npara method, of class FDistribution.", "Reference": "Test of length method, of class FDistribution.", "NNUpdater": "This method returns the index of the maximum probability as provided by {@link #classDistribution(O) classDistribution(M)}."}
{"Origin": "whether it gives you labeled or unlabeled bracketings depends on the value of the parameter", "Reference": "whether it gives you labeled or unlabeled bracketings depends on the value of the {@code labelConstituents} parameter", "NNUpdater": "Depends on the given action value."}
{"Origin": "Tests that a put operation blocks if the queue is full.", "Reference": "Tests that a put operation fails if the queue is full.", "NNUpdater": "Tests if queue is full."}
{"Origin": "Returns true if the {@code typeClass} has already been registered/mapped.", "Reference": "Returns true if the {@code typeClass} was not lazily created.", "NNUpdater": "Return {@code true} if {@code value} exists in the cell mapped from {@code field}."}
{"Origin": "1. mock.foo(); verify(mock, after(1000)).foo(); waits 1 second and succeeds", "Reference": "1. mock.foo(); verify(mock, after(1000)).foo(); waits 1000 millis and succeeds", "NNUpdater": "Assert.instanceOf(Foo.class, foo, ``Foo expected``);"}
{"Origin": "NOTE:This operation is eventually consistent.", "Reference": "This operation is eventually consistent.", "NNUpdater": "Sets the request action."}
{"Origin": "Set the exclude filter file", "Reference": "Set the include filter file", "NNUpdater": "Create an exclude filter based on the supplied tag expressions."}
{"Origin": "Copied from org.mortbay.log.StdErrLog.", "Reference": "Copied from org.eclipse.log.StdErrLog.", "NNUpdater": "Log an exception at the 'severe' level."}
{"Origin": "Getter for {@link #exposeHeaders}", "Reference": "Getter for {@link #exposedHeaders}", "NNUpdater": "Getter Parameter Value for D-U-N-S"}
{"Origin": "Enables or disables service config look-up from the naming system.", "Reference": "Disables service config look-up from the naming system, which is enabled by default.", "NNUpdater": "Enables or disables the component."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Returns the first sync d l object in the ordered set where parentFolderId = ?.", "Reference": "Returns the first sync d l object in the ordered set where modifiedTime > ?", "NNUpdater": "Returns the first b b b server in the ordered set where active = ?."}
{"Origin": "If it is expected that the observable only emits one element, it is typically more convenient to use {@link #promiseSingle(Observable)}.", "Reference": "If it is expected that the observable only emits one element, it is typically more convenient to use {@link #promise(Single)}.", "NNUpdater": "Returns an {@link Observable} that emits if the source {@link Observable} is empty, otherwise ."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Added per PR comment:", "Reference": "PR comment:", "NNUpdater": "Gets a comment by the specified id."}
{"Origin": "Get branding info ### Functional Description: Public branding information.", "Reference": "Get branding information ## \u26a0 Deprecated since version VERSION ### Functional Description: Public branding information.", "NNUpdater": "Get Beschreibung."}
{"Origin": "Checks expressions with the pragma for enforcing index rewritings.", "Reference": "Checks if expressions are rewritten for enforced index access.", "NNUpdater": "Parses a generic pragma."}
{"Origin": "The max idle time is applied to a HTTP request for IO operations and delayed dispatch.", "Reference": "The max idle time is applied to an HTTP request for IO operations and delayed dispatch.", "NNUpdater": "Returns the maximum time to wait on an idle IO operation."}
{"Origin": "If no Gradle user home is specified then this method returns {@code null}.", "Reference": "If no Gradle user home is specified then this method returns {@link Optional#empty()} .", "NNUpdater": "Otherwise, the user's home directory (defined in {@code ``user.home``}) is chosen."}
{"Origin": "If no authority is found {@code null} is returned.", "Reference": "If no Network is found {@code null} is returned.", "NNUpdater": "If no field is found with the specified unit then null is returned."}
{"Origin": "If {@code labels = null}, settings without any label are returned.", "Reference": "If {@code labelFilter = null}, settings without any label are returned.", "NNUpdater": "If {@code labels = null}, settings without any label are returned."}
{"Origin": "Returns the combination of both the in and out adjacecy lists.", "Reference": "Returns the combination of both the in and out adjacency lists.", "NNUpdater": "Checks if the given table, column or combination of both is available in the database in case insensitive way."}
{"Origin": "Decode an action profile member to PI action group member.", "Reference": "Decode an action profile member to PI action profile member.", "NNUpdater": "Returns a member by ID."}
{"Origin": "Note that the returned instance must be {@link RequestScope.Instance#release() released} manually once not needed anymore to prevent memory leaks.", "Reference": "Note that the returned context must be {@link RequestContext#release() released} manually once not needed anymore to prevent memory leaks.", "NNUpdater": "Returns an instance of T that is not equal to the instance of T returned by {@link #getRedObject()}."}
{"Origin": "Drops the temporary database instance.", "Reference": "Drops a temporary database instance.", "NNUpdater": "Drops all object in the schema."}
{"Origin": "Returns the inverse of the given Matrix.", "Reference": "Returns the inverse of the given matrix.", "NNUpdater": "openInverse : OPEN_INVERSE sexpr blockParams?"}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "It divides the sum of squared deviations from the mean by N (N == number of samples).", "Reference": "It divides the sum of squared deviations from the mean by N-1 (N == number of samples).", "NNUpdater": "Initializes the currentMean and sum arrays with the given cepstrum length."}
{"Origin": "Only if the most recently added callback returns from its {@link OnBackPressedCallback#handleOnBackPressed()} will any previously added callback be called.", "Reference": "Only if the most recently added callback is not {@link OnBackPressedCallback#isEnabled() enabled} will any previously added callback be called.", "NNUpdater": "Calls {@link #authenticator(String, Client[])} with {@link #DEFAULT_AUTHENTICATOR_PATH}."}
{"Origin": "Get differences between doms.", "Reference": "Get differences between DOMs.", "NNUpdater": "For more information about the differences between stopping and terminating instances, see Instance Lifecycle in the Amazon Elastic Compute Cloud User"}
{"Origin": "Creates a {@link PropertyMatcher} to match against a slot position.", "Reference": "Creates a {@link KeyValueMatcher} to match against a slot position.", "NNUpdater": "Constructs a new builder to construct a {@link BlockStateMatcher}."}
{"Origin": "Sets the conditions.", "Reference": "Set the conditions.", "NNUpdater": "Returns this with the specified optional conditions."}
{"Origin": "and repositoryId = ?.", "Reference": "and parentFolderId = ?.", "NNUpdater": "Engine."}
{"Origin": "See Immutable Set Static Factory Methods for details.", "Reference": "See Unmodifiable Sets for details.", "NNUpdater": "VerificationTimes supports multiple static factory methods:"}
{"Origin": "Sets useIndex parameter and returns trainer instance.", "Reference": "Sets usingIdx parameter and returns trainer instance.", "NNUpdater": "Generates a new instance of a Trainable by providing the Class of the algorithm."}
{"Origin": "Sets the {@link DrmProvider} to use when handling DRM for media.", "Reference": "Sets the {@link MediaDrmCallback} to use when handling DRM for media.", "NNUpdater": "If {@link OnDrmConfigHelper} is registered, it will be called during preparation to allow configuration of the DRM properties before opening the DRM session."}
{"Origin": "Test class file in JAR file where the entry does not correspond to a legal package name.", "Reference": "Test class files in JAR file where the entry does not correspond to a legal package name.", "NNUpdater": "Test class files in JAR file where the entry does not correspond to a legal package name."}
{"Origin": "Sets the value.", "Reference": "Set the entity.", "NNUpdater": "Sets the valueText."}
{"Origin": "The generated HotStream is not pausable, for a pausable HotStream @see {@link ReactiveSeq#pausableHotStream(Executor)}.", "Reference": "The generated Connectable is not pausable, for a pausable Connectable @see {@link ReactiveSeq#pausableHotStream(Executor)}.", "NNUpdater": "Get the number of hot entries in the cache."}
{"Origin": "If {@code labels = ``*abc*``}, settings with a label containing ``abc`` are returned.", "Reference": "If {@code labelFilter = ``*abc*``}, settings with a label containing ``abc`` are returned.", "NNUpdater": "If {@code labels = ``*abc*``}, settings with a label containing ``abc`` are returned."}
{"Origin": "Creates a controller with no processing component pooling and no results caching.", "Reference": "Creates a controller with no processing component pooling.", "NNUpdater": "Max poolingi"}
{"Origin": "Returns true if the resource is a simple resource that can never be encapsulated.", "Reference": "Returns true if the resource is a simple resource.", "NNUpdater": "Returns the structure id."}
{"Origin": "Checks if a group is allowed in a container with the given type.", "Reference": "Checks if a group element is allowed in a container with a given type.", "NNUpdater": "Checks if the plugable container with the given Container is supported by this implementation."}
{"Origin": "The elements will be delivered on the context to the handler.", "Reference": "Pending elements in the buffer will be delivered asynchronously on the context to the handler.", "NNUpdater": "already referenced by a shipment line, if is true or NOT referenced by a shipment line, if is false"}
{"Origin": "Adds the parameters into context's ParameterMap", "Reference": "Adds the parameters into the current ActionContext's parameter map.", "NNUpdater": "Sets a property."}
{"Origin": "This method returns the value of the database column m_prj_risk.probalitity", "Reference": "This method returns the value of the database column m_prj_risk.probability", "NNUpdater": "This method returns the value of the database column m_prj_risk.prjKey"}
{"Origin": "Called when a controller requested to prefetch for playing a specific mediaId through {@link MediaController2#prefetchFromMediaId(String, Bundle)}.", "Reference": "Called when a controller requested to prepare for playing a specific mediaId through {@link MediaController2#prepareFromMediaId(String, Bundle)}.", "NNUpdater": "Called when a controller requested to prefetch for playing a specific mediaId through {@link MediaController2#prefetchFromMediaId(String, Bundle)}."}
{"Origin": "Records the addition of an element of the given size to the given generation.", "Reference": "Records the addition of an element to the given generation.", "NNUpdater": "Records that this {@code POutputValueBase} is an output with the given name of the given {@code AppliedPTransform}."}
{"Origin": "Returns a range of all the sync d l objects where companyId = ?", "Reference": "Returns a range of all the sync d l objects where repositoryId = ?", "NNUpdater": "Finds a range of all the articles where groupId = ?"}
{"Origin": "Map module name to the new name.", "Reference": "Maps a module name to its new name.", "NNUpdater": "The map key is the entry name, typically the module name."}
{"Origin": "Performs the check of the {@code Origin} header that is targeted at the {@code page}.", "Reference": "Performs the check of the {@code Origin} or {@code Referer} header that is targeted at the {@code page}.", "NNUpdater": "Gets the {@link Value.Mutable} for the targeted {@link Location}."}
{"Origin": "This is important to understand the changing nature of the", "Reference": "This is important to understand the changing nature of the WebPage.", "NNUpdater": "This API is deprecated."}
{"Origin": "Returns the ExecutableElement for a method declaration of methodName, in class typeName, with params parameters.", "Reference": "Returns the ExecutableElement for the method declaration of methodName, in class typeName, with params formal parameters.", "NNUpdater": "Identifies the element, e.g."}
{"Origin": "Tells if the join / leave membership events must be hidden in the messages list.", "Reference": "Tells if the join and leave membership events should be shown in the messages list.", "NNUpdater": "Sets the repository team access permissions"}
{"Origin": "Add {@link PathAlterationDetector}s for the given root directory and any nested subdirectories under the root directory to the given {@link PathAlterationDetector}.", "Reference": "Add {@link PathAlterationObserverScheduler}s for the given root directory and any nested subdirectories under the root directory to the given {@link PathAlterationObserverScheduler}.", "NNUpdater": "Returns the root URI."}
{"Origin": "Returns a non-empty array of ModuleDescriptors in the run-time image.", "Reference": "Returns a non-empty array of ModuleResolutions in the run-time image.", "NNUpdater": "After flattening, {@link #attributeDescriptors} contains descriptors of all attributes and {@link #attributeGroups} is empty."}
{"Origin": "Produces a CCProcessed SemanticGraph with no extras.", "Reference": "Produces a CCProcessed SemanticGraph.", "NNUpdater": "Set the semanticRoles."}
{"Origin": "The {@link EcKeyCreateOptions#isEnabled()} enabled} field is set to true by Azure Key Vault, if not specified.", "Reference": "The {@link CreateEcKeyOptions#isEnabled()} enabled} field is set to true by Azure Key Vault, if not specified.", "NNUpdater": "The {@link Secret#isEnabled() enabled} field is set to true by key vault, if not specified."}
{"Origin": "Returns an empty iterator if the argument is , or returns {@code iterable.iterator()} otherwise.", "Reference": "Returns an empty iterator if the argument is , or {@code iterable.iterator()} otherwise.", "NNUpdater": "Constructor."}
{"Origin": "Parses latitude out of a given string.", "Reference": "Parses latitude out of the given string.", "NNUpdater": "Parses the given string as a nested set order"}
{"Origin": "They are immutable.", "Reference": "They are unmodifiable.", "NNUpdater": "The returned List is immutable."}
{"Origin": "Set TU-UPC.", "Reference": "Set UPC.", "NNUpdater": "Set Auf LUs anwenden."}
{"Origin": "The semantics is the sames as {@link java.net.URL#openStream()}.", "Reference": "The semantics is the sames as {@link URL#openStream()}.", "NNUpdater": "This is not fully consistent with the semantics of {@link java.net.URI}."}
{"Origin": "Check nullability of the class persister properties", "Reference": "Check nullability of the class entityDescriptor properties", "NNUpdater": "Set the configuration persister factory to use."}
{"Origin": "The prefix includes the first slash in the full filename where applicable.", "Reference": "The prefix includes the first slash in the full fileName where applicable.", "NNUpdater": "The prefix includes the first slash in the full filename where applicable."}
{"Origin": "In order to prevent this, if both types passed to lub include all the same arrays with the same non-constant value offsets and if the constant value offsets are different then remove that array-offset pair from lub.", "Reference": "In order to prevent this, if both types passed to lub include all the same sequences with the same non-constant value offsets and if the constant value offsets are different then remove that sequence-offset pair from lub.", "NNUpdater": "The constant value of the type if specified"}
{"Origin": "Warning: the conditional comments don't work when injected dynamically with JavaScript (i.e.", "Reference": "Warning: the conditional comments don't work when injected dynamically with", "NNUpdater": "Add a link to the JavaScript file."}
{"Origin": "Get data source bean.", "Reference": "Get data source bean from registry center.", "NNUpdater": "Create data source."}
{"Origin": "Getter for {@link #allowOrigins}", "Reference": "Getter for {@link #allowedOrigins}", "NNUpdater": "Set the origins to allow, e.g."}
{"Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}", "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveFromRangeEnd }{@code >}}", "NNUpdater": "Create an instance of {@link JAXBElement }{@code <}{@link CTStrokeChild }{@code >}}"}
{"Origin": "FixtureDef if you need to set parameters like friction, restitution, user data, or filtering.", "Reference": "Use FixtureDef if you need to set parameters like friction, restitution, user data, or filtering.", "NNUpdater": "If you need to access multiple parameters in the request, call {@link #decodeParameters(ObsoleteRequestParameters)} directly."}
{"Origin": "Returns an intent to launch QR code generator or scanner according to the Wi-Fi network security.", "Reference": "Returns an intent to launch QR code scanner.", "NNUpdater": "Whether there is an active WiFi connection."}
{"Origin": "For further information please read the javadoc on {@link Component#canCallListenerInterface(Method)}, this method has the same semantics.", "Reference": "For further information please read the javadoc on {@link Component#canCallListenerInterface()}, this method has the same semantics.", "NNUpdater": "Target {@link #on(Class) method} has to be {@link #to() called} before it can return its reference."}
{"Origin": "List Job operation returns a list of these jobs sorted by job initiation time.", "Reference": "The List Job operation returns a list of these jobs sorted by job initiation time.", "NNUpdater": "Gets or creates job instance."}
{"Origin": "This is most useful for beams.", "Reference": "This is most useful for beams and ledgers.", "NNUpdater": "Report the beams that are part of this group."}
{"Origin": "Code snippets for {@link BlobClient#setHTTPHeadersWithResponse(BlobHttpHeaders, BlobAccessConditions, Duration,", "Reference": "Code snippets for {@link BlobClient#setHttpHeadersWithResponse(BlobHttpHeaders, BlobAccessConditions, Duration,", "NNUpdater": "Code snippet for {@link AppendBlobClient#createWithResponse(BlobHTTPHeaders, Metadata, BlobAccessConditions,"}
{"Origin": "Convert this MapX to a PersistentSetX via the provided transformation function", "Reference": "Convert this MapX to a LazySeq via the provided transformation function", "NNUpdater": "The transformation calls a {@link RichMapFunction} for each element of the DataStream."}
{"Origin": "Should be called when the {@link MediaSession2#pause()} is called.", "Reference": "Called when the {@link XMediaPlayer#pause()} is called.", "NNUpdater": "Should be called after {@link #contentType(MediaType)}"}
{"Origin": "If there is no record for that media, it's assumed to be a completed upload (returned progress is 1).", "Reference": "If there is no record for that media, it's assumed to be a completed upload.", "NNUpdater": "If there is no such header or the header is not a formatted date, the {@code defaultValue} is returned."}
{"Origin": "Sets the ratings entry persistence.", "Reference": "Sets the asset entry set like persistence.", "NNUpdater": "Sets the document library file entry persistence."}
{"Origin": "By constrast with {@link Optionals#sequence(CollectionX)} Optional#zero types are tolerated and ignored.", "Reference": "By constrast with {@link Optionals#sequence(IterableX)} Optional#zero types are tolerated and ignored.", "NNUpdater": "By constrast with {@link Eithers#sequence(IterableX)} Either#empty types are tolerated and ignored."}
{"Origin": "The returned era will be a singleton capable of being compared with the constants in {@link ISOChronology} using the {@code ==} operator.", "Reference": "The returned era will be a singleton capable of being compared with the constants in {@link ISOChrono} using the {@code ==} operator.", "NNUpdater": "The returned era will be a singleton capable of being compared with the constants in {@link IsoChronology} using the {@code ==} operator."}
{"Origin": "Returns the unmodifieable List of configured {@link CmsSearchFieldConfiguration} entries.", "Reference": "Returns the unmodifieable List of configured {@link I_CmsSearchFieldConfiguration} entries.", "NNUpdater": "Returns the search analyzer for the given locale."}
{"Origin": "If the other module is {@code EVERYONE_MODULE} then this method tests if the package is exported unconditionally.", "Reference": "If the other module is {@code EVERYONE_MODULE} then this method tests if the package is exported or opened unconditionally.", "NNUpdater": "If the other module is {@code EVERYONE_MODULE} then this method tests if the package is exported unconditionally."}
{"Origin": "Method to help in setting passwords.", "Reference": "crypt - method to help in setting passwords.", "NNUpdater": "Returns the handler."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Set the maximum initialization depth for objects tree.", "Reference": "Set the maximum randomization depth for objects tree.", "NNUpdater": "Returns the URL path."}
{"Origin": "Returns the annotation mirror as specified by the ``qualifier`` value in metaAnno.", "Reference": "Returns the annotation mirror as specified by the ``qualifier`` element in {@code qualifierAnno}.", "NNUpdater": "Get the position value from a @Test annotation mirror."}
{"Origin": "See {@link #DEFAULT_PING_BEFORE_ACTIVATE_CONNECTION}.", "Reference": "See {@link #DEFAULT_PROTOCOL_VERSION}.", "NNUpdater": "Operation fails."}
{"Origin": "Converts a DBObject back to a type-safe java object (POJO)", "Reference": "Converts a Document back to a type-safe java object (POJO)", "NNUpdater": "decode the {@link com.mongodb.DBObject} and provide the corresponding java (type-safe) object"}
{"Origin": "Parse a string representation of a zoned temporal value.", "Reference": "Parse a string representation of a temporal value applicable to the specified timezone.", "NNUpdater": "Get value from the given metric."}
{"Origin": "Convert to object types, returning null if text is null.", "Reference": "Convert to object types, returning null if text is null or empty.", "NNUpdater": "IsNullOrEmpty {is null or empty}."}
{"Origin": "Default implementation returns:", "Reference": "The default implementation returns:", "NNUpdater": "Returns instance."}
{"Origin": "Also immendiate non-directory children are removed from the set of dirty files.", "Reference": "Also immediate non-directory children are removed from the set of dirty files.", "NNUpdater": "Returns the paths to the children of this directory that satisfy the specified filter."}
{"Origin": "Obtain the default query timeout that will be used for {@link Statement}s created from this connection.", "Reference": "Gets the default query timeout that will be used for {@link Statement}s created from this connection.", "NNUpdater": "Default value - {@link #DEFAULT_HTTP_CONNECT_TIMEOUT this}"}
{"Origin": "Changes health by a given percentage, modified by drainRate.", "Reference": "Changes health by a raw value.", "NNUpdater": "Add a listener for notifications on state changes to the configured index."}
{"Origin": "Compute the standard mean pitch position of the provided key", "Reference": "Compute the standard (TREBLE) mean pitch position of the provided key", "NNUpdater": "SPEECH_VALUE = MIN_SPEECH_VALUE + SEEKBAR_PROGRESS"}
{"Origin": "Send request for execution via {@link #cliIo}.", "Reference": "Send request for execution via corresponding singleIo from {@link #ios}.", "NNUpdater": "When the ``also`` command is run, it will receive all of the arguments passed to this method as {@link io.bootique.cli.Cli} instance."}
{"Origin": "Create an unnamed {@link ServiceLocator}.", "Reference": "Create an unnamed, parented {@link InstanceManager}.", "NNUpdater": "Return a default configuration StreamManager with a {@link LocatorFile}, {@link LocatorURL}, and {@link LocatorClassLoader}"}
{"Origin": "Sets the value of the source property.", "Reference": "Sets the value of the parameter property.", "NNUpdater": "Sets the value of the bigint property."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Removes a {@link SurfaceConfiguration} from the combination.", "Reference": "Removes a {@link SurfaceConfig} from the combination.", "NNUpdater": "Invokes {@link VideoRendererEventListener#onRenderedFirstFrame(Surface)}."}
{"Origin": "The {@link RsaKeyCreateOptions#getKeySize() keySize} can be optionally specified.", "Reference": "The {@link CreateRsaKeyOptions#getKeySize() keySize} can be optionally specified.", "NNUpdater": "The {@link RsaKeyCreateOptions#getKeySize() keySize} can be optionally specified."}
{"Origin": "Returns the verb for the access token endpoint (defaults to GET)", "Reference": "Returns the verb for the access token endpoint (defaults to POST)", "NNUpdater": "Get method's http verbs."}
{"Origin": "or throws a {@link com.liferay.marketplace.NoSuchModuleException} if it could not be found.", "Reference": "or throws a {@link NoSuchModuleException} if it could not be found.", "NNUpdater": "Operation fails."}
{"Origin": "Parses an option string and sets the options accordingly.", "Reference": "Parses and assigns options string from the specified string.", "NNUpdater": "Parses a given list of options."}
{"Origin": "Returns the rootest flow's name for the module chain that will be macro expanded.", "Reference": "'s name for the module chain that will be macro expanded.", "NNUpdater": "Returns the scheduled flow for the scheduleId"}
{"Origin": "Set the log writer for this data source.", "Reference": "Sets the log writer for this data source.", "NNUpdater": "Log response headers and body."}
{"Origin": "Returns the type of the output parameter.", "Reference": "Returns the types of the output parameters.", "NNUpdater": "Returns the last added response of the method."}
{"Origin": "Returns a newly-created {@link SimpleCompositeService} based on the {@link Service}s added to this builder.", "Reference": "Returns a newly-created {@link SimpleCompositeService} based on the {@link HttpService}s added to this builder.", "NNUpdater": "Creates a new {@link CompositeServiceEntry} with the specified {@link Route} and {@link Service}."}
{"Origin": "Removes a package from the package repository.", "Reference": "Removes a package from the repository.", "NNUpdater": "Removes a package from the package repository."}
{"Origin": "Gets connection ID length.", "Reference": "Gets connection ID generator.", "NNUpdater": "Returns the client ID."}
{"Origin": "You can rescan the input bucket to check for new documents or cancel a request.", "Reference": "You can rescan the input bucket to check for new documents or cancel a job.", "NNUpdater": "Force a rescan of the given subdirectory in folder."}
{"Origin": "Sets the groups.", "Reference": "Set the groups.", "NNUpdater": "Guide."}
{"Origin": "Returns time interval between vacuum runs.", "Reference": "Returns time interval between MVCC vacuum runs in milliseconds.", "NNUpdater": "Test get interval time0."}
{"Origin": "Convert to primitive types, returning default value if text is null.", "Reference": "Convert to time, returning default value if text is inconvertible.", "NNUpdater": "Convert all types, both reference and primitive, to {@code Object}."}
{"Origin": "Prepends the stringly representation of short value into buffer, given the coder and final index.", "Reference": "Prepends constant and the stringly representation of value into buffer, given the coder and final index.", "NNUpdater": "Decode the binary representation of a {@link Short} from a buffer."}
{"Origin": "Creates an {@link ImmutableContextSet} from an existing {@link Multimap}.", "Reference": "Creates an {@link ImmutableContextSet} from a context pair.", "NNUpdater": "Creates a new ImmutableContextSet from an existing set."}
{"Origin": "The returned {@link RxTransaction} allows using DB transactions using Rx Observables.", "Reference": "The returned {@link RxTransaction} allows using DB transactions using Rx Observables using RX's IO scheduler for subscribeOn.", "NNUpdater": "Create the {@link RxBleDeviceMock} instance using the configured values."}
{"Origin": "Returns a new instance of {@link TurtleParser}.", "Reference": "Returns a new instance of {@link SPARQLResultsJSONParser}.", "NNUpdater": "Create a parser for N-Triples, with default behaviour"}
{"Origin": "Code snippets for {@link BlobClient#downloadWithResponse(OutputStream, BlobRange, ReliableDownloadOptions,", "Reference": "Code snippets for {@link BlobClient#downloadWithResponse(OutputStream, BlobRange, DownloadRetryOptions,", "NNUpdater": "String, BlobRange, ParallelTransferOptions, ReliableDownloadOptions, BlobAccessConditions, boolean)}"}
{"Origin": "Object updates will continually be emitted as the RealmObject is updated - {@code onComplete} will never be called.", "Reference": "The RealmObject will continually be emitted as it is updated - {@code onComplete} will never be called.", "NNUpdater": "Returns the {@link StandardRealmObjectSchema} for all RealmObject classes that can be saved in this Realm."}
{"Origin": "This is the price agreed when the trade occurred.", "Reference": "This is the price agreed when the trade occurred, in decimal form.", "NNUpdater": "The meta-property for the {@code price} property."}
{"Origin": "Finds Component Class from the given Spec name.", "Reference": "Finds Generated Class from the given Spec name.", "NNUpdater": "Finds the resource with the given name in the modules defined to this class loader or its class path."}
{"Origin": "Set Natural Account.", "Reference": "Set Basiskonto.", "NNUpdater": "Set Konto."}
{"Origin": "Retrieve the {@link MetadataEntry} corresponding to the specified key for the {@link NamespacedEntityId}.", "Reference": "Retrieve the {@link MetadataEntry} corresponding to the specified key for the {@link MetadataEntity}.", "NNUpdater": "Retrieve the {@link MetadataEntry} corresponding to the specified key for the {@link NamespacedEntityId}."}
{"Origin": "If present this schedule is part of the catalog but not executed", "Reference": "If present this task is part of the catalog but not executed", "NNUpdater": "CatalogResolver should throw CatalogException."}
{"Origin": "Generate a list of predicates from a single predicate string", "Reference": "Generates a list of predicates from a single predicate string.", "NNUpdater": "1."}
{"Origin": "This uses {@link ISODateTimeFormat#dateParser()}.", "Reference": "This uses {@link ISODateTimeFormat#dateTimeParser()}.", "NNUpdater": "The string must represent a valid date and is parsed using {@link java.time.format.DateTimeFormatter#ISO_LOCAL_DATE}."}
{"Origin": "Returned {@link BrowserResult} will only tell whether the attemp to search was successful.", "Reference": "Returned {@link LibraryResult} will only tell whether the attemp to search was successful.", "NNUpdater": "Test method for {@link com.crawljax.browser.EmbeddedBrowser#getStrippedDom()}."}
{"Origin": "The meta-property for the {@code upFrontFee} property.", "Reference": "The meta-property for the {@code upfrontFee} property.", "NNUpdater": "The meta-property for the {@code curveGroupName} property."}
{"Origin": "Loads properties from resource.", "Reference": "Loads properties from a resource.", "NNUpdater": "Load properties from a configuration file in the file system."}
{"Origin": "This is the id of the root {@link BlockContainer} where this event occurred.", "Reference": "This is the id of the ``workspace``, or similar container.", "NNUpdater": "Returns the {@link HasComponentsConnector} for which this event occurred."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Returns an {@link Operator} that flattens a sequence of {@link Observable} into a flat sequence of the items from the", "Reference": "Returns an {@link Transformer} that flattens a sequence of {@link Observable} into a flat sequence of the items from the", "NNUpdater": "Flattens the observable sequences from the list of Observables into one observable sequence without any transformation."}
{"Origin": "Clears the given persisted files stored in {@link #mPersistedFilesInfo}.", "Reference": "Clears the given persisted files stored in {@link #mPersistedUfsFingerprints}.", "NNUpdater": "Sets the file persistent state of the file."}
{"Origin": "However, token range searches will be routed to all the partitions, with a slightly lower performance.", "Reference": "However,unfiltered token range searches will be routed to all the partitions, with a slightly lower performance.", "NNUpdater": "Get the routed request context."}
{"Origin": "Checks a given class.", "Reference": "Checks the given class.", "NNUpdater": "Checks whether fields indexing is enabled for objects of the given {@code cls}."}
{"Origin": "Creates a {@link NonNullList} of {@link ItemStack}'s with the elements given in the order that they are given.", "Reference": "Creates a {@link List} of {@link ItemStack}'s with the elements given in the order that they are given.", "NNUpdater": "Returns a new {@link Order} with the given {@link Direction}."}
{"Origin": "Verify the validity of an 'RSA_SIGN_PSS_2048_SHA256' signature for the specified message", "Reference": "Verify the validity of an 'RSA_SIGN_PKCS1_2048_SHA256' signature for the specified message", "NNUpdater": "- {@link #KEY_SIGNATURE}: value specified by {@link #setCreator(String)}."}
{"Origin": "Returns a rule that restricts access to the given set of IP addresses.", "Reference": "Adds a rule that restricts access to the given set of IP addresses.", "NNUpdater": "Returns the set of interface IP addresses."}
{"Origin": "Use {@link #EMPTY_CONTEXT} if possible.", "Reference": "Use {@link #EMPTY_CONTEXT} to reference the instance.", "NNUpdater": "If stream is empty, throws {@code NoSuchElementException}."}
{"Origin": "Decorates {@link Service}s under the specified directory.", "Reference": "Decorates {@link HttpService}s under the specified directory.", "NNUpdater": "Creates a new {@link CompositeServiceEntry} whose {@link Service} is bound at the specified path pattern."}
{"Origin": "Set maximum number of deferred processed application data messages.", "Reference": "Set maximum number of deferred processed outgoing application data messages.", "NNUpdater": "Set Verarbeitet."}
{"Origin": "Add a citation to the citations map.", "Reference": "Add a citation to the citations multimap.", "NNUpdater": "Convenience method for checking whether citation markers should be italicized."}
{"Origin": "note: if the given IC is a ``commission-product-IC, then there won't be reequests because these IC's don't have a sales rep", "Reference": "note: if the given IC is a ``commission-product-IC, then there won't be requests because these IC's don't have a sales rep", "NNUpdater": "Operation fails."}
{"Origin": "For more information, see SetVaultNotifications.", "Reference": "SetVaultNotifications.", "NNUpdater": "For more information, see Resource Management."}
{"Origin": "Produce the {@link ScriptLoadBalancer} instance to use for this Genie node if it was configured by the user.", "Reference": "Produce the {@link ScriptClusterSelector} instance to use for this Genie node if it was configured by the user.", "NNUpdater": "Sets a custom {@link ServiceLoadBalancer} to use."}
{"Origin": "Return the incoming binding sets associated with the optimized query plan (after running the optimizers).", "Reference": "Return the incoming binding sets associated with the optimized AST.", "NNUpdater": "Sets the state."}
{"Origin": "Copy bytes from a large (over 2GB) to an .", "Reference": "Copies bytes from a large (over 2GB) to an .", "NNUpdater": "Large streams (over 2GB) will return a bytes copied value of after the copy has completed since the correct number of bytes cannot be returned as an int."}
{"Origin": "The {@link EcKeyCreateOptions#isEnabled() enabled} field is set to true by Azure Key Vault, if not specified.", "Reference": "The {@link CreateEcKeyOptions#isEnabled() enabled} field is set to true by Azure Key Vault, if not specified.", "NNUpdater": "The {@link Secret#isEnabled() enabled} field is set to true by key vault, if not specified."}
{"Origin": "Get this object as a DateTime using the default zone.", "Reference": "Converts this object to a DateTime using the default zone.", "NNUpdater": "Get this object as a DateTime using ISOChronology, in the same zone."}
{"Origin": "Get the set of default providers registered for the given service provider contract in the underlying {@link InstanceManager instance manager} container.", "Reference": "Get the set of default providers registered for the given service provider contract in the underlying {@link InjectionManager injection manager} container.", "NNUpdater": "Get the set of default providers registered for the given service provider contract in the underlying {@link Services HK2 services} container."}
{"Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}", "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveToRangeEnd }{@code >}}", "NNUpdater": "Create an instance of {@link JAXBElement }{@code <}{@link CTStrokeChild }{@code >}}"}
{"Origin": "Returns the default set of root modules for the unnamed module computed from the system modules observable with the given module finder.", "Reference": "Returns the default set of root modules for the unnamed module from the modules observable with the intersection of two module finders.", "NNUpdater": "Returns the set of modules that this module reads."}
{"Origin": "Clears the value of the 'publicPort' field", "Reference": "Clears the value of the 'publicPorts' field", "NNUpdater": "Clears the value of the 'paramName' field"}
{"Origin": "Create introspection invalid response.", "Reference": "Build unauthorized response entity.", "NNUpdater": "Clear the introspection cache for the given ClassLoader, removing the introspection results for all classes underneath that ClassLoader, and removing the ClassLoader (and its children) from the acceptance list."}
{"Origin": "closure/lambda", "Reference": "closure or lambda.", "NNUpdater": "Returns the first non-null closure result found by passing each map entry to the closure, otherwise null is returned."}
{"Origin": "Send request for execution via {@link #cliIo}.", "Reference": "Send request for execution via corresponding singleIo from {@link #ios} or sticky singleIo.", "NNUpdater": "When the ``also`` command is run, it will receive all of the arguments passed to this method as {@link io.bootique.cli.Cli} instance."}
{"Origin": "Staff key signature is dynamically computed using the keyShape and the count of alteration slices.", "Reference": "Staff key signature is dynamically computed using the keyShape and the count of alteration roi.", "NNUpdater": "Verifies a signature using a specified key."}
{"Origin": "Helper method to compute column indices from selection columns and the data schema for selection queries with .", "Reference": "Helper method to compute column indices from selection columns and the data schema for selection queries", "NNUpdater": "Reduce a collection of {@link DataTable}s to selection rows for selection queries with ."}
{"Origin": "Configures SSL/TLS for HTTPS Jetty Server / Client", "Reference": "Configures SSL/TLS for HTTPS Jetty Client", "NNUpdater": "Create a Listener."}
{"Origin": "Constructs an instance of BigtableTableAdminClient, using the given settings.", "Reference": "Constructs an instance of BigtableTableAdminClient with the given settings.", "NNUpdater": "Constructs a {@link MockRequest} from {@code request}."}
{"Origin": "Get the {@link uk.gov.gchq.gaffer.data.elementdefinition.view.NamedView} related to the specified name from cache", "Reference": "Get the {@link uk.gov.gchq.gaffer.data.elementdefinition.view.NamedViewDetail} related to the specified name from cache", "NNUpdater": "Builds the {@link gaffer.data.elementdefinition.ElementDefinitions} validates it and returns it."}
{"Origin": "Determines whether a character is a digit according to", "Reference": "Determines whether a character is a BMP digit according to", "NNUpdater": "Determine whether a given method is {@code getter}."}
{"Origin": "NOTE: The option is precreate=false option is appended to the URL to avoid the automatic creation of brokers and the resulting duplicate broker errors", "Reference": "NOTE: The create=false option is appended to the URL to avoid the automatic creation of brokers and the resulting duplicate broker errors", "NNUpdater": "Returns value of the toList option."}
{"Origin": "No interpolation is performed: Accuracy is up to the 5th decimal place", "Reference": "No interpolation is performed: Accuracy is up to the 6th decimal place", "NNUpdater": "Sets the accuracy 0 < min < 1; default VERSION"}
{"Origin": "Cancels the current transition animation", "Reference": "Cancels the current Launcher transition animation", "NNUpdater": "Cancels sync operations."}
{"Origin": "Scenario: - no CA inherited trust - gateway does trust the service - service does not trust gateway", "Reference": "Scenario: - no CA inherited trust - gateway does trust the API - API does not trust gateway", "NNUpdater": "Set the tls configuration with the certificate to trust"}
{"Origin": "Searches in file using {@link Scanner} instance for given pattern.", "Reference": "Searches in given content for given pattern.", "NNUpdater": "Searches for the pattern pattern in the data."}
{"Origin": "Returns the {@link Type} corresponding to the given protocol and number of hosts, if any.", "Reference": "Returns the {@link Type} corresponding to the given scheme and number of hosts, if any.", "NNUpdater": "Returns the number of elements of the given {@link DeviceProtocolInfoOrigin}."}
{"Origin": "Manipulate the zoom level of the application and centers it", "Reference": "Manipulate the zoom level of the application", "NNUpdater": "Sets the current zoom level which will be 2 to the power of zoom (2^zoom)"}
{"Origin": "Returns a copy of this CacheSpan with a new file and last access timestamp.", "Reference": "Returns a copy of this CacheSpan with a new file and last touch timestamp.", "NNUpdater": "Returns the cache {@link SimpleCacheSpan} corresponding to the provided lookup {@link"}
{"Origin": "Fast loop for computing {@code Math.pow(x, p)} for p >= 0 integer and x integer.", "Reference": "Fast loop for computing {@code pow(x, p)} for p >= 0 integer and x integer.", "NNUpdater": "Returns a {@code BigInteger} whose value is {@code pow(this, exponent) mod modulus}."}
{"Origin": "Note: this method resolves custom data locations for the shard.", "Reference": "Note: this method resolves custom data locations for the shard if such a custom data path is provided.", "NNUpdater": "Resolves derived values in the request."}
{"Origin": "Sets the name.", "Reference": "Set the name.", "NNUpdater": "Application window only."}
{"Origin": "Exercise Layer defineModules with a configuration that contains a module that has a concealed package that is the same name as a non-exported package in a parent layer.", "Reference": "Exercise Layer defineModules with a configuration with a module that contains a package that is the same name as a non-exported package in a parent layer.", "NNUpdater": "Exercise Layer defineModules with a configuration with a module that contains a package that is the same name as a non-exported package in a parent layer."}
{"Origin": "Attaches type information to the specified element.", "Reference": "Attaches input information to the specified element.", "NNUpdater": "Attaches to the current session"}
{"Origin": "Returns the input stream of this message content.", "Reference": "Returns the CachedOutputStream of this message content.", "NNUpdater": "Returns the input stream of this message content."}
{"Origin": "Creates a new {@code ListenableFuture} whose result is set from the supplied future when it completes.", "Reference": "Returns a {@code ListenableFuture} whose result is set from the supplied future when it completes.", "NNUpdater": "SettableFuture#setFuture setFuture(otherFuture)} on it."}
{"Origin": "Obtain a DelegationToken from Accumulo in a backwards compatible manner.", "Reference": "Obtain a DelegationToken from Accumulo.", "NNUpdater": "Gets the screen size in pixels."}
{"Origin": "Return the data center for which an endpoint resides in", "Reference": "Return the data center for which an node resides in", "NNUpdater": "Returns the directory associated with this index."}
{"Origin": "Gets the valueText.", "Reference": "Gets the value.", "NNUpdater": "Gets the name."}
{"Origin": "Sets useIndex parameter and returns trainer instance.", "Reference": "Set useIndex parameter and returns trainer instance.", "NNUpdater": "Generates a new instance of a Trainable by providing the Class of the algorithm."}
{"Origin": "Returns the push notifications device with the primary key or throws a {@link com.liferay.pushnotifications.NoSuchDeviceException} if it could not be found.", "Reference": "Returns the push notifications device with the primary key or throws a {@link NoSuchDeviceException} if it could not be found.", "NNUpdater": "Creates a {@link DeviceInfo} from a {@link IDevice} instance."}
{"Origin": "A variation on {@link #getForLookupPath(String)} that accepts a full request URL path and returns the full request URL path to expose for public use.", "Reference": "A variation on {@link #getForLookupPath(PathContainer)} that accepts a full request URL path and returns the full request URL path to expose for public use.", "NNUpdater": "Test method for the file:resolve-path() function."}
{"Origin": "Create a new builder preconfigured to connect to the Bigtable emulator.", "Reference": "Create a new builder preconfigured to connect to the Bigtable emulator with port number.", "NNUpdater": "Kill midlet process."}
{"Origin": "Set non-incremental state values (ex.", "Reference": "Set non-incremental state values from an existing state.", "NNUpdater": "Browser: URL"}
{"Origin": "A semigroup for unary products.", "Reference": "A lazy semigroup for unary products.", "NNUpdater": "Queries for products or skus."}
{"Origin": "This method should be called after acquiring the retention lock; See {@link #acquireRetentionLock()}", "Reference": "This method should be called after acquiring the retention lock; See {@link #acquireHistoryRetentionLock(Engine.HistorySource)}", "NNUpdater": "Releases the lock previously obtained by a call to {@link #acquirePutFromLoadLock(Object, long)}."}
{"Origin": "Aurora on Amazon RDS in the Amazon RDS User Guide.", "Reference": "Aurora, see Aurora on Amazon RDS in the Amazon RDS User Guide.", "NNUpdater": "Creates a object from an Amazon Relational Database Service (Amazon RDS)."}
{"Origin": "Creates a controller with processing component pooling but with no results caching.", "Reference": "Creates a controller with processing component pooling and a fixed pool size.", "NNUpdater": "Max poolingi"}
{"Origin": "Wrapper for updateRemoteStoreDefList : update this for all the nodes", "Reference": "Wrapper for updateRemoteStoreDefList : update this for all nodes", "NNUpdater": "Note that is immutable."}
{"Origin": "Creates a controller with processing component pooling but with no results caching.", "Reference": "Creates a controller with processing component pooling .", "NNUpdater": "Max poolingi"}
{"Origin": "Match the beginning of the given path and return the remaining portion of the path not covered by this pattern.", "Reference": "Match the beginning of the given path and return the remaining portion not covered by this pattern.", "NNUpdater": "Returns the URI pattern."}
{"Origin": "What about {@code ImmutableSet ImmutableSet.copyOf(E[])}?", "Reference": "ImmutableSet ImmutableSet.copyOf(E[])}?", "NNUpdater": "Gets an {@link ImmutableSet} of {@link Value.Immutable}s for the block at the given location."}
{"Origin": "Default value is {@code Integer.MAX_VALUE}, meaning that it's non-ordered.", "Reference": "The default value is {@code Ordered.LOWEST_PRECEDENCE}, meaning non-ordered.", "NNUpdater": "If the count would exceed {@link Long#MAX_VALUE} then the result is {@link Long#MAX_VALUE}."}
{"Origin": "EventHubAsyncProducer EventHubProducers} created with this instance will have their connections closed.", "Reference": "EventHubProducerAsyncClient EventHubProducers} created with this instance will have their connections closed.", "NNUpdater": "Creating an {@link EventHubAsyncClient} using a connection string specific to an Event Hub instance."}
{"Origin": "This is used across all activities/dialogs but can be overridden locally via {@link #setLocalNightMode(int)}.", "Reference": "This is the default value used for all components, but can be overridden locally via {@link #setLocalNightMode(int)}.", "NNUpdater": "Operation fails."}
{"Origin": "Cleans the procedures in this schema.", "Reference": "Cleans the triggers in this schema.", "NNUpdater": "Generate the statements to clean the tables in this schema."}
{"Origin": "Cancel the task of loading and displaying image for passed {@link ImageView}.", "Reference": "Cancel the task of loading and displaying image for passed {@link android.widget.ImageView ImageView}.", "NNUpdater": "Incoming drawable will be displayed in {@link android.widget.ImageView ImageView} during image loading."}
{"Origin": "Sets the value of the 'InMemory' field", "Reference": "Sets the value of the 'inMemory' field.", "NNUpdater": "Sets the value of the 'paramName' field."}
{"Origin": "Creates and returns an animation listener, which allows to adapt the pivot of a specific view, when an animation, which reverted an overshoot, has been ended.", "Reference": "Creates and returns an animation listener, which allows to adapt the pivot of a specific tab, when an animation, which reverted an overshoot, has been ended.", "NNUpdater": "Creates and returns an animation, listener, which allows to adapt the pivot of a specific view, when an animation, which reverted an overshoot, has been ended."}
{"Origin": "Appends a quoted string to a given buffer.", "Reference": "Appends a quoted string to the given string buffer.", "NNUpdater": "Appends the descriptor of the given class to the given string builder."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Thus, you are encouraged to keep the returned {@link FCPPluginClient} it in memory and use it for as long as you need it.", "Reference": "Thus, you are encouraged to keep the returned {@link FCPPluginConnection} in memory and use it for as long as you need it.", "NNUpdater": "The client message handler is available as the passed {@link FredPluginFCPClient} client."}
{"Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}", "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveToRangeEnd }{@code >}}", "NNUpdater": "Create an instance of {@link JAXBElement }{@code <}{@link CTStrokeChild }{@code >}}"}
{"Origin": "Logs in the user to the GAE simulation environment as an instructor (without admin rights).", "Reference": "Logs in the user to the GAE simulation environment as an instructor (without admin rights or student rights).", "NNUpdater": "Access level: admin, instructors using own id."}
{"Origin": "Returns a copy of this ZonedDateTime changing the zone offset to the earlier of the two valid offsets at a local time-line overlap.", "Reference": "Returns a copy of this date-time changing the zone offset to the earlier of the two valid offsets at a local time-line overlap.", "NNUpdater": "If you simply want to use the later offset at overlaps then call {@link ZonedDateTime#withLaterOffsetAtOverlap()} immediately after this method."}
{"Origin": "This factory converts the arbitrary date-time object to an instance of {@code OffsetTime}.", "Reference": "This factory converts the arbitrary temporal object to an instance of {@code OffsetTime}.", "NNUpdater": "This factory converts the arbitrary date-time object to an instance of {@code OffsetDateTime}."}
{"Origin": "Computes the offset of the layout selected by a given layout path, where the path is considered rooted in this layout.", "Reference": "Computes the offset, in bits, of the layout selected by a given layout path, where the path is considered rooted in this layout.", "NNUpdater": "If given layout is null, a VerticalLayout with margins set is used as a default."}
{"Origin": "Returns the base section paint.", "Reference": "Returns the default section paint.", "NNUpdater": "Returns the default paint."}
{"Origin": "Returns the key matcher which chooses which keys the listener should be notified of.", "Reference": "Returns the binding matcher which chooses which bindings the listener should be notified of.", "NNUpdater": "Adds a new callback, which should be notified about the model's events."}
{"Origin": "Sets the price that was traded, in decimal form.", "Reference": "Sets the price that was traded, together with the trade date, optional.", "NNUpdater": "Sets the future that was traded."}
{"Origin": "Waits during {@code timeout} until master pod has a specified {@code expectedRevision}.", "Reference": "Waits during {@code timeoutInSec} until master pod has a specified {@code expectedRevision}.", "NNUpdater": "Insert a revision for {@code key} as {@code value} in {@code locator} at {@code version} into this Block."}
{"Origin": "Update current starting address in the data store.", "Reference": "Update current head segment in the data store.", "NNUpdater": "Return the current starting address."}
{"Origin": "Runtime.NONE with default values.", "Reference": "Starlark.NONE with default values.", "NNUpdater": "Default: None"}
{"Origin": "Returns Object deserialized from XML text.", "Reference": "Returns Object deserialized from XML content.", "NNUpdater": "Returns a wallet deserialized from the given input stream and wallet extensions."}
{"Origin": "Register sub-objects such as caches", "Reference": "Register sub-objects such as caches and our own metrics", "NNUpdater": "Update all caching nodes"}
{"Origin": "Calls {@link Plugin#willDeclareGetter(TypeSpec.Builder, PropertyGenerator, MethodSpec.Builder)} on all the bundled plugins", "Reference": "Calls {@link Plugin#beforeDeclareGetter(TypeSpec.Builder, PropertyGenerator, MethodSpec.Builder)} on all the bundled plugins", "NNUpdater": "Calls {@link Plugin#didDeclareGetter(TypeSpec.Builder, PropertyGenerator, MethodSpec)} on all the bundled plugins"}
{"Origin": "You will need to {@link #unregisterScreenOffReceiver() unregister} it later.", "Reference": "You will need to {@link #unregisterScreenEventsReceiver() unregister} it later.", "NNUpdater": "Unregisters the service."}
{"Origin": "{@codesnippet com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.createSubDirectory#String}", "Reference": "{@codesnippet com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient.createSubdirectory#String}", "NNUpdater": "{@codesnippet com.azure.storage.file.directoryClient.createSubDirectoryWithResponse#string-map-Context}"}
{"Origin": "Traverse all nodes of a PrefsTab and return a mapping from PrefsTab to all its Labeled type nodes.", "Reference": "Traverse all nodes of a PreferencesTab and return a mapping from PreferencesTab to all its Labeled type nodes.", "NNUpdater": "Set Register."}
{"Origin": "Invokes {@link HTTPSamplerBase#readResponse(SampleResult, InputStream, int)}", "Reference": "Invokes {@link HTTPSamplerBase#readResponse(SampleResult, InputStream, long)}", "NNUpdater": "Test {@link HdfsFileInputStream#read(byte[])}."}
{"Origin": "set sheet time in excel file", "Reference": "set sheet title in excel file", "NNUpdater": "Set the sheet name."}
{"Origin": "Implements Operator.PIPE.", "Reference": "Implements 'x | y'.", "NNUpdater": "Construct a name comprised of the group and name."}
{"Origin": "Parses the ``ParenthesizedExpr`` rule without the opening parenthesis.", "Reference": "Parses the ``ParenthesizedExpr`` rule.", "NNUpdater": "Parses the ``ParenthesizedExpr`` rule without the opening parenthesis."}
{"Origin": "filters a list of method for MOP methods.", "Reference": "Filters a list of method for MOP methods.", "NNUpdater": "Filter on annotated methods."}
{"Origin": "Gets the mount point information from a mount information.", "Reference": "Gets the mount point information for display from a mount information.", "NNUpdater": "For more information, see DescribeMountTargets and"}
{"Origin": "Don't report the passed metrics types for all metrics (e.g.", "Reference": "Don't report the passed metric attributes for all metrics (e.g.", "NNUpdater": "Remove the {@link JobMetrics} instance for the given job."}
{"Origin": "Set a global ``subscription`` hook to intercept signals produced by the passed terminal {@link Subscriber}.", "Reference": "Set a global ``subscription`` hook to intercept signals produced by the passed terminal {@link CoreSubscriber}.", "NNUpdater": "Apply {@link Hooks#onNewSubscriber(BiFunction)} hook to the passed {@link Subscriber} and return eventually transformed subscriber."}
{"Origin": "If false, the built-in (non-CuDNN) implementation for ConvolutionLayer will be used", "Reference": "If true, the built-in (non-MKL/CuDNN) implementation for ConvolutionLayer will be used", "NNUpdater": "Returns the {@code Module} with the given name in this layer, or if not in this layer, the {@linkplain #parent parent} layer."}
{"Origin": "Provides a {@link GoogleCredential} from the service account's JSON key file.", "Reference": "Provides a {@link GoogleCredentialsBundle} from the service account's JSON key file.", "NNUpdater": "Provides a {@link RequestMappingKey} for the given method."}
{"Origin": "log of n choose k", "Reference": "The log of n choose k.", "NNUpdater": "Choose if the will be used to predict a numeric value."}
{"Origin": "Deserializes the previously serialized TokenStream using the provided AttributeSerializer(s).", "Reference": "Deserializes the previously serialized TwitterTokenStream using the provided AttributeSerializer(s).", "NNUpdater": "Deserializes an object from the specified stream using the Thread Context"}
{"Origin": "Helper that allows to create {@link LikeNode} without having to instantiate new objects.", "Reference": "Helper that allows to create {@link StartsWith} without having to instantiate new objects.", "NNUpdater": "Invokes Constructor::newInstance to instantiate a provider."}
{"Origin": "Checks a name to ensure that it's a legal type name.", "Reference": "Checks a name to ensure that it's a legal qualified class name.", "NNUpdater": "Ensure that:"}
{"Origin": "Automatically triggers stack trace sampling if statistics are not available or outdated.", "Reference": "Automatically triggers task back pressure sampling if statistics are not available or outdated.", "NNUpdater": "Returns a new {@link Builder} with default options."}
{"Origin": "This test will be called by {@link AxisPath#index} if the context value only consists of database nodes.", "Reference": "This test will only be called by {@link AxisPath#index} if the root is no value, or if it only contains database nodes.", "NNUpdater": "This test will only be utilized by {@link AxisPath#index} if all context values are database nodes."}
{"Origin": "Sets the value of the securityDescriptor property.", "Reference": "Sets the value of the securityDescriptorAttr property.", "NNUpdater": "Sets the value of the GroupNames property for this object."}
{"Origin": "See Immutable List Static Factory Methods for details.", "Reference": "See Unmodifiable Lists for details.", "NNUpdater": "The returned List is immutable."}
{"Origin": "Convert to primitive types, returning default value if text is null.", "Reference": "Convert to double, returning default value if text is inconvertible.", "NNUpdater": "Convert all types, both reference and primitive, to {@code Object}."}
{"Origin": "Checks whethet a given combination of path and resource type belongs to an inherited container configuration file.", "Reference": "Checks whether a given combination of path and resource type belongs to an inherited container configuration file.", "NNUpdater": "Proves is this resource is inside the specified project."}
{"Origin": "If a value is specified for linkPrefix, then a link is generated with linkPrefix + prettyName of the property from the configuration class.", "Reference": "Verify that if a value is specified for the {@code linkPrefix} xproperty, then a link is generated with linkPrefix + prettyName of the property from the configuration class.", "NNUpdater": "Returns a prefix for the specified id."}
{"Origin": "Registers a receiver to finish activity when screen goes off.", "Reference": "Registers a receiver to finish activity when screen goes off and to refresh window flags on screen on.", "NNUpdater": "Finish the test."}
{"Origin": "Sets the global index.", "Reference": "Returns the server log writer.", "NNUpdater": "Sets the type and the value of a global property"}
{"Origin": "NOTE: Changes to dynamic parameters are applied immediately.", "Reference": "Changes to dynamic parameters are applied immediately.", "NNUpdater": "This creates the appropriate changes to be applied in order to change a IRI."}
{"Origin": "Set name of the Cosmos DB MongoDB database.", "Reference": "Set the resource value.", "NNUpdater": "Set Spaltenname."}
{"Origin": "File format of the scored parses <# of parses>\\t", "Reference": "File format of the scored parses:", "NNUpdater": "Parses a number."}
{"Origin": "Returns the ratings entry persistence.", "Reference": "Returns the asset entry set like persistence.", "NNUpdater": "Returns the document library file entry persistence."}
{"Origin": "ResolutionException} for exactly the same reasons specified in {@code resolveRequires}.", "Reference": "ResolutionException} for exactly the same reasons specified in {@code resolve}.", "NNUpdater": "VerificationTimes.exactly(3) );"}
{"Origin": "Any error can be retrieved by calling {@link #getErrors(UUID)}.", "Reference": "Any error can be retrieved by using the returned {@link ScriptMailResult}.", "NNUpdater": "The text can be set by calling:"}
{"Origin": "Gets the amount of the notional exchange.", "Reference": "Gets the payment amount.", "NNUpdater": "Gets the primary currency of the product."}
{"Origin": "No connection to the host is attempted.", "Reference": "No connection to the hosts is attempted.", "NNUpdater": "Sets the hostname."}
{"Origin": "Gets the value of the any property.", "Reference": "Gets the value of the schemaLanguage property.", "NNUpdater": "Gets the value of the fill property."}
{"Origin": "Apply {@link #coerce(String, Type, Object, ReadDataContext)} method to a collection item.", "Reference": "Apply {@link #coerce(String, Type, CNode, DataContext)} method to a collection item.", "NNUpdater": "Operation fails."}
{"Origin": "bulk insert the buffered data into the store.", "Reference": "bulk insert the buffered data into the store iff", "NNUpdater": "Executes a bulk insert of the eamArtifacts added from the addAttributeInstanceBulk() method"}
{"Origin": "And verify that the allocation should finish soon after the maxBlockTimeMs.", "Reference": "And verify that the allocation attempt finishes soon after the maxBlockTimeMs.", "NNUpdater": "Set the creationTime value."}
{"Origin": "ID of the OAuth client", "Reference": "ID of the OpenID client", "NNUpdater": "put and range with non auth client"}
{"Origin": "When the returned value is not null use Cookie methods getName() and getValue() to set the Cookie header on an HTTP request with header value of", "Reference": "If the returned value is not null, use Cookie methods getName() and getValue() to set the Cookie header on an HTTP request with header value of", "NNUpdater": "get custom headers"}
{"Origin": "Creates needed cross-reference entries between the given primary (pk) and natural (naturalIdValues) key values for the given persister.", "Reference": "Creates needed cross-reference entries between the given primary (pk) and natural (naturalIdValues) key values for the given descriptor.", "NNUpdater": "Return the version value."}
{"Origin": "Verifies the status message in the page is same as the one specified.", "Reference": "Verifies that the texts of user status messages in the page are equal to the expected texts.", "NNUpdater": "Verifies that the actual value does not have the same class as the given object."}
{"Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}", "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveToRangeEnd }{@code >}}", "NNUpdater": "Create an instance of {@link JAXBElement }{@code <}{@link CTStrokeChild }{@code >}}"}
{"Origin": "To create a {@link DatabaseId} from known name and UUID.", "Reference": "To create a {@link NamedDatabaseId} from known name and UUID.", "NNUpdater": "Returns newly created port pair id object."}
{"Origin": "Processes an invalid character.", "Reference": "Processes an invalid codepoint.", "NNUpdater": "WicketTester."}
{"Origin": "Sets the event index.", "Reference": "Sets the event indexes.", "NNUpdater": "Sets the request events."}
{"Origin": "Parses an RFC3339 date/time value with millisecond precision and returns this as a {@link", "Reference": "Parses an RFC3339 date/time value with nanosecond precision and returns this as a {@link", "NNUpdater": "Returns the property value as a Timestamp."}
{"Origin": "Execute and passed template.", "Reference": "Execute the passed template.", "NNUpdater": "Execute group."}
{"Origin": "Returns an adjusted time based on this time.", "Reference": "Returns an adjusted copy of this time.", "NNUpdater": "This returns a {@code ZonedDateTime}, based on this one, with the date-time adjusted."}
{"Origin": "Sets the occurrence indicator to 1 if the first expression returns at least one non-array item, or if it refers to the context item.", "Reference": "Sets the occurrence indicator to 1 if the first expression returns at least one non-array item.", "NNUpdater": "Returns the first item from the array."}
{"Origin": "If circular initialization of the system class loader is detected then an unspecified error or exception is thrown.", "Reference": "If circular initialization of the system class loader is detected then an {@code IllegalStateException} is thrown.", "NNUpdater": "If the value of the field is negative then an exception is thrown during printing."}
{"Origin": "This uses the default project ID configured see {@link ServiceOptions#getDefaultProjectId}.", "Reference": "See {@link ServiceOptions#getDefaultProjectId}.", "NNUpdater": "Get Projekt."}
{"Origin": "If the setting is locked, then no modifications can be made to this setting.", "Reference": "If it is, then no modifications can be made to this setting.", "NNUpdater": "Test setting the setup file."}
{"Origin": "Delete nodes from Recycle Bin ### Functional Description: Permanently remove a list of nodes from the Recycle Bin.", "Reference": "Delete nodes from recycle bin ### Functional Description: Permanently remove a list of nodes from the recycle bin.", "NNUpdater": "API to check if the recycle bin feature is active recycle bin is activated in xwiki.cfg or in the XWiki"}
{"Origin": "Returns the result of interpreting the object as an instance of 'Plugin Bundle Update Information'.", "Reference": "Returns the result of interpreting the object as an instance of 'Plugin Bundle'.", "NNUpdater": "Returns the result of interpreting the object as an instance of 'Plugin Bundle Update Information'."}
{"Origin": "Obtains an instance from zero rate sensitivity and bond group.", "Reference": "Obtains an instance from zero rate sensitivity and group.", "NNUpdater": "Obtains a {@code ZeroRateSensitivity} from the curve currency, date and value."}
{"Origin": "Update the data source which ingest jobs are being displayed for", "Reference": "Changes the data source for which ingest jobs are being displayed.", "NNUpdater": "Gets snapshots of the progress of each of this ingest job's child data source ingest jobs."}
{"Origin": "Converts a Raml documentation to a Restlet definition.", "Reference": "Translates a Raml documentation to a Restlet definition.", "NNUpdater": "Standard Algorithm Names Documentation for Java 11."}
{"Origin": "Return a scalar {@code Codec} for the given range.", "Reference": "Return a scalar {@code Encodec} for the given range.", "NNUpdater": "Returns a {@link CodecDescriptor} for the given type or null if none found."}
{"Origin": "The {@link RsaKeyCreateOptions#getKeySize() keySize} can be optionally specified.", "Reference": "The {@link CreateRsaKeyOptions#getKeySize() keySize} can be optionally specified.", "NNUpdater": "The {@link RsaKeyCreateOptions#getKeySize() keySize} can be optionally specified."}
{"Origin": "Register a handler method and its unique mapping, on startup.", "Reference": "Register a handler method and its unique mapping.", "NNUpdater": "Register a handler for Json messages."}
{"Origin": "Adds a new job to the job queue to remove the specified extension from the specified namespace.", "Reference": "Adds a new job to the job queue to perform the given uninstall request.", "NNUpdater": "Adds the specified namespace to a temporary node."}
{"Origin": "Write a line of the CoNLL output.", "Reference": "Produce a line of the CoNLL output.", "NNUpdater": "Write the subscription options part of the line (including the #!)."}
{"Origin": "Returns the list of IDs of all the {@link CpuProfiler.TraceInfo} created in the current session, ordered by ``from`` timestamp.", "Reference": "Returns the list of IDs of all the {@link Cpu.CpuTraceInfo} created in the current session, ordered by ``from`` timestamp.", "NNUpdater": "Return the list of all created {@link QueryProfiler}s so far."}
{"Origin": "If there is no separate publisher ID property defined, this group name will also be used as a WAN publisher ID.", "Reference": "If there is no separate publisher ID property defined, this cluster name will also be used as a WAN publisher ID.", "NNUpdater": "Clears the WAN queues for the wan replication name and publisher ID defined by the command parameters."}
{"Origin": "{@code protocol} and {@code proxy} will be null and {@code throwable} will be non-null in the case of a failed connection attempt.", "Reference": "{@code protocol} and {@code proxy} will be null and {@code ioe} will be non-null in the case of a failed connection attempt.", "NNUpdater": "A {@code null} CharSequence will return {@code null}."}
{"Origin": "It will provide temporary loader component in place of final component until its data is fully loaded.", "Reference": "It will also provide temporary loader component in place of final component until its data is fully loaded.", "NNUpdater": "Creates component."}
{"Origin": "Returns the selected remote file", "Reference": "Returns the selected remote resource", "NNUpdater": "Returns the selected item of this menu."}
{"Origin": "Returns the {@link CaptureRequestConfig} for the {@link CaptureStage} object.", "Reference": "Returns the {@link CaptureConfig} for the {@link CaptureStage} object.", "NNUpdater": "Set Capture Sequence."}
{"Origin": "Set the values for some metadata keys on a collection alias.", "Reference": "Set the values for some properties keys on a collection alias.", "NNUpdater": "Sets a metadata."}
{"Origin": "When no time zone is specified at all, UTC is presumed.", "Reference": "When no time zone is specified at all, we use the default.", "NNUpdater": "Convert the date using the specified calendar."}
{"Origin": "Prints the providers that are used by the services specified in the given modules.", "Reference": "Prints the providers that are used by the specified services.", "NNUpdater": "Prints a set of modules to the manifest or bundle file."}
{"Origin": "Set read only mode.", "Reference": "Toggle read only mode.", "NNUpdater": "Set the XStream mode to use."}
{"Origin": "Conversion to a InstructionHandle is done in InstructionList(byte[]).", "Reference": "InstructionHandle is done in InstructionList(byte[]).", "NNUpdater": "The instruction producing input to this instruction."}
{"Origin": "It is a wrapper of readNative to handle InterruptedException.", "Reference": "It is a wrapper of readInner to handle InterruptedException.", "NNUpdater": "See Handle InterruptedException"}
{"Origin": "The writes are done across 2 different instantiations of the same SMRMap.", "Reference": "The writes are done across 2 different instantiations of the same CorfuTable.", "NNUpdater": "Writes the Map as a JSON."}
{"Origin": "Saves changes from the bound fields to the given bean if all validators (binding and bean level) pass.", "Reference": "Writes changes from the bound fields to the given bean if all validators (binding and bean level) pass.", "NNUpdater": "Saves changes from the bound fields to the given bean if all validators pass."}
{"Origin": "Creates an audit entry for the 'service published' event.", "Reference": "Creates an audit entry for the 'API published' event.", "NNUpdater": "Adds an event."}
{"Origin": "Opens the specified query file.", "Reference": "Opens and focuses the specified query file.", "NNUpdater": "Opens the file as a {@link InputStream}."}
{"Origin": "Optimization does *not* apply to pattern:", "Reference": "Optimization applies to pattern:", "NNUpdater": "to the optimization policy."}
{"Origin": "Returns the base section stroke.", "Reference": "Returns the default section stroke.", "NNUpdater": "Returns the default stroke."}
{"Origin": "Given a pattern, which contains one or more capturing groups, and a String, returns a list with the values of the captured groups in the pattern.", "Reference": "Given a pattern and a string, returns a list with the values of the captured groups in the pattern.", "NNUpdater": "Guide."}
{"Origin": "Constructs the metric object from the thrift format.", "Reference": "Constructs the metric object from the proto format.", "NNUpdater": "Returns the {@link ThriftCall} object which includes Thrift call information of the log."}
{"Origin": "The default implementation in this class returns if the version matches, and creates a new {@link ProtocolVersion} otherwise.", "Reference": "The default implementation in this class returns {@code this} if the version matches, and creates a new {@link ProtocolVersion} otherwise.", "NNUpdater": "``version`` returns prefix + ``Version``"}
{"Origin": "Stopping of FluentCucumberTestAdapter", "Reference": "Stopping of FluentCucumberTest adapter", "NNUpdater": "Compilers the given {@code cucumberFeatures} to {@link PickleEvent}s."}
{"Origin": "Changes the default factory.", "Reference": "Set the default factory.", "NNUpdater": "By default it is configured as an instance of {@link BindParameterCustomizerFactory}."}
{"Origin": "Filter a list of {@link MetadataSearchResultRecord} that ensures the logged-in user has a privilege on", "Reference": "Filter a list of {@link MetadataSearchResultRecordV2} that ensures the logged-in user has a privilege on", "NNUpdater": "Returns the last user that has logged in that are still valid."}
{"Origin": "The function should return a value in the same currency for any rates provider of CreditRatesProvider.", "Reference": "The function should return a value in the same currency for any rates provider of {@code CreditRatesProvider}.", "NNUpdater": "The expected currency amount of the cash flow is the same as {@link #forecastValue(FraProduct, RatesProvider)}."}
{"Origin": "Returns a list of allowed keys.", "Reference": "Returns a message with allowed keys.", "NNUpdater": "Get the keys."}
{"Origin": "If {@code replaceWithByteArrayCoder} is set, then replace that unknown coder with a {@link ByteArrayCoder}.", "Reference": "If {@code replaceWithByteArrayCoder} is set, then replace that unknown coder with a {@link", "NNUpdater": "Returns a {@link CoderProvider} which uses the {@link ProtoCoder} for {@link Message proto messages}."}
{"Origin": "If propogate is true, the wrapped stream will also be flushed.", "Reference": "If propagate is true, the wrapped stream will also be flushed.", "NNUpdater": "This stream is flushed if {@code oneByte} is equal to the character {@code '\\n'} and this stream is set to autoFlush."}
{"Origin": "Checks if the given name is a legal binary name.", "Reference": "Checks if the given name is a legal type name.", "NNUpdater": "Returns the PropertyName for the given name if it exists, null otherwise."}
{"Origin": "Returns the default SelectorProvider.", "Reference": "Returns the default SelectorProvider implementation.", "NNUpdater": "Returns the IO controller."}
{"Origin": "Creates a new SchemaInfoLevel builder with settings for minimum schema information.", "Reference": "Creates a new SchemaInfoLevel with settings for minimum schema information.", "NNUpdater": "Schema found for given schemaPath is a root schema."}
{"Origin": "Report all the flocks in the repository.", "Reference": "Report all the tribes in the repository.", "NNUpdater": "Engine."}
{"Origin": "Switching off ignoreTermFreq will return a simple averaging over all the terms found in the index", "Reference": "Setting ignoreTermFreq = True will return a simple averaging over all the terms in the query", "NNUpdater": "Returns TermStats[] ordered by the specified comparator"}
{"Origin": "Get name of the Cosmos DB SQL database.", "Reference": "Get the resource value.", "NNUpdater": "Gets the cosmos database properties"}
{"Origin": "Evaluates the {@code buildFileAST} into a {@link Package}.", "Reference": "Evaluates the parsed BUILD file {@code file} into a {@link Package}.", "NNUpdater": "Parses and evaluates {@code buildFile} with custom {@code eventHandler} and returns the resulting {@link Package} instance."}
{"Origin": "Creates an UnicastSubject with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription.", "Reference": "Creates an UnicastSubject with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription or the subject is terminated.", "NNUpdater": "Creates a cached Flowable with the given capacity hint."}
{"Origin": "Called when there's change in the search result requested by the previous {@link MediaBrowser2#search(String, Bundle)}.", "Reference": "Called when there's change in the search result requested by the previous {@link MediaBrowser2#search(String, LibraryParams)}.", "NNUpdater": "Called when a controller requested to prefetch playback from a search query through {@link MediaController2#prefetchFromSearch(String, Bundle)}."}
{"Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}", "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveFromRangeEnd }{@code >}}", "NNUpdater": "Create an instance of {@link JAXBElement }{@code <}{@link CTStrokeChild }{@code >}}"}
{"Origin": "Returns the {@link ColumnInfo} for the passed class name.", "Reference": "Returns the {@link ColumnInfo} for the passed class (internal) name.", "NNUpdater": "Return definingClassName, so that getClassInfo() returns the {@link ClassInfo} object for the containing class."}
{"Origin": "Returns an array containing some validators in order to validate the", "Reference": "Returns an array containing some validators in order to validate the JimpleBody", "NNUpdater": "validateSignature."}
{"Origin": "Sets the member's logical timestamp.", "Reference": "Sets the member's incarnation number.", "NNUpdater": "Returns the member address."}
{"Origin": "Delegates to {@link ServerHttpRequest#getContextPath()}.", "Reference": "Delegates to {@link ServerHttpRequest#getPath()}.", "NNUpdater": "Maps to {@link #execute(HttpUriRequest,HttpContext) execute(request, context)}."}
{"Origin": "Returns an {@link Operator} that performs commit or rollback of a transaction.", "Reference": "Returns an {@link Transformer} that performs commit or rollback of a transaction.", "NNUpdater": "Rollback or Commit for query only transaction."}
{"Origin": "Sets a custom ValueFormatter for all DataSets this data object contains.", "Reference": "Sets a custom IValueFormatter for all DataSets this data object contains.", "NNUpdater": "Returns the custom XAxisValueFormatter that is set for this data object."}
{"Origin": "Traverse the OCSP certificate.", "Reference": "Traverse a certificate.", "NNUpdater": "Sets the OCSP responses."}
{"Origin": "Executes a long work instances on a single node and verifies that it took enough time and executed on the expected node.", "Reference": "Executes a long work instances on a single node and verifies that it took enough time and executed on the expected node (the other one since Policy.ALWAYS)", "NNUpdater": "Executes a single request on the current thread and returns the response."}
{"Origin": "Gets the Right value or an alternate value, if the projected Either is a Left.", "Reference": "Gets the Right value or an alternate value, if the Either is a Left.", "NNUpdater": "Gets the Left value or an alternate value, if the projected Either is a Right."}
{"Origin": "Gets the units of this drug order", "Reference": "Gets the dose units of this drug order", "NNUpdater": "Most units are related to other units."}
{"Origin": "Add the argument to the value of this integer.", "Reference": "Add the argument to the value of this long.", "NNUpdater": "Returns the Soy integer value."}
{"Origin": "Sets data to be parsed by libflac.", "Reference": "Sets the data to be parsed.", "NNUpdater": "Returns the parsed expression."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Obtains an instance from the curve currency, date, sensitivity currency, bond group and value.", "Reference": "Obtains an instance from the curve currency, date, sensitivity currency, group and value.", "NNUpdater": "Obtains an instance from the observation, reference currency and sensitivity value, specifying the currency of the value."}
{"Origin": "Runs the {@link Callable task} in the request scope initialized from the {@link RequestScope.Instance scope instance}.", "Reference": "Runs the {@link Callable task} in the request scope initialized from the {@link RequestContext scope context}.", "NNUpdater": "Maps a {@link Scope} instance to a given annotation."}
{"Origin": "Sets the price that was traded, in decimal form.", "Reference": "Sets the price that was traded, together with the trade date, optional.", "NNUpdater": "Sets the future that was traded."}
{"Origin": "Create store lock checker with lock on a provided path if it exists and writable", "Reference": "Create store lock checker with lock on a provided store layout if it exists and writable", "NNUpdater": "If the lock can be acquires the lock count is updated on this and the transaction lock element (tle)."}
{"Origin": "The negative of {@code absent} is {@link #contains}.", "Reference": "The negative of {@code absent} is {@link #containing}.", "NNUpdater": "Fails if the {@link Optional}{@code } is absent or the subject is null."}
{"Origin": "Saves the muCommander configuration.", "Reference": "Saves the muCommander CONFIGURATION.", "NNUpdater": "Returns the version number of the latest muCommander release."}
{"Origin": "Setter for bookModified property", "Reference": "Setter for bookModifiedOrUpgraded property", "NNUpdater": "Setter for property type."}
{"Origin": "If the class is unpackaged, return an empty string.", "Reference": "If the class is in the default package, return an empty string.", "NNUpdater": "An empty (````) CharSequence will return ````."}
{"Origin": "An {@link ResolvedSwapLeg} represents the same data as this leg, but with a complete schedule of dates defined using {@link KnownAmountPaymentPeriod}.", "Reference": "An {@link ResolvedSwapLeg} represents the same data as this leg, but with a complete schedule of dates defined using {@link KnownAmountSwapPaymentPeriod}.", "NNUpdater": "An {@link ResolvedSwapLeg} represents the same data as this leg, but with a complete schedule of dates defined using {@link KnownAmountPaymentPeriod}."}
{"Origin": "The meta-property for the {@code index} property.", "Reference": "The meta-property for the {@code volatilitiesName} property.", "NNUpdater": "The meta-property for the {@code observation} property."}
{"Origin": "Returns a map of alias -> module for each imported module.", "Reference": "Returns a map of module -> alias for each imported module.", "NNUpdater": "Expected format: {@code appList: app (| app)*}"}
{"Origin": "Checks IncrementalCommand cancellation detection", "Reference": "Checks IncrementalCommand cancellation", "NNUpdater": "Searches for the incremental backup marker and parses the incremental portion."}
{"Origin": "Adds an unqualified ``exports dynamic private`` directive to the declaration.", "Reference": "Adds an unqualified ``opens`` directive to the declaration.", "NNUpdater": "Adds a ``requires transitive`` directive to the declaration."}
{"Origin": "Two pointers.", "Reference": "Sliding window.", "NNUpdater": "Two Pointers."}
{"Origin": "Create and display the picture view.", "Reference": "Create and display the initial view.", "NNUpdater": "Create and display the picture view."}
{"Origin": "Obtain a {@link RemoteRepository} for the data set having the specified SPARQL end point.", "Reference": "Obtain a flyweight {@link RemoteRepository} for the data set having the specified SPARQL end point.", "NNUpdater": "Engine."}
{"Origin": "Set the barline that starts the part.", "Reference": "Set the PartBarline that starts the part.", "NNUpdater": "Insert a barline inter as part of the logical barline."}
{"Origin": "Launch the tool.", "Reference": "Launch the tool and exit.", "NNUpdater": "Sets the tool class by name."}
{"Origin": "Set the left 3x3 submatrix of this {@link Matrix4x3d} to that of the given {@link Matrix4x3d} and don't change the other elements.", "Reference": "Set the left 3x3 submatrix of this {@link Matrix4x3d} to that of the given {@link Matrix4x3dc} and don't change the other elements.", "NNUpdater": "Set the left 3x3 submatrix of this {@link Matrix4x3f} to that of the given {@link Matrix4x3f} and don't change the other elements."}
{"Origin": "Brings the BIND nodes in a correct order according to the dependencies that they have.", "Reference": "Brings the nodes in a correct order according to binding req dependencies that they have.", "NNUpdater": "Returned in the order they were added."}
{"Origin": "Write the property name and values into a StringBuffer", "Reference": "Write the property name and values into a StringBuilder", "NNUpdater": "Set the name value pair into the StringBuilder."}
{"Origin": "Creates an uninitialized {@link HadoopFormatIO.Write}.", "Reference": "Creates an {@link Write.Builder} for creation of Write Transformation.", "NNUpdater": "This test validates functionality of {@link HadoopInputFormatIO.Read#validateTransform()"}
{"Origin": "A resource in a named modules may be encapsulated so that it cannot be located by code in other modules.", "Reference": "A resource in a named module may be encapsulated so that it cannot be located by code in other modules.", "NNUpdater": "Returns a full set of module adapters, including module adapters for child modules."}
{"Origin": "called from TaskManager - creates a persistent receipt and updates the passed one w/ the UUID", "Reference": "Called from TaskManager - Creates a persistent receipt", "NNUpdater": "Persistent task implementers shouldn't call this method directly and use {@link AllocatedPersistentTask#updatePersistentTaskState} instead"}
{"Origin": "returns the number of 64 bit words it would take to hold numBits", "Reference": "Returns the number of 64 bit words it would take to hold numBits", "NNUpdater": "Returns the capacity in bits of the array implementing this {@code BitSet}."}
{"Origin": "Get data of type {@code ``text``} from the client side {@code DataTransfer} object.", "Reference": "Get data of type {@code ``text``} from the {@code DataTransfer} object.", "NNUpdater": "Create an {@code internal} source for a deparsed package from {@code text} and {@code packageName}."}
{"Origin": "Test that removing a column sets its width to zero.", "Reference": "Test that removing a column sets its width to zero and the display to none.", "NNUpdater": "Gets the pixel width of column"}
{"Origin": "Builds a rollup column qualifier prefix,prepending the appender as a string along with a colon as delimiter", "Reference": "Builds a rollup column qualifier, prepending the appender as a string along with a colon as delimiter", "NNUpdater": "Returns -1 as this appender does nothing."}
{"Origin": "Getting Domain Information in the Amazon CloudSearch Developer Guide .", "Reference": "CloudSearch Developer Guide.", "NNUpdater": "For more information, see Sorting Results in the Amazon CloudSearch Developer Guide."}
{"Origin": "Gets the contractType.", "Reference": "Gets the contractTypes.", "NNUpdater": "Set Datum AE."}
{"Origin": "Get client socket for connection.", "Reference": "Get client endpoints for connection.", "NNUpdater": "Returns the socket of this connection object."}
{"Origin": "First construct a map whose key is the endpoint in the GossipDigest and the value is the", "Reference": "First construct a map whose key is the node in the GossipDigest and the value is the", "NNUpdater": "The key is the endpoint on which the data is being placed and the value is the endpoint to which it should be forwarded."}
{"Origin": "Creates a new KeyInter object.", "Reference": "Create and add a new KeyInter object.", "NNUpdater": "Report the list of AbstractChordInter instances (rests & heads) in the neighborhood of the specified Inter."}
{"Origin": "Get a command locator that uses the {@link Service service locator} mechanism to find providers by their service key.", "Reference": "Get a command locator that uses the service loading mechanism to find providers by their service key.", "NNUpdater": "Get the iterable of all providers (custom and default) registered for the given service provider contract in the underlying {@link ServiceLocator HK2 service locator} container."}
{"Origin": "NOTE:You cannot delete a security group that is associated with any clusters.", "Reference": "You cannot delete a security group that is associated with any clusters.", "NNUpdater": "You cannot delete an application version that is associated with a running environment."}
{"Origin": "Gets a localized message string based on the locale determined by the", "Reference": "Gets a localized message string based on the locale determined by the FacesContext.", "NNUpdater": "Returns a String describing this resource loader, which is (localized to the system default locale) ."}
{"Origin": "Reads the specified file and returns the contents as a string.", "Reference": "Reads the specified file and returns the contents as a byte array.", "NNUpdater": "Returns the contents."}
{"Origin": "Returns {@code TokenStream} to tokenize a text.", "Reference": "Returns {@code TwitterTokenStream} to tokenize a text.", "NNUpdater": "Test method."}
{"Origin": "RFC 2616, section VERSION defines comma as the separator for #token sequences.", "Reference": "RFC 2616, section VERSION defines comma as the separator for {@code #token} sequences.", "NNUpdater": "Strictly validates {@code name} conforms to RFC 2616, section VERSION."}
{"Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}", "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveToRangeEnd }{@code >}}", "NNUpdater": "Create an instance of {@link JAXBElement }{@code <}{@link CTStrokeChild }{@code >}}"}
{"Origin": "Renders an HTML '{@code option}' with the supplied value and label.", "Reference": "Render an HTML '{@code option}' with the supplied value and label.", "NNUpdater": "and renders the tags in Markdown."}
{"Origin": "Split SYSTEM.CATALOG at the given split point", "Reference": "Synchronously split table at the given split point", "NNUpdater": "Computes and returns the best split point."}
{"Origin": "It allows to test values from the elements in safer way than by using {@link #extracting(String)}, as it doesn't utilize introspection.", "Reference": "It allows to test values from the elements in safer way than by using {@link #extracting(String)}, as it doesn't use introspection.", "NNUpdater": "Operation fails."}
{"Origin": "Sets the class name remote service.", "Reference": "Sets the journal article remote service.", "NNUpdater": "Sets the document library file entry remote service."}
{"Origin": "Let the ViewGroupHandler handle clearing attributes on a given component", "Reference": "Let the ViewGroupHandler handle clearing attributes on the given components.", "NNUpdater": "Sets the query's distinct on clause (clearing any previously specified distinct on settings)."}
{"Origin": "User names will always be checked in a case insensitive manner.", "Reference": "User names will always be checked in a case insensitive manner using the system default Locale.", "NNUpdater": "use case-sensitive matching."}
{"Origin": "Obtains an instance based on a single mapping from index to volatility identifier.", "Reference": "Obtains an instance based on a maps for credit, discount and recovery rate curves.", "NNUpdater": "Obtains an instance from the observation and sensitivity value."}
{"Origin": "Receives a problem and a queue implementing the search strategy and computes a node referencing a goal state, if such a state was found.", "Reference": "Template method which receives a problem and a queue implementing the search strategy and computes a node referencing a goal state, if such a state was found.", "NNUpdater": "Receives a problem and a queue implementing the search strategy and computes a node referencing a goal state, if such a state was found."}
{"Origin": "Gets the base name, minus the full path and extension, from a full filename.", "Reference": "Gets the base name, minus the full path and extension, from a full fileName.", "NNUpdater": "Sets the full name."}
{"Origin": "If for a specific event, you add both the notification configuration on the vault and also specify an SNS topic in your initiate job request, Amazon Glacier sends both notifications.", "Reference": "If for a specific event, you add both the notification configuration on the vault and also specify an SNS topic in your initiate job request,", "NNUpdater": "Config sends following notifications using an Amazon SNS topic that you have specified."}
{"Origin": "a FileChooser for PCSI12 (.p12|.P12) files.", "Reference": "a FileChooser for PCSI12 (.p12|.P12) or JKS files.", "NNUpdater": "p01,p02,...,p23."}
{"Origin": "By default, the service returns no processing metrics.", "Reference": "By default, the service splits transcripts based solely on the pause interval.", "NNUpdater": "*** get service metrics by given service name."}
{"Origin": "If any offset in other is a less than or equal to an offset in this, then that offset is an offset for the array in lub.", "Reference": "If any offset in other is a less than or equal to an offset in this, then that offset is an offset for the sequence in lub.", "NNUpdater": "Set the cursor."}
{"Origin": "Converts an array of raw binary data into an array of ascii 0 and 1 characters.", "Reference": "Converts an array of raw binary data into an array of ASCII 0 and 1 characters.", "NNUpdater": "Converts a byte array into a {@link ByteString}."}
{"Origin": "Indexes in-between the old size and the requested size are left with a placeholder that is replaced with a factory object when requested.", "Reference": "Indexes in-between the old size and the requested size are left with a placeholder that is replaced with a factory or transformer object when requested.", "NNUpdater": "If the requested number of slots is 0, this method returns {@code null}."}
{"Origin": "Returns the command sequence number.", "Reference": "Returns the command sequence numbers.", "NNUpdater": "Returns the session operation sequence number."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Like {@link #defaultFormatRelationshipFileHeader(Supplier)} with UTC as the default time zone.", "Reference": "Like {@link #defaultFormatRelationshipFileHeader(boolean)} with no normalization.", "NNUpdater": "(Default: false)"}
{"Origin": "Returns a copy of this qualifier with array-offset pairs where in the original the offset contains an access of an array length in arrays.", "Reference": "Returns a copy of this qualifier with sequence-offset pairs where in the original the offset contains an access of an sequence length in {@code sequences}.", "NNUpdater": "Returns a copy of this OffsetDate with a different zone offset."}
{"Origin": "Returns the value of ``serverScheme`` property in latke.properties, returns ```` if not found.", "Reference": "Returns the value of ``serverScheme`` property in latke.properties.", "NNUpdater": "Returns the value of ``serverScheme`` property in latke.properties, returns ```` if not found."}
{"Origin": "Sets the base section stroke.", "Reference": "Sets the default section stroke.", "NNUpdater": "Returns the default stroke."}
{"Origin": "To allow getting the item, return the {@link LibraryResult} with the {@link LibraryResult#RESULT_CODE_SUCCESS} and the media item.", "Reference": "To allow getting the item, return the {@link LibraryResult} with the {@link LibraryResult#RESULT_SUCCESS} and the media item.", "NNUpdater": "Otherwise, this will return a {@link ReadWriteEvent} for which {@link ReadWriteEvent#isNull()} returns ."}
{"Origin": "Returns the DynamicList used by this SortableListPanel.", "Reference": "Returns the {@link DynamicList} used by this SortableListPanel.", "NNUpdater": "Returns the metadata."}
{"Origin": "Defaults to {@literal false}.", "Reference": "Defaults to {@literal RESP3}.", "NNUpdater": "Useful for debugging."}
{"Origin": "- Mutual trust exists between gateway and service - We must use the `gateway2` cert NOT `gateway`.", "Reference": "- Mutual trust exists between gateway and API - We must use the `gateway2` cert NOT `gateway`.", "NNUpdater": "Returns the type of the transport."}
{"Origin": "Returns the identifier of this action profile group.", "Reference": "Returns the ID of this action profile group.", "NNUpdater": "Returns the id of this entry."}
{"Origin": "Create a new {@link MergedAnnotation} instance from the specified annotation type.", "Reference": "Create a new {@link MergedAnnotation} instance of the specified annotation type.", "NNUpdater": "annotation* SEMICOLON"}
{"Origin": "Returns true if this TaggedInfo has at least 1 comprises tag.", "Reference": "Returns true if this TaggedInfo has a non-null comprises list.", "NNUpdater": "Returns iff one of the files exists otherwise"}
{"Origin": "Configures the wait duration which specifies how long the CircuitBreaker should stay open, before it switches to half open.", "Reference": "Configures an interval function with a fixed wait duration which controls how long the CircuitBreaker should stay open, before it switches to half open.", "NNUpdater": "Sets the wait duration the CircuitBreaker should stay open, before it switches to half closed."}
{"Origin": "Total runtime size is 1296 bytes", "Reference": "Total runtime size is 14048 bytes", "NNUpdater": "Total runtime size is 13952 bytes"}
{"Origin": "Set Stringwert.", "Reference": "Set Eingaberegister Name.", "NNUpdater": "Add result set."}
{"Origin": "Caches numeric host names only.", "Reference": "Caches numeric IPs only.", "NNUpdater": "Set the dnsZoneId value."}
{"Origin": "Security attributes, provide the ability to associate arbitrary information with a security in a key-value map.", "Reference": "Security attributes provide the ability to associate arbitrary information in a key-value map.", "NNUpdater": "Gets the information about the security price."}
{"Origin": "On the other hand, in the sentence ``... which Mr. Bush was fighting for``, we should have pobj(for, which).", "Reference": "On the other hand, in the sentence ``... which Mr. Bush was fighting for``, we should have case(which, for).", "NNUpdater": "Operation fails."}
{"Origin": "Returns a new Task that, when this task completes normally, executes the given action using the supplied Scheduler.", "Reference": "Returns a new Task that, when this task completes normally, executes the given action using the supplied Executor.", "NNUpdater": "Returns a new Task that, when this task completes normally, is executed using the default Scheduler."}
{"Origin": "If the compatibility is INCOMPATIBLE, returns the first part of the reader schema that failed compatibility check.", "Reference": "Returns the fragment of the reader schema that failed compatibility check.", "NNUpdater": "Validate factory compatibility at creation time."}
{"Origin": "returns the my site fragment from the sites tab", "Reference": "returns the my site fragment from the sites page", "NNUpdater": "Gets the siteId of the given user's My Workspace Generally ~userId but may not be"}
{"Origin": "Return the underlying RabbitTemplate used for sending.", "Reference": "Return the underlying {@link RabbitTemplate} used for sending.", "NNUpdater": "Gets the {@link Value.Mutable} for the {@link RabbitType} of this {@link Rabbit}."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Called by {@link MediaSession2Stub#getLibraryRoot(IMediaController2, Bundle)}.", "Reference": "Called by {@link MediaSession2Stub#getLibraryRoot(IMediaController2, int, ParcelImpl)}.", "NNUpdater": "Called when a controller requested to prefetch for playing a specific mediaId through {@link MediaController2#prefetchFromMediaId(String, Bundle)}."}
{"Origin": "NOTE: A data retrieval policy can cause your initiate retrieval job request to fail with a PolicyEnforcedException exception.", "Reference": "A data retrieval policy can cause your initiate retrieval job request to fail with a PolicyEnforcedException exception.", "NNUpdater": "Test Inserting a DOM Document."}
{"Origin": "Also @see {@link Future#accumulate(CollectionX, Reducer)} if you would like a failure to result in a Future with an error", "Reference": "Also @see {@link Future#accumulate(IterableX, Reducer)} if you would like a failure to result in a Future with an error", "NNUpdater": "Depends on {@code buildImageFutureFuture.get()} and {@code pushAuthorizationFuture}."}
{"Origin": "Contet for these types was not logged.", "Reference": "Content for these types was not logged.", "NNUpdater": "Returns the date/time that the event was logged."}
{"Origin": "Executes all listeners {@linkplain #add added} prior to this call, serially and in order.", "Reference": "Dispatches all listeners {@linkplain #enqueue enqueued} prior to this call, serially and in order.", "NNUpdater": "{@linkplain ReferenceManager.RefreshListener} instance to configure."}
{"Origin": "Adds a new tag for the specified {@link NamespacedEntityId}.", "Reference": "Adds a new tag for the specified {@link MetadataEntity}.", "NNUpdater": "Adds a new tag for the specified {@link NamespacedEntityId}."}
{"Origin": "Determine if the supplied class is an inner class.", "Reference": "Determine if the supplied class is an inner class, i.e.", "NNUpdater": "Detect the default configuration classes for the supplied test class."}
{"Origin": "Sets a new ShapeRenderer responsible for drawing this DataSet.", "Reference": "Sets a new IShapeRenderer responsible for drawing this DataSet.", "NNUpdater": "Set encoder."}
{"Origin": "Applies the optimization (main entry point).", "Reference": "Applies the optimization to the given query root.", "NNUpdater": "to the optimization policy."}
{"Origin": "Creates query for the given searchPattern.", "Reference": "Queries this search source for the given searchPattern.", "NNUpdater": "2014-09-09-Holiday"}
{"Origin": "Get Qty Issued.", "Reference": "Get Ausgelagerte Menge.", "NNUpdater": "Get Minderwertige Menge."}
{"Origin": "This delegates to {@link #execute(CommandSender, String, String[], ResourceBundle,", "Reference": "This delegates to {@link #execute(CommandSender, String, String[], CommandMessages)}.", "NNUpdater": "This method uses {@link String#indexOf(String)} if possible."}
{"Origin": "Creates query for the given queryString.", "Reference": "Queries this search source for the given queryString.", "NNUpdater": "-D"}
{"Origin": "Returns a list of classes which contain the @Deprecated annotation.", "Reference": "Returns a list of class names which contain the @Deprecated annotation.", "NNUpdater": "Returns the names of classes on the classpath that have the specified annotation."}
{"Origin": "Returns the border size that defines the attack range for a {@link robocode.SentryRobot SentryRobot}.", "Reference": "Returns the border size that defines the attack range for a {@link robocode.BorderSentryRobot SentryRobot}.", "NNUpdater": "Builds and sends an {@link Event} to the Sentry server using the statically stored {@link SentryClient} instance."}
{"Origin": "Aurora on Amazon RDS in the Amazon RDS User Guide.", "Reference": "Aurora, see Aurora on Amazon RDS in the Amazon RDS User Guide.", "NNUpdater": "Creates a object from an Amazon Relational Database Service (Amazon RDS)."}
{"Origin": "Inserts or updates an external ID.", "Reference": "Deletes an external ID.", "NNUpdater": "Set External Line ID."}
{"Origin": "Trading Strategy - we expect the engine to shutdown.", "Reference": "StrategyException from Trading Strategy - we expect the engine to shutdown.", "NNUpdater": "Trading Strategy - we expect the engine to shutdown."}
{"Origin": "If the divider character isn't found in the word, then the whole string becomes the word, and lemma and tag are .", "Reference": "If the divider character isn't found in the word, then the whole string becomes the word, and lemma and tag are {@code null}.", "NNUpdater": "Sets the word."}
{"Origin": "Examines the a file's first bytes and estimates the file's type.", "Reference": "Examines the file's bytes and estimates the file's type.", "NNUpdater": "Returns the resource."}
{"Origin": "This information is useful for implicit and safe casting.", "Reference": "This information is useful for optional arguments with default value.", "NNUpdater": "This method is useful when validating that there will be no casting errors."}
{"Origin": "Construct a new MemberSummaryBuilder.", "Reference": "Construct a new MemberSummaryBuilder for a general type.", "NNUpdater": "Construct a new AnnotationTypeBuilder."}
{"Origin": "Foreign call: {@link SnippetRuntime#DEOPTTEST}.", "Reference": "Foreign call: {@link #DEOPTTEST}.", "NNUpdater": "Operation fails."}
{"Origin": "Removes a block type definition from the factory.", "Reference": "Removes a block type definition from this factory.", "NNUpdater": "Removes bean definition from the container, including all references."}
{"Origin": "All the arrays must have the same number of elements in each array.", "Reference": "All the arrays must have the same number of elements.", "NNUpdater": "Asserts that two byte arrays contain the same elements in the same order."}
{"Origin": "Creates and starts a Tailer for the given file.", "Reference": "Creates and starts a Tailer for the given file with default buffer size.", "NNUpdater": "Allows the tailer to complete its current loop and return."}
{"Origin": "Initializing jerseyClient.", "Reference": "Initilialization of jersey.", "NNUpdater": "Initilialization of jersey."}
{"Origin": "Sets the video diplaying component for the streamed remote desktop.", "Reference": "Sets the video displaying component for the streamed remote desktop.", "NNUpdater": "Desktop Connection."}
{"Origin": "Sets BCC addresses.", "Reference": "Appends CC address.", "NNUpdater": "Sets BCC addresses."}
{"Origin": "Returns the object at the specified index, if there is one, or .", "Reference": "Returns the object at the specified index, if there is one, or {@code null}.", "NNUpdater": "Returns the key at the specified index."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Creates an {@link ExecutorService} object backed by a thread pool with a fixed number of threads..", "Reference": "Creates an {@link ExecutorService} object backed by a thread pool.", "NNUpdater": "Creates a {@link JavaExecutorBackedDefaultDepsAwareExecutor} with given {@code numberOfThreads}."}
{"Origin": "A candidate package name is derived from an entry using the characters up to, but not including, the last forward slash.", "Reference": "A candidate package name is derived from the name using the characters up to, but not including, the last forward slash.", "NNUpdater": "Throws an exception if the path argument to load() starts with more than one forward slash ('/')"}
{"Origin": "Calculates the cash flow for a trading record.", "Reference": "Calculates the cash flow for the closed trades of a trading record.", "NNUpdater": "Calculates the cash flow for a single trade."}
{"Origin": "If the compatibility is INCOMPATIBLE, returns the first part of the writer schema that failed compatibility check.", "Reference": "Returns the fragment of the writer schema that failed compatibility check.", "NNUpdater": "Validate factory compatibility at creation time."}
{"Origin": "Set wether the Vert.x file resolver uses caching for classpath resources.", "Reference": "Set whether the Vert.x file resolver uses caching for classpath resources.", "NNUpdater": "Sets the vertical field value."}
{"Origin": "Converting {@code http} and URIs to their WebSocket equivalent", "Reference": "Converting {@code http} and {@code https} URIs to their WebSocket equivalent", "NNUpdater": "The result is equivalent to {@code this & pow(2, n) != 0}."}
{"Origin": "If Autopsy is indeed running from command line, then use the command line startup window and kick off command line processing.", "Reference": "If Autopsy is indeed running from command line, then use the command line startup window.", "NNUpdater": "Runs a test from the command line."}
{"Origin": "Return a live {@link ZooKeeper} connection.", "Reference": "The {@link ZooKeeper} connection for the client.", "NNUpdater": "Create a {@link ModuleDeploymentStatus} from a ZooKeeper path and data."}
{"Origin": "Gets the curent contents of this byte stream as a string.", "Reference": "Gets the curent contents of this byte stream as a string using the platform default charset.", "NNUpdater": "Reads the contents of a file in the {@code resources} folder."}
{"Origin": "wrap type in Class<> if usingClass==true", "Reference": "Wrap type in Class<> if usingClass==true.", "NNUpdater": "An example of an ontology list is: Class: A SubClassOf [in X, Y, Z] B."}
{"Origin": "Get Project Type Phases", "Reference": "get Project Type Tasks", "NNUpdater": "Get Projektart."}
{"Origin": "Test for reading paragraphs from Range after replacing some text in this Range.", "Reference": "Test for reading paragraphs from Range after replacing some text in this", "NNUpdater": "Sets the range."}
{"Origin": "Returns true if this result represents a malformed-input error.", "Reference": "Tells whether or not this object describes a malformed-input error.", "NNUpdater": "Returns this encoder's when a malformed input error occurred during the encoding process."}
{"Origin": "Receives a {@link ViewIdInfo} and returns the name of the View class that is implied by it.", "Reference": "Receives a {@link ViewIdData} and returns the name of the View class that is implied by it.", "NNUpdater": "Get the view class for this provider."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "This test ensures that the {@link KuduIO} correctly respects parallelism by deserializes writers and that each writer is opening and closing Kudu sessions.", "Reference": "This test ensures that the {@link KuduIO} correctly respects parallelism by deserializing writers and that each writer is opening and closing Kudu sessions.", "NNUpdater": "Returns the index of the opening parenthesis, i.e."}
{"Origin": "Convert to primitive types, returning default value if text is null.", "Reference": "Convert to integer, returning default value if text is inconvertible.", "NNUpdater": "Convert all types, both reference and primitive, to {@code Object}."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Converts an {@link Observable} into a {@link Promise}, for the observable's single item.", "Reference": "Converts an {@link SingleOnSubscribe} into a {@link Promise}, for the Single's item.", "NNUpdater": "Creates a {@link Single} that emits an item."}
{"Origin": "Sets the resultVariable.", "Reference": "Set the resultVariable.", "NNUpdater": "Sets the declared return type of this variable."}
{"Origin": "Removes all metadata (including properties and tags) for the specified {@link NamespacedEntityId}.", "Reference": "Removes all metadata (including properties and tags) for the specified {@link MetadataEntity}.", "NNUpdater": "Removes all metadata (including properties and tags) for the specified {@link NamespacedEntityId}."}
{"Origin": "Uploads a file to a share using a multipart request containing a metadata part and a filedata part.", "Reference": "Upload a file to a share using a multipart request containing first a metadata (see reponse) part and a then the filedata part.", "NNUpdater": "Build the part-list as the sequence of Result/LogicalPart instances, and map each of them to a Part."}
{"Origin": "This method is used to add a new resource to the signed info.", "Reference": "This {@code addDocument} method is used to add a new resource to the signed info.", "NNUpdater": "Gets the notional amount."}
{"Origin": "Sets the value of the cryptAlgorithmSid property.", "Reference": "Sets the value of the hashValue property.", "NNUpdater": "Sets the node IPv4 node SID of the router."}
{"Origin": "Returns {@link InstanceManager} relevant to current application.", "Reference": "Returns {@link InjectionManager} relevant to current application.", "NNUpdater": "Returns {@link ServiceLocator} relevant to current application."}
{"Origin": "Sets the column criterion currently used to sort the table.", "Reference": "Sets the column to be used as a criterion to sort the table.", "NNUpdater": "Get the column for the given table, if the sort column is for this table."}
{"Origin": "Returns the cluster name uniquely identifying the hazelcast cluster.", "Reference": "Returns the client name.", "NNUpdater": "Retrieve all of the cluster versions for the given cluster."}
{"Origin": "Ensure that {@link #loadSubscriptions(Context)} was called to set up the manager.", "Reference": "When first used {@link #checkEnabledExtensions(Context)} is called to set up the manager.", "NNUpdater": "Creates a new {@link TestContextManager} for the supplied test class and the configured default class name."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Gets the value of the sid attribute of the conference-info element.", "Reference": "Gets the value of the entity attribute of the conference-info element.", "NNUpdater": "Gets the IPv4 node SID of the router."}
{"Origin": "This GET scenario will return a setting when the etag provided does not match the one of the current setting.", "Reference": "This GET scenario will return a setting when the ETag provided does not match the one of the current setting.", "NNUpdater": "If {@link ConfigurationSetting#getETag() etag} is specified, the configuration value is updated if the current setting's etag matches."}
{"Origin": "Returns a value of UTC milliseconds representing today for the device's current timezone.", "Reference": "Returns the UTC milliseconds representing the first moment of today in local timezone.", "NNUpdater": "Returns an instance of VTimeZone corresponding to the specified timezone id."}
{"Origin": "retrieve / build the crawlspecification for the given arguments.", "Reference": "retrieve / build the CrawljaxConfiguration for the given arguments.", "NNUpdater": "Retrieves the provider associated to the passed name."}
{"Origin": "Returns the length of this path.", "Reference": "its number of steps.", "NNUpdater": "Returns the absolute file path."}
{"Origin": "Register the given dynamic JMX MBean.", "Reference": "Registers the JMX MBean.", "NNUpdater": "Register a JMX MBean for a rule."}
{"Origin": "Verify access to a member, returning {@code false} if no access", "Reference": "Verify access to a member and return {@code true} if it is granted.", "NNUpdater": "Gives access to Data."}
{"Origin": "Gets the threshold parameter.", "Reference": "Get the threshold parameter.", "NNUpdater": "Set the bias array."}
{"Origin": "Returns a lightweight, low-level parent axis iterator.", "Reference": "Returns a light-weight, low-level parent axis iterator.", "NNUpdater": "Returns the low-level HTTP call."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "{@codesnippet com.azure.storage.blob.specialized.BlobAsyncClientBase.setHTTPHeaders#BlobHttpHeaders}", "Reference": "{@codesnippet com.azure.storage.blob.specialized.BlobAsyncClientBase.setHttpHeaders#BlobHttpHeaders}", "NNUpdater": "{@codesnippet com.azure.storage.blob.specialized.BlobClientBase.Builder.buildAsyncClient}"}
{"Origin": "This is a helper method intended to be called from {@link getAnnotationMirrorOfContractAnnotation} and {@link getAnnotationMirrorOfMetaAnnotation}.", "Reference": "This is a helper method intended to be called from {@link getAnnotationMirrorOfContractAnnotation} and {@link getAnnotationMirrorOfContractAnnotation}.", "NNUpdater": "Equivalent to {@code annotation(annotationType.getName(), emptyMap())}."}
{"Origin": "Increment the count of all applied state updates by {@param num}.", "Reference": "Increment the count of all applied state updates in Litho components by {@param num}.", "NNUpdater": "Increment source count by 1."}
{"Origin": "Convert the attribute if necessary and add it to the profile.", "Reference": "Convert a profile attribute, if necessary, and add it to the profile.", "NNUpdater": "Set the identifier."}
{"Origin": "Spark Rest (camel-spark-rest)", "Reference": "Apache Spark (camel-spark)", "NNUpdater": "Writes a properties file which is used to config Spark Metrics in {@link SparkConf}."}
{"Origin": "Returns a comparator which can compare calendar events.", "Reference": "Returns the default comparator which can compare calendar events by duration.", "NNUpdater": "Sorts this list according to the order induced by the specified {@link Comparator}."}
{"Origin": "Send request to the server with early blockwise negociation through block2 option.", "Reference": "Send request to the server with early blockwise negotiation through block2 option.", "NNUpdater": "Sends a message to the server."}
{"Origin": "Add a series for a Bubble type chart using using double arrays", "Reference": "Add a series for a Bubble type chart using using Lists", "NNUpdater": "Add a series to the chart using Collections"}
{"Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}", "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveFromRangeEnd }{@code >}}", "NNUpdater": "Create an instance of {@link JAXBElement }{@code <}{@link CTStrokeChild }{@code >}}"}
{"Origin": "Tests that track selector will select audio tracks with higher bit-rate when other factors are the same, and tracks are within renderer's capabilities.", "Reference": "Tests that track selector will select audio tracks with higher bit rate when other factors are the same, and tracks are within renderer's capabilities, and have the same language.", "NNUpdater": "Set the list of Tracks for this Playlist to tracks."}
{"Origin": "{@codesnippet com.azure.data.appconfiguration.ConfigurationClient.setSetting#String-String-String}", "Reference": "{@codesnippet com.azure.data.appconfiguration.ConfigurationClient.setConfigurationSetting#String-String-String}", "NNUpdater": "{@codesnippet com.azure.data.appconfiguration.ConfigurationClient.setSetting#String-String-String}"}
{"Origin": "Checks if the reader is closed, and throws a {@code XMLStreamException} if so.", "Reference": "Check if the reader is closed, and throws a {@code XMLStreamException} if so.", "NNUpdater": "Throws AlreadyClosedSqlException or QueryCanceledSqlException if this"}
{"Origin": "KeyCreateOptions#getNotBefore() notBefore} values are optional.", "Reference": "CreateKeyOptions#getNotBefore() notBefore} values are optional.", "NNUpdater": "2) The method is not annotated with @Test, @Before, @After, @BeforeClass, or @AfterClass."}
{"Origin": "Starts a new process tracing span and attached context the EventData object for users.", "Reference": "Starts a new process tracing span and attaches the returned context to the EventData object for users.", "NNUpdater": "Return a span operator pointcut given a {@link BeanFactory}."}
{"Origin": "Returns a new TokenStream which provides the same output as the original TokenStream.", "Reference": "Returns a new TwitterTokenStream which provides the same output as the original TwitterTokenStream.", "NNUpdater": "Returns the original token."}
{"Origin": "Returns the source map file from the most recent recompile.", "Reference": "Returns the source map file given a strong name.", "NNUpdater": "Returns the clipboard data."}
{"Origin": "Returns an unmodifiable view of the status of all steps in this run.", "Reference": "Returns an unmodifiable view of all step information in this run.", "NNUpdater": "Returns an unmodifiable view of the status of all steps in this run."}
{"Origin": "See Immutable Set Static Factory Methods for details.", "Reference": "See Unmodifiable Sets for details.", "NNUpdater": "VerificationTimes supports multiple static factory methods:"}
{"Origin": "Get a netty {@link SslContext} instance.", "Reference": "Create a Netty {@link SslContext}", "NNUpdater": "Return an instance of {@link SSLContext} used for SSL connection."}
{"Origin": "Obtains an instance of {@code OffsetTime} from an {@code Instant}.", "Reference": "Obtains an instance of {@code OffsetTime} from an {@code Instant} and zone ID.", "NNUpdater": "Obtains an instance of {@code OffsetTime} from an {@code Instant}."}
{"Origin": "Creates query for the given queryString.", "Reference": "Queries this contact source for the given queryString.", "NNUpdater": "-D"}
{"Origin": "Group: consumer", "Reference": "Group: producer", "NNUpdater": "Guide."}
{"Origin": "Flat the linked hashmap of profiles into a list of profiles.", "Reference": "Flat the map of profiles into a list of profiles.", "NNUpdater": "Flush all active profiles."}
{"Origin": "Create a new node with the given child node commented.", "Reference": "Create a new node with a comment added to the given child.", "NNUpdater": "If the specified node is not a child of this node, returns an empty Optional."}
{"Origin": "DyRepos can add and remove repos.", "Reference": "DyTalks can add a talk.", "NNUpdater": "Saves to all repositories"}
{"Origin": "Query this inventory for inventories matching the supplied {@link PropertyMatcher}.", "Reference": "Query this inventory for inventories matching the supplied {@link KeyValueMatcher}.", "NNUpdater": "Called when one of the parent inventories of this Inventory changes an Item"}
{"Origin": "Returns the values for the specified parameter expected to be present in the http request.", "Reference": "Returns the values for the specified parameter expected to be present in the HTTP request.", "NNUpdater": "The limit parameter in the request."}
{"Origin": "Construct a {@link AggregationExceptions#TYPE_KEEP_SEPARATE} ContentProviderOperation.", "Reference": "Construct a {@link AggregationExceptions#TYPE_AUTOMATIC} ContentProviderOperation.", "NNUpdater": "Operation fails."}
{"Origin": "Configuring Scaling Options in the Amazon CloudSearch Developer Guide .", "Reference": "CloudSearch Developer Guide.", "NNUpdater": "For more information, see Sorting Results in the Amazon CloudSearch Developer Guide."}
{"Origin": "{@link Keys#ARMOR_STAND_MARKER}", "Reference": "{@link Keys#ARMOR_STAND_HAS_MARKER}", "NNUpdater": "Gets the {@link Boolean} {@link Value.Mutable} of whether this {@link ArmorStand} is considered a ``marker`` stand."}
{"Origin": "This helps live testing against specific zones only.", "Reference": "This helps live testing against specific regions only.", "NNUpdater": "Run a single query."}
{"Origin": "Decode an action profile group with members information to a PI action group.", "Reference": "Decode an action profile group with members information to a PI action profile group.", "NNUpdater": "Guide."}
{"Origin": "Main method to invoke this demo about how to detect language of a text input.", "Reference": "Main method to invoke this demo about how to detect the language of an input text.", "NNUpdater": "A language may be detected from an existing file using {@link #findLanguage(File)}."}
{"Origin": "Backup previous streamEnv config and set batch configs.", "Reference": "Sets batch configs.", "NNUpdater": "Override the config by system properties."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Extract the first two version numbers from java.version (e.g.", "Reference": "Extract the major version number from java.version.", "NNUpdater": "``version`` returns prefix + ``Version``"}
{"Origin": "The current thread might be already in any request scope and in that case the scope will be changed to the scope defined by the {@link RequestScope.Instance scope instance}.", "Reference": "The current thread might be already in any request scope and in that case the scope will be changed to the scope defined by the {@link RequestContext scope instance}.", "NNUpdater": "Maps a {@link Scope} instance to a given annotation."}
{"Origin": "Returns true if the current AlluxioURI is a parent of another AlluxioURI.", "Reference": "Returns true if the current AlluxioURI is an ancestor of another AlluxioURI.", "NNUpdater": "Tests the {@link AlluxioURI#AlluxioURI(String)} constructor for basic HDFS paths."}
{"Origin": "Generates an instance of {@link OpenedObject} for which the underlying stream may be re-opened and retried based on the exception and retry condition.", "Reference": "Generates an instance of {@link OpenObject} for which the underlying stream may be re-opened and retried based on the exception and retry condition.", "NNUpdater": "By default requests are retried: {@link RetryParams#getDefaultInstance()} is used."}
{"Origin": "IMPORTANT:If the cancelRequested flag returns true, a cancellation is being attempted.", "Reference": "If the flag returns , a cancellation is being attempted.", "NNUpdater": "Returns sBit."}
{"Origin": "See {@link MetricType}.", "Reference": "See {@link MetricAttribute}.", "NNUpdater": "See {@link DataType#getMediaType()}."}
{"Origin": "Get the scrService Object associated with this instance of", "Reference": "Get the ServiceComponentRuntime Object associated with this instance of", "NNUpdater": "Get an optional value associated with a key."}
{"Origin": "Comma separated list of parameters to pass to the scheduler", "Reference": "Comma separated list of parameters to pass to the scheduler or procedure", "NNUpdater": "Parameters of a method or function."}
{"Origin": "However if this property is used, the auto-detection is turned off.", "Reference": "If this property is used, auto-detection is turned off.", "NNUpdater": "This method is called only by the RolapCube and is only called if caching is to be turned off."}
{"Origin": "Sets the values.", "Reference": "Set the values.", "NNUpdater": "Sets the entry ``V`` to the given values."}
{"Origin": "Computes the average for each pixel across all bands in the {@link Planar} image.", "Reference": "Computes the average for each pixel across selected bands in the {@link Planar} image.", "NNUpdater": "Computes the average for each pixel across all bands in the {@link Planar} image."}
{"Origin": "Return the length of the quaternion (the norm, the magnitude).", "Reference": "Return the euclidean length of the quaternion (the norm, the magnitude).", "NNUpdater": "Return the square of the length of this quaternion."}
{"Origin": "Contet for these types was not logged.", "Reference": "Content for these types was not logged.", "NNUpdater": "Returns the date/time that the event was logged."}
{"Origin": "Sets the {@link IpRange} which determines the IP ranges that are allowed to use the SAS.", "Reference": "Sets the {@link SasIpRange} which determines the IP ranges that are allowed to use the SAS.", "NNUpdater": "Sets the {@link IpRange} which determines the IP ranges that are allowed to use the SAS."}
{"Origin": "Configuring Analysis Schemes in the Amazon CloudSearch Developer Guide .", "Reference": "CloudSearch Developer Guide.", "NNUpdater": "For more information, see Sorting Results in the Amazon CloudSearch Developer Guide."}
{"Origin": "BufferStrategy} == {@link BufferStrategy#BLOCKING}, shutdown consumers maybe cause blocking when producing.", "Reference": "BufferStrategy} == {@link BufferStrategy#BLOCKING}, shutdown consumeDriver maybe cause blocking when producing.", "NNUpdater": "Tests {@link BlockingBuffer#get()} in combination with {@link BlockingBuffer#add(Object)} using multiple read threads."}
{"Origin": "Tests the {@link InodeTree#createPath(RpcContext, LockedInodePath, CreatePathOptions)} method for creating a file.", "Reference": "Tests the {@link InodeTree#createPath(RpcContext, LockedInodePath, CreatePathContext)} method for creating a file.", "NNUpdater": "Tests the {@link InodeTree#createPath(LockedInodePath, CreatePathOptions)} method for creating a file."}
{"Origin": "Gets the modelId.", "Reference": "Gets the model.", "NNUpdater": "Gets the modelId."}
{"Origin": "For an overview on tagging an Amazon RDS resource, see", "Reference": "For an overview on tagging an Amazon RDS resource, see Tagging Amazon RDS Resources.", "NNUpdater": "For an overview on tagging an Amazon RDS resource, see"}
{"Origin": "Sets the default value for this option that will be used if the option is provided on command line without an explicit value.", "Reference": "Marks value optional and sets the default value for this option that will be used if the option is provided on command line without an explicit value.", "NNUpdater": "Create option for command line option 'pig' or 'hive'"}
{"Origin": "Helper method: turn an array of strings into a list of CoreLabels TODO: move elsewhere?", "Reference": "Helper method: turn an array of strings into a list of CoreLabels", "NNUpdater": "Converts list of strings to nullable array of strings."}
{"Origin": "Generates a code sample for using {@link ShareDirectoryClient#deleteSubDirectory(String)}", "Reference": "Generates a code sample for using {@link ShareDirectoryClient#deleteSubdirectory(String)}", "NNUpdater": "Generates a code sample for using {@link DirectoryClient#deleteSubDirectoryWithResponse(String, Context)}"}
{"Origin": "To retrieve subsequent pages, make additional calls to PollForDecisionTask using the nextPageToken returned by the initial call.", "Reference": "To retrieve subsequent pages, make additional calls to using the returned by the initial call.", "NNUpdater": "NextToken member of a subsequent call to DescribeSnapshots."}
{"Origin": "Converts an {@link IntIntOpenHashMap} into a flat int [] array.", "Reference": "Converts an {@link IntIntHashMap} into a flat int [] array.", "NNUpdater": "Converts an {@link IntIntOpenHashMap} into a flat int [] array."}
{"Origin": "Returns the specified font, but with the style's bold and italic flags applied.", "Reference": "Returns the specified font, but with the style's bold flags applied.", "NNUpdater": "Returns the specified font, but with the style's bold, underline and italic flags applied."}
{"Origin": "Unique metric name is in the format of A.B.C", "Reference": "It is in the format of A:B:C, where", "NNUpdater": "Builds a complete metric name, of the form prefix.resource.metric"}
{"Origin": "Registers a new sitemap entry.", "Reference": "Creates a sitemap folder.", "NNUpdater": "Returns the site path."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Return a Protobuf OpenIETriple from a RelationTriple.", "Reference": "Return a Protobuf RelationTriple from a RelationTriple.", "NNUpdater": "given a triple t, see if it's a reification triple and if so return the internal selector; otherwise return null."}
{"Origin": "Returns whether this step specifies the given environment.", "Reference": "Returns whether this step deploys to the given region", "NNUpdater": "Method getStepDisplayName returns the stepDisplayName of this FlowStep object."}
{"Origin": "Inserts a new outgoing text message.", "Reference": "Inserts a new outgoing location message.", "NNUpdater": "Inserts text into the current document at the current caret position."}
{"Origin": "ExecutableProcessBundleDescriptor#getMultimapSideInputSpecs} for the set of multimap side inputs that are contained.", "Reference": "ExecutableProcessBundleDescriptor#getSideInputSpecs} for the set of side inputs that are contained.", "NNUpdater": "Creates a {@link HashMultimap} of the given entries with {@link Seq} as values container."}
{"Origin": "Kept for compatibility with NativeScript.", "Reference": "Kept for source-level compatibility with NativeScript.", "NNUpdater": "This method is kept only for compatibility and may get removed at any version in the future."}
{"Origin": "Return a self-configured monitored Resource.", "Reference": "Return a self-configured Stackdriver monitored resource.", "NNUpdater": "Return the configured {@link ReactiveAdapterRegistry}."}
{"Origin": "Delete all dir trees under a given 'dir' that don't start with one of a set of given 'prefixes'.", "Reference": "Delete all dir trees under a given 'dir' that don't start with a given 'prefix'.", "NNUpdater": "Unzips zipName --> dirName, removing dirName first"}
{"Origin": "Sets the value of default user (login or username).", "Reference": "Sets the value of default user (login or user name).", "NNUpdater": "Log the user using the given params after identifying if the login is a 3pid, a username or a phone number"}
{"Origin": "Handle action events for this component.", "Reference": "Handle change events for this component.", "NNUpdater": "The id for this drop request."}
{"Origin": "Gets the set of successors for this state", "Reference": "Gets the successor states for this search graph", "NNUpdater": "For backward analyses, this is the outgoing edges."}
{"Origin": "decode the {@link com.mongodb.DBObject} and provide the corresponding java (type-safe) object", "Reference": "decode the {@link com.mongodb.Document} and provide the corresponding java (type-safe) object", "NNUpdater": "decode the {@link com.mongodb.DBObject} and provide the corresponding java (type-safe) object"}
{"Origin": "Returns an immutable copy of {@code graph}.", "Reference": "Returns an immutable copy of {@code network}.", "NNUpdater": "Returns an immutable view of the current thread's context Map."}
{"Origin": "Return the current starting address.", "Reference": "Return the current head segment.", "NNUpdater": "Return the current starting address."}
{"Origin": "Get a list of objects being traced by this object.", "Reference": "Gets a list of objects being traced by this object.", "NNUpdater": "Return an array of s for all services being tracked by this ."}
{"Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}", "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveFromRangeEnd }{@code >}}", "NNUpdater": "Create an instance of {@link JAXBElement }{@code <}{@link CTStrokeChild }{@code >}}"}
{"Origin": "Sets the location provider configuration.", "Reference": "Sets the node discovery provider configuration.", "NNUpdater": "Sets the location of the read-only domain.xml configuration file."}
{"Origin": "Adds a value that has been seen n times to the observed values", "Reference": "Adds a weighted value to the observed values", "NNUpdater": "Sets the rate to be computed."}
{"Origin": "[A8] (In all other cases, public members will continue to be accessible.)", "Reference": "[A9] (In all other cases, public members will continue to be accessible.)", "NNUpdater": "(In all other cases, public members will continue to be accessible.)"}
{"Origin": "Returns the Lucene document with the given root path from the index.", "Reference": "Returns the Lucene document with the given structure id from the index.", "NNUpdater": "Returns a A_CmsIndexResource for a specified Lucene search result document."}
{"Origin": "IMPORTANT: This operation is vulnerable to exceeding the maximum URL size when making a REST request using the HTTP GET method.", "Reference": "This operation is vulnerable to exceeding the maximum URL size when making a REST request using the HTTP GET method.", "NNUpdater": "Set the default maximum response size."}
{"Origin": "Returns the value of the node as a string, or the specified undefined value if the node is undefined.", "Reference": "Returns the value of the node as a string, or the specified default value if the node is undefined.", "NNUpdater": "If the string is undefined, returns null."}
{"Origin": "Edits existing configuration schema.", "Reference": "Edits existing notification schema.", "NNUpdater": "Get existing log schema."}
{"Origin": "Sets content type of HTTP request.", "Reference": "Sets the content type of the HTTP request.", "NNUpdater": "the content length of an HTTP request."}
{"Origin": "Creates a {@code For}-comprehension of one Iterable.", "Reference": "Creates a {@code For}-comprehension of one Option.", "NNUpdater": "Equivalent to {@link #iterableStream(Iterable)} ."}
{"Origin": "Checks if the page {@link matchingPage} needs to be fetched.", "Reference": "Checks if the page needs to be fetched.", "NNUpdater": "assert link to page class."}
{"Origin": "Removes the range between start and end from the given exception handlers.", "Reference": "Removes the range between start and end from the Handler list that begins with the given element.", "NNUpdater": "Removes the range between start and end from the Handler list that begins with the given element."}
{"Origin": "This can be used to change any field, for example to set the hour-of-day.", "Reference": "This can be used to change any supported field, such as the hour, minute or second.", "NNUpdater": "Set the hour of the day to the specified value."}
{"Origin": "The option is a:", "Reference": "The option is a: type.", "NNUpdater": "Returns the {@link OptionsBase} class the defines the given option, null if the option isn't recognized."}
{"Origin": "Delegates to the handler's {@code toString()}.", "Reference": "Delegates to the handler and interceptors' {@code toString()}.", "NNUpdater": "Delegates to {@link StringUtils#ofBoolean(Boolean)}."}
{"Origin": "timed invokeAll(empty collection) returns empty collection", "Reference": "timed invokeAll(empty collection) returns empty list", "NNUpdater": "timed invokeAll(empty collection) returns empty list"}
{"Origin": "This method always returns false if this method has no accelerator.", "Reference": "This method always returns if this method has no accelerator.", "NNUpdater": "This implementation always returns false."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Replace all occurences of old in str with new.", "Reference": "Replace all occurrences of old in str with new.", "NNUpdater": "Clears the name occurrences."}
{"Origin": "Returns a number that encodes how contents of the arrangement are aligned horizontally.", "Reference": "Returns a number that encodes how contents of the %type% are aligned horizontally.", "NNUpdater": "Produce a string from a Number."}
{"Origin": "Gets the value of the 'ts' field.", "Reference": "Gets the value of the 'dec' field.", "NNUpdater": "Gets the value of the 'paramName' field."}
{"Origin": "Gets the specified message in the current locale.", "Reference": "Gets the data source with the specified id.", "NNUpdater": "Returns the locales for the current request."}
{"Origin": "Return the names of any classes referenced in the methods in this list.", "Reference": "Find the names of any classes referenced in the methods in this list.", "NNUpdater": "Render a list of names of the contained in this list."}
{"Origin": "Releases a netty channel to the channel pools.", "Reference": "Releases a block worker client to the client pools.", "NNUpdater": "Acquires a netty channel from the channel pools."}
{"Origin": "Sets the {@link IpRange} which determines the IP ranges that are allowed to use the SAS.", "Reference": "Sets the {@link SasIpRange} which determines the IP ranges that are allowed to use the SAS.", "NNUpdater": "Sets the {@link IpRange} which determines the IP ranges that are allowed to use the SAS."}
{"Origin": "These deps have already been marked (see {@link SkyframeHybridGlobber}) but we need to properly handle some errors that legacy package loading can't handle gracefully.", "Reference": "These deps have already been marked (see {@link SkyframeHybridGlobber}) but we need to properly handle symlink issues that legacy globbing can't handle gracefully.", "NNUpdater": "Returns {@link OperationHandle} associated with Explore {@link QueryHandle}."}
{"Origin": "A map from names which could be passed to {@link DescribableModel#CLAZZ} to types of allowable nested objects.", "Reference": "A map from names which could be passed to {@link ReflectiveDataModel#CLAZZ} to types of allowable nested objects.", "NNUpdater": "Converts a list of {@link TypeStringValuePair}s into a map of objects of the corresponding types."}
{"Origin": "Initialized from {@link Command#synopsisSubcommands()}, {@code ``[COMMANDS]``} by default.", "Reference": "Initialized from {@link Command#synopsisSubcommandLabel()}, {@code ``[COMMANDS]``} by default.", "NNUpdater": "Operation fails."}
{"Origin": "Sets the messaging address.", "Reference": "Sets the message return address.", "NNUpdater": "Sets the messaging address."}
{"Origin": "Request sync for Google accounts(not include G+ accounts) in filter.", "Reference": "Request sync for Google accounts(not include Google+ accounts) in filter.", "NNUpdater": "Running in {@link #loadStoredAccountsThread}, loads the stored accounts of the ProtocolProviderFactory services waiting in {@link #loadStoredAccountsQueue}"}
{"Origin": "Creates query for the given searchString.", "Reference": "Queries this contact source for the given searchString.", "NNUpdater": "Set search string for the ``type`` field."}
{"Origin": "Create client response filtering stage using the service locator.", "Reference": "Create client response filtering stage using the instance manager.", "NNUpdater": "Set Lagerort."}
{"Origin": "Returns a {@link Requires} for a dependence on a module with the given (and possibly empty) set of modifiers.", "Reference": "Returns a {@link Requires} for a dependence on a module with the given (and possibly empty) set of modifiers, and optionally the version recorded at compile time.", "NNUpdater": "Returns the set of modules that this module reads."}
{"Origin": "Generate an angle in the CbCr plane from the input string.", "Reference": "Generate an angle in the HSLuv color space from the input string.", "NNUpdater": "Generate DocumentCollection from input file."}
{"Origin": "Sets time interval between vacuum runs.", "Reference": "Sets time interval between MVCC vacuum runs in milliseconds.", "NNUpdater": "Test get interval time0."}
{"Origin": "Tests {@link NetworkBufferPool#requestMemorySegments(int)}, verifying it may be aborted and remains in a defined state even if the waiting is interrupted.", "Reference": "Tests {@link NetworkBufferPool#requestMemorySegments()}, verifying it may be aborted and remains in a defined state even if the waiting is interrupted.", "NNUpdater": "Operation fails."}
{"Origin": "This sets up a PoolingDataSource.", "Reference": "This sets up a PoolingDataSourceWrapper.", "NNUpdater": "This sets up a PoolingDataSource."}
{"Origin": "Sets the connection state listener decorator.", "Reference": "Sets the connection state listener manager factory.", "NNUpdater": "Invokes the service method with arguments."}
{"Origin": "Checks if a a fragment of a NAL unit from a specific FU-A RTP packet payload is keyframe or not", "Reference": "Checks if a fragment of a NAL unit from a specific FU-A RTP packet payload is keyframe or not.", "NNUpdater": "Gets the RTP payload type corresponding to a specific JMF encoding and clock rate."}
{"Origin": "This method behaves like {@code createObjectFromNewClassLoader(ClassLoader.getSystemClassLoader())}.", "Reference": "This method behaves like {@code createSerializableObjectFromNewClassLoader(ClassLoader.getSystemClassLoader())}.", "NNUpdater": "From {@link Class#getClassLoader() callingClass.getClassLoader() }"}
{"Origin": "Once the prefetch is done, the session will change its playback state to {@link SessionPlayer2#PLAYER_STATE_PAUSED}.", "Reference": "Once the prepare is done, the session will change its playback state to {@link SessionPlayer2#PLAYER_STATE_PAUSED}.", "NNUpdater": "Once the prefetch is done, the session will change its playback state to {@link SessionPlayer2#PLAYER_STATE_PAUSED}."}
{"Origin": "Returns the {@link SpawnActionContext} that should be used to execute the given spawn.", "Reference": "Returns the list of {@link SpawnActionContext}s that should be used to execute the given spawn.", "NNUpdater": "Returns the associated {@link ActionTemplate}"}
{"Origin": "Jsonify string.", "Reference": "Jsonify.", "NNUpdater": "String, SASProtocol, IpRange, String, String, String, String, String)}"}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Execute given {@link Sql @Sql} scripts.", "Reference": "Execute SQL scripts for the supplied {@link Sql @Sql} annotations.", "NNUpdater": "Execute an SQL Statement using a specific {@link Session}"}
{"Origin": "This method must only be used for type references whose sort is {@link #CLASS_EXTENDS CLASS_EXTENDS}.", "Reference": "This method must only be used for type references whose sort is {@link #CLASS_EXTENDS}.", "NNUpdater": "It must have a return type of org.hamcrest.Matcher (or something that extends this)."}
{"Origin": "Sets the description.", "Reference": "Set the description.", "NNUpdater": "Sets the classifierId."}
{"Origin": "This test uses some API hidden by the JDK9 module system.", "Reference": "This test uses some non-public API.", "NNUpdater": "Sets the value of the oleicon property."}
{"Origin": "The only other valid location for '}' is inside a StringLiteral.", "Reference": "The only other valid location for '}' is inside a", "NNUpdater": "Case 1: valid regular expression String or char literal"}
{"Origin": "Permanently deletes the course from the Datastore.", "Reference": "Deletes a course.", "NNUpdater": "Action: enter valid courseID and course name"}
{"Origin": "Returns the (unbiased) estimate of the sample variance of the values within a {@link PointSet} region of a {@link Dataset}.", "Reference": "Returns the (unbiased) estimate of the sample standard deviation of the values within a {@link PointSet} region of a {@link Dataset}.", "NNUpdater": "The class of the {@link DatasetsFinder} is read from property {@link #DATASET_PROFILE_CLASS_KEY}."}
{"Origin": "As of Spring Framework VERSION, once the bean instance has been resolved it will be cached, thereby avoiding repeated lookups in the {@code BeanFactory}.", "Reference": "As of Spring Framework VERSION, once the bean instance has been resolved it will be cached if it is a singleton, thereby avoiding repeated lookups in the {@code BeanFactory}.", "NNUpdater": "the FactoryBean is declared as a raw type, checks the FactoryBean's method on a plain instance of the FactoryBean, without bean properties applied yet."}
{"Origin": "If the caller's module is this module then update this module to export package {@code pn} to the given module.", "Reference": "If the caller's module is this module then update this module to export the given package to the given module.", "NNUpdater": "If the caller's module is this module then update this module to export the given package to the given module."}
{"Origin": "Returns the categories assigned to the content's VFS resource.", "Reference": "Reads and returns the categories assigned to the content's VFS resource.", "NNUpdater": "Returns the categories map."}
{"Origin": "Checks if the given sequence number was marked as completed in this tracker.", "Reference": "Checks if the given sequence number was marked as processed in this tracker.", "NNUpdater": "Checks if the given sequence number was marked as processed in this tracker."}
{"Origin": "Default: true", "Reference": "Default: false", "NNUpdater": "No default."}
{"Origin": "Returns the service type corresponding to the name of a services configuration file if it is a valid Java identifier.", "Reference": "Returns the service type corresponding to the name of a services configuration file if it is a legal type name.", "NNUpdater": "Returns the {@link Type} corresponding to the given internal name."}
{"Origin": "Return a HotStream that will skip emitting data when the first connecting Stream connects.", "Reference": "Return a Connectable that will skip emitting data when the first connecting Stream connects.", "NNUpdater": "Connecting streams to each other."}
{"Origin": "Get a new reference for to currently running request scope instance.", "Reference": "Get a new reference for to currently running request scope context.", "NNUpdater": "Get the properties value."}
{"Origin": "Return the Logger instance that will be used for logging.", "Reference": "Return the log4j-Logger instance that will be used for logging.", "NNUpdater": "Return a Logger that is initialized for standard logging."}
{"Origin": "List all ${MODEL_TYPE} records.", "Reference": "List ${MODEL_TYPE} records, filtered by simple query specifications optionally.", "NNUpdater": "Shortcut for {@link #create(String, String, ModelType)}"}
{"Origin": "Returns the complete size of the tree, including all expanded subtrees.", "Reference": "Returns the size of the currently expanded hierarchy.", "NNUpdater": "Initializes the main tree."}
{"Origin": "The {@code keyImportOptions} is required and its fields {@link KeyImportOptions#getName() name} and {@link", "Reference": "The {@code keyImportOptions} is required and its fields {@link ImportKeyOptions#getName() name} and {@link", "NNUpdater": "Sets the parsing options."}
{"Origin": "Sets the {@link SharedKeyCredential} used to authorize requests sent to the service.", "Reference": "Sets the {@link StorageSharedKeyCredential} used to authorize requests sent to the service.", "NNUpdater": "Sets the SAS token used to authorize requests sent to the service"}
{"Origin": "Inserts the List of ConfigValues note: overrides the existing list", "Reference": "Inserts the List of ConfigValues, overriding the existing list.", "NNUpdater": "Returns the metadata."}
{"Origin": "Builds a JFreeChart time series from a Ta4j time series and an indicator.", "Reference": "Builds a JFreeChart time series from a Ta4j bar series and an indicator.", "NNUpdater": "Gets the time-series of fixings, defaulted to an empty time-series."}
{"Origin": "Computes the average for each pixel across all bands in the {@link Planar} image.", "Reference": "Computes the maximum for each pixel across selected bands in the {@link Planar} image.", "NNUpdater": "Computes the average for each pixel across all bands in the {@link Planar} image."}
{"Origin": "Remove the entity key with the specified {@code id} and {@code persister} from the batch loadable entities {@link BatchFetchQueue}.", "Reference": "Remove the entity key with the specified {@code id} and {@code descriptor} from the batch loadable entities {@link BatchFetchQueue}.", "NNUpdater": "Identifies entities in the string {@code text}."}
{"Origin": "Finds all annotations recusively for a class and its superclasses.", "Reference": "Finds all annotations recusively for a class and its superclasses or interfaces.", "NNUpdater": "Gets all the runtime fields for a given class (including the superclasses and superinterfaces)."}
{"Origin": "Write the logical imager executable to the specified location", "Reference": "Writes the logical imager executable to the specified location.", "NNUpdater": "Add the type parameters for the executable member."}
{"Origin": "MediaStreams that this MediaHandler is prepare to exchange.", "Reference": "MediaStreams that this MediaHandler is prepared to exchange.", "NNUpdater": "MediaStream."}
{"Origin": "Returns a Path to access to the given resource.", "Reference": "Returns a Path to access the given resource.", "NNUpdater": "Returns if is the workspace root."}
{"Origin": "Note that both this, and {@link Polarity#negatesTruth(NaturalLogicRelation)} can be false.", "Reference": "Note that both this, and {@link Polarity#maintainsEntailment(NaturalLogicRelation)}} can be false.", "NNUpdater": "Operation fails."}
{"Origin": "However, sensitive to the value possibly being a Result wrapper, in which case it enqueues the set operation until the loadcontext is done.", "Reference": "TODO: Sensitive to the value possibly being a Result wrapper, in which case it enqueues the set operation until the loadcontext is done.", "NNUpdater": "The check is case-sensitive always."}
{"Origin": "Gets the service synchronously.", "Reference": "Gets the api synchronously.", "NNUpdater": "Writes an entry."}
{"Origin": "Only 1 = high priority, 2 = medium and 3 = low are allowed.", "Reference": "Only 1 = high priority to 10 = low are allowed.", "NNUpdater": "Only 1 (high) to 10 (low) are allowed."}
{"Origin": "Sets the connection ID length.", "Reference": "Sets the connection id generator.", "NNUpdater": "Sets the client ID."}
{"Origin": "TODO: If an input result partition of an involved region is not available, i.e.", "Reference": "If an input result partition of an involved region is not available, i.e.", "NNUpdater": "Set one component."}
{"Origin": "Adds an actor as a child of this group, immediately before another child actor.", "Reference": "If the actor is already a child of this group, no changes are made.", "NNUpdater": "Adds an actor as a child of this group."}
{"Origin": "Convert to object types, returning null if text is null.", "Reference": "Convert to object types, returning null if text is null or empty.", "NNUpdater": "IsNullOrEmpty {is null or empty}."}
{"Origin": "Overload of {@link #connect(String, ServerStateListener, ServerConnectionFailListener)} with only one listener.", "Reference": "Overload of {@link #connect(String, ServerStateListener, ServerReconnectFilter)} with only one listener.", "NNUpdater": "Overload of {@link #connect(String, ServerStateListener, ConnectionFailListener)} with only one listener."}
{"Origin": "Finds all implemtaions of DataStoreFactory which have registered using the services mechanism, and that have the appropriate libraries on the classpath.", "Reference": "Finds all implementations of UnWrapper which have registered using the services mechanism, and that have the appropriate libraries on the classpath.", "NNUpdater": "Returns the names of classes on the classpath that have the specified annotation."}
{"Origin": "Fails silently if no such account.", "Reference": "Fails silently if no such course.", "NNUpdater": "Similar to uncheck(), except an exceptionToIgnore exception is silently ignored."}
{"Origin": "Provides transitive dependency artifacts only defined types based on {@code types} argument or all types if {@code types} argument is empty", "Reference": "Provides transitive dependency artifacts having types defined by {@code types} argument or all types if {@code types} argument is empty", "NNUpdater": "Returns the types map."}
{"Origin": "Returns the ISO code, except when the alias ``loc`` is used.", "Reference": "Returns the code, except when the alias ``{@code loc}`` is used.", "NNUpdater": "Returns path alias."}
{"Origin": "Returns the class path URIs specified by the {@code Class-Path} manifest attribute, according to JAR File Specification.", "Reference": "Returns the class path URIs specified by the {@code Class-Path} manifest attribute, according to JAR", "NNUpdater": "Returns the class path URIs specified by the {@code Class-Path} manifest attribute, according to"}
{"Origin": "Applications should use the {@code with(WithAdjuster)} method on the date-time object to make the adjustment passing this as the argument.", "Reference": "Applications should use the {@code with(TemporalAdjuster)} method on the date-time object to make the adjustment passing this as the argument.", "NNUpdater": "The adjustment is equivalent to using {@link DateTime#with(DateTimeField, long)} passing {@code YEAR} as the field."}
{"Origin": "If no JSType value is associated, returns UNKNOWN_TYPE.", "Reference": "If no JSType value is associated, returns the upper bound for generic, UNKNOWN_TYPE if unspecified.", "NNUpdater": "Type: Complex"}
{"Origin": "Returns the Attr[]s to be output for the given element.", "Reference": "Output the Attr[]s for the given element.", "NNUpdater": "Returns the Attr[]s to be output for the given element."}
{"Origin": "Apply the rotation transformation of the given {@link Quaterniond} to this matrix.", "Reference": "Apply the rotation transformation of the given {@link Quaterniondc} to this matrix.", "NNUpdater": "Apply the rotation transformation of the given {@link Quaterniond} to this matrix."}
{"Origin": "Extracts the underlying quotes from the {@link CurveInputs} instances and returns them in a map.", "Reference": "Extracts the underlying quotes from the {@link RatesCurveInputs} instances and returns them in a map.", "NNUpdater": "Extracts the underlying quotes from the {@link CurveInputs} instances and returns them in a map."}
{"Origin": "Amazon Redshift returns all HSM connections that match any combination of the specified keys and values.", "Reference": "Redshift returns all HSM connections that match any combination of the specified keys and values.", "NNUpdater": "Describes the SQL Query to execute on an Amazon Redshift database for an"}
{"Origin": "Get Prepayment.", "Reference": "Get Vorauszahlung.", "NNUpdater": "Get OrderType."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Unsubscribe from all channel and channel groups.", "Reference": "Unsubscribe from all channels and channel groups.", "NNUpdater": "Unsubscribe from all channel and channel groups."}
{"Origin": "An array containing any patterns for the entity value.", "Reference": "An array of patterns for the entity value.", "NNUpdater": "Adds an pattern to patterns."}
{"Origin": "Test to make sure can successfully unmarshall a collection.", "Reference": "Test to make sure can successfully un-marshall a collection.", "NNUpdater": "Test to make sure can successfully set the process id of the job."}
{"Origin": "whether it gives you labeled or unlabeled bracketings depends on the value of the parameter", "Reference": "whether it gives you labeled or unlabeled bracketings depends on the value of the {@code labelConstituents} parameter", "NNUpdater": "Depends on the given action value."}
{"Origin": "Returns a function with the specified name and number of arguments.", "Reference": "Returns a function call with the specified name and number of arguments.", "NNUpdater": "Returns the built-in function implementation for the given function name and arguments."}
{"Origin": "Configure binders in the instance manager and enable JAX-RS features.", "Reference": "Configure binders in the injection manager and enable JAX-RS features.", "NNUpdater": "Add custom JAX-RS provider to the list of providers"}
{"Origin": "Compiles the given file.", "Reference": "Generates the given file.", "NNUpdater": "Reads the supplied input stream and compiles a list of offsets."}
{"Origin": "Report the number of pixels of the interline that corresponds to this font.", "Reference": "Report the number of pixels of the interline that corresponds to the staves where this font is used.", "NNUpdater": "Report the font size of this text line."}
{"Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}", "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveToRangeEnd }{@code >}}", "NNUpdater": "Create an instance of {@link JAXBElement }{@code <}{@link CTStrokeChild }{@code >}}"}
{"Origin": "Gets the amount of outer iterations of SGD algorithm.", "Reference": "Get the amount of outer iterations of SGD algorithm.", "NNUpdater": "-I iterations"}
{"Origin": "Determines whether the given user can read the permissions currently granted to the given target user.", "Reference": "Determines whether the given user can read the permissions currently granted to the given target entity.", "NNUpdater": "Adds a permissions for a user with the given userID."}
{"Origin": "Locate the controller leader so that we can send LLC segment completion requests to it.", "Reference": "Locates the controller leader so that we can send LLC segment completion requests to it.", "NNUpdater": "Returns the previous replication configuration for a database to send to the leader node."}
{"Origin": "Normally tasks are executed in different thread from the one creating it and at a different time.", "Reference": "Normally tasks are executed in a different thread from the one creating it and at a different time.", "NNUpdater": "Starts the test app in a background thread."}
{"Origin": "Returns the location provider configuration.", "Reference": "Returns the node discovery provider configuration.", "NNUpdater": "Provides the Location of a setting."}
{"Origin": "This indicator says if --interface parameter is visible.", "Reference": "This indicator says if --entity parameter is visible.", "NNUpdater": "Returns if the specified column is enabled."}
{"Origin": "Sets the minimum session timeout.", "Reference": "Sets the session timeout.", "NNUpdater": "Sets the minimum session timeout."}
{"Origin": "Ensures the {@code Subject} being built will reflect the specified host address as its originating address.", "Reference": "Ensures the {@code Subject} being built will reflect the specified host name or IP as its originating location.", "NNUpdater": "Returns FROM {@link EmailAddress address}."}
{"Origin": "This method allocates a new instance of a class implementing Vector3d on every call.", "Reference": "This method allocates a new instance of a class implementing Vector3dc on every call.", "NNUpdater": "Allocates a new native buffer."}
{"Origin": "Show creator email address.", "Reference": "Show creator first and last name.", "NNUpdater": "Find a {@link Principal} for the given credential"}
{"Origin": "Accordingly, it should NOT get the {@link Rule} instance representing the rule whose dependencies are being calculated as an argument.", "Reference": "Accordingly, it should NOT get the {@link Rule} instance representing the rule whose dependencies are being calculated as an argument or its attributes.", "NNUpdater": "Get Regel."}
{"Origin": "Delegates to {@link #handleError(URI, HttpMethod, ClientHttpResponse, HttpStatus)} with the response status code.", "Reference": "Delegates to {@link #handleError(ClientHttpResponse, HttpStatus)} with the response status code.", "NNUpdater": "Returns a new {@link HttpResponseException} instance with the specified {@link HttpStatus}."}
{"Origin": "Standard setter for the leftwardlabel String in this Relationship", "Reference": "Standard setter for the leftwardValue String in this Relationship", "NNUpdater": "Sets the value(s) for identifier (An identifier for the person as this patient)"}
{"Origin": "This may be due to an error being propagated from the Flow or fue to a failure sending a success response.", "Reference": "This may be due to an error being propagated from the Flow or due to a failure sending a success response.", "NNUpdater": "The request may also expire due to a timeout or network error."}
{"Origin": "In order to set the matrix to a rotation transformation without pre-multiplying, use {@link #rotation(Quaterniond)}.", "Reference": "In order to set the matrix to a rotation transformation without pre-multiplying, use {@link #rotation(Quaterniondc)}.", "NNUpdater": "In order to set the matrix to a rotation transformation without pre-multiplying, use {@link #rotation(Quaternionfc)}."}
{"Origin": "Gets the banner URL of the guild, if present and in a supported format.", "Reference": "Gets the banner URL of the guild, if present.", "NNUpdater": "Gets the icon URL of the guild, if present and in a supported format."}
{"Origin": "Sets the repository that the services in the upgrade are CURRENT on.", "Reference": "Gets the upgrade that the history entry is for.", "NNUpdater": "Sets the repository names"}
{"Origin": "Setter for the Training Parameters of the Feature Selector.", "Reference": "Setter for the Training Parameters of the Feature Selectors.", "NNUpdater": "Setter for the Training Parameters of the Machine Learning modeler."}
{"Origin": "Collects properties name and values into map if they are present in the given config, returns empty map otherwise.", "Reference": "Collects properties name and values into map if they are present in the config, returns empty map otherwise.", "NNUpdater": "Checks whether the map is currently empty."}
{"Origin": "Gets the object schema", "Reference": "Gets the schema", "NNUpdater": "Sets the metadata."}
{"Origin": "Appends a string representation of the given access modifiers to {@link #buf buf}.", "Reference": "Appends a string representation of the given access flags to {@link #stringBuilder}.", "NNUpdater": "Writes rec file position to given {@code buf}."}
{"Origin": "Creates a mutable copy of {@code graph} with the same nodes, edges, and edge values.", "Reference": "Creates a mutable copy of {@code graph} with the same nodes and edges.", "NNUpdater": "Creates a mutable copy of {@code graph} with the same nodes and edges."}
{"Origin": "converts a given x coordinate from ploting field coordinate to a graphic field coordinate", "Reference": "Converts a given x coordinate from plotting field coordinate to a graphic field coordinate", "NNUpdater": "Returns the longitude value."}
{"Origin": "This is important to understand the changing nature of the", "Reference": "This is important to understand the changing nature of the WebPage.", "NNUpdater": "This API is deprecated."}
{"Origin": "Tests if this string ends with any specified suffixes.", "Reference": "Tests if this CharSequence ends with any specified suffixes.", "NNUpdater": "Ends the session."}
{"Origin": "Reverts method {{@link #unsignedToTwosComplement(byte[])}.", "Reference": "Reverts method {{@link #padLeadingZero(byte[])}.", "NNUpdater": "Operation fails."}
{"Origin": "Helper for {@link #remove(long)} that copies all items into a {@link TreeSeq}.", "Reference": "Helper for {@link #remove(long, QueryContext)} that copies all items into a {@link TreeSeq}.", "NNUpdater": "A helper method that returns {@link Long#intValue()} on the return of {@link #get(char)}, if present."}
{"Origin": "Get the location of cross reference for given file containing the current revision.", "Reference": "Get the location of cross reference for given file containing the given revision.", "NNUpdater": "Get the value of update."}
{"Origin": "The timestamp for creation of the example.", "Reference": "The timestamp for creation of the object.", "NNUpdater": "Get the timestamp for when this {@code ReportEntry} was created."}
{"Origin": "Returns coverage of branches of this instruction.", "Reference": "Returns the number of covered branches starting from this instruction.", "NNUpdater": "Returns coverage of branches of this instruction."}
{"Origin": "Create a new word, where the label is formed from the passed in.", "Reference": "Create a new word, where the label is formed from the {@code String} passed in.", "NNUpdater": "label1 and label2 in X.Y.Z-label1-lable2."}
{"Origin": "Always returns {@code null}.", "Reference": "Always returns {@code DUMMY_TARGET}.", "NNUpdater": "Create a handler that always returns null."}
{"Origin": "Sets the given instruction as a predecessor of this instruction.", "Reference": "Sets the given instruction as a predecessor of this instruction and adds branch to the predecessor.", "NNUpdater": "The instruction producing input to this instruction."}
{"Origin": "Creates an audit entry for the 'service retired' event.", "Reference": "Creates an audit entry for the 'API retired' event.", "NNUpdater": "Adds an event."}
{"Origin": "Creates new {@link IsoDayOfWeek} in the UTC timezone.", "Reference": "Creates new {@link IsoDayOfWeek}.", "NNUpdater": "Creates new {@link IsoDayOfWeek} in the UTC timezone."}
{"Origin": "If artifact is referenced in reactor, returns path to ${project.build.outputDirectory}.", "Reference": "If the artifact is referenced in the reactor, returns path to ${project.build.outputDirectory}.", "NNUpdater": "Operation fails."}
{"Origin": "Returns an abstract adapter for {@code type}.", "Reference": "Returns a standalone adapter for {@code type}.", "NNUpdater": "Get the {@link ApplicationTemplateInfo} for a given application template."}
{"Origin": "Execute an {@link Action} locally, returning that {@link Task} used to track it, and linking an {@link ActionListener}.", "Reference": "Execute an {@link ActionType} locally, returning that {@link Task} used to track it, and linking an {@link ActionListener}.", "NNUpdater": "Returns a {@link CallableAction} that creates the {@link IAction} and invokes it."}
{"Origin": "If startIndex < this.seriesBeginIndex the new TimeSeries will start with the first available Bar of this TimeSeries.", "Reference": "If startIndex < this.seriesBeginIndex the new BaseBarSeries will start with the first available Bar of this BaseBarSeries.", "NNUpdater": "Gets the time-series of fixings, defaulted to an empty time-series."}
{"Origin": "If only public, module, package, and private access are allowed, the suffix is ``/private``.", "Reference": "If public, package, and private access are allowed, the suffix is ``/private``.", "NNUpdater": "DEBUG method."}
{"Origin": "To match the node N the supplier must supply a LabelSchemaDescriptor D, such that N has the label of D, and values for all the properties of D.", "Reference": "To match the node N the supplier must supply a LabelSchemaDescriptor D, such that N has values for all the properties of D.", "NNUpdater": "label1 and label2 in X.Y.Z-label1-lable2."}
{"Origin": "Gets the classpath component containing the given class.", "Reference": "Gets the base location of the given class.", "NNUpdater": "Gets the classpath component containing the given class."}
{"Origin": "TODO: If a region is involved, all of its consumer regions are involved", "Reference": "If a region is involved, all of its consumer regions are involved", "NNUpdater": "Set one component."}
{"Origin": "As opposed to emitting immediately the way regular suppresion would with a time limit of 0.", "Reference": "As opposed to emitting immediately the way regular suppression would with a time limit of 0.", "NNUpdater": "Stores the way in the way database."}
{"Origin": "Computes the weighted covariance matrix of the given data set.", "Reference": "Computes the weighted result for the covariance matrix of the given data set.", "NNUpdater": "Computes the weighted mean of the given data set."}
{"Origin": "This will set an equal offset for all sides", "Reference": "This will set an equal difference for all sides", "NNUpdater": "Set the cursor."}
{"Origin": "Group: consumer", "Reference": "Group: producer", "NNUpdater": "Guide."}
{"Origin": "Gets the value of the 'BloomFilter' field.", "Reference": "Gets the value of the 'bloomFilter' field.", "NNUpdater": "Determines whether a given bloom filter is compatible with this bloom filter."}
{"Origin": "This method is just a wrapper around {@link InternalUtils#symbol(Tree)}, but this class might be the first place someone looks for this functionality.", "Reference": "This method is just a wrapper around {@link TreeUtils#symbol(Tree)}, but this class might be the first place someone looks for this functionality.", "NNUpdater": "This is a convenience wrapper around {@link #findNavController(View)}."}
{"Origin": "Add behavior triggered after the {@link Mono} terminates, either by completing downstream successfully or with an error.", "Reference": "Add behavior (side-effect) triggered after the {@link Mono} terminates, either by completing downstream successfully or with an error.", "NNUpdater": "In case of failure the {@link Flux} will error."}
{"Origin": "Invalidates a session.", "Reference": "Closes a session.", "NNUpdater": "Tests closing an open file invalidates the id."}
{"Origin": "Obtains an instance from the specified unique name.", "Reference": "Obtains an instance from the specified name.", "NNUpdater": "Obtains the type from a unique name."}
{"Origin": "Getting Search Suggestions in the Amazon CloudSearch Developer Guide .", "Reference": "CloudSearch Developer Guide.", "NNUpdater": "For more information, see Sorting Results in the Amazon CloudSearch Developer Guide."}
{"Origin": "Build one {@link CharacterRunAutomaton} matching any term the query might match.", "Reference": "Build one {@link CharArrayMatcher} matching any term the query might match.", "NNUpdater": "Returns a new (deterministic) automaton that accepts any single codepoint."}
{"Origin": "So if you want to be sure that your {@link IClassCache} is handled in all situations then call this method twice with your implementations.", "Reference": "So if you want to be sure that your {@link IGetAndSetLocator} is handled in all situations then call this method twice with your implementations.", "NNUpdater": "Note your thread will be blocked during execution - if you want to call the function asynchronously, see {@link #callAsync(String)}."}
{"Origin": "Creates an exception from an service id.", "Reference": "Creates an exception from an API id.", "NNUpdater": "Create an instance of {@link ServerException }"}
{"Origin": "resolves installed library dependencies", "Reference": "Resolves installed library dependencies", "NNUpdater": "Add an Android library, along with any recursive library dependencies"}
{"Origin": "Go through the timestamps stored in the {@link #toNotifyQueue} and send the TIMER events for the expired events.", "Reference": "Go through the timestamps stored in the toNotifyQueue and send the TIMER events for the expired events.", "NNUpdater": "The putEvent method adds an events to the queue of events to be processed."}
{"Origin": "Get the log lines that contain the unique {@link StringDecorator} string.", "Reference": "Get the log lines that contain the unique {@link StringDecorator} string for the given component.", "NNUpdater": "String, SASProtocol, IpRange, String, String, String, String, String)}"}
{"Origin": "The {@code what} supplies the message that describes the member.", "Reference": "The {@code what} parameter supplies the message that describes the member.", "NNUpdater": "Returns a member by ID."}
{"Origin": "Returns the name of the table to copy data from in case of an complex update.", "Reference": "Provides the name the table should have after the update.", "NNUpdater": "Make a deep copy of the table."}
{"Origin": "The context associated with a Closure instance.", "Reference": "The referent of a MirrorReference instance.", "NNUpdater": "The closure will be called with a single argument; the database statement (actually a helper object) associated with this batch."}
{"Origin": "Assigns the specified type and result size.", "Reference": "Assigns the specified type, and result size or occurrence indicator.", "NNUpdater": "Finds the URI for the specified prefix."}
{"Origin": "The method call will block (not return) until a stanza is available or the timeout has elapsed.", "Reference": "The method call will block (not return) until a stanza is available or the timeout has elapsed or if the connection was terminated because of an error.", "NNUpdater": "The method call will block until the connection's default timeout has elapsed."}
{"Origin": "Tests the specifying heap memory with config default value for job manager and task manager.", "Reference": "Tests the specifying job manager heap memory with config default value for job manager and task manager.", "NNUpdater": "Runs the JobManager process in {@link JobManagerMode#CLUSTER}."}
{"Origin": "Nguyen-Widrow randomizer with a range between -1 and 1.", "Reference": "RangeRandomizer with a range between -1 and 1.", "NNUpdater": "Sets the range."}
{"Origin": "Cancel events are never emitted.", "Reference": "Cancel events are also emitted.", "NNUpdater": "Cancel Test"}
{"Origin": "Trailing empty strings are therefore not included in the resulting array.", "Reference": "Trailing empty strings are therefore not included in the resulting {@link Seq}.", "NNUpdater": "Converts list of strings to nullable array of strings."}
{"Origin": "Unwraps a given connection provider if necessary", "Reference": "Recursively unwraps a given connection provider if necessary", "NNUpdater": "Unwraps object if needed."}
{"Origin": "Gets the amount of available items in the network of the type passed in, checking NBT or not.", "Reference": "Gets the number of available items in the network satisfying the given matcher.", "NNUpdater": "Checks if items, damage and NBT are equal and the items are stackable."}
{"Origin": "ServerBuilder.service(ServiceWithRoutes)} to mount all service paths without interfering with other services.", "Reference": "ServerBuilder.service(HttpServiceWithRoutes)} to mount all service paths without interfering with other services.", "NNUpdater": "Invokes {@link Service#serviceAdded(ServiceConfig)}."}
{"Origin": "The default implementation delegates to {@link #process(BaseEvent)} and will:", "Reference": "The default implementation delegates to {@link #process(CoreEvent)} and will:", "NNUpdater": "The default implementation simply delegates to {@link #isDefaultRollback()}."}
{"Origin": "The {@link EcKeyCreateOptions} parameter is required.", "Reference": "The {@link CreateEcKeyOptions} parameter is required.", "NNUpdater": "{@codesnippet com.azure.keyvault.keys.keyclient.createEcKeyWithResponse#keyOptions-Context}"}
{"Origin": "This is currently accomplished by calling {@link MapMaker#makeMap()}.", "Reference": "This is equivalent to {@link MapMaker#makeMap()}.", "NNUpdater": "Alias for {@link TreeMap#ofAll(java.util.Map)}"}
{"Origin": "For selection order-by queries, order-by expressions will be put at the front.", "Reference": "Order-by expressions will be put at the front.", "NNUpdater": "Returns a new {@link Order} with the given {@link Direction}."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "You can also use the optional archive description field to specify how the archive is referred to in an external index of archives, such as you might create in Amazon", "Reference": "You can also use the optional archive description field to specify how the archive is referred to in an external index of archives, such as you might create in Amazon DynamoDB.", "NNUpdater": "Adds an entry to the archive."}
{"Origin": "Create a {@code TimePairInter} object from its two halves.", "Reference": "Create and add a {@code TimePairInter} object from its two halves.", "NNUpdater": "Obtains a {@code DateTimeFields} from a rule and value."}
{"Origin": "Builds an {@link Intent} for starting all downloads.", "Reference": "Builds an {@link Intent} to pause all downloads.", "NNUpdater": "Call {@link #startDownloads()} to let them to be started."}
{"Origin": "The {@link Poller poller} allows users to automatically poll on the create certificate operation status.", "Reference": "The {@link PollerFlux poller} allows users to automatically poll on the create certificate operation status.", "NNUpdater": "Parse a ``poller`` element to create a Trigger and add it to the property values of the target builder."}
{"Origin": "Shortcut for {@link #create(String, String, ModelType, String, Boolean)}", "Reference": "Shortcut for {@link #create(String, String, ModelType, String, boolean)}", "NNUpdater": "Synchronous version of {@link #createReceiver(String, String, EventPosition)}."}
{"Origin": "Configure a SpEL expression to evaluate a {@link Command} for RSocket request type at runtime against a request message.", "Reference": "Configure a SpEL expression to evaluate a {@link Command} for the RSocket request type at runtime against a request message.", "NNUpdater": "Specify an {@link Expression} to evaluate a value for the uri template variable."}
{"Origin": "Calls {@link Plugin#willDeclareSetter(TypeSpec.Builder, PropertyGenerator, MethodSpec.Builder)} on all the bundled plugins", "Reference": "Calls {@link Plugin#beforeDeclareSetter(TypeSpec.Builder, PropertyGenerator, MethodSpec.Builder)} on all the bundled plugins", "NNUpdater": "Calls {@link Plugin#didDeclareSetter(TypeSpec.Builder, PropertyGenerator, MethodSpec)} on all the bundled plugins"}
{"Origin": "If the caller's module is this module then update this module to open the given package to the given module.", "Reference": "If this module has opened a package to at least the caller module then update this module to open the package to the given module.", "NNUpdater": "If the caller's module is this module then update this module to read the given module."}
{"Origin": "Initializes the properties with the default configuration for the command-line tool.", "Reference": "Initializes the config with the default configuration for the command-line tool.", "NNUpdater": "Get the configuration filename from the command-line (if it exists) and create a configuration for it."}
{"Origin": "Set the time in ms this object was last used.", "Reference": "Sets the time in milliseconds this object was last used.", "NNUpdater": "Set the creationTime value."}
{"Origin": "Calling with null will terminate the PublishProcessor and a NullPointerException is signalled to the Subscribers.", "Reference": "Calling with a null value will terminate the PublishProcessor and a NullPointerException is signaled to the Subscribers.", "NNUpdater": "IllegalArgumentException."}
{"Origin": "Gets the current data source from this DataCommunicator.", "Reference": "Gets the current data provider from this DataCommunicator.", "NNUpdater": "Adds a {@link TypedDataGenerator} for the {@link DataCommunicator} of this Listing component."}
{"Origin": "Update a MessageDigest with the content of a context.", "Reference": "Update a {@link Hasher} with the content of a context.", "NNUpdater": "Get a Base64-encoded SHA1 digest for this source."}
{"Origin": "For data policies not supported by management rest api (for example, NORMAL and PRELOADED) it will show as UNSUPPORTED", "Reference": "For data policies not supported by management rest api (for example, NORMAL and PRELOADED) it will show as LEGACY", "NNUpdater": "Adds a policy to the set of existing policies that are executed after required policies."}
{"Origin": "Returns an RxJava Observable that monitors changes to this RealmObject.", "Reference": "Returns an Rx Observable that monitors changes to this RealmObject.", "NNUpdater": "Returns an Rx Observable that monitors changes to this RealmObject."}
{"Origin": "Returns the quorum name for lock operations.", "Reference": "Returns the split brain protection name for lock operations.", "NNUpdater": "Returns the cluster read quorum strategy."}
{"Origin": "Returns the o auth consumer with the primary key or throws a {@link com.liferay.opensocial.NoSuchOAuthConsumerException} if it could not be found.", "Reference": "Returns the o auth consumer with the primary key or throws a {@link NoSuchOAuthConsumerException} if it could not be found.", "NNUpdater": "Returns the {@link SocksAuthStatus} of this {@link SocksAuthResponse}"}
{"Origin": "The children will be ordered from bottom to top rather than the default top to bottom.", "Reference": "The children will be displayed last to first.", "NNUpdater": "Adds the lower navigation bar and the bottom text (from the -bottom option) at the bottom of page."}
{"Origin": "Tokenizes the specified input and returns distinct tokens.", "Reference": "Normalizes the specified input and returns its distinct tokens.", "NNUpdater": "Returns the username."}
{"Origin": "Adds the given {@link ItemStack} to the player's inventory, or drops it in front of them if it was not accepted", "Reference": "Adds the given {@link ItemStack} to the player's inventory, or drops it in front of them if their was not enough room.", "NNUpdater": "{@link FMLBukkitHandler#onItemCrafted(EntityHuman, ItemStack, IInventory)}"}
{"Origin": "Clear updates not committed in the session", "Reference": "Rollback updates not committed in the session", "NNUpdater": "merge session actions committed on given timestamp."}
{"Origin": "Use {@link #makeNaiveMatrix()} if you want to perform further updates.", "Reference": "Use {@link #makePopulationMatrix()} if you want to perform further updates.", "NNUpdater": "If you want to change the type use {@link #setType(ValueType)}."}
{"Origin": "If no cache is configured or there is an error while querying the cache, false is returned none the less.", "Reference": "If no cache is configured or there is an error while querying the cache, returns false nonetheless.", "NNUpdater": "Returns the cache from disk, or null if the file doesn't exist or if there is an error."}
{"Origin": "Create or obtain a {@link CallableStatement} from the pool.", "Reference": "Creates or obtains a {@link CallableStatement} from the pool.", "NNUpdater": "Execute the statement."}
{"Origin": "Gets the additional trade information, defaulted to an empty instance.", "Reference": "Gets the additional information, defaulted to an empty instance.", "NNUpdater": "Gets the trade attributes."}
{"Origin": "Convert bytes into hexidecimal string", "Reference": "Convert bytes into hexadecimal string", "NNUpdater": "Convert a byte array to a colon-separated hex string."}
{"Origin": "Set the properties for the object that match the passed as parameter.", "Reference": "Set the properites for the object that match the passed as parameter.", "NNUpdater": "Set the deployment properties for the stream."}
{"Origin": "The {@link KeyCreateOptions#getExpires() expires} and {@link", "Reference": "The {@link CreateKeyOptions#getExpiresOn() expires} and {@link", "NNUpdater": "Set the {@link LocalDateTime expires} time value."}
{"Origin": "RsPrettyJSON can conform to equals and hash code contract.", "Reference": "RsPrettyJSON can conform to equals.", "NNUpdater": "RsPrettyJSON can reject a non-JSON body."}
{"Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}", "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveToRangeEnd }{@code >}}", "NNUpdater": "Create an instance of {@link JAXBElement }{@code <}{@link CTStrokeChild }{@code >}}"}
{"Origin": "perform an answer merge without explanation NB:assumes answers are compatible (concept corresponding to join vars if any are the same)", "Reference": "perform an answer merge with optional explanation NB:assumes answers are compatible (concept corresponding to join vars if any are the same)", "NNUpdater": "Objects which are equal return the same value for this method."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Checks if the given user exists in the current tenant", "Reference": "Checks if the given users and roles exist in the current tenant", "NNUpdater": "Checks if the index for Graylog2 exists"}
{"Origin": "Should subscriptions be considered part of a group even if using a unicast endpoint, should it be considered an individual even if using a multicast endpoint, or should the use of a unicast/multicast endpoint infer the usage.", "Reference": "Should network subscriptions be considered part of a group even if using a unicast endpoint, should it be considered an individual even if using a multicast endpoint, or should the use of a unicast/multicast endpoint infer the usage.", "NNUpdater": "Gets the currently pinned Endpoint at this Endpoint."}
{"Origin": "Set the value of url used to locate the database for this datasource.", "Reference": "Sets the value of URL string used to locate the database for this datasource.", "NNUpdater": "Set the dataSource."}
{"Origin": "Tests the functionality of copyTo.", "Reference": "Tests the functionality of copyTo(array).", "NNUpdater": "Tests the ``copy single resource as new`` operation."}
{"Origin": "send a list of update to downstream kafka topic", "Reference": "send the list of the message to downstream kafka topic", "NNUpdater": "Send's event messages to Kafka."}
{"Origin": "| lhsPatternBind consequenceInvocation? )", "Reference": "| lhsPatternBind consequenceInvocation* ) SEMICOLON?", "NNUpdater": "lhsUnary := ( lhsExists | lhsNot | lhsEval | lhsForall | lhsAccumulate | LEFT_PAREN lhsOr RIGHT_PAREN | lhsPatternBind ) SEMICOLON?"}
{"Origin": "See {@link InstanceSelector#select(int)}", "Reference": "See {@link InstanceSelector#select(IndexSlot)}", "NNUpdater": "See also {@link #copy(double[],int,int)}."}
{"Origin": "* One or more of the custom model's audio resources is invalid.", "Reference": "* The custom model contains one or more invalid audio resources.", "NNUpdater": "this instance is valid by default."}
{"Origin": "DHCP Server should send DHCPNAK message to client if ``Request IP`` is incorrect, or is on the wrong network", "Reference": "DHCP Server should send DHCPNAK message to client if ``Request IP`` is incorrect/invalid, or is on the wrong network", "NNUpdater": "Sends a message to the server."}
{"Origin": "This will trigger the creation of the player, the listener registration, the start of the action schedule, and the preparation of the player with the provided media source.", "Reference": "This will trigger the creation of the player, the listener registration, the start of the action schedule, the initial set of media items and the preparation of the player.", "NNUpdater": "Set the actor."}
{"Origin": "Like {@link #to(Class)} but updates an existing object instead of creating a new instance.", "Reference": "Like {@link #fetch(Class)} but updates an existing object instead of creating a new instance.", "NNUpdater": "Calls {@link Parser#parse(File, String[], Class)} after creating an instance of the Class."}
{"Origin": "The copy doesn't have access to a dataset.", "Reference": "The copy has access to the same dataset.", "NNUpdater": "Add a program-stream access."}
{"Origin": "Returns an immutable map containing five mappings.", "Reference": "Returns an unmodifiable map containing five mappings.", "NNUpdater": "Returns an immutable map of named bindings."}
{"Origin": "Adds 25 more results to existing search results", "Reference": "Adds more results to existing search results", "NNUpdater": "Adds 25 more results to existing search results"}
{"Origin": "{@codesnippet com.azure.data.applicationconfig.configurationclient.deleteSettingWithResponse#ConfigurationSetting-boolean-Context}", "Reference": "{@codesnippet com.azure.data.applicationconfig.configurationclient.deleteConfigurationSettingWithResponse#ConfigurationSetting-boolean-Context}", "NNUpdater": "{@codesnippet com.azure.data.applicationconfig.configurationclient.deleteSettingWithResponse#ConfigurationSetting-boolean-Context}"}
{"Origin": "Get the name of the type that should be used in context.", "Reference": "Get the name of the type that should be applied in context.", "NNUpdater": "This method should only be used in {@link ClientContext}."}
{"Origin": "Gets the type instance for the given ID.", "Reference": "Gets the specified type instance.", "NNUpdater": "Gets type literal for the given {@code Type} instance."}
{"Origin": "The main differences are that this method can handle multiple selected files, which are defined by the selection in the tree at the time of loading, vs the mounse coordinates in when double clicking.", "Reference": "The main differences are that this method can handle multiple selected files, which are defined by the selection in the tree at the time of loading, vs the mouse coordinates in when double clicking.", "NNUpdater": "get all built-in DVs, which are stored in a Map keyed by the name"}
{"Origin": "Also includes db:output() and fn:put().", "Reference": "Also includes update:output() and fn:put().", "NNUpdater": "Test method for the db:store() function."}
{"Origin": "Set the Date that this Token expires", "Reference": "Set the ZonedDateTime that this Token expires", "NNUpdater": "Set the {@link LocalDateTime expires} time value."}
{"Origin": "Adds the specified column which will not be serialized.", "Reference": "Adds the specified columns which will not be serialized.", "NNUpdater": "Gets the raw message."}
{"Origin": "Get branding settings ### Functional Description: DRACOON branding configuration entry point.", "Reference": "Get branding settings ## \u26a0 Deprecated since version VERSION ### Functional Description: DRACOON branding configuration entry point.", "NNUpdater": "Get Beschreibung."}
{"Origin": "When no implementation is available, {@code setState} has no effect.", "Reference": "When no implementation is available, {@code setState} does not change the state.", "NNUpdater": "The order of the {@code DistributionAggregate}s has no effect."}
{"Origin": "Reject late events that arrive more than {@code millisAfterWindowEnd} after the end of its window.", "Reference": "Reject late events that arrive more than {@code afterWindowEnd} after the end of its window.", "NNUpdater": "Returns the index of the window after the window at index {@code windowIndex} depending on the {@code repeatMode} and whether shuffling is enabled."}
{"Origin": "If the worker finds that the task is canceled through the canceled flag returned by", "Reference": "If the worker finds that the task is canceled through the flag returned by", "NNUpdater": "Throw an exception if the query has been canceled."}
{"Origin": "If the set etag doesn't match anything the update won't happen, this will result in a 412.", "Reference": "If the set ETag doesn't match anything the update won't happen, this will result in a 412.", "NNUpdater": "Set the routeFilter value."}
{"Origin": "Given a pattern, which contains one or more capturing groups, and a String, returns a list with the values of the captured groups in the pattern.", "Reference": "Given a pattern and a string, returns a list with the values of the captured groups in the pattern.", "NNUpdater": "Guide."}
{"Origin": "NOTE:This operation is only useful for long-lived activities to report liveliness of the task and to determine if a cancellation is being attempted.", "Reference": "This operation is only useful for long-lived activities to report liveliness of the task and to determine if a cancellation is being attempted.", "NNUpdater": "Role using the long lived AWS credentials."}
{"Origin": "This will cause the {@link Lists2#of(Object) Lists.of(E)} method to be invoked instead.", "Reference": "This will cause the {@link Lists2#of(Object) Lists2.of(E)} method to be invoked instead.", "NNUpdater": "Operation fails."}
{"Origin": "Gets on tier percentage.", "Reference": "Gets on-tier percentages.", "NNUpdater": "The Set Blob Tags operation sets tags for the specified blob."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "NOTE:This operation is eventually consistent.", "Reference": "This operation is eventually consistent.", "NNUpdater": "Sets the request action."}
{"Origin": "Tests that the acetylation file can get downloaded and parsed", "Reference": "Tests that the acetylation file can get parsed without problems.", "NNUpdater": "(Supposed to be overridden) filePath parameter provides the diskPath of the downloaded file."}
{"Origin": "String representation of what sort of file {@code path} is.", "Reference": "String representation of read and write permissions of {@code path}.", "NNUpdater": "Returns the {@link BytesRef} representation of the specified {@link ByteBuffer}."}
{"Origin": "Manually configure the resource mappings.", "Reference": "Manually configure resource handler mappings.", "NNUpdater": "To configure resource handling, override {@link #addResourceHandlers(ResourceHandlerRegistry)}."}
{"Origin": "The default implementation skips and maps around deleted documents, and calls {@link #write(Fields)}.", "Reference": "The default implementation skips and maps around deleted documents, and calls {@link #write(Fields,NormsProducer)}.", "NNUpdater": "Default implementation calls {@link #doGetTextSummary(Object)}."}
{"Origin": "Returns an {@link Operator} to allow the query to be pushed dependencies via the {@link Observable#lift(Operator)} method.", "Reference": "Returns an {@link Transformer} to allow the query to be pushed dependencies via the {@link Observable#compose(Transformer)} method.", "NNUpdater": "Automaps the first column of the ResultSet into the target class as an operator to use with ."}
{"Origin": "Integers 0 ... n.", "Reference": "Integers 0 ... n - 1.", "NNUpdater": "Creates a sequence with the specified items."}
{"Origin": "Register a record reader.", "Reference": "Set the batch size.", "NNUpdater": "Register a record reader listener."}
{"Origin": "The functions can assume their input is never be {@code null} nor {@link Optional}.", "Reference": "The function arguments assume that their input is neither {@code null} nor {@link Optional}.", "NNUpdater": "Fails if the {@link Optional}{@code } is present or the subject is null.."}
{"Origin": "Returns the builder for the settings used for calls to MutateTows.", "Reference": "Returns the builder for the settings used for calls to MutateRows.", "NNUpdater": "Returns a channel provider."}
{"Origin": "Write the logical imager executable to the specified location", "Reference": "Writes the logical imager executable to the specified location.", "NNUpdater": "Add the type parameters for the executable member."}
{"Origin": "Sort the points by x asc, y asc.", "Reference": "The candidates are sorted by x asc, y desc.", "NNUpdater": "Sort the intervals by start time, ascending."}
{"Origin": "Resolves a collection of root modules, with this configuration as its parent, to create a new configuration.", "Reference": "Resolves a collection of root modules, with service binding, and with this configuration as its parent, to create a new configuration.", "NNUpdater": "Resolves the resource configuration."}
{"Origin": "Encodes the form using the standard URI encoding mechanism and the UTF-8 character set.", "Reference": "Encodes the form using the standard HTML form encoding mechanism and the UTF-8 character set.", "NNUpdater": "Decodes a given string using the standard URI encoding mechanism."}
{"Origin": "{@code handshake} will be non-null and {@code throwable} will be null in the case of a successful TLS connection.", "Reference": "{@code handshake} will be non-null and {@code ioe} will be null in the case of a successful TLS connection.", "NNUpdater": "A {@code null} CharSequence will return {@code null}."}
{"Origin": "This has a small performance impact even if the task doesn't throw any exception because stack trace is collected in task constructor.", "Reference": "This has a small performance impact even if the task doesn't throw any exceptions because stack trace is collected in task constructor.", "NNUpdater": "Creates a new task that will handle any Throwable that this task might throw."}
{"Origin": "Create a new builder for creating Retrofit clients.", "Reference": "Creates a new builder for creating Retrofit clients.", "NNUpdater": "Create a new ResponseBuilder for a created resource."}
{"Origin": "Create a new data source from a cursor of events.", "Reference": "Create a new data source from a stream of events.", "NNUpdater": "Create data source."}
{"Origin": "Generic setter for the virtualMetadataPopularConfiguration property of this class", "Reference": "Generic setter for the virtualMetadataConfiguration property of this class", "NNUpdater": "Setter for property type."}
{"Origin": "Re-initializes this listener container's shared connection and its sessions and consumers.", "Reference": "Re-initializes this listener container's shared connection and its sessions and consumers, if necessary.", "NNUpdater": "Resets the context."}
{"Origin": "Tests the engine starts up, executes 1 trade cycle successfully, but then receives unexpected Exception from", "Reference": "Tests the engine starts up, executes 1 trade cycle successfully, but then receives unexpected", "NNUpdater": "If an UnexpectedExceptionInformation is not found for the status code the default UnexpectedExceptionInformation will be returned."}
{"Origin": "Additionally, Amazon Glacier also checks for any missing content ranges when assembling the archive, if missing content ranges are found, Amazon Glacier returns an error and the operation fails.", "Reference": "Additionally, Amazon Glacier also checks for any missing content ranges when assembling the archive, if missing content ranges are found, Amazon", "NNUpdater": "Working with Archives in Amazon Glacier in the Amazon Glacier Developer Guide ."}
{"Origin": "Convert to primitive types, returning default value if text is null.", "Reference": "Convert to boolean, returning default value if text is inconvertible.", "NNUpdater": "Convert all types, both reference and primitive, to {@code Object}."}
{"Origin": "This method effectively emulates the JavaScript cast function except it returns UNKNOWN for known values with side-effects, use getImpureBooleanValue if you don't care about side-effects.", "Reference": "This method effectively emulates the JavaScript cast function except it return UNKNOWN for known values with side-effects, use getImpureBooleanValue if you don't care about side-effects.", "NNUpdater": "Ensure that call-site side-effects happen before expressions in the callee are evaluated."}
{"Origin": "To perform a partial update of a block blob's, use PutBlock and PutBlockList.", "Reference": "To perform a partial update of a block blob's, use", "NNUpdater": "Gets a list of {@link ScheduledTaskEntry}s on this block."}
{"Origin": "Sets the servers resolved by name resolution.", "Reference": "Sets the addresses resolved by name resolution.", "NNUpdater": "Set the dnsType value."}
{"Origin": "We will also set the longestPhaseSpawnRunnerName to the longest running spawn runner name across all phases if it exists.", "Reference": "We will also set the longestPhaseSpawnRunnerName to the longest running spawn runner name across all phases.", "NNUpdater": "Run benchmarks."}
{"Origin": "get the list of git markers web-elements in the editor", "Reference": "Gets the list of git markers web-elements in the editor.", "NNUpdater": "Get the TextArea of the editor."}
{"Origin": "Set isManualImport.", "Reference": "Set IsManualImport.", "NNUpdater": "Set Manuell."}
{"Origin": "construct an object from a byte stream (similar semantically to previous method, we are deciding which one to support)", "Reference": "Construct an object from a byte stream (similar semantically to previous method, we are deciding which one to support)", "NNUpdater": "Similar to the Win32 API"}
{"Origin": "Execute tests for a given {@link EngineDiscoveryRequest} using the {@link TestEngine} with the provided ID.", "Reference": "Execute tests for the given {@link EngineDiscoveryRequest} using the {@link TestEngine} with the supplied ID.", "NNUpdater": "Execute tests via a {@link EngineDiscoveryRequest} using the provided {@link TestEngine}, then return the recorded {@link ExecutionResults} to the caller."}
{"Origin": "Returns the object with the settings used for calls to labelAudio.", "Reference": "Returns the object with the settings used for calls to listEvaluationJobs.", "NNUpdater": "Returns the next Data object."}
{"Origin": "Blocks until all processes are stopped.", "Reference": "Blocks until all processes are quickly stopped.", "NNUpdater": "WicketTester."}
{"Origin": "Set-up database.", "Reference": "Set down database.", "NNUpdater": "Look up the directories set up for the given field type for this database."}
{"Origin": "Object chooser, this becomes the selected item (and added to the chooser if necessary).", "Reference": "If the Object is in the Object chooser, this becomes the selected item (and added to the chooser if necessary).", "NNUpdater": "Start a chooser activity for the current share intent."}
{"Origin": "Create a connection creator for short-lived connections.", "Reference": "Creates a channel creator for short-lived connections.", "NNUpdater": "Create new Connection."}
{"Origin": "Creates and returns a new {@link TitanVertexProperty} for the given key on this vertex with the specified object being the value.", "Reference": "Creates and returns a new {@link JanusGraphVertexProperty} for the given key on this vertex with the specified object being the value.", "NNUpdater": "Converts a Titan vertex id of a given vertex to the user provided id as the inverse mapping of {@link #toVertexId(long)}."}
{"Origin": "Converts an entity to a DBObject", "Reference": "Converts an entity to a Document", "NNUpdater": "Converts an object to a datastore Entity with the appropriate Key type."}
{"Origin": "Returns the title, or null if none is set", "Reference": "Returns the title static text, or null if none is set.", "NNUpdater": "Returns the input as list, or null, if none is set."}
{"Origin": "Returns ``true`` if the provided CrawlURI has an HttpMethod with a status code that falls within this instance's specified range.", "Reference": "Returns ``true`` if the provided CrawlURI has a fetch status that falls within this instance's specified range.", "NNUpdater": "Finally, this method delegates to {@link #innerExtract(ExtractorURI)} and returns that result."}
{"Origin": "The total time is calculated using the total count, since this is a built-in correspondence in the {@link SimplifiedLogScenario}.", "Reference": "The self time is calculated using the self count, since this is a built-in correspondence in the {@link SimplifiedLogScenario}.", "NNUpdater": "This is defined as {@code totalCreateTime / (createSuccessCount + createExceptionCount)}."}
{"Origin": "Note that validation type will be ignored for child context.", "Reference": "Note that the validation mode will be ignored for child context.", "NNUpdater": "Exceptions thrown by a consumer will be ignored."}
{"Origin": "We check if there is a registered comparator for all the interfaces if {@code clazz}", "Reference": "We check if there is a registered comparator for a interfaces of {@code clazz}", "NNUpdater": "Returns provider contracts recognized by Jersey that are implemented by the {@code clazz}."}
{"Origin": "If not explicitly configured, this is the default value of {@link CheckpointingOptions#FS_BUFFER_SIZE}.", "Reference": "If not explicitly configured, this is the default value of {@link CheckpointingOptions#FS_WRITE_BUFFER_SIZE}.", "NNUpdater": "If not called, the default value is {@link #DEFAULT_FLOW_CONTROL_WINDOW})."}
{"Origin": "Checks if caching was enabled for at least one document.", "Reference": "Checks if disk caching is requested or required for at least one document.", "NNUpdater": "Assert that at least one server the user specified is available."}
{"Origin": "Convenience method to get custom install file", "Reference": "Convenience method to get custom installation script", "NNUpdater": "Test of installItem method (with a valid handle), of class InstallItem."}
{"Origin": "Filters the sql commands if necessary.", "Reference": "Filters the sql commands if necessary - eg.", "NNUpdater": "Reads class or method annotation for action filters."}
{"Origin": "Retrn the list of members for the given class.", "Reference": "Returns a list of enclosed members for the given type.", "NNUpdater": "Returns a list of all member states."}
{"Origin": "Now this iteration ends, we've covered target with 1 interval, so the count increments by 1.", "Reference": "Now this iteration ends, we've covered target with 1 merged interval, so the # of intervals increments by 1.", "NNUpdater": "Records a load event."}
{"Origin": "Publishes a {@link BeforeTestClassEvent} to the {@code ApplicationContext} for the supplied {@link TestContext}.", "Reference": "Publish a {@link BeforeTestClassEvent} to the {@code ApplicationContext} for the supplied {@link TestContext}.", "NNUpdater": "Resolve the given {@link Parameter} for the supplied {@link TestExtensionContext}."}
{"Origin": "Construct the PackageFrameWriter object and then uses it generate the file.", "Reference": "Construct the PackageFrameWriter object and then use it generate the file.", "NNUpdater": "Adds the frame or non-frame package index to the documentation tree."}
{"Origin": "Updates a module m to export a package to all modules.", "Reference": "Update module m to export a package to all modules.", "NNUpdater": "If the caller's module is this module then update this module to export the given package to the given module."}
{"Origin": "Getter of publicationDateMax.", "Reference": "Getter of publicationDateMin.", "NNUpdater": "Randomly selects a slot out of the publication array and creates a publication if there isn't an active Publication there already"}
{"Origin": "Tests that is assignable to and from .", "Reference": "Tests that is assignable from .", "NNUpdater": "Tests that is assignable to and from ."}
{"Origin": "Wait for this task to meet the expected number of commits as defined by {@code expectedCommits}.", "Reference": "Wait up to the specified timeout for this task to meet the expected number of commits as defined by {@code expectedCommits}.", "NNUpdater": "Commits the transaction."}
{"Origin": "Set the number of digits in the fractional part of a size.", "Reference": "Set the default number of digits in the fractional part of a size.", "NNUpdater": "Return a string representation of the decimal using the specified scale."}
{"Origin": "Check if CertConstraintParameters has a trusted match, if it does call next() for any following constraints.", "Reference": "Check if ConstraintsParameters has a trusted match, if it does call next() for any following constraints.", "NNUpdater": "If so, it call {@link #checkValue(ValidationMessage.Builder, List, JsonNode)}."}
{"Origin": "Resolves a collection of root modules, with service binding, and with this configuration as its parent, to create a new configuration.", "Reference": "Resolves a collection of root modules, with this configuration as its parent, to create a new configuration.", "NNUpdater": "Resolves the resource configuration."}
{"Origin": "If the prefetch is not needed, {@link #playFromMediaId} can be directly called without this method.", "Reference": "If the prepare is not needed, {@link #playFromMediaId} can be directly called without this method.", "NNUpdater": "If the prefetch is not needed, {@link #playFromMediaId} can be directly called without this method."}
{"Origin": "See Immutable Set Static Factory Methods for details.", "Reference": "See Unmodifiable Sets for details.", "NNUpdater": "VerificationTimes supports multiple static factory methods:"}
{"Origin": "Submits a result of a broker execution.", "Reference": "Submits the result of a broker execution.", "NNUpdater": "Returns the message delivery policy."}
{"Origin": "Returns a random local port number, greater than min and lower than max.", "Reference": "Returns a random local port number in the interval [min, max].", "NNUpdater": "Returns a random number between min and max (exclusive)"}
{"Origin": "Obtains an instance from the specified unique name.", "Reference": "Obtains an instance from the specified name.", "NNUpdater": "Obtains the type from a unique name."}
{"Origin": "Iterate over registered {@link HandlerMethodArgumentResolver}s and invoke the one that supports it.", "Reference": "Iterate over registered {@link HandlerMethodArgumentResolver HandlerMethodArgumentResolvers} and invoke the one that supports it.", "NNUpdater": "Add the given {@link HandlerMethodArgumentResolver}."}
{"Origin": "NOTE:This operation is eventually consistent.", "Reference": "This operation is eventually consistent.", "NNUpdater": "Sets the request action."}
{"Origin": "After this method is called, no accumulo client will work in the current classloader.", "Reference": "After this method is called, no Connector will work in the current classloader.", "NNUpdater": "This classloader has this class's classloader as a parent (versus the current thread's context classloader) and also adds the specified module URLs to the classpath."}
{"Origin": "Waits during {@code timeout} until specified {@code element} does not contain the specified {@code expectedText}.", "Reference": "Waits during {@code timeout} until specified {@code element} does not contain the specified {@code absentText}.", "NNUpdater": "WebElement#getText()} equals to provided {@code expectedText}."}
{"Origin": "choosing return type is based on existence of @class field in JSON", "Reference": "choosing return type is based on existence of @class and @type field in JSON", "NNUpdater": "Creates a field based on the given data type."}
{"Origin": "Recursively get path in top down ancestral order.", "Reference": "Recursively append the path in top down ancestral order.", "NNUpdater": "Deletes this path."}
{"Origin": "Simply calls through to the {@link TransactionRepresentation#accept(Visitor)} method for each {@link", "Reference": "Simply calls through to the {@link CommandStream#accept(Visitor)} method for each {@link", "NNUpdater": "Operation fails."}
{"Origin": "Returns {@code true} if the given name is a legal binary name.", "Reference": "Returns {@code true} if the given name is a legal type name.", "NNUpdater": "Returns the tab bar height."}
{"Origin": "Set the Date that this Token was Created", "Reference": "Set the ZonedDateTime that this Token was Created", "NNUpdater": "The range_date_created."}
{"Origin": "Publish Config mapped to the given key under the {@link #DEFAULT_GROUP default group}", "Reference": "Publish Config mapped to the given key under the {@link #getDefaultGroup() default group}", "NNUpdater": "Guide."}
{"Origin": "{@codesnippet com.azure.storage.blob.specialized.BlobAsyncClientBase.startCopyFromURL#String}", "Reference": "{@codesnippet com.azure.storage.blob.specialized.BlobAsyncClientBase.beginCopy#String-Duration}", "NNUpdater": "{@codesnippet com.azure.storage.blob.BlobClientBuilder.buildAsyncClient}"}
{"Origin": "The input file must be a list of whitespace-separated verb-lemma-POS triples, one verb form per line.", "Reference": "The input file must be a list of tab-separated verb-POS pairs, one verb per line.", "NNUpdater": "Get method's http verbs."}
{"Origin": "We need to resend our first message with our conn_id", "Reference": "We need to resend the first message with our conn_id", "NNUpdater": "No used yet in our implementation."}
{"Origin": "Returns the component's background color as an alpha-red-green-blue integer.", "Reference": "Returns the background color of the %type% as an alpha-red-green-blue integer.", "NNUpdater": "Standard Red Green Blue ctColor value (RGB)."}
{"Origin": "The value is a double (ie VERSION) that needs to be formatted as a percentage with two decimal places precision.", "Reference": "The value is a double (ie VERSION) that needs to be formatted as a percentage with 'n' decimal places precision.", "NNUpdater": "The value is a double (ie VERSION) that needs to be formatted as a percentage with two decimal places precision."}
{"Origin": "During the prefetch, a session should not hold audio focus in order to allow other sessions play seamlessly.", "Reference": "During the prepare, a session should not hold audio focus in order to allow other sessions play seamlessly.", "NNUpdater": "During the prefetch, a session should not hold audio focus in order to allow other sessions play seamlessly."}
{"Origin": "Create optimized insert value.", "Reference": "Create insert value.", "NNUpdater": "Insert a Row"}
{"Origin": "Cookie data is signed it using .", "Reference": "Session data is signed it using .", "NNUpdater": "Gets the notional amount."}
{"Origin": "Gets the convention of the swap for which the data is valid.", "Reference": "Gets the name of the volatilities.", "NNUpdater": "Gets the convention of the swap for which the data is valid."}
{"Origin": "sort cookies with respect to their path: those with more specific Path attributes precede those with less specific, as defined in RFC 2965 sec.", "Reference": "sort cookies with respect to their path and age: those with more longer Path attributes precede those with shorter, as defined in RFC 6265.", "NNUpdater": "Set the {@code Port} attribute of this cookie."}
{"Origin": "Process double drops & XP gain for Mining.", "Reference": "Process double drops & XP gain for miningBehaviour.", "NNUpdater": "Calculate XP gain for Mining."}
{"Origin": "Tests the creation of a message authentication code for the sha256 algorithm.", "Reference": "Tests the creation of message authentication codes for the sha256 algorithm.", "NNUpdater": "Test method."}
{"Origin": "Test of local method, of class ABITracer.", "Reference": "Test of Local file method, of class ABITracer.", "NNUpdater": "Initialize sharding tracer."}
{"Origin": "Creates a speculation reason that is part of this group.", "Reference": "Creates a speculation reason described by this group.", "NNUpdater": "Add {@code reason} as a reason why the method is not deterministic."}
{"Origin": "Creates a SingleItemSketch on the heap given a Memory and assumes the DEFAULT_UPDATE_SEED.", "Reference": "Creates a SingleItemSketch on the heap given a SingleItemSketch Memory image and assumes the DEFAULT_UPDATE_SEED.", "NNUpdater": "-S seed"}
{"Origin": "Sets the query I use to {@link #validateObject validate} {@link Connection}s.", "Reference": "Sets the query I use to {@link #validateObject validate} {@link Connection}s. Should return at least one row.", "NNUpdater": "validateSignature."}
{"Origin": "Returns true if field sessionKey is set (has been assigned a value) and false otherwise", "Reference": "Returns true if field sessionId is set (has been assigned a value) and false otherwise", "NNUpdater": "Returns true if field eB is set (has been assigned a value) and false otherwise"}
{"Origin": "TODO: If a region is involved, all of its consumer regions are involved", "Reference": "If a region is involved, all of its consumer regions are involved", "NNUpdater": "Set one component."}
{"Origin": "If whitelisted properties list is defined, only those props are visible for JaVers, and the rest is ignored.", "Reference": "If ignored properties list is defined, only those props are visible for JaVers, and the rest is ignored.", "NNUpdater": "Extract props of given profiles."}
{"Origin": "Should be a ASCII string with a length no greater than 256 characters.", "Reference": "Should be a ASCII string with a length no greater than 255 characters.", "NNUpdater": "A start position greater than the string length only matches an empty search CharSequence."}
{"Origin": "Sets the metadata.", "Reference": "Gets the metadata.", "NNUpdater": "New builder."}
{"Origin": "Then, return a to scan the code and find the text to replace the placeholder.", "Reference": "Then, override getLabelFixingVisitor() to scan the code and find the text to replace the placeholder.", "NNUpdater": "This method will scan the all ths links for the link with the given text."}
{"Origin": "Broadcasts string message to all participants over default data channel.", "Reference": "Broadcasts a string message to all endpoints of the conference.", "NNUpdater": "Returns an iterator over all call peers."}
{"Origin": "Triangulate N views using the Discrete Linear Transform (DLT)", "Reference": "Triangulate N views using the Discrete Linear Transform (DLT) with an uncalibrated camera", "NNUpdater": "Otherwise, it returns an instance of {@link DiscreteResourceId}"}
{"Origin": "Assigns the actorType.", "Reference": "Assigns the factory.", "NNUpdater": "Returns true if this actor is the same as or is the descendant of the specified actor."}
{"Origin": "Returns an immutable {@link Map} that is backed by the given {@link CConfiguration}.", "Reference": "Returns a {@link Map} that is backed by the given {@link CConfiguration}.", "NNUpdater": "Gets an {@link ImmutableSet} of {@link Value.Immutable}s for the block at the given location."}
{"Origin": "Work-around for bug in java.net.URI ()", "Reference": "Work-around for bugs in java.net.URI (e.g.", "NNUpdater": "Work-around for bugs in java.net.URI (e.g. )"}
{"Origin": "Get group by.", "Reference": "Get group by segment.", "NNUpdater": "Get Order Compensation Group."}
{"Origin": "Parses the supplied DOM returning a single object respresenting the result of the parse.", "Reference": "Parses the supplied DOM returning a single object representing the result of the parse.", "NNUpdater": "DOM-parse the given input data."}
{"Origin": "Returns a new reference to the function with the given name and arity.", "Reference": "Returns a function call to the function with the given name and arity.", "NNUpdater": "Returns a new {@code Range} based on the specified type: booleans have arity 0, arrays or Collections have arity ``0..*``, and other types have arity 1."}
{"Origin": "Returns the descriptor corresponding to the given Java type.", "Reference": "Returns the descriptor corresponding to the given class.", "NNUpdater": "Returns the descriptor corresponding to the given class."}
{"Origin": "Sets a custom legend's labels and colors arrays.", "Reference": "Sets a custom legend's entries array.", "NNUpdater": "Calling this will disable the custom legend labels (set by setCustom(...))."}
{"Origin": "This includes not just the resources defined in this module, but in any other modules that this module depends on, as well as any libraries those modules may depend on (such as appcompat).", "Reference": "This includes not just the resources defined in this module, but in any other modules that this module depends on, as well as any libraries those modules may depend on (e.g.", "NNUpdater": "Returns the set of modules that this module reads."}
{"Origin": "Returns all pending tasks that are still not completed.", "Reference": "Returns all continuous tasks that are still not completed.", "NNUpdater": "Any tasks that are successfully assigned to a worker will be moved from pendingTasks to runningTasks."}
{"Origin": "Integers 0 ... n.", "Reference": "Integers 0 ... n - 1.", "NNUpdater": "Creates a sequence with the specified items."}
{"Origin": "IE system, hosts, partitions", "Reference": "IE database, hosts, partitions", "NNUpdater": "the first 6 bytes."}
{"Origin": "Gets the exampleText.", "Reference": "Gets the text.", "NNUpdater": "Gets the name."}
{"Origin": "See {@link jdk.internal.org.objectweb.asm.ClassVisitor#visitModule(String, int)}.", "Reference": "See {@link jdk.internal.org.objectweb.asm.ClassVisitor#visitModule}.", "NNUpdater": "Operation fails."}
{"Origin": "Returns the {@linkplain #descendants() descendant stream} filtered by child type.", "Reference": "Returns the {@linkplain #descendants() descendant stream} filtered by the given node type.", "NNUpdater": "Returns the next {@link Content} descendant."}
{"Origin": "Run all tests with given executor.", "Reference": "Run all tests with given runner.", "NNUpdater": "Get the executor service with the given name."}
{"Origin": "Returns the members of this action profile group.", "Reference": "Returns the list of member references of this action profile group.", "NNUpdater": "Gets the collection of all members in the group."}
{"Origin": "When accessing right, level value increments by 1.", "Reference": "When right, column value increments by 1.", "NNUpdater": "When accessing right, level value increments by 1."}
{"Origin": "Accumulate lefts into a LinkedListX (extended Persistent List) and Right with the supplied combiner function", "Reference": "Accumulate lefts into a LazySeq (extended Persistent List) and Right with the supplied combiner function", "NNUpdater": "Accumulate secondarys into a LinkedListX (extended Persistent List) and Right with the supplied combiner function"}
{"Origin": "Getter Parameter Value for bankAccountFromId", "Reference": "Getter Parameter Value for Bank Account From", "NNUpdater": "Getter Parameter Value for Account Date"}
{"Origin": "Note that a MutableInteger isn't and can't be equal to an Integer.", "Reference": "Note that a MutableLong isn't and can't be equal to an Long.", "NNUpdater": "Gets the 'to' value as a primitive integer."}
{"Origin": "Registers a custom property comparator for a given Custom type.", "Reference": "Registers a custom property comparator for a given Custom Type.", "NNUpdater": "Adds custom predicate to filter inclusion of {@link Source sources}."}
{"Origin": "For example, if the entire chart area is visible, this is simply the current size of {@link #contentRectMinusAllMargins}.", "Reference": "For example, if the entire chart area is visible, this is simply the current size of {@link #contentRect}.", "NNUpdater": "For example, if the entire chart area is visible, this is simply the current size of {@link #contentRect}."}
{"Origin": "Adds the given Certificate to the certificateStore, if not yet containing.", "Reference": "Adds the given Certificate to the certificatesMap, if not yet containing.", "NNUpdater": "Loop over the {@link CertificateProperties} and call {@link CertificateClient#getCertificate(CertificateProperties)} ."}
{"Origin": "Creates a new program scope: the list of methods.", "Reference": "Creates a new program scope as the root of all scopes", "NNUpdater": "Creates program options."}
{"Origin": "Queries this contact source for the given searchString.", "Reference": "Creates query for the given searchString.", "NNUpdater": "Queries this ContactSourceService for SourceContacts which match a specific query Pattern."}
{"Origin": "Computes the maximum for each pixel across all bands in the {@link Planar} image.", "Reference": "Computes the maximum for each pixel across selected bands in the {@link Planar} image.", "NNUpdater": "Computes the average for each pixel across all bands in the {@link Planar} image."}
{"Origin": "Copied from org.mortbay.log.StdErrLog.", "Reference": "Copied from org.eclipse.log.StdErrLog.", "NNUpdater": "Log an exception at the 'severe' level."}
{"Origin": "Validation of page: - detects invalid credentials error - detects wrong clientId error", "Reference": "Validation of page: - detects CAPTCHA test - detects invalid credentials error - detects wrong clientId error", "NNUpdater": "Detects localized objects in the specified local image."}
{"Origin": "Converts an array of raw binary data into an array of ascii 0 and 1 characters.", "Reference": "Converts an array of raw binary data into an array of ASCII 0 and 1 characters.", "NNUpdater": "Converts a byte array into a {@link ByteString}."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "To provide custom values for any of the parameters, you must modify the group after creating it using ModifyDBParameterGroup .", "Reference": "To provide custom values for any of the parameters, you must modify the group after creating it using", "NNUpdater": "Modify settings for a DB instance."}
{"Origin": "Stores a user and encrypted password.", "Reference": "Adds a user.", "NNUpdater": "Stores a user and encrypted password."}
{"Origin": "generates a Meta Object Protocol method, that is used to call a non public method, or to make a call to super.", "Reference": "Generates a Meta Object Protocol method, that is used to call a non public method, or to make a call to super.", "NNUpdater": "Creates a MethodCallExpression that represents a call to a static method that has arguments."}
{"Origin": "Removes the specified tags from the {@link NamespacedEntityId}", "Reference": "Removes the specified tags from the {@link MetadataEntity}", "NNUpdater": "Removes the specified tags from the {@link NamespacedEntityId}"}
{"Origin": "Returns the annotation mirror as specified by the ``qualifier`` element in {@code qualifierAnno}.", "Reference": "Returns the annotation mirror as specified by the ``qualifier`` element in {@code contractAnno}.", "NNUpdater": "Result has (column, version, kvtype, id, value)"}
{"Origin": "Returns a boolean value indicating whether the method is executed in the first tier Truffle compilation.", "Reference": "Returns a boolean value indicating whether the method is executed in the low-grade Truffle compilation.", "NNUpdater": "Returns a member by ID."}
{"Origin": "If the value isn't a uri, then a IllegalArgumentException will be thrown.", "Reference": "If the value isn't a uri, then an", "NNUpdater": "If the property value isn't of type string a {@link ConfigurationPropertyException} is thrown."}
{"Origin": "Runs the command with the given args.", "Reference": "Runs a command with the given args.", "NNUpdater": "Runs commands and return output"}
{"Origin": "Schedules package actions differentiating their type among Linux and Solaris servers.", "Reference": "Schedules package actions.", "NNUpdater": "Set the dnsType value."}
{"Origin": "Returns a curve node for a CDS quoted in par spread or quoted spread.", "Reference": "Returns a curve node with par spread convention.", "NNUpdater": "Visit the {@link BlockQuoteNode}."}
{"Origin": "Set the value of statusAfter, used in parameter comment.", "Reference": "Set the value of clusterstatus, used in parameter comment.", "NNUpdater": "Gets a comment by the specified id."}
{"Origin": "Map an o.s.Message to an o.s.a.core.Message.", "Reference": "Map an o.s.m.Message to an o.s.a.core.Message.", "NNUpdater": "Operation fails."}
{"Origin": "This method should be called after acquiring the retention lock; See {@link #acquireHistoryRetentionLock(Engine.HistorySource)}", "Reference": "This method should be called after acquiring the retention lock; See {@link #acquireHistoryRetentionLock()}", "NNUpdater": "Releases the lock previously obtained by a call to {@link #acquirePutFromLoadLock(Object, long)}."}
{"Origin": "Flatten the list of values of the given keys from the actual map under test into an array, this new array becoming the object under test.", "Reference": "Flatten the values of the given keys from the actual map under test into a new array, this new array becoming the object under test.", "NNUpdater": "Obtain a map bean names and instances of the given type from the application context (or ancestors), the map becoming the object under test."}
{"Origin": "Returns {@code true} if the given identifier is a legal Java identifier.", "Reference": "Returns {@code true} if the given name is a legal binary name.", "NNUpdater": "Expected format: {@code ':' identifier >} {@code ':' identifier '.'"}
{"Origin": "Load a {@link JobDirectoryManifest} from a {@link AgentManifestMessage}.", "Reference": "Load a {@link DirectoryManifest} from a {@link AgentManifestMessage}.", "NNUpdater": "Gets the manifest as a JSON template."}
{"Origin": "A failure to parse will return {@link NoopDnsServerAddressStreamProvider}.", "Reference": "A failure to parse will return {@link DefaultDnsServerAddressStreamProvider}.", "NNUpdater": "For example, the first {@link #stream()} will start from the first address, the second one will start from the second address, and so on."}
{"Origin": "Get Allocated.", "Reference": "Get Zugeordnet.", "NNUpdater": "Gets the free count."}
{"Origin": "The classpath.", "Reference": "The build classpath.", "NNUpdater": "Add the Mule libraries to the project classpath."}
{"Origin": "Get the {@link Sql @Sql} annotations declared on the supplied {@link AnnotatedElement}.", "Reference": "Get the {@code @Sql} annotations declared on the supplied {@code element}.", "NNUpdater": "Converts a {@link java.sql.Types} value to a {@link mondrian.spi.Dialect.Datatype}."}
{"Origin": "Removes a flag from the specified array.", "Reference": "Removes this flag from the specified array.", "NNUpdater": "Removes all occurrences of the specified element from the list."}
{"Origin": "Note that the {@link Columns#NAME} column's width will be ignored, as it depends on the frame's initial dimensions.", "Reference": "Note that the {@link Column#NAME} column's width will be ignored, as it depends on the frame's initial dimensions.", "NNUpdater": "Note that the {@link Columns#NAME} column's enabled state is ignored as it will always be enabled."}
{"Origin": "Map treatment to set_vlan action.", "Reference": "Map treatment to permit action.", "NNUpdater": "Adds an access interface to a VLAN."}
{"Origin": "Tries to return a valid Os version on windows systems.", "Reference": "Tries to return a valid OS version on Windows systems.", "NNUpdater": "Linux."}
{"Origin": "NOTE: By default this registers the dao to be associated with the class that it uses.", "Reference": "NOTE: By default this registers the DAO to be associated with the class that it uses.", "NNUpdater": "NOTE: You should maybe use the {@link DatabaseTable#daoClass()} and have the DaoManager construct the DAO if possible."}
{"Origin": "WebElement#getAttribute(String)} equals to provided {@code expectedValue}.", "Reference": "WebElement#getAttribute(String)} equals to provided {@code expected} one.", "NNUpdater": "WebElement#getAttribute(String)} equals to provided {@code expectedValue}."}
{"Origin": "Other arguments are parsed to a {@link Configuration} and passed to the", "Reference": "Other arguments are parsed to a {@link Configuration} and passed to the Dispatcher, for instance: .", "NNUpdater": "Arguments are: ``--generate-asciidoc filename``"}
{"Origin": "Group: common", "Reference": "Group: security", "NNUpdater": "Returns the default number of {@linkplain CommonPools#blockingTaskExecutor() blocking task executor} threads."}
{"Origin": "Finds all constraint annotations defined for the given class and returns them in a list of constraint descriptors.", "Reference": "Finds all constraint annotations defined for the given constrainable and returns them in a list of constraint descriptors.", "NNUpdater": "Finds all constraint annotations defined for the given field/method and returns them in a list of constraint descriptors."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Sets the scrService Object for this ScrActionSupport instance.", "Reference": "Sets the ServiceComponentRuntime Object for this ScrActionSupport instance.", "NNUpdater": "Sets the value of the Attribute property for this object."}
{"Origin": "This is normally true, except when scanning is hosted in a different service.", "Reference": "This is normally false, except when scanning is hosted in a different process.", "NNUpdater": "Gets the packages that this type repository is associated with scanning."}
{"Origin": "Returns the value of the {@code bitfield} field.", "Reference": "Returns the value of the {@code baselineUsesContext} field.", "NNUpdater": "Returns the value of the {@code to_cache} field."}
{"Origin": "Sends the specified sequence number to the channel.", "Reference": "Sends the specified sequence to the channel.", "NNUpdater": "Creates a channel and sends a request (that induces an exception) to the {@link EmbeddedChannel}."}
{"Origin": "Return true if the given attribute name is the name of a pre-defined attribute that is not allowed in the class file.", "Reference": "Return true if the given attribute name is the name of a pre-defined attribute in JVMS VERSION that is not allowed in a module-info class.", "NNUpdater": "Returns the method parameter name."}
{"Origin": "{@codesnippet com.azure.security.keyvault.certificates.CertificateClient.deleteCertificateWithResponse#String-Context}", "Reference": "{@codesnippet com.azure.security.keyvault.certificates.CertificateClient.beginDeleteCertificate#string}", "NNUpdater": "{@codesnippet com.azure.security.keyvault.certificates.CertificateClient.deleteIssuerWithResponse#string-context}"}
{"Origin": "Close and free all {@link PreparedStatement}s or {@link CallableStatement}s from the pool, and close the underlying connection.", "Reference": "Closes and frees all {@link PreparedStatement}s or {@link CallableStatement}s from the pool, and close the underlying connection.", "NNUpdater": "This will close database connection and statement."}
{"Origin": "Returns the secondary parents of this property map, for interfaces that need multiple inheritance.", "Reference": "Returns the secondary parents of this property map, for interfaces that need multiple inheritance or for interfaces of abstract classes.", "NNUpdater": "Adds a group to the inheritance map."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "This exception is caught here and reported through the event handler.", "Reference": "This exception is caught here and reported through reporter.", "NNUpdater": "Returns the type of exception caught by this exception handler."}
{"Origin": "This operation is required only for organizations that were created explicitly in billing mode, or that were migrated from a Consolidated Billing account family to Organizations.", "Reference": "This operation is required only for organizations that were created explicitly with only the consolidated billing features enabled, or that were migrated from a Consolidated Billing account family to Organizations.", "NNUpdater": "Sets the list of root groups."}
{"Origin": "Returns true and initiates a reconfiguration if a current one is not going", "Reference": "Returns true and initiates a reconfiguration if a current one is not going If a reconfiguration is going returns false", "NNUpdater": "Returns true if the constructor (or static initializer) is the default one."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Returns a {@link ListenableFuture} for an open connection corresponding to the given id.", "Reference": "Returns a {@link ListenableFuture} for an {@link OpenedSocket} corresponding to the given id.", "NNUpdater": "SettableFuture#setFuture setFuture(otherFuture)} on it."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "ParseException is thrown by the parser, it should be caught and returned in the InputRowPlusRaw so we will be able to provide information on the raw row which failed to be parsed.", "Reference": "If a ParseException is thrown by the parser, it should be caught and returned in the InputRowListPlusJson so we will be able to provide information on the raw row which failed to be parsed.", "NNUpdater": "A raw type expression must be of the form rawTypeOf(TTLExp)"}
{"Origin": "This method will also expand paths on the members of Collections.", "Reference": "This method will also expand paths on the members of Collections and Maps.", "NNUpdater": "Adds GroovyCollections#transpose(List) as a method on lists."}
{"Origin": "This is why there is not a set method for the category property.", "Reference": "This is why there is not a set method for the item property.", "NNUpdater": "This is why there is not a set method for the pathOrFormulasOrHandles property."}
{"Origin": "Tests that {@link DatasetServiceImpl#insertAll} retries quota rate limited attempts.", "Reference": "Tests that {@link DatasetServiceImpl#insertAll} retries rate limited attempts.", "NNUpdater": "Tests that {@link BigQueryServicesImpl.JobServiceImpl#pollJob} fails."}
{"Origin": "Get Record ID.", "Reference": "Get Sales Transaction.", "NNUpdater": "Get QualityIssuePercentage."}
{"Origin": "Get branding info ### Functional Description: Provides information about branding settings.", "Reference": "Get branding information ## \u26a0 Deprecated since version VERSION ### Functional Description: Provides information about branding settings.", "NNUpdater": "Returns information about this plugin."}
{"Origin": "Test that DocumentElement.add does not throw any exception when passing a non-null value.", "Reference": "Test that DocumentElement.addValue does not throw any exception when passing a non-null value.", "NNUpdater": "Returns {@code null} when either the given {@code property} does not exists in this element or does not corresponds to a {@link LiteralListElement}."}
{"Origin": "Reading request by chunk and getting values from chunk", "Reference": "Example of reading request by chunk and getting values from chunk to chunk", "NNUpdater": "Reading request by chunk and getting values from chunk"}
{"Origin": "Code snippets for {@link BlobClient#setHTTPHeadersWithResponse(BlobHTTPHeaders, BlobAccessConditions, Duration,", "Reference": "Code snippets for {@link BlobClient#setHTTPHeadersWithResponse(BlobHttpHeaders, BlobAccessConditions, Duration,", "NNUpdater": "Code snippet for {@link AppendBlobClient#createWithResponse(BlobHTTPHeaders, Metadata, BlobAccessConditions,"}
{"Origin": "True if the type is a JSO or interface implemented by a JSO, or a JsType.", "Reference": "True if the type is a JSO or interface implemented by a JSO, or a JsType, or a JsFunction.", "NNUpdater": "Maps a class for JSONs root."}
{"Origin": "Creates a negotiator used for ALTS.", "Reference": "Creates a negotiator used for ALTS client.", "NNUpdater": "Set the XMPP connection associated."}
{"Origin": "For an overview of CIDR ranges, go to the", "Reference": "For an overview of CIDR ranges, go to the Wikipedia Tutorial.", "NNUpdater": "Default to no overview, override to add overview."}
{"Origin": "Note that this is only useful for debugging porpose.", "Reference": "Note that this is only useful for debugging purpose.", "NNUpdater": "This method is useful for event logging and debugging."}
{"Origin": "This should be the String representation of the {@link FieldEntity}.", "Reference": "This should be the {@link FieldEntity}.", "NNUpdater": "Returns a String representation of the kind, which should be the end of all {@link #toString()} implementation of subclasses."}
{"Origin": "Note this method creates a HotStream that starts emitting data immediately.", "Reference": "Note this method creates a Connectable that starts emitting data immediately.", "NNUpdater": "Tests starts from stream."}
{"Origin": "Get Extern Keyword Snippet Block.", "Reference": "Get keys Builtin Function Snippet Block.", "NNUpdater": "Sets the source kind."}
{"Origin": "Returns a rule that forbids access to the given set of IP addresses.", "Reference": "Adds a rule that forbids access to the given set of IP addresses.", "NNUpdater": "Returns the set of interface IP addresses."}
{"Origin": "Test affinity awareness partition distributions cache size property.", "Reference": "Test Partition Awareness partition distributions cache size property.", "NNUpdater": "Get the current awareness as list of cognitions."}
{"Origin": "Decode the JVM options 1. strip \\`` at the start and at the end 2. replace ``&equals`` with ``=`` 3.", "Reference": "Decode the JVM options 1. strip \\`` at the start and at the end 2. replace ``(61)`` and ``&equals`` with ``=`` 3.", "NNUpdater": "Decode a URI path and strip parameters of UTF-8 path"}
{"Origin": "Test of var method, of class Beta.", "Reference": "Test of variance method, of class Beta.", "NNUpdater": "Test of betaCdf method, of class ContinuousDistributions."}
{"Origin": "The {@link KeyCreateOptions} is required.", "Reference": "The {@link CreateKeyOptions} is required.", "NNUpdater": "The {@link RsaKeyCreateOptions#getKeySize() keySize} can be optionally specified."}
{"Origin": "and repositoryId = ?.", "Reference": "and parentFolderId = ?.", "NNUpdater": "Engine."}
{"Origin": "Create a list of {@link FileMediaItem2} for testing purpose.", "Reference": "Create a list of {@link FileMediaItem} for testing purpose.", "NNUpdater": "Create a MediaItem2 from the {@link Bundle} with the specified {@link UUID} string."}
{"Origin": "### \u24d8 Further Information: Room administrators should regularly handle pending assignments to provide access to rooms for other users.", "Reference": "### \u24d8 Further Information: Room administrators should **SHOULD** handle pending assignments to provide access to rooms for other users.", "NNUpdater": "Users, which are in the group ``administrators`` are granted."}
{"Origin": "Configure whether or not to use an empty oauth token for OAuth1", "Reference": "Configure whether or not to add an empty oauth token for OAuth1 while generating Base string", "NNUpdater": "Sets the o auth token ID of this o auth token."}
{"Origin": "Parses {@link Basic2DMatrix} from the given Matrix Market string.", "Reference": "Parses {@link Basic2DMatrix} from the given Matrix Market.", "NNUpdater": "If is matrix and the matrix, then the new matrix will be ."}
{"Origin": "This method ADDS additional IterationListener to existing listeners", "Reference": "This method ADDS additional TrainingListener to existing listeners", "NNUpdater": "Adds the specified object to the list of registered configuration listeners."}
{"Origin": "Test of var method, of class TDistribution.", "Reference": "Test of variance method, of class TDistribution.", "NNUpdater": "This method returns the index of the maximum probability as provided by {@link #classDistribution(O) classDistribution(M)}."}
{"Origin": "Unless overridden by this method, the default Cipher instance is a {@link BlowfishCipher}.", "Reference": "Unless overridden by this method, the default CipherService instance is an {@link AesCipherService}.", "NNUpdater": "Gets the Java Cryptography Architecture transformation corresponding to the suite's underlying cipher algorithm."}
{"Origin": "{@code throwable} will be null in the case of a successful attempt to send the body.", "Reference": "{@code ioe} will be null in the case of a successful attempt to send the body.", "NNUpdater": "The current streamingInput will be set to {@code null} after the call."}
{"Origin": "For the `/v1/tables` method, the default is `tables`.", "Reference": "For the **Extract tables** method, the default is `tables`.", "NNUpdater": "Check the given table."}
{"Origin": "Creates and caches a test {@link BaseEvent} instance for the scope of the current test method.", "Reference": "Creates and caches a test {@link CoreEvent} instance for the scope of the current test method.", "NNUpdater": "Test method."}
{"Origin": "Return a {@link java.sql.Connection} from my pool, according to the contract specified by {@link ObjectPool#borrowObject}.", "Reference": "Returns a {@link java.sql.Connection} from my pool, according to the contract specified by {@link ObjectPool#borrowObject}.", "NNUpdater": "Test method for {@link org.apache.camel.component.sjms.jms.ConnectionResource#borrowConnection()}."}
{"Origin": "You are running on JDK6 which comes with JAX-WS {0} API, but this tool requires JAX-WS {1} API.", "Reference": "You are running on JDK6 or newer which comes with JAX-WS {0} API, but this tool requires JAX-WS {1} or newer API.", "NNUpdater": "Add custom JAX-RS provider to the list of providers"}
{"Origin": "This method removes any fully qualified throwable class names from the message cause chain.", "Reference": "This method replaces fully qualified throwable class names from the message cause chain with simple class names.", "NNUpdater": "Formats the Throwable that is the cause of this Throwable."}
{"Origin": "The Camel Rest component to use for the REST transport, such as restlet, spark-rest.", "Reference": "The Camel Rest component to use for (producer) the REST transport, such as http, undertow.", "NNUpdater": "Provides access to a {@link RestAssuredRestDocumentationConfigurer} that can be used to configure Spring REST Docs using the given {@code contextProvider}."}
{"Origin": "This function initializes the Facebook SDK, the behavior of Facebook SDK functions are undetermined if this function is not called.", "Reference": "The behavior of Facebook SDK functions are undetermined if this function is not called.", "NNUpdater": "Sets the application's Facebook ID."}
{"Origin": "Commonly important status information.", "Reference": "Track something gone wrong.", "NNUpdater": "Returns a matcher that includes all commonly used {@link StaticResourceLocation Locations}."}
{"Origin": "Finds a {@link Preference} based on its key.", "Reference": "Finds a {@link Preference} with the given key.", "NNUpdater": "Creates a new preference store based on a properties file."}
{"Origin": "ImmutableSet ImmutableSet.copyOf(Collection)} to set the property?", "Reference": "ImmutableSet.copyOf(Collection)} to set the property?", "NNUpdater": "Gets an {@link ImmutableSet} of {@link Value.Immutable}s for the block at the given location."}
{"Origin": "Returns the value of a yes/no option.", "Reference": "Returns the boolean value of a yes/no option.", "NNUpdater": "Returns value of the toList option."}
{"Origin": "Computes the average for each pixel across all bands in the {@link Planar} image.", "Reference": "Computes the average for each pixel across selected bands in the {@link Planar} image.", "NNUpdater": "Computes the average for each pixel across all bands in the {@link Planar} image."}
{"Origin": "Returns the highest solid 'terrain' block which can occur naturally.", "Reference": "Returns the highest solid 'terrain' block.", "NNUpdater": "Get the block factory from which new {@link BaseBlock}s can be constructed."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Execute the ALTER CLASS.", "Reference": "Execute the ALTER CLUSTER.", "NNUpdater": "Execute group."}
{"Origin": "Instead, it returns deleted inodes so that their blocks can be deleted after the inode deletion journal entry has been written.", "Reference": "Instead, it adds blocks to the blockDeletionContext so that they can be deleted after the inode deletion journal entry has been written.", "NNUpdater": "Instead, it returns deleted inodes so that their blocks can be deleted after the inode deletion journal entry has been written."}
{"Origin": "This method overwrites existing fields added with {@link #field(String, TypeInformation)}.", "Reference": "This method overwrites existing fields added with {@link #field(String, DataType)}.", "NNUpdater": "Returns the field's {@link ValueType}"}
{"Origin": "Cancels the task of loading and displaying image for incoming imageView.", "Reference": "Cancels the task of loading and displaying image for incoming imageAware.", "NNUpdater": "Incoming drawable will be displayed in {@link android.widget.ImageView ImageView} during image loading."}
{"Origin": "Sets the Raft state machine factory.", "Reference": "Sets the server thread pool size.", "NNUpdater": "Adds a Raft service factory."}
{"Origin": "Returns the frame percentage.", "Reference": "Returns the health.", "NNUpdater": "Set Split Percent."}
{"Origin": "Set name of the Cosmos DB Cassandra keyspace.", "Reference": "Set the resource value.", "NNUpdater": "Returns the keyspace of the first occurence of {@code name} in this metadata."}
{"Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}", "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveFromRangeEnd }{@code >}}", "NNUpdater": "Create an instance of {@link JAXBElement }{@code <}{@link CTStrokeChild }{@code >}}"}
{"Origin": "This method will return true if the version stored in the file matches the supplied String version.", "Reference": "This method will return true if the version stored in the file matches the supplied float version.", "NNUpdater": "Tests transformation of model from VERSION version into VERSION version."}
{"Origin": "Write the task state to the {@link ProvisionerStore}, retrying if any exception is caught.", "Reference": "Write the task state to the {@link ProvisionerTable}, retrying if any exception is caught.", "NNUpdater": "Get a {@link TaskState} instance for the task."}
{"Origin": "Applies the optimization (main entry point).", "Reference": "Applies the optimization to the given query root.", "NNUpdater": "to the optimization policy."}
{"Origin": "For each network interface, create a listening thread using {@link #_executorService}", "Reference": "For each network interface, create a listening thread using {@link #executorService}", "NNUpdater": "Instantiates the default {@link ScheduledExecutorService} for the ElasticScheduler ({@code Executors.newSingleThreadExecutor})."}
{"Origin": "This method could be used in the method.", "Reference": "This method could be used in the modules.", "NNUpdater": "This method should only be used in {@link ClientContext}."}
{"Origin": "Returns true to indicate that we can paint a representation of the", "Reference": "Returns true to indicate that we can paint a representation of the Object.", "NNUpdater": "Returns the default paint."}
{"Origin": "Override the debug WARN logging level", "Reference": "Override the default logging level of INFO", "NNUpdater": "Sets the logger to the warning logging level."}
{"Origin": "Builder.newRequires(mods, mn);", "Reference": "Builder.newRequires(mods, mn, compiledVersion);", "NNUpdater": "Obtains a {@code Period} from a text string such as {@code PnYnMnD}."}
{"Origin": "Get the value of username.", "Reference": "Gets the value of user name.", "NNUpdater": "Gets the username."}
{"Origin": "Completes {@code cs} with any additional changes from its topics", "Reference": "Completes {@code changeSet} with any additional changes from its topics", "NNUpdater": "Get the name for the bytes in array cs."}
{"Origin": "Returns the Java type of the ProtoFields helper class generated for a corresponding {@code protoType} that has a custom adapter.", "Reference": "Returns the Java type of the abstract adapter class generated for a corresponding {@code protoType}.", "NNUpdater": "Returns a {@link MessageAdapter} for the given message type."}
{"Origin": "Build a PreparedStatementCreator based on the given SQL and named parameters.", "Reference": "Build a {@link PreparedStatementCreator} based on the given SQL and named parameters.", "NNUpdater": "Return the associated SQL prepared statement for the SQL JdbcTemplate."}
{"Origin": "Tests that a configuration is able to be retrieved when it exists, whether or not it is locked.", "Reference": "Tests that a configuration is able to be retrieved when it exists, whether or not it is read-only.", "NNUpdater": "Tests the JMXMonitoringJob is able to have attributes added to it."}
{"Origin": "Set the WebSocket sub-protocols supported by the server.", "Reference": "Set the WebSocket list of sub-protocol supported by the server.", "NNUpdater": "Returns the protocols simultaneously supported."}
{"Origin": "Returns true if there's another route to attempt.", "Reference": "Returns true if there's another set of routes to attempt.", "NNUpdater": "Returns true if there's another TLS configuration to try."}
{"Origin": "Creates a preprocessed graph for a snippet or method substitution.", "Reference": "Creates a preprocessed graph for a snippet or method substitution with a context of .", "NNUpdater": "Determines if there is a {@linkplain #getSubstitution(ResolvedJavaMethod, int) substitution graph} for a given method."}
{"Origin": "Tests the {@link FileSystemMaster#delete(AlluxioURI, DeleteOptions)} method for a directory.", "Reference": "Tests the {@link FileSystemMaster#delete(AlluxioURI, DeleteContext)} method for a directory.", "NNUpdater": "Tests the {@link FileSystemMaster#delete(AlluxioURI, DeleteOptions)} method for a directory."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Use {@link #onSubmitAfterForm(AjaxRequestTarget, Form)} instead.", "Reference": "Use {@link #onAfterSubmit(AjaxRequestTarget, Form)} instead.", "NNUpdater": "The resource key must be of the form: [form-name].[component-name].[validator-class]."}
{"Origin": "The item is removed from the collection mapped to the specified key.", "Reference": "The value is removed from the collection mapped to the specified key.", "NNUpdater": "If a key is removed, the will be invoked."}
{"Origin": "Returns an offset time formed from this time and the specified offset.", "Reference": "Returns a local date-time formed from this time at the specified date.", "NNUpdater": "Sets the time Offset in seconds."}
{"Origin": "Required for cron or delay", "Reference": "Required for delay and every", "NNUpdater": "Determine whether the specified expression represents a valid cron pattern."}
{"Origin": "That is, leaving endpoints are not included in the copy.", "Reference": "That is, leaving nodes are not included in the copy.", "NNUpdater": "That is, leaving endpoints are not included in the copy."}
{"Origin": "Checks the dirty status of the 'batchId' field.", "Reference": "Checks the dirty status of the 'sitemaps' field.", "NNUpdater": "Checks if the number of fields are equal to the batch field size then adds the Value Arrray to the end of the batch"}
{"Origin": "Returns an {@link Operator} to allow the query to be pushed dependencies via the {@link Observable#lift(Operator)} method.", "Reference": "Returns an {@link Transformer} to allow the query to be pushed dependencies via the {@link Observable#compose(Transformer)} method.", "NNUpdater": "Automaps the first column of the ResultSet into the target class as an operator to use with ."}
{"Origin": "The fetcher should something as it falls back to Chimbori", "Reference": "The fetcher should something as it falls back to OttoBib", "NNUpdater": "Creates a MindIcon from SVG if exists (and the pref option is set), otherwise falls back to png."}
{"Origin": "Paints split button.", "Reference": "Paints menu button.", "NNUpdater": "Paints popup border."}
{"Origin": "See Immutable Map Static Factory Methods for details.", "Reference": "See Unmodifiable Maps for details.", "NNUpdater": "VerificationTimes supports multiple static factory methods:"}
{"Origin": "This method may be called after {@link #startServer()} to (re-)set the script evaluation timeout in the running server.", "Reference": "This method may be called after {@link #startServer()} to (re-)set the evaluation timeout in the running server.", "NNUpdater": "Convenience method to {@link #of(Function) define} and {@link #start()} the server in one go."}
{"Origin": "Use {@link CommandSpec#setInterpolateVariables(Boolean)} to switch off variable expansion if needed.", "Reference": "Use {@link CommandSpec#interpolateVariables(Boolean)} to switch off variable expansion if needed.", "NNUpdater": "Operation fails."}
{"Origin": "Test of npara method, of class Exponential.", "Reference": "Test of length method, of class Exponential.", "NNUpdater": "Test of exponentialCdf method, of class ContinuousDistributions."}
{"Origin": "Returns the public keys or {@code null} for none.", "Reference": "Returns the public keys.", "NNUpdater": "Returns the first {@code ``If-None-Match``} header or {@code null} for none."}
{"Origin": "Set the fileContentLanguage property: Specifies the natural languages used by this resource.", "Reference": "Set the contentLanguage property: Specifies the natural languages used by this resource.", "NNUpdater": "Set Sprache."}
{"Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}", "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveFromRangeEnd }{@code >}}", "NNUpdater": "Create an instance of {@link JAXBElement }{@code <}{@link CTStrokeChild }{@code >}}"}
{"Origin": "This method will attempt to load the cluster defaults and update the configuration if necessary.", "Reference": "This method will attempt to load the cluster and path level configuration defaults and update the configuration if necessary.", "NNUpdater": "Returns the current cluster configuration."}
{"Origin": "Setter Parameter Value for File Name", "Reference": "Setter Parameter Value for File Path or Name", "NNUpdater": "Replaces the TypeParameter list."}
{"Origin": "DHCP Server should send DHCPNAK message to client if ``Request IP`` is incorrect, or is on the wrong network", "Reference": "DHCP Server should send DHCPNAK message to client if ``Request IP`` is incorrect, or is on the wrong network (giaddr is incorrect)", "NNUpdater": "Sends a message to the server."}
{"Origin": "Checks if device connected or connecting to wifi network.", "Reference": "Checks if device connected to a WIFI network.", "NNUpdater": "Returns all the clients connected or connecting (or previously so) to this server."}
{"Origin": "Returns true if field targetThreadNameList is set (has been assigned a value) and false otherwise", "Reference": "Returns true if field threadNameList is set (has been assigned a value) and false otherwise", "NNUpdater": "Returns true if field id is set (has been assigned a value) and false otherwise"}
{"Origin": "Loads a new module from the class path and defers scanning associated directories for resources.", "Reference": "Loads a new (assumed monolithic) module from the class path and defers scanning associated directories for resources.", "NNUpdater": "Create a ClassPath object for rmic from the relevant command line options for class path and boot class path."}
{"Origin": "Validate {@code sslContext} is configured properly.", "Reference": "Makes sure the specified {@link SslContext} is configured properly.", "NNUpdater": "Returns the global {@link SSLContextParameters} if enabled on the implementing object, null otherwise."}
{"Origin": "Note that this method will only return a non-null value code if the has been set.", "Reference": "Note that this method will only return a non-null value code if the {@code CacheManager} has been set.", "NNUpdater": "If this method returns {@code true}, then {@link #getMergedAnnotationAttributes} will return a non-null value."}
{"Origin": "It creates a topic using KafkaProducer.", "Reference": "It creates a topic using Producer.", "NNUpdater": "Will close the underlying {@link KafkaProducer}"}
{"Origin": "Returns a wrapped instance of {@link ClientConnectionRequest} to capture the necessary performance metrics.", "Reference": "Returns a wrapped instance of {@link ConnectionRequest} to capture the necessary performance metrics.", "NNUpdater": "Start callback."}
{"Origin": "Adds all database providers, and starts initialization of our services.", "Reference": "Initializes the latest snapshot and adds all database providers, and starts initialization of our services.", "NNUpdater": "Start the given service"}
{"Origin": "The method, which is invoked on implementing subclasses in order to create the view recycler adapter, which allows to inflate the child views, which are associated with tabs.", "Reference": "The method, which is invoked on implementing subclasses in order to create the view recycler adapter, which allows to inflate the views, which are associated with tabs.", "NNUpdater": "The method, which is invoked on implementing subclasses in order to retrieve, whether the items are overshooting at the end."}
{"Origin": "Removes the specified object from the list of registered configuration listeners.", "Reference": "Removes the specified object from the list of registered configuration LISTENERS.", "NNUpdater": "Removes the specified object from the list of registered configuration listeners."}
{"Origin": "Work-around for bug in java.net.URI ()", "Reference": "Work-around for bug in java.net.URI (URL)", "NNUpdater": "Work-around for bugs in java.net.URI (e.g. )"}
{"Origin": "See {@link ClassVisitor#visitModule(String, int)}.", "Reference": "See {@link ClassVisitor#visitModule}.", "NNUpdater": "``String[][][]`` or ``int``) for a type reference used in an annotation parameter."}
{"Origin": "Create from a given Numpy .npy file.", "Reference": "Create an INDArray from a given Numpy .npy file.", "NNUpdater": "Create a new file node from the given byte array"}
{"Origin": "Set the given conditional-GET header, if the setting is enabled and a suitable value is available in the URI history.", "Reference": "Add the given conditional-GET header, if the setting is enabled and a suitable value is available in the URI history.", "NNUpdater": "If-None-Match then the {@link PushBuilderImpl#isConditional()} header is set to true."}
{"Origin": "Sets e guardian user id.", "Reference": "Sets eguardian user id.", "NNUpdater": "Sets the user id of this resource."}
{"Origin": "Register a module this this class loader.", "Reference": "Register a module this class loader.", "NNUpdater": "Returns the {@code ClassLoader} for this module."}
{"Origin": "Sets the {@link #username}.", "Reference": "Sets the {@link #userName}.", "NNUpdater": "-U"}
{"Origin": "Code snippets for {@link PageBlobClient#uploadPagesWithResponse(PageRange, InputStream, PageBlobRequestConditions,", "Reference": "Code snippets for {@link PageBlobClient#uploadPagesWithResponse(PageRange, InputStream, byte[],", "NNUpdater": "Code snippets for {@link PageBlobClient#create(long)}"}
{"Origin": "Path parameter: path (required)", "Reference": "Path parameter: endpointType (required)", "NNUpdater": "Adds a path prefix and a handler for that path."}
{"Origin": "Make sure to keep {@link #database} field and map synchronized.", "Reference": "Make sure to keep {@link #wikiId} field and map synchronized.", "NNUpdater": "Make sure to use it with {@link #underlyingBytes()}."}
{"Origin": "Gets an object in the value at {@code position}.", "Reference": "Gets a block in the value at {@code position}.", "NNUpdater": "Gets the block type at a position."}
{"Origin": "Saves attachment to output stream.", "Reference": "Saves attachment to the output stream.", "NNUpdater": "Creates a temporary file that stores the given data."}
{"Origin": "Decodes a byte array where each char represents an ascii '0' or '1'.", "Reference": "Decodes a char array where each char represents an ASCII '0' or '1'.", "NNUpdater": "Converts a byte array into a {@link ByteString}."}
{"Origin": "This is the price agreed when the trade occurred.", "Reference": "This is the price agreed when the trade occurred, in decimal form.", "NNUpdater": "The meta-property for the {@code price} property."}
{"Origin": "The context of the initiator or null if not running.", "Reference": "The context of the initiator.", "NNUpdater": "Add configuration to be applied to the builder during setup."}
{"Origin": "Throws {@link ConfigurationException} if given group property is defined within Hazelcast properties.", "Reference": "Throws {@link InvalidConfigurationException} if given group property is defined within Hazelcast properties.", "NNUpdater": "Get the client {@link HazelcastInstance}."}
{"Origin": "NOTE:You cannot delete a cache security group if it is associated with any cache clusters.", "Reference": "You cannot delete a cache security group if it is associated with any cache clusters.", "NNUpdater": "You cannot delete an application version that is associated with a running environment."}
{"Origin": "Returns a new queue of given size containing consecutive PDelays 0 ... n.", "Reference": "Returns a new queue of given size containing consecutive PDelays 0 ... n - 1.", "NNUpdater": "Returns the maximum number of events in the queue."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "If two ranges overlap, this range or the other range strictlyContains the begin or the end of the other range.", "Reference": "If two ranges overlap, this range or the other range contains the begin or the end of the other range.", "NNUpdater": "append range in original sequence coordinates, no checking is done other than overlap with tail range fast"}
{"Origin": "Run {@link SearchResult#parallelCombineActive(Collection, Func1)} if there is at least one active connector in connectors, and throw NoConnectorException otherwise.", "Reference": "Run {@link SearchResult#parallelCombineActive(Collection, Function)} if there is at least one active connector in connectors, and throw NoConnectorException otherwise.", "NNUpdater": "Convenience method which calls {@link #getConnectors()} and {@link #setConnectors(Connector[])} to remove a connector."}
{"Origin": "Returns true to indicate that we can paint a representation of the", "Reference": "Returns true to indicate that we can paint a representation of the Object.", "NNUpdater": "Returns the default paint."}
{"Origin": "Invoke Builder.conceals(String pn)", "Reference": "Invoke Builder.packages(String pn)", "NNUpdater": "For most situations use {@link #invokeMethod(Object, Object...)} instead."}
{"Origin": "To use a custom ClassLoader, setClassLoader() must be called prior to calling this method.", "Reference": "To use a custom ClassLoader, the Flyway(ClassLoader) constructor must be called prior to calling this method.", "NNUpdater": "From {@link Class#getClassLoader() callingClass.getClassLoader() }"}
{"Origin": "Any metadata related to the value.", "Reference": "Any metadata related to the entity.", "NNUpdater": "Removes a related dependency."}
{"Origin": "Returns the textual representations of the running issues (Java version and dependency), if any.", "Reference": "Returns the textual representations of the running issues (e.g.", "NNUpdater": "Returns the textual representation of the Java version issue that prevents the add-on or extension from being run, if any."}
{"Origin": "Parses {@link DenseMatrix} from the given Matrix Market string.", "Reference": "Parses {@link DenseMatrix} from the given Matrix Market.", "NNUpdater": "Test of clone method, of class DenseMatrix."}
{"Origin": "Get distinct select items.", "Reference": "Get column labels.", "NNUpdater": "Get distinct select item optional."}
{"Origin": "Probably you want {@link #getOffsetInSection()}.", "Reference": "Probably you want {@link #getAddress()}.", "NNUpdater": "Operation fails."}
{"Origin": "Returns the s v n repository with the primary key or throws a {@link com.liferay.socialcoding.NoSuchSVNRepositoryException} if it could not be found.", "Reference": "Returns the s v n repository with the primary key or throws a {@link NoSuchSVNRepositoryException} if it could not be found.", "NNUpdater": "Engine."}
{"Origin": "For further information please read the javadoc on {@link Component#canCallListenerInterface()}, this method has the same semantics.", "Reference": "For further information please read the javadoc on {@link Component#canCallListener()}, this method has the same semantics.", "NNUpdater": "Please refer to {@link MediaControlIntent#ACTION_SEND_MESSAGE} for more information about the semantics of this request."}
{"Origin": "Logs collection, string and throws {@link java.lang.AssertionError}, if contains.", "Reference": "Logs collection, element and throws {@link java.lang.AssertionError}, if contains.", "NNUpdater": "Creates a String of {@code CharSequence}."}
{"Origin": "Gets the value of the 'zk_Quorum' field.", "Reference": "Gets the value of the 'zkQuorum' field.", "NNUpdater": "Gets the value of the 'paramName' field."}
{"Origin": "Returns the event index.", "Reference": "Returns the event indexes.", "NNUpdater": "Returns the index type name"}
{"Origin": "Generate a new LdapConnection object for following a referral with the given LdapUrl, and copy the username and password from the original connection.", "Reference": "Generate a new LdapNetworkConnection object for following a referral with the given LdapUrl, and copy the username and password from the original connection.", "NNUpdater": "Builds an {@link LdapDirectoryInfo} object by querying the active directory LDAP context for the specified username."}
{"Origin": "Returns whether this is a required option or positional parameter.", "Reference": "Returns whether this is a required option or positional parameter without a default value.", "NNUpdater": "Returns the default value of this option or positional parameter, before splitting and type conversion."}
{"Origin": "Adds the names of the database that has been addressed by the argument index.", "Reference": "Adds the name of the database that has been addressed by the argument index.", "NNUpdater": "Returns the id of the namespace uri of the addressed element or attribute."}
{"Origin": "Test affinity awareness partition distributions cache size property with semicolon.", "Reference": "Test Partition Awareness partition distributions cache size property with semicolon.", "NNUpdater": "Get the current awareness as list of cognitions."}
{"Origin": "Returns the subset of nodes that are in a given state", "Reference": "Returns the subset of nodes that are in a given state(s)", "NNUpdater": "Returns a list of all nodes in the array nodes, excluding the local node."}
{"Origin": "Returns an ordered range of all the sync d l objects where companyId = ?", "Reference": "Returns an ordered range of all the sync d l objects where repositoryId = ?", "NNUpdater": "Finds an ordered range of all the articles where groupId = ?"}
{"Origin": "This function assumes the block at the given index is cached for the given size.", "Reference": "This function assumes the block at the given index is read and cached for the given sizes.", "NNUpdater": "Returns element at given index."}
{"Origin": "Adapts a list instance.", "Reference": "Adapts a value.", "NNUpdater": "Adapts a list instance for typed access."}
{"Origin": "Closes a session.", "Reference": "Registers a query.", "NNUpdater": "Removes a session."}
{"Origin": "Utf8String can be constructed from asBytes array.", "Reference": "Utf8String can be constructed from bytes array.", "NNUpdater": "Reads UTF8 string in {@link #b}."}
{"Origin": "If you specify both tag keys and tag values in the same request,", "Reference": "If you specify both tag keys and tag values in the same request, Amazon", "NNUpdater": "Returns a tag or attribute name."}
{"Origin": "Returns a list of {@link ConditionalCard}s eligible for display.", "Reference": "Returns a list of {@link ContextualCard}s eligible for display.", "NNUpdater": "Gets the list of output {@link ImageDisplay}s."}
{"Origin": "log of the Gamma function.", "Reference": "The log of the Gamma function.", "NNUpdater": "Test of lgamma method, of class Gamma."}
{"Origin": "Only return objects changed since this time.", "Reference": "Only return objects changed since a specified time.", "NNUpdater": "Returns the objects that have been changed and the type of change."}
{"Origin": "Returns the path of the data plane private key file, if this is set with the 'dataPlanePrivateKeyFile' property.", "Reference": "Returns the path of the data plane private key file, if this is set with the 'dataPlaneKeyFile' property.", "NNUpdater": "Given the .unikey-format byte array with the private key, create the {@link PrivateKey}."}
{"Origin": "Replaces the {@link Request} associated with this context with the specified one without any validation.", "Reference": "Replaces the {@link HttpRequest} associated with this context with the specified one without any validation.", "NNUpdater": "Replaces a specified {@link Object3D} with a new one."}
{"Origin": "AdditionalAction, this method returns false and updates the error list when the additonalActionAuth parameter is set to false.", "Reference": "AdditionalAction, this method returns false and updates the error list when the additionalActionAuth parameter is set to false.", "NNUpdater": "Set Aktion."}
{"Origin": "IMPORTANT: After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group.", "Reference": "After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group.", "NNUpdater": "Creates a new DB parameter group."}
{"Origin": "Close the current packet reader.", "Reference": "Close the current data reader.", "NNUpdater": "Flush and close this file reader."}
{"Origin": "Produces canonical attribute representation by stripping an unnecessary ``this.``", "Reference": "Strips an unnecessary ``this.``", "NNUpdater": "The canonical form for the channel"}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Gets ports.", "Reference": "Gets endpoints.", "NNUpdater": "arePortsOccupied will repeatedly test the connection to the ports defined in the groovy configuration file to see whether the ports are open."}
{"Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}", "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveToRangeEnd }{@code >}}", "NNUpdater": "Create an instance of {@link JAXBElement }{@code <}{@link CTStrokeChild }{@code >}}"}
{"Origin": "This is the price agreed when the trade occurred.", "Reference": "This is the price agreed when the trade occurred, in decimal form.", "NNUpdater": "The meta-property for the {@code price} property."}
{"Origin": "In the database, the task would likely have a past start date (i.e.", "Reference": "In the database, the task would likely have a past start date (e.g.", "NNUpdater": "The range_start_date."}
{"Origin": "Compute CRC over the frame's payload.", "Reference": "Compute CRC over the buffer's payload.", "NNUpdater": "Write the record to `out` and return its size."}
{"Origin": "The activity counters are reset after restarting IRI.", "Reference": "Note: The activity counters are reset after restarting IRI.", "NNUpdater": "Set the continuation point for this frame."}
{"Origin": "See Immutable Map Static Factory Methods for details.", "Reference": "See Unmodifiable Maps for details.", "NNUpdater": "VerificationTimes supports multiple static factory methods:"}
{"Origin": "Initializes the specified input.", "Reference": "Initializes command execution.", "NNUpdater": "Creates a new specified context."}
{"Origin": "Turns this ReactiveSeq into a HotStream, a connectable Stream, being executed on a thread on the supplied executor, that is producing data", "Reference": "Turns this ReactiveSeq into a Connectable, a connectable Stream, being executed on a thread on the supplied executor, that is producing data", "NNUpdater": "Similar to @see {@link ReactiveSeq#futureOperations(Executor)}, but returns Future"}
{"Origin": "Use method for manual rebalaincing cache on all nodes.", "Reference": "Use method for manual rebalancing cache on all nodes.", "NNUpdater": "Set Manuell."}
{"Origin": "Return a pausable HotStream that will skip emitting data when the first connecting Stream connects.", "Reference": "Return a pausable Connectable that will skip emitting data when the first connecting Stream connects.", "NNUpdater": "Connecting streams to each other."}
{"Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}", "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveToRangeEnd }{@code >}}", "NNUpdater": "Create an instance of {@link JAXBElement }{@code <}{@link CTStrokeChild }{@code >}}"}
{"Origin": "Resets any management pack installation states from {@link RepositoryVersionState#INSTALLING} to {@link RepositoryVersionState#INSTALL_FAILED}.", "Reference": "Resets any management pack installation states from {@link MpackInstallState#INSTALLING} to {@link MpackInstallState#INSTALL_FAILED}.", "NNUpdater": "Operation fails."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Object chooser, this becomes the selected item (and added to the chooser if necessary).", "Reference": "If the Object is in the Object chooser, this becomes the selected item (and added to the chooser if necessary).", "NNUpdater": "Start a chooser activity for the current share intent."}
{"Origin": "Objects of the following type(s) are allowed in the list {@link Con }", "Reference": "Objects of the following type(s) are allowed in the list {@link Con1 }", "NNUpdater": "Objects of the following type(s) are allowed in the list {@link Link }"}
{"Origin": "This feature collects stack trace in advance, when task is created, so that if the task throws the exception then the parent stack trace is appended to it.", "Reference": "This feature collects stack trace in advance, when task is created, so that if a task throws an exception then the parent stack trace is appended to it.", "NNUpdater": "Prints the stack trace of the to the given"}
{"Origin": "This method returns the value of the database column m_prj_project.projectType", "Reference": "This method returns the value of the database column m_prj_project.type", "NNUpdater": "This method returns the value of the database column m_prj_project.accountId"}
{"Origin": "Binds the specified {@link Service} at the specified path pattern of the default {@link VirtualHost}.", "Reference": "Binds the specified {@link HttpService} at the specified path pattern of the default {@link VirtualHost}.", "NNUpdater": "Binds the specified {@link Service} at the specified {@link Route} of the default {@link VirtualHost}."}
{"Origin": "Two {@code Requires} objects are compared by comparing their module name lexicographically.", "Reference": "Two {@code Requires} objects are compared by comparing their module names lexicographically.", "NNUpdater": "Returns if the two documents corresponds to the same data by first comparing if their parents are the same and then comparing if they have the same value on their {@code id} property."}
{"Origin": "Returns a song randomly selected from all the songs in the Android", "Reference": "Returns a list of songs randomly selected from all the songs in the Android", "NNUpdater": "Shuffles all songs in the given song list"}
{"Origin": "Exceptions will be logged and a maker map returned to indicate the lack of debug information.", "Reference": "Exceptions will be logged, and a marker map returned to indicate the lack of debug information.", "NNUpdater": "Exceptions are logged but not re-thrown)."}
{"Origin": "If {@code labels = ``abc,def``}, settings with labels ``abc`` or ``def`` are returned.", "Reference": "If {@code labelFilter = ``abc,def``}, settings with labels ``abc`` or ``def`` are returned.", "NNUpdater": "If {@code keys = ``*abc*``}, settings with a key containing ``abc`` are returned."}
{"Origin": "Initializes this.voices.", "Reference": "Initializes voices.", "NNUpdater": "Test list voices."}
{"Origin": "Returns true when no response is expected.", "Reference": "Receives and processes a response.", "NNUpdater": "When no alias is defined earlier, empty output is expected."}
{"Origin": "Returns all subclusters of this cluster.", "Reference": "Returns all child clusters belonging to this cluster.", "NNUpdater": "Returns a set of all members in the cluster."}
{"Origin": "Validate metadata tags and return whether any properties are present.", "Reference": "Validate metadata tags.", "NNUpdater": "validateSignature."}
{"Origin": "Returns the o auth token with the primary key or throws a {@link com.liferay.opensocial.NoSuchOAuthTokenException} if it could not be found.", "Reference": "Returns the o auth token with the primary key or throws a {@link NoSuchOAuthTokenException} if it could not be found.", "NNUpdater": "Return the OAuth token."}
{"Origin": "Find all geodatabases from all the downloaded map areas, unregister them then recreate temporary data folder.", "Reference": "Find all geodatabases from all the downloaded map areas and unregisters them.", "NNUpdater": "Attempts to remove this object from the map."}
{"Origin": "Return the possible corrections or null.", "Reference": "Return the possible corrections.", "NNUpdater": "Gets the symbol on JCFieldAccess or JCIdent if possible, or return null."}
{"Origin": "Convert to object types, returning null if text is null.", "Reference": "Convert to object types, returning null if text is null or empty.", "NNUpdater": "IsNullOrEmpty {is null or empty}."}
{"Origin": "Use reflection to get the value of {@code variableName} from {@code obj}.", "Reference": "Retrieve the value of {@code variable} from the {@code obj}.", "NNUpdater": "Get a value from a field using reflection {@link ObfuscationReflectionHelper#getPrivateValue(Class, Object, String)}"}
{"Origin": "Merge given void publishers into a new {@literal Mono} that will be fulfilled when all of the given {@literal sources} have been fulfilled.", "Reference": "Merge given publishers into a new {@literal Mono} that will be fulfilled when all of the given {@literal sources} have been fulfilled.", "NNUpdater": "Merge given void publishers into a new a {@literal Mono} that will be fulfilled when all of the given {@literal Monos} have been fulfilled."}
{"Origin": "Inflates the child view of a tab and adds it to the view hierarchy.", "Reference": "Inflates the view, which is associated with a tab, and adds it to the view hierarchy.", "NNUpdater": "Inflates and updates the view, which is used to visualize a specific tab."}
{"Origin": "Map invokedynamic method name to the new name.", "Reference": "Maps an invokedynamic method name to its new name.", "NNUpdater": "Returns the tab bar height."}
{"Origin": "factory method that returns an instance of this class populated from metrics we expect the keys that we are looking there's no explicit type checked object which guarantees that we have a specific type of metrics", "Reference": "Factory method that returns an instance of this class populated from metrics we expect the keys that we are looking there's no explicit type checked object which guarantees that we have a specific type of metrics.", "NNUpdater": "Remove the {@link JobMetrics} instance for the given job."}
{"Origin": "Sort the FeedItems in the queue with the given Permutor.", "Reference": "Sort the FeedItems in the queue with the given the named sort order.", "NNUpdater": "Sort the FeedItems in the queue with the given Comparator."}
{"Origin": "Name of schedule", "Reference": "Name of task", "NNUpdater": "Suspend a schedule."}
{"Origin": "Check if the account is empty (no roles, no groups, no users).", "Reference": "Check if the account is empty (no roles, no groups, no users, etc).", "NNUpdater": "Check if the account is empty (no roles, no groups, no users)."}
{"Origin": "1) Check that there are OBJECT_NUM number of objects in the SMRMap.", "Reference": "1) Check that there are OBJECT_NUM number of objects in the CorfuTable.", "NNUpdater": "-F discretizerstring"}
{"Origin": "Sets the value of the value property.", "Reference": "Sets the value of the appearance property.", "NNUpdater": "Sets the value of the bigint property."}
{"Origin": "Retrieve double values from disk (GH-1206).", "Reference": "Retrieve double values from disk.", "NNUpdater": "To create a repository in an organization, see {@link GHOrganization#createRepository(String, String, String, GHTeam, boolean)}"}
{"Origin": "Calls {@link #setQuery(Query, QueryListenOptions, Class)} with the default {@link", "Reference": "Calls {@link #setQuery(Query, MetadataChanges, Class)} with metadata changes excluded.", "NNUpdater": "-D"}
{"Origin": "Configure a sslConfig for the jmx using the legacy configuration", "Reference": "Configure a SSLConfig.Builder for the jmx using the legacy configuration", "NNUpdater": "Register a JMX MBean for a rule."}
{"Origin": "Resolves a collection of root modules, with this configuration as its parent, to create a new configuration.", "Reference": "Resolves a collection of root modules, with service binding, and with this configuration as its parent, to create a new configuration.", "NNUpdater": "Resolves the resource configuration."}
{"Origin": "Default implementation using metricDAO, datasetDAO, and QueryCache", "Reference": "Default implementation using metricDAO, datasetDAO, and TimeSeriesCache", "NNUpdater": "NOTE: You should maybe use the {@link DatabaseTable#daoClass()} and have the DaoManager construct the DAO if possible."}
{"Origin": "VideoView2 is attached to window or after {@link #setMediaItem2} is called.", "Reference": "VideoView2 is attached to window or after {@link #setMediaItem} is called.", "NNUpdater": "Create a MediaItem2 from the {@link Bundle} with the specified {@link UUID} string."}
{"Origin": "Sets the bootstrap member locations.", "Reference": "Sets the bootstrap nodes.", "NNUpdater": "Sets the multicast address."}
{"Origin": "Get the enum corresponding to the given file size.", "Reference": "Get the enum corresponding to the given file size for image files.", "NNUpdater": "Returns an {@link ProtoEnumAdapter} for the given enum class."}
{"Origin": "Returns the first sync d l object in the ordered set where companyId = ?", "Reference": "Returns the first sync d l object in the ordered set where modifiedTime > ?", "NNUpdater": "Finds the last article in the ordered set where resourcePrimKey = ?"}
{"Origin": "Checks that the given service type is accessible to types in the given module, and check that the module declare that it uses the service type.", "Reference": "Checks that the given service type is accessible to types in the given module, and check that the module declares that it uses the service type.", "NNUpdater": "Returns the set of type names that are service interfaces that this module uses."}
{"Origin": "Opens an {@code InputStream} for reading the named entry of the given section in this jmod file.", "Reference": "Opens an {@code InputStream} for reading the named entry of the given section in this JMOD file.", "NNUpdater": "Opens the file as a {@link InputStream}."}
{"Origin": "Set up notification manager to show download progress.", "Reference": "Set notification manager to show download progress.", "NNUpdater": "Returns a progress notification for the given {@link TaskState}s."}
{"Origin": "Finds the parent binder type in the supplied set, if any.", "Reference": "Finds the parent binder type in the supplied sets, if any.", "NNUpdater": "Return the {@link solver.search.bind.ISearchBinder} instance in use."}
{"Origin": "Also, puts the new names->nodes map in the TsurgeonPattern that called copy.", "Reference": "Also, puts the new names->nodes map in the TsurgeonMatcher that called copy.", "NNUpdater": "2014-09-09-Holiday"}
{"Origin": "Wraps java method and repeat creation several time if something fail.", "Reference": "Wraps Java method and repeats creation several times if something fails.", "NNUpdater": "Get the kind value."}
{"Origin": "Optimizes a function that returns an empty sequence when the first argument is empty.", "Reference": "Optimizes a function that returns an empty sequence when the first argument or the context value is empty.", "NNUpdater": "Returns if set is empty."}
{"Origin": "Get the fileContentDisposition property: Sets the file's", "Reference": "Get the contentDisposition property: Sets the file's", "NNUpdater": "Formats {@code fileName} as a Content-Disposition header value."}
{"Origin": "Returns {@code true} if this lookup has {@code PRIVATE} access.", "Reference": "Returns {@code true} if this lookup has {@code PRIVATE} and {@code MODULE} access.", "NNUpdater": "Return {@code true} if {@code other} of type String or"}
{"Origin": "Creates a new data source using the specified template.", "Reference": "Updates a data source using the specified template.", "NNUpdater": "Creates a new database instance, using the specified parser."}
{"Origin": "Returns the (unbiased) kurtosis of all the values within a {@link Dataset}", "Reference": "Returns the (biased) kurtosis excess of all the values within a {@link Dataset}", "NNUpdater": "Returns a read-only Iterable on the values of the Dataset."}
{"Origin": "In the case where there's no API key the ID will contain ServiceOrgId + ServiceId + Service Version", "Reference": "In the case where there's no API key the ID will contain ApiOrgId + ApiId + ApiVersion", "NNUpdater": "If there is a tie in ranking, the service with the lowest service ID (as specified in its property); that is, the service that was registered first is returned."}
{"Origin": "Default implementation returns {@link SessionResult#RESULT_CODE_NOT_SUPPORTED}.", "Reference": "Default implementation returns {@link SessionResult#RESULT_ERROR_NOT_SUPPORTED}.", "NNUpdater": "The default is {@link XPathEvaluationType#STRING_RESULT}."}
{"Origin": "Returns if this maps the specified column.", "Reference": "Returns if this maps the specified cell.", "NNUpdater": "Returns if this maps the specified column."}
{"Origin": "Returns a rule that limits the number of concurrent requests by request's host domain.", "Reference": "Adds a rule that limits the number of concurrent requests by request's host domain.", "NNUpdater": "Converts {@link MachineRuntimeInfo} to {@link MachineRuntimeInfoDto}."}
{"Origin": "Can this user delete this change or any patch set of this change?", "Reference": "Can this user delete this change?", "NNUpdater": "Can this user delete this change or any patch set of this change?"}
{"Origin": "The map has weak keys so it can be expunged when the caller class is GC'ed/unloaded.", "Reference": "The map has weak keys so it can be expunged when the target class is GC'ed/unloaded.", "NNUpdater": "Returns an iterable containing all combinations weakKeys and weakValues."}
{"Origin": "Store the specified Realm properties and child (Realm)", "Reference": "Store the specified CredentialHandler properties and child (CredentialHandler)", "NNUpdater": "Returns a Map of realm-id to realm-settings."}
{"Origin": "We can divide the tree nodes into rows and columns, like a table.", "Reference": "Divide the tree nodes into rows and columns, like a table/matrix/grid.", "NNUpdater": "Calculates the difference between the rows/columns of columns/rows x and y"}
{"Origin": "There must be exactly one snippet method in {@code declaringClass}.", "Reference": "There must be exactly one snippet method in {@code declaringClass} with a given name.", "NNUpdater": "Exactly one of stringValue(), readerValue(), and binaryValue() must be set."}
{"Origin": "The address should be parseable by {@code InetAddress#getAllByName(String)}.", "Reference": "The address should be parseable by {@link InetAddress#getByName(String)}.", "NNUpdater": "If this is not known, use {@link #inetAddress(InetAddress)} instead."}
{"Origin": "Assert that the TestSubscriber received a fuseabe QueueSubscription and is in the given fusion mode.", "Reference": "Assert that the TestSubscriber received a fuseabe QueueFuseable.and is in the given fusion mode.", "NNUpdater": "Creates a TestSubscriber with the given initial request amount, optionally cancels it before the subscription and subscribes it to this Flowable."}
{"Origin": "{@code timeDifferenceMs} can be negative but it's absolute value must not be larger than current window ``after`` value (which would result in a negative window size).", "Reference": "{@code timeDifferenceMs} can be negative but its absolute value must not be larger than current window ``after`` value (which would result in a negative window size).", "NNUpdater": "If not called, the default value is {@link #DEFAULT_FLOW_CONTROL_WINDOW})."}
{"Origin": "Creates a Stackdriver Stats exporter for an explicit project ID.", "Reference": "Creates a Stackdriver Stats exporter for an explicit project ID, with default Monitored", "NNUpdater": "Only one Stackdriver exporter can be registered at any point."}
{"Origin": "See Immutable List Static Factory Methods for details.", "Reference": "See Unmodifiable Lists for details.", "NNUpdater": "The returned List is immutable."}
{"Origin": "Creates and enqueues node for current thread and given mode.", "Reference": "Adds node to condition list and releases lock.", "NNUpdater": "Creates and enqueues node for current strand and given mode."}
{"Origin": "Update the record's sequence number.", "Reference": "Update the record's sequence number for outgoing records.", "NNUpdater": "Update a page."}
{"Origin": "Sets a condition when the provided mock (or other matchers) is not satisfied based on {@link Exchange} being sent to it when they are received.", "Reference": "Sets a condition when the provided matcher (such as mock endpoint) is not satisfied based on {@link Exchange} being sent to it when they are received.", "NNUpdater": "{@link GL32C#GL_CONDITION_SATISFIED CONDITION_SATISFIED} indicates that sync was signaled before the timeout expired."}
{"Origin": "Returns completed style ID for the child style.", "Reference": "Returns completed style identifier for the child style.", "NNUpdater": "Returns style identifier."}
{"Origin": "Sets the {@link SortOrder}s to use with backend sorting.", "Reference": "Sets the {@link QuerySortOrder}s to use with backend sorting.", "NNUpdater": "Adds the specified sorting fields."}
{"Origin": "Any of the input words can also be the answer if one is the parent or grandparent of other", "Reference": "Any of the input words can also be the answer if one is the parent or grandparent of other, or if the input words are the same.", "NNUpdater": "Adds an word to words."}
{"Origin": "Saves the changed/deleted entities.", "Reference": "Saves the given entities.", "NNUpdater": "Gets the categories."}
{"Origin": "Parse a CSV into a list of ImportedGrade objects.", "Reference": "Parse a CSV into a list of {@link ImportedRow} objects.", "NNUpdater": "Set Importiert."}
{"Origin": "Generates an in-memory key for an service, used to index the app for later quick retrieval.", "Reference": "Generates an in-memory key for an api, used to index the app for later quick retrieval.", "NNUpdater": "This allows for retrieval of application definitions in the stream by index."}
{"Origin": "This field will be ignored when inserting a UrlMap.", "Reference": "This build option is specifically for when patching an existing UrlMap.", "NNUpdater": "Set this field to ignore order."}
{"Origin": "Returns a rule that restricts access according to the {@link Role} of the current authenticated {@link User}.", "Reference": "Adds a rule that restricts access according to the {@link Role} of the current authenticated {@link User}.", "NNUpdater": "Add a notification to a user."}
{"Origin": "Converts this template into an {@link ArgumentTypeValidator}.", "Reference": "Converts this template into an {@link ArgumentTypeStrategy}.", "NNUpdater": "Create an empty {@link ValidationOptions}."}
{"Origin": "Aurora on Amazon RDS in the Amazon RDS User Guide.", "Reference": "Aurora, see Aurora on Amazon RDS in the Amazon RDS User Guide.", "NNUpdater": "Creates a object from an Amazon Relational Database Service (Amazon RDS)."}
{"Origin": "Get the Extern Item object associated with this package name.", "Reference": "Get the Extern Item object associated with this element name.", "NNUpdater": "Sets the source kind."}
{"Origin": "Destroys all the keys created during this test run.", "Reference": "Destroys all the key versions created during this test run.", "NNUpdater": "Destroys an instance of the bean"}
{"Origin": "Test of setParams method, of class PerfMonAgentConnector.", "Reference": "Test of addMetric method, of class PerfMonAgentConnector.", "NNUpdater": "Get {@link PerfTest} list for the given user."}
{"Origin": "Checks a name to ensure that it's a legal qualified class name.", "Reference": "Checks a name to ensure that it's a legal qualified class name in a named package.", "NNUpdater": "A string is a legal binary name if it has the following form: ((Java identifier)\\."}
{"Origin": "Returns the {@link WriteResult} that caused the exception.", "Reference": "Returns the {@link WriteConcernResult} that caused the exception.", "NNUpdater": "Gets the rule that caused the exception."}
{"Origin": "Note that the order of extracted property/field values is consistent with the iteration order of the array under test.", "Reference": "Note that the order of extracted values is consistent with the order of the given property/field.", "NNUpdater": "Note that the order of extracted field/property values is consistent with the order of the array under test."}
{"Origin": "{@link Keys#GOT_FISH}", "Reference": "{@link Keys#DOLPHIN_DOES_GOT_FISH}", "NNUpdater": "If not specified, then the default value is the {GlassFish_Install_Root}/nodes."}
{"Origin": "Test if a node is an inner class node, and if it is, then checks if the enclosing method is skipped.", "Reference": "Tests if a node is an inner class node, and if it is, then checks if the enclosing method is skipped.", "NNUpdater": "Checks if this is a node."}
{"Origin": "Input: (path, following_symlinks)", "Reference": "Input: (path, following_symlinks) Output:", "NNUpdater": "No files or directories or symlinks"}
{"Origin": "Adds entries with theirs history to partition p.", "Reference": "Adds entries to partition p.", "NNUpdater": "Write history to a file."}
{"Origin": "Shifts the focus to the next element.", "Reference": "Shifts the focus to the next widget.", "NNUpdater": "Returns the index of the next element."}
{"Origin": "Creates a constraint summing weights given by a set of indices: sum{weights[i-offset] | i in indices} = sum", "Reference": "Creates a constraint summing weights given by a set of indices: sum{weights[i] | i in indices} = sum", "NNUpdater": "Sums weights given by a set of indexes INDEXES: sum{WEIGHTS[i-OFFSET] | i in INDEXES} = SUM"}
{"Origin": "Return the buffer that apply history DDL is written to.", "Reference": "Return the buffer that apply history-view DDL is written to.", "NNUpdater": "Return the buffer that ROLLBACK DDL is written to which is considered safe to run when apply changes fail to execute."}
{"Origin": "{@codesnippet com.azure.storage.file.fileClient.startCopy#string-map}", "Reference": "{@codesnippet com.azure.storage.file.fileClient.beginCopy#string-map-duration}", "NNUpdater": "{@codesnippet com.azure.storage.file.directoryClient.deleteFileWithResponse#string-Context}"}
{"Origin": "Load a single component by adding all its classpath entries to the classloader", "Reference": "Load a single component by adding all its classpath entries to the list of classpaths to be loaded", "NNUpdater": "This classloader has this class's classloader as a parent (versus the current thread's context classloader) and also adds the specified module URLs to the classpath."}
{"Origin": "remove select events, do so via {@link #removeEvent(BaseEvent)}.", "Reference": "remove select events, do so via {@link #removeEvent(CoreEvent)}.", "NNUpdater": "remove select events, do so via {@link #removeEvent(Event)}."}
{"Origin": "Does this time interval contain the specified millisecond instant.", "Reference": "Does this time interval contain or equal the specified millisecond instant.", "NNUpdater": "Gets a holding the millisecond duration of this time interval."}
{"Origin": "Converts this POJO to a {@link WorkStatus}.", "Reference": "Converts this POJO to a {@link WorkInfo}.", "NNUpdater": "iPOJO Start method."}
{"Origin": "Generates view from tiles with {@link RenderLayer#TOP}.", "Reference": "Generates view from tiles with {@link RenderLayer#DEFAULT}.", "NNUpdater": "Set render layer for this entity."}
{"Origin": "IMPORTANT:Only use this operation if the canceled flag of a", "Reference": "Only use this operation if the flag of a", "NNUpdater": "Returns sBit."}
{"Origin": "Returns partition counters page identifier, page with caches in cache group sizes.", "Reference": "Returns page identifier related to page with logical cache sizes in cache group.", "NNUpdater": "Gets the result object by the specified current page number, page size, page count, sorts, filter."}
{"Origin": "Execute the tasks concurrently using {@link Threads} when {@link ExecutorService} was initiated by someone else.", "Reference": "Execute the tasks concurrently using {@link Threads} when {@link ExecutorService} was initiated by {@link Threads} itself.", "NNUpdater": "The default implementation returns a new {@link Executor} that sets the name of its threads to the string returned by {@link #serviceName}"}
{"Origin": "Returns the SOM map grid.", "Reference": "Returns the lattice of neurons.", "NNUpdater": "Weights are passed as the parameter ``termSum``"}
{"Origin": "re-create the fragment adapter so all its fragments are also re-created - used when user signs in/out so the fragments reflect the active account", "Reference": "re-create the fragment adapter so all its fragments are also re-created - used when user signs in/out so the fragments reflect the active account TODO: test this with the new nav", "NNUpdater": "Map atoms to exclusive fragments."}
{"Origin": "{@codesnippet com.azure.keyvault.keys.keyclient.restoreKeyWithResponse#byte-Context}", "Reference": "{@codesnippet com.azure.keyvault.keys.keyclient.restoreKeyBackupWithResponse#byte-Context}", "NNUpdater": "{@codesnippet com.azure.keyvault.keys.keyclient.getKeyWithResponse#KeyProperties-Context}"}
{"Origin": "Sets the {@link EncryptionScope encryption scope} that is used to encrypt blob contents on the server.", "Reference": "Sets the {@code encryption scope} that is used to encrypt blob contents on the server.", "NNUpdater": "Set the encryptionAlgorithm property: The algorithm used to produce the encryption key hash."}
{"Origin": "List a specified feedback entry.", "Reference": "Get a specified feedback entry.", "NNUpdater": "Sets a filter to use on the feedback messages model"}
{"Origin": "Test of setMetricType method, of class NewAgentConnector.", "Reference": "Test of setTransport method, of class NewAgentConnector.", "NNUpdater": "Set the nodeType."}
{"Origin": "Removes the extension from a filename.", "Reference": "Removes the extension from a fileName.", "NNUpdater": "Gets the extension of a filename."}
{"Origin": "Attempts to read data from the given {@link DataHolder} and fills the associated data onto this {@link Mutable}.", "Reference": "Attempts to read data from the given {@link ValueContainer} and fills the associated data onto this {@link Mutable}.", "NNUpdater": "Sets the supported {@link Value}s onto this {@link DataManipulator}."}
{"Origin": "Thus, we go a-fishing in the action graph reaching through error propagating middlemen: one of these exists for each {@code", "Reference": "Thus, we go a-fishing in the action graph reaching through scheduling dependency middlemen: one of these exists for each {@code", "NNUpdater": "If the {@code targetGraph} exists in the cache it returns a cached version of the {@link ActionGraphAndResolver}, else returns a new one and updates the cache."}
{"Origin": "Code snippets for {@link BlobClientBase#downloadWithResponse(OutputStream, BlobRange, ReliableDownloadOptions,", "Reference": "Code snippets for {@link BlobClientBase#downloadWithResponse(OutputStream, BlobRange, DownloadRetryOptions,", "NNUpdater": "String, BlobRange, ParallelTransferOptions, ReliableDownloadOptions, BlobAccessConditions, boolean)}"}
{"Origin": "{@code throwable} will be non-null in the case of a failed attempt to send the body.", "Reference": "{@code ioe} will be non-null in the case of a failed attempt to send the body.", "NNUpdater": "The current streamingInput will be set to {@code null} after the call."}
{"Origin": "Returns gap between split icon and split part sides.", "Reference": "Returns gap between menu icon and menu button part sides.", "NNUpdater": "Returns the value amount of the split"}
{"Origin": "The range can extend beyond the end of the input array, in which case the return array will be padded with zeroes.", "Reference": "The range can extend beyond the end of the input array, in which case the returned array will be padded with zeroes.", "NNUpdater": "If the length of the array is 1, this method will return the single filter contained in the array."}
{"Origin": "Delete file system node ### Functional Description: Delete node (room, folder, file).", "Reference": "Delete node ### Functional Description: Delete node (room, folder or file).", "NNUpdater": "Adds/deletes a file/folder."}
{"Origin": "Returns an immutable view of a given list.", "Reference": "Returns an immutable view of a given set.", "NNUpdater": "Returns all runtime parameters of this action."}
{"Origin": "Tries to registers {@code manager} for the given {@code typeUrl}.", "Reference": "Tries to register {@code manager} for the given {@code typeUrl}.", "NNUpdater": "Creates a TypeMap for the {@code sourceType} and {@code destinationType} using the {@code configuration}."}
{"Origin": "Method return current instance of browser mob proxy", "Reference": "Method return current instance of browser up proxy", "NNUpdater": "create BrowserMobProxy Server object"}
{"Origin": "main is the entry point to execute high level ofbiz commands such as starting, stopping or checking the status of the server.", "Reference": "main is the entry point to execute high level OFBiz commands such as starting, stopping or checking the status of the server.", "NNUpdater": "Main method to demonstrate starting and stopping a {@link EventProcessor}."}
{"Origin": "Gets the list of scopes translated to {@link Permission} instances requested by the client application", "Reference": "Get the list of scopes translated to {@link Permission} instances requested by the client application", "NNUpdater": "Returns a string join."}
{"Origin": "Returns a {@link TrackedDevicePose} view of the {@code standingTrackedDevicePose} field.", "Reference": "Returns a {@link TrackedDevicePose} view of the {@code trackedDevicePose} field.", "NNUpdater": "Which is why {@link SquareImage_to_FiducialDetector} is returned instead of the more generic {@link FiducialDetector}."}
{"Origin": "Checks the dirty status of the 'prevSignature' field.", "Reference": "Checks the dirty status of the 'signature' field.", "NNUpdater": "Returns the Java type signature for the method."}
{"Origin": "Listen for WebSocket with the given route predicate to invoke the matching handlers", "Reference": "Listens for websocket with the given route predicate to invoke the matching handler.", "NNUpdater": "Register listener."}
{"Origin": "Returns the number of open sessions on this connection, if the connection has been established.", "Reference": "Returns the number of open flows on this connection, if the connection has been established.", "NNUpdater": "Checks if the connection to the office server has been established."}
{"Origin": "Create a new Map consisting of a single key/value pair.", "Reference": "Create a new Map combined all entries of two other maps.", "NNUpdater": "Removes a key/value pair from the list"}
{"Origin": "Implements get configuration.", "Reference": "Implements get configuration key.", "NNUpdater": "Get config."}
{"Origin": "Takes vector of ProtocolConfigurations, iterates through it, creates Protocol for each ProtocolConfiguration and returns all Protocols in a vector.", "Reference": "Takes vector of ProtocolConfigurations, iterates through it, creates Protocol for each ProtocolConfiguration and returns all Protocols in a list.", "NNUpdater": "- The protocol specified in the entry ( | | or a protocol number)."}
{"Origin": "Computes the minimum for each pixel across all bands in the {@link Planar} image.", "Reference": "Computes the minimum for each pixel across selected bands in the {@link Planar} image.", "NNUpdater": "Computes the average for each pixel across all bands in the {@link Planar} image."}
{"Origin": "Creates an {@code FxSwap} using forward points.", "Reference": "Creates an {@code FxSwap} using decimal forward points.", "NNUpdater": "Expands this FX forward into an {@code ExpandedFx}."}
{"Origin": "Returns the base value of the given property.", "Reference": "Returns the base value of the given property with all modifiers applied.", "NNUpdater": "Returns the value of the property of the MBean"}
{"Origin": "Adopt the return type and size from the specified expression to this expression.", "Reference": "Assigns the type from the specified expression.", "NNUpdater": "Get a expression"}
{"Origin": "Given the current case, fins all intercase common files from the EamDb and builds maps of obj id to md5 and case.", "Reference": "Given the current case, fins all intercase common files from the EamDb and builds maps of obj id to value and case.", "NNUpdater": "Process the Artifact instance in the EamDb"}
{"Origin": "bootstrap or system -- it can still fidn classes in the application's class loader).", "Reference": "bootstrap or system -- it can still find classes in the application's class loader).", "NNUpdater": "Matches exactly the bootstrap {@link java.lang.ClassLoader} ."}
{"Origin": "Returns the {@code *.AsyncIface} or {@code *.Iface} implementation.", "Reference": "Returns the list of {@code *.AsyncIface} or {@code *.Iface} implementations.", "NNUpdater": "Operation fails."}
{"Origin": "This will return the {@link Key keys} with key material included of the specified versions.", "Reference": "This will return the {@link KeyVaultKey keys} with key material included of the specified versions.", "NNUpdater": "KeyImportOptions#getKeyMaterial() key material} cannot be null."}
{"Origin": "returns the index of the passed media ID in the current media list", "Reference": "returns the media item with the passed media ID in the current media list", "NNUpdater": "Set a new media list."}
{"Origin": "Returns the new value of the event source.", "Reference": "Returns the new value that triggered this value change event.", "NNUpdater": "Gets the reason for this event"}
{"Origin": "Files that are not in the given directory are loaded from classpath.", "Reference": "Files that are not in the given directory are loaded from Lucene's classloader.", "NNUpdater": "List the files and directories in the given directory."}
{"Origin": "This method arranges all the {@link ScheduledTrial trials} to run according to their scheduling criteria.", "Reference": "This method arranges all the trials to run according to their scheduling criteria.", "NNUpdater": "Returns the total nanos to run {@code reps}."}
{"Origin": "Sets the value of the 'ValueType' field", "Reference": "Sets the value of the 'valueType' field.", "NNUpdater": "Returns the encoding of the next field value."}
{"Origin": "Get Percentage.", "Reference": "Get Anteil.", "NNUpdater": "Set Split Percent."}
{"Origin": "Returns an AbstractType instance that is equivalent to this one, but with all nested UDTs explicitly frozen and all collections in UDTs explicitly frozen.", "Reference": "Returns an AbstractType instance that is equivalent to this one, but with all nested UDTs and collections explicitly frozen.", "NNUpdater": "Set Kosten fixiert."}
{"Origin": "Keep the connection open if we are asked to do so.", "Reference": "Keeps the connection open if told to do so.", "NNUpdater": "Open the database connection."}
{"Origin": "Gets the value of the 'cf_name' field.", "Reference": "Gets the value of the 'cfName' field.", "NNUpdater": "Gets the value of the 'paramName' field."}
{"Origin": "After that all entries will be inserted into a new BibDatabase.", "Reference": "After that all entries are inserted into a new BibDatabase.", "NNUpdater": "Notifies all listeners that objects have been inserted into this database."}
{"Origin": "estimateMinimumDemand reports 0 until request, nonzero after request, and zero again after delivery", "Reference": "estimateMinimumDemand reports 0 until request, nonzero after request", "NNUpdater": "Notification after the request was fully sent."}
{"Origin": "This is useful in situations when it is necessary to access an instance variable that is out of scope.", "Reference": "This is useful in situations when it is necessary to access an instance variable that is not visible (i.e.", "NNUpdater": "It is useful in situations where there is no metadata available and the underlying CQL type for the values is not known."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Sets the default SSLHostConfig name.", "Reference": "Sets the default SslHostConfig name.", "NNUpdater": "Get the slotSwapStatus value."}
{"Origin": "Get certain partition-level histograms based on given arguments.", "Reference": "Get certain resource-level histograms based on given arguments.", "NNUpdater": "Histograms of the given matrices."}
{"Origin": "Default is 3600 sec = 24h", "Reference": "Default is 600 sec = 10min", "NNUpdater": "Default is 1 hour (3600 s)."}
{"Origin": "Sets the quorum name for operations.", "Reference": "Sets the split brain protection name for operations.", "NNUpdater": "Sets the cluster read quorum strategy."}
{"Origin": "- Make sure we can build a default android things project - Make sure there is nothing broken whe using ``lintOptions`` - b/118374756", "Reference": "- Make sure we can build a default android things project - Make sure there is nothing broken when using ``lintOptions`` - b/118374756", "NNUpdater": "Make sure we can't add a duplicate command."}
{"Origin": "The indices of this TimeSeries and the new subset TimeSeries can be different.", "Reference": "The indices of this BaseBarSeries and the new subset BaseBarSeries can be different.", "NNUpdater": "Gets the time-series of fixings, defaulted to an empty time-series."}
{"Origin": "Decode an action profile member to PI action group member.", "Reference": "Decode an action profile member to PI action profile member.", "NNUpdater": "Returns a member by ID."}
{"Origin": "Casts the {@code DateTime} to {@ChronoZonedDateTimeImpl} with the same chronology.", "Reference": "Casts the {@code DateTime} to {@code ChronoZonedDateTimeImpl} with the same chronology.", "NNUpdater": "Gets the {@code ChronoLocalDateTime} from this {@code ChronoZonedDateTime}."}
{"Origin": "Obtains an instance from the specified unique name.", "Reference": "Obtains an instance from the specified name.", "NNUpdater": "Obtains the type from a unique name."}
{"Origin": "Returns the {@link EntityId} of the entity who emit this message.", "Reference": "Returns the {@link ProgramId} of the program who emit this message.", "NNUpdater": "Sets the entityName."}
{"Origin": "Standard getter for the rightwardLabel String for this RelationshipType", "Reference": "Standard getter for the rightwardType String for this RelationshipType", "NNUpdater": "Sets the value(s) for identifier (An identifier for the person as this patient)"}
{"Origin": "``Skolemize``: BlankNode to IRI else return node unchanged.", "Reference": "``Skolemize`` to a node.", "NNUpdater": "Set Knoten."}
{"Origin": "Set Verarbeitet.", "Reference": "Set Ordered.", "NNUpdater": "Set Processed."}
{"Origin": "This will set the margin between the annotations ``outer`` rectangle defined by /Rect and the boundaries of the underlying caret.", "Reference": "This will set the difference between the annotations ``outer`` rectangle defined by /Rect and the border.", "NNUpdater": "Returns a Rect representing the intersection of this Rect with the given"}
{"Origin": "Creates query that searches for SourceContacts which match a specific query Pattern.", "Reference": "Queries this ContactSourceService for SourceContacts which match a specific query Pattern.", "NNUpdater": "Queries this ContactSourceService for SourceContacts which match a specific query Pattern."}
{"Origin": "Set the administrators of the isssuer.", "Reference": "Set the administrators of the issuer.", "NNUpdater": "Returns a Collection with all the group users."}
{"Origin": "A voice cannot migrate from one part to another, but may migrate from one staff to another under some conditions.", "Reference": "A voice may migrate from one staff to another under some conditions.", "NNUpdater": "Migrate from plaintext to MD5 hash"}
{"Origin": "Applies the optimization to all subqueries.", "Reference": "Applies the optimization to a given subquery root.", "NNUpdater": "to the optimization policy."}
{"Origin": "Deletes the running state from the {@link RemoteRuntimeDataset}.", "Reference": "Deletes the running state from the {@link RemoteRuntimeTable}.", "NNUpdater": "Checks if the application is in the {@link ApplicationState#RUNNING} state."}
{"Origin": "Get Key Column Name with consideration of Synonym", "Reference": "Get Key Column Name with consideration of table aliases", "NNUpdater": "Sets the synonymText."}
{"Origin": "Get Search Key.", "Reference": "Get Token Value.", "NNUpdater": "Gets the key."}
{"Origin": "Initialize the EventTracker's timer task.", "Reference": "Initialize the EventTracker's timer task for tracking and shutdown purposes.", "NNUpdater": "Initialize Jena."}
{"Origin": "Returns the next character.", "Reference": "Returns the next codepoint.", "NNUpdater": "Returns the next flag."}
{"Origin": "Extend the path by appending two ChildNumber objects.", "Reference": "Extend the path by appending additional ChildNumber objects.", "NNUpdater": "Create a new {@link ConfigurationPropertyName} by appending the given element value."}
{"Origin": "Find or create the best name to use for a parameter we need to rewrite.", "Reference": "Creates a new unique name to use for a pattern we need to rewrite.", "NNUpdater": "Judge is need rewrite row count or not."}
{"Origin": "Get the Hadoop/Spark application id from the job log.", "Reference": "Find all the Hadoop/Spark application ids present in the Azkaban job log.", "NNUpdater": "Prepares arguments which {@link SparkProgramWrapper} is submitted to {@link SparkSubmit} to run."}
{"Origin": "Both filenames are first passed to {@link #normalize(String)}.", "Reference": "Both fileNames are first passed to {@link #normalize(String)}.", "NNUpdater": "Default implementation use {@code normalizeName()}, or {@code normalizeName( lowercase())} if operation id is not set."}
{"Origin": "Returns true if the package contain the target class has been opened for illegal access.", "Reference": "Returns true if the module opens a concealed or exported package for illegal access.", "NNUpdater": "Returns true if the class has the specified annotation type."}
{"Origin": "Test of get method, of class LruCache.", "Reference": "Test of put and get method, of class LruCache.", "NNUpdater": "Test of getDataFile method, of class Settings."}
{"Origin": "To match the node N the supplier must supply a LabelSchemaDescriptor D, such that N has the label of D, and values for all the properties of D.", "Reference": "To match the node N the supplier must supply a LabelSchemaDescriptor D, such that N has values for all the properties of D.", "NNUpdater": "label1 and label2 in X.Y.Z-label1-lable2."}
{"Origin": "Note, however, that after the multipart upload completes, you cannot call the List Parts operation and the multipart upload will not appear in", "Reference": "Note, however, that after the multipart upload completes, you cannot call the List Parts operation and the multipart upload will not appear in List Multipart", "NNUpdater": "The type of the target property for a multipart file can be Part, MultipartFile, byte[], or String."}
{"Origin": "Decorates {@link Service}s whose {@link Route} matches the specified {@link Route}.", "Reference": "Decorates {@link HttpService}s whose {@link Route} matches the specified {@link Route}.", "NNUpdater": "Finds the {@link Service} whose {@link Router} matches the {@link RoutingContext}."}
{"Origin": "Get the {@link AggCall} correspond to the aggregate expression.", "Reference": "Get the {@link AggCall} correspond to the aggregate or table aggregate expression.", "NNUpdater": "Set the order for ARRAY_AGG() or GROUP_CONCAT() aggregate."}
{"Origin": "/api/v1/topology/:id/profiling/dumpprofile/:host-port/:timeout -> dump profile.", "Reference": "/api/v1/topology/:id/profiling/dumpprofile/:host-port -> dump profile.", "NNUpdater": "Operation fails."}
{"Origin": "Send a command to Python, and wait for a response prompt, returning all accumulated output since the last call to either or", "Reference": "Send a command to Python, and wait for an ack, returning all accumulated output since the last call to either or", "NNUpdater": "Returns whether use of {@code --force_python} flag and {@code default_python_version} attribute is allowed."}
{"Origin": "Get instance manager.", "Reference": "Get injection manager.", "NNUpdater": "Get Manager value"}
{"Origin": "Attaches an application created from a WADL description document available at a given URI reference.", "Reference": "Attaches an application created from a Swagger description document available at a given URI reference.", "NNUpdater": "Returns a WADL description of the current resource."}
{"Origin": "Returns concatenated UID for a period in a child timeline.", "Reference": "Returns a concatenated UID for a period or window in a child timeline.", "NNUpdater": "Returns whether the given period is the last period of the timeline depending on the {@code repeatMode} and whether shuffling is enabled."}
{"Origin": "Get the service locator.", "Reference": "Get the instance manager.", "NNUpdater": "Get Lagerort."}
{"Origin": "or throws a {@link com.liferay.knowledgebase.NoSuchFolderException} if it could not be found.", "Reference": "or throws a {@link NoSuchFolderException} if it could not be found.", "NNUpdater": "Operation fails."}
{"Origin": "Tests for the {@link BaseFileSystem#setAttribute(AlluxioURI, SetAttributeOptions)} method.", "Reference": "Tests for the {@link BaseFileSystem#setAttribute(AlluxioURI, SetAttributePOptions)} method.", "NNUpdater": "Tests for the {@link BaseFileSystem#setAttribute(AlluxioURI, SetAttributeOptions)} method."}
{"Origin": "Creates {@link JobSpec} from the {@link AvroJobSpec} record.", "Reference": "Creates a {@link JobSpec} or {@link URI} from the {@link AvroJobSpec} record.", "NNUpdater": "Build a {@link FlowSpec} from a {@link FlowConfig}"}
{"Origin": "Decorates {@link Service}s whose {@link Route} matches the specified {@code pathPattern}.", "Reference": "Decorates {@link HttpService}s whose {@link Route} matches the specified {@code pathPattern}.", "NNUpdater": "Finds the {@link Service} whose {@link Router} matches the {@link PathMappingContext}."}
{"Origin": "If no pool exists, throw an exception.", "Reference": "If no pool exists, returns null.", "NNUpdater": "Exception if no such wiretap exists."}
{"Origin": "Registers a new listener with the specified activation method to listen events generated by this component.", "Reference": "Registers a new event listener with the specified activation method to listen events generated by this component.", "NNUpdater": "Add property change listener to listen to ingest events."}
{"Origin": "Answer the (alleged most-specific) type of the object that could not be constructed.", "Reference": "Answer the types of the object that could not be constructed.", "NNUpdater": "Returns the {@code Type} of the given tree, or {@code null} if the type could not be determined."}
{"Origin": "Create and display the picture view.", "Reference": "Create and display the initial view.", "NNUpdater": "Create and display the picture view."}
{"Origin": "Decreases the reference count by {@code decrement} and de-allocates this object if the reference count reaches {@code 0}", "Reference": "Decreases the reference count by {@code decrement} and deallocates this response if the count reaches {@code 0}.", "NNUpdater": "Sets the number of occurrences of {@code element} to {@code newCount}, but only if the count is currently {@code expectedOldCount}."}
{"Origin": "Note: returned indent is not set to be to it's direct parent block", "Reference": "Note: returned indent is not set to be {@code 'relative'} to it's direct parent block", "NNUpdater": "Note: {@code -1} is returned if the number is unknown, so the returned value has to be checked."}
{"Origin": "Returns a Path to access to the given resource.", "Reference": "Returns a Path to access the given resource.", "NNUpdater": "Returns if is the workspace root."}
{"Origin": "This will set the margin between the annotations ``outer`` rectangle defined by /Rect and the boundaries of the underlying caret.", "Reference": "This will set the difference between the annotations ``outer`` rectangle defined by /Rect and boundaries of the underlying.", "NNUpdater": "Returns a Rect representing the intersection of this Rect with the given"}
{"Origin": "Sets the value of the 'publicPort' field.", "Reference": "Sets the value of the 'publicPorts' field.", "NNUpdater": "Sets the value of the 'paramName' field."}
{"Origin": "Submits a request to cache the given block id.", "Reference": "Handles a request to cache a block asynchronously.", "NNUpdater": "Returns the message delivery policy."}
{"Origin": "Gets the exampleText.", "Reference": "Gets the text.", "NNUpdater": "Gets the name."}
{"Origin": "Acquire a SAXParser from the pool; create one if it doesn't exist.", "Reference": "Acquire a SAXParser from the pool.", "NNUpdater": "Test if newSAXParser() method returns SAXParser."}
{"Origin": "Each adapter will try to send blocks until have got special {@link Packet} with type {@link PacketTypes#ACK}, that means receiver have got block.", "Reference": "Each adapter will try to send blocks until have got special {@link Block} with type {@link PacketTypes#ACK}, that means receiver have got block.", "NNUpdater": "Get head packet."}
{"Origin": "Sets the {@code eventListeners} this {@link EventHandlerInvoker} will forward all its events to.", "Reference": "Sets the {@code eventHandlers} this {@link EventHandlerInvoker} will forward all its events to.", "NNUpdater": "Returns a {@link MediaSourceEventListener.EventDispatcher} which dispatches all events to the registered listeners with the specified media period id and time offset."}
{"Origin": "This method always returns {@code true} when invoked on an unnamed module.", "Reference": "This method always returns {@code true} when invoked on an unnamed module or an automatic module.", "NNUpdater": "This method always returns {@code true} when invoked on an unnamed module."}
{"Origin": "Gets exception name.", "Reference": "Gets class name.", "NNUpdater": "Gets last name."}
{"Origin": "Utf8String can be constructed from asString.", "Reference": "Utf8String can be constructed from string.", "NNUpdater": "Reads UTF8 string in {@link #b}."}
{"Origin": "For transforms returned via GET data_frame/transforms, see the @link{TransportGetTransformAction}", "Reference": "For transforms returned via GET _transform, see the @link{TransportGetTransformAction}", "NNUpdater": "For use by {@code DirectGroupByKeyOnly} {@link PTransform PTransforms}."}
{"Origin": "Uninstalls split button mouseover listener.", "Reference": "Uninstalls menu button mouseover listener.", "NNUpdater": "Adds hover listener."}
{"Origin": "String} values used to compile the URI for a {@link DiscordRequest}.", "Reference": "String} values used to compile the URI for a {@link DiscordWebRequest}.", "NNUpdater": "Return the request {@link UriComponents}"}
{"Origin": "Return the list of visible constant fields for the given TypeElement.", "Reference": "Returns a set of visible constant fields for the given type.", "NNUpdater": "The constant value of the type if specified"}
{"Origin": "The returned cursor will also be managed through the means of {@link #managedCursor(Cursor, CursorContext)}", "Reference": "The returned cursor will also be managed through the means of {@link #managedCursor(Cursor)}", "NNUpdater": "The returned cursor will also be managed through the means of {@link #managedCursor(Cursor, CursorContext)}"}
{"Origin": "Integration testing without a server targeting the given HttpHandler.", "Reference": "Integration testing with a ``mock`` server targeting the given WebHandler.", "NNUpdater": "For testing only"}
{"Origin": "Does not check if feedback session exists.", "Reference": "Creates a feedback response.", "NNUpdater": "Check to see if the session object exists in this store."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Adds {@link WordCountApp} as system artifact which can be used as parent artifact for testing purpose", "Reference": "Adds {@link AllProgramsApp} as system artifact which can be used as parent artifact for testing purpose", "NNUpdater": "Returns the parent Artifact containing this Artifact."}
{"Origin": "This factory converts the arbitrary date-time object to an instance of {@code LocalDateTime}.", "Reference": "This factory converts the arbitrary temporal object to an instance of {@code LocalDateTime}.", "NNUpdater": "This factory converts the arbitrary date-time object to an instance of {@code LocalDateTime}."}
{"Origin": "Adds a WarningMessage to the message set.", "Reference": "Adds a warning to the message set.", "NNUpdater": "Set Meldung."}
{"Origin": "See Immutable List Static Factory Methods for details.", "Reference": "See Unmodifiable Lists for details.", "NNUpdater": "The returned List is immutable."}
{"Origin": "Sets the overwrite.", "Reference": "Set the overwrite.", "NNUpdater": "Sets the specified value to the {@code enable_huge_pages} field."}
{"Origin": "Try to connect the orphan slurs at the beginning of this part with the orphan slurs at the end of the provided preceding part.", "Reference": "Retrieve possible links between the orphan slurs at the beginning of this part and the orphan slurs at the end of the provided preceding part.", "NNUpdater": "Return the preceding measure within the same system."}
{"Origin": "FIXME does not use [fromTime, toTime, or period].", "Reference": "FIXME does not use [fromTime, toTime, or period] (or model.path)", "NNUpdater": "Returns the time unit for {@link #getPeriod()}."}
{"Origin": "Tests the creation of a file via the {@link BaseFileSystem#createFile(AlluxioURI, CreateFileOptions)} method.", "Reference": "Tests the creation of a file via the {@link BaseFileSystem#createFile(AlluxioURI, CreateFilePOptions)} method.", "NNUpdater": "Tests the creation of a file via the {@link BaseFileSystem#createFile(AlluxioURI, CreateFileOptions)} method."}
{"Origin": "This method must be invoked for each cache that uses protobuf.", "Reference": "This must be invoked for each cache that uses protobuf.", "NNUpdater": "Returns whether the target is an objc_proto_library."}
{"Origin": "Need hibernate to be initialized.", "Reference": "Need Hibernate to be initialized.", "NNUpdater": "Get the name of the Hibernate {@link org.hibernate.type.Type} associated with the given {@link java.sql.Types} type code."}
{"Origin": "Measures the performance of string dictionary lookups by performing the provided number of lookups to random indices.", "Reference": "Measures the performance of string dictionary lookups by performing the provided number of lookups to random value.", "NNUpdater": "Look-ups in user bundles is recursive whereas look-ups in default bundle are not!"}
{"Origin": "RsaKeyCreateOptions#getNotBefore() notBefore} values are optional.", "Reference": "CreateRsaKeyOptions#getNotBefore() notBefore} values are optional.", "NNUpdater": "{@codesnippet com.azure.keyvault.keys.keyclient.createRsaKeyWithResponse#keyOptions-Context}"}
{"Origin": "Accept (case-sensitively) the given phrases even though they are not in the built-in dictionary.", "Reference": "Accept (case-sensitively, unless at the start of a sentence) the given phrases even though they are not in the built-in dictionary.", "NNUpdater": "NotInScope {not in ('a', 'b')}."}
{"Origin": "Respond within a session.", "Reference": "Responds within a session.", "NNUpdater": "Respond to a {@link WhoisMasterOp}."}
{"Origin": "Creates an iterator for the specified decimal.", "Reference": "Creates an iterator for the specified integer.", "NNUpdater": "Creates a container for the specified string."}
{"Origin": "Gets the nodeType.", "Reference": "Gets the type.", "NNUpdater": "Gets the name for this node."}
{"Origin": "Get authentication settings ### Functional Description: DRACOON authentication configuration entry point.", "Reference": "Get authentication settings ### \ud83d\ude80 Since version VERSION ### Functional Description: DRACOON authentication configuration entry point.", "NNUpdater": "The oauth failure handler."}
{"Origin": "Recursively traverse the coder tree and wrap the first unknown coder in every branch with a {@link LengthPrefixCoder} unless an ancestor coder is itself a {@link LengthPrefixCoder}.", "Reference": "Recursively traverses the coder tree and wraps the first unknown coder in every branch with a {@link LengthPrefixCoder} unless an ancestor coder is itself a {@link LengthPrefixCoder}.", "NNUpdater": "Returns a {@link CoderProvider} which uses the {@link ProtoCoder} for {@link Message proto messages}."}
{"Origin": "A semigroup for binary products.", "Reference": "A lazy semigroup for binary products.", "NNUpdater": "Queries for products or skus."}
{"Origin": "Test proxy implementing interfaces in a Layer defined in an unnamed module", "Reference": "Test proxy implementing interfaces in a layer defined in an unnamed module", "NNUpdater": "Returns {@code true} if this module is a named module."}
{"Origin": "Checks whether two filenames are equal exactly.", "Reference": "Checks whether two fileNames are equal exactly.", "NNUpdater": "Checks whether two filenames are equal exactly."}
{"Origin": "The subtraction of a duration is always absolute and zone-resolvers are not required.", "Reference": "The subtraction of a duration is always absolute - there are no special cases.", "NNUpdater": "The query is absolute 3."}
{"Origin": "NOTE:The specified DB security group must not be associated with any DB instances.", "Reference": "The specified DB security group must not be associated with any DB instances.", "NNUpdater": "If a is specified, the list will contain only the descriptions of the specified DB security group."}
{"Origin": "Returns an immutable list containing two elements.", "Reference": "Returns an unmodifiable list containing two elements.", "NNUpdater": "The returned List is immutable."}
{"Origin": "If we didn't write any Indexers and there is a RootGlideModule, write the", "Reference": "If we didn't write any Indexers and there is a AppGlideModule, write the", "NNUpdater": "Return the write {@code type} associated with this"}
{"Origin": "Gets the value of the 'zk_Quorum' field", "Reference": "Gets the value of the 'zkQuorum' field.", "NNUpdater": "Gets the value of the 'paramName' field."}
{"Origin": "Computes the average for each pixel across all bands in the {@link Planar} image.", "Reference": "Computes the minimum for each pixel across selected bands in the {@link Planar} image.", "NNUpdater": "Computes the average for each pixel across all bands in the {@link Planar} image."}
{"Origin": "This method will ensure that you have a right and initialized instance of {@link StandaloneContextAwareManagerFactory}.", "Reference": "This method will ensure that you have a right and initialized instance of {@link StandaloneContextAware}.", "NNUpdater": "Add a collection of {@link ContextAwareScheduledReporter}s."}
{"Origin": "Custom comparators are used by diff algorithm to calculate property-to-property diff.", "Reference": "Custom comparators are used by diff algorithm to calculate property-to-property diff and also collection-to-collection diff.", "NNUpdater": "Returns the sync d l file version diff where fileEntryId = ?"}
{"Origin": "Initializes the database context, based on the initial servlet context.", "Reference": "Initializes the HTTP context, based on the initial servlet context.", "NNUpdater": "Creates a new specified context."}
{"Origin": "User / Group may look up files / folders in the Recycle Bin.", "Reference": "User / Group may look up files / folders in the recycle bin.", "NNUpdater": "API to check if the recycle bin feature is active recycle bin is activated in xwiki.cfg or in the XWiki"}
{"Origin": "Parses {@link RowMajorSparseMatrix} from the given Matrix Market string.", "Reference": "Parses {@link RowMajorSparseMatrix} from the given Matrix Market.", "NNUpdater": "Test of text method, of class SparseMatrix."}
{"Origin": "This recursive method follows the control flow graph to find all the blocks that are reachable from the current block WITHOUT following any JSR target.", "Reference": "This method follows the control flow graph to find all the blocks that are reachable from the current block WITHOUT following any JSR target.", "NNUpdater": "Adds a block to the buffer."}
{"Origin": "Tests if the specified is newer than the specified time reference.", "Reference": "Tests if the specified {@link File} is newer than the specified time reference.", "NNUpdater": "Tests if this timestamp is newer than the specified timestamp."}
{"Origin": "Builds a {@link GraphiteReporter} with the given properties, sending metrics using the given {@link Graphite} client.", "Reference": "Builds a {@link GraphiteReporter} with the given properties, sending metrics using the given {@link GraphiteSender}.", "NNUpdater": "Enables the graphite reporter to send data for the default metrics registry to graphite server with the specified period."}
{"Origin": "Draws the value of the given entry by using the provided ValueFormatter.", "Reference": "Draws the value of the given entry by using the provided IValueFormatter.", "NNUpdater": "setValues sets the entry ``V`` to the given values."}
{"Origin": "Default _main method", "Reference": "Default main method", "NNUpdater": "Runs the example class."}
{"Origin": "Returns a random temporary name for the specified database.", "Reference": "Returns a random temporary name for the specified database name.", "NNUpdater": "Set the name of the database."}
{"Origin": "A {@code DateTimeAccessor} represents some form of date and time information.", "Reference": "A {@code TemporalAccessor} represents some form of date and time information.", "NNUpdater": "Checks if the instant of this date-time is after that of the specified date-time."}
{"Origin": "Normally tasks are executed in different thread from the one creating it and at a different time.", "Reference": "Normally tasks are executed in a different thread from the one creating it and at a different time.", "NNUpdater": "Starts the test app in a background thread."}
{"Origin": "The {@link Flux} will contain one or several feed response of the read cosmos users.", "Reference": "The {@link CosmosContinuablePagedFlux} will contain one or several feed response of the read cosmos users.", "NNUpdater": "The {@link Flux} will contain one or several feed response pages of the read cosmos trigger properties."}
{"Origin": "If object ``A`` is unregistered , B , C also must get unregistered.", "Reference": "If object ``A`` is unregistered B and C also must get unregistered.", "NNUpdater": "This method does not close the {@link ChunkedOutput} being unregistered."}
{"Origin": "See Immutable Map Static Factory Methods for details.", "Reference": "See Unmodifiable Maps for details.", "NNUpdater": "VerificationTimes supports multiple static factory methods:"}
{"Origin": "Optionally return metrics that this component reports, or null.", "Reference": "Optionally return a snapshot of metrics that this component reports, or null.", "NNUpdater": "The interval between metrics reports."}
{"Origin": "If any field binding validator fails, no values are saved and is returned.", "Reference": "If any field binding validator fails, no values are written and is returned.", "NNUpdater": "If any input fails, the returned future fails immediately."}
{"Origin": "ID of the room in which the individual rooms for users will be created.", "Reference": "DEPRECATED, will be ignored ID of the room in which the individual rooms for users will be created.", "NNUpdater": "Returns a List of HostedRooms where each HostedRoom has the XMPP address of the room and the room's name."}
{"Origin": "Waits during {@code timeout} until specified {@code element} contains the specified {@code expectedText}.", "Reference": "Waits during {@code timeout} until specified {@code element} contains the specified {@code expected} one.", "NNUpdater": "WebElement#getText()} equals to provided {@code expectedText}."}
{"Origin": "Renders and displays the child view of a tab.", "Reference": "Renders and displays the preview of a tab.", "NNUpdater": "Sets an option and displays the command in the info view."}
{"Origin": "Create a new TransactionStatus for the given arguments, also initializing transaction synchronization as appropriate.", "Reference": "Create a new ReactiveTransaction for the given arguments, also initializing transaction synchronization as appropriate.", "NNUpdater": "Create a rae TransactionStatus instance for the given arguments."}
{"Origin": "Extracts the google.rpc.Status from trailers, and makes sure they match the gRPC {@code status}.", "Reference": "Extracts the {@code google.rpc.Status} from trailers, and makes sure they match the gRPC {@code status}.", "NNUpdater": "Retries the RPC for at most {@code MAX_RPC_ATTEMPTS} times until it succeeds."}
{"Origin": "{@codesnippet com.azure.security.keyvault.certificates.CertificateClient.createIssuer#String-String}", "Reference": "{@codesnippet com.azure.security.keyvault.certificates.CertificateClient.cancelCertificateOperation#string}", "NNUpdater": "{@codesnippet com.azure.security.keyvault.certificates.CertificateClient.createIssuer#String-String}"}
{"Origin": "Conditionally update the {@link #serviceTable} iff it does not exist or is empty.", "Reference": "Conditionally update the {@link #serviceTableRef} iff it does not exist or is empty.", "NNUpdater": "This data structure is not valid (Exist (OR (A B)"}
{"Origin": "* @param value the value to set.", "Reference": "'s Slurp Crawler * @param value the value to set.", "NNUpdater": "Get the param value."}
{"Origin": "Get the {@link edu.stanford.nlp.international.Languages.Language} object corresponding to the given language string.", "Reference": "Get the {@link edu.stanford.nlp.international.Language} object corresponding to the given language string.", "NNUpdater": "Get Sprache."}
{"Origin": "log of factorial of n", "Reference": "The log of factorial of n.", "NNUpdater": "The log of messages for a term."}
{"Origin": "Validate metadata properties and return whether any properties are present.", "Reference": "Validate metadata properties.", "NNUpdater": "Returns the configured properties."}
{"Origin": "Runs the command with the given args.", "Reference": "Runs a command with the given args.", "NNUpdater": "Runs commands and return output"}
{"Origin": "Causes a completely pathfinding reclaculation.", "Reference": "Causes a complete pathfinding reclaculation.", "NNUpdater": "Hash the JarEntry completely."}
{"Origin": "helper method for validateThreadLocal method, runs recursively", "Reference": "Helper method for validateThreadLocal method, runs recursively", "NNUpdater": "Helper (internal) method to recursively add contents of a folder."}
{"Origin": "Checks a filename to see if it matches the specified wildcard matcher, always testing case-sensitive.", "Reference": "Checks a fileName to see if it matches the specified wildcard matcher, always testing case-sensitive.", "NNUpdater": "Checks a filename to see if it matches the specified wildcard matcher, always testing case-sensitive."}
{"Origin": "Test EdgeNGramFilterFactory", "Reference": "Test EdgeNGramFilterFactory with old defaults", "NNUpdater": "Test ClassicFilterFactory"}
{"Origin": "Calls {@link Plugin#willDeclareProperty(TypeSpec.Builder, PropertyGenerator, FieldSpec.Builder)} on all the bundled plugins", "Reference": "Calls {@link Plugin#beforeDeclareProperty(TypeSpec.Builder, PropertyGenerator, FieldSpec.Builder)} on all the bundled plugins", "NNUpdater": "Calls {@link Plugin#didDeclareProperty(TypeSpec.Builder, PropertyGenerator, FieldSpec)} on all the bundled plugins"}
{"Origin": "Get Prepayment.", "Reference": "Get Vorauszahlung.", "NNUpdater": "Get OrderType."}
{"Origin": "Sets the value of the 'zk_Quorum' field", "Reference": "Sets the value of the 'zkQuorum' field.", "NNUpdater": "Sets the value of the 'paramName' field."}
{"Origin": "Sets a metadata property for the specified {@link NamespacedEntityId}.", "Reference": "Sets a metadata property for the specified {@link MetadataEntity}.", "NNUpdater": "Sets a metadata property for the specified {@link NamespacedEntityId}."}
{"Origin": "Create a new builder for creating Retrofit implementations.", "Reference": "Create a new builder for creating Retrofit clients.", "NNUpdater": "Create a new ResponseBuilder for a created resource."}
{"Origin": "Takes a batch of tasks from the queue and processes them.", "Reference": "Takes a batch of worksets from the queue and processes them.", "NNUpdater": "Takes a batch of changesets from the queue and processes them."}
{"Origin": "Amazon Redshift sources belonging to your AWS account.", "Reference": "Amazon SNS and subscribe to the topic.", "NNUpdater": "Describes the SQL Query to execute on an Amazon Redshift database for an"}
{"Origin": "Sets the digest algorithm - currently only sha* and ripemd160 is supported.", "Reference": "Converts the digest algorithm - currently only sha* and ripemd160 is supported.", "NNUpdater": "Sets the digest algorithm of secrets returned by the wrapped verifier."}
{"Origin": "Get the value of password.", "Reference": "Gets the value of password.", "NNUpdater": "Get the access token."}
{"Origin": "At present this only tries to avoid adding a straight quote to a sentence when it doesn't plausibly go there and should go with the next sentence.", "Reference": "At present this only tries to avoid adding a straight single/double quote to a sentence when it doesn't plausibly go there and should go with the next sentence.", "NNUpdater": "Set the sentenceLocation."}
{"Origin": "Validate that the key is not reserved {@link MetadataDataset#TAGS_KEY}.", "Reference": "Validate that the key is not reserved {@link MetadataConstants#TAGS_KEY}.", "NNUpdater": "If no {@link MetadataKeyId} is present in the component's input parameters, then a {@link NullMetadataKey} is returned."}
{"Origin": "Remote start and stop for every test, or once for the entire test suite of tests.", "Reference": "Remote serverList and stopServersAfterTests for every test, or once for the entire test suite of tests.", "NNUpdater": "Finalisation."}
{"Origin": "Use {@link #processKeysWithExistingMapping(com.intellij.util.Processor)} to process only keys with existing mappings", "Reference": "Use {@link #processKeysWithExistingMapping(Processor)} to process only keys with existing mappings", "NNUpdater": "Operation fails."}
{"Origin": "The persister for the {@link #getEntity entity}.", "Reference": "The descriptor for the {@link #getEntity entity}.", "NNUpdater": "Sets the entityName."}
{"Origin": "Decimal modulus involves at least one decimal operand and requires both operands to have exact numeric types.", "Reference": "Decimal modulus involves at least one decimal operand.", "NNUpdater": "Get column of sql type: decimal, numeric"}
{"Origin": "Publishes a {@link BeforeTestMethodEvent} to the {@code ApplicationContext} for the supplied {@link TestContext}.", "Reference": "Publish a {@link BeforeTestMethodEvent} to the {@code ApplicationContext} for the supplied {@link TestContext}.", "NNUpdater": "Resolve the given {@link Parameter} for the supplied {@link TestExtensionContext}."}
{"Origin": "Represent a zone with a fake email.", "Reference": "Represent a zone with a fake email and a TTL of 86400.", "NNUpdater": "Represent a zone without a {@link #qualifier() qualifier}."}
{"Origin": "Whether to group the REST resources together.", "Reference": "How to group the REST resources together.", "NNUpdater": "Guide."}
{"Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}", "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveFromRangeEnd }{@code >}}", "NNUpdater": "Create an instance of {@link JAXBElement }{@code <}{@link CTStrokeChild }{@code >}}"}
{"Origin": "Provider-Person-Names(that are not voided)", "Reference": "Creates or that matches the input name with Provider-Person-Names (not voided)", "NNUpdater": "Updates an existing person."}
{"Origin": "Retrieves the permission of the given type associated with the given user, if it exists.", "Reference": "Retrieves whether the permission of the given type has been granted to the given user.", "NNUpdater": "Retrieves the single object that has the given identifier, if it exists and the user has permission to read it."}
{"Origin": "Please delete the existing keypair first.", "Reference": "Please delete the existing key pair first.", "NNUpdater": "matches name of the given key pair"}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Returns the PatchOperation instance for the replace operation, based on the operation path.", "Reference": "Returns the patch instance for the replace operation (based on the operation path).", "NNUpdater": "The Get Create Operation Status operation returns the status of the specified create operation."}
{"Origin": "Returns the SpecialDirectory object corresponding to the given file, creating it and its parents as needed.", "Reference": "Returns the SpecialDirectory object corresponding to the given directory, creating it and its parents as needed.", "NNUpdater": "Finds the menu described by the given entry, creating it if needed."}
{"Origin": "Returns an immutable map containing keys and values extracted from the given entries.", "Reference": "Returns an unmodifiable map containing keys and values extracted from the given entries.", "NNUpdater": "Gets the observable values."}
{"Origin": "Create a LazyPersistentQueueX from a Stream", "Reference": "Create a LazyPQueueX from a Stream", "NNUpdater": "Create a LazyPQueueX from a Stream"}
{"Origin": "There must be exactly one {@link BD#SEARCH} predicate.", "Reference": "There must be exactly one {@link FTS#SEARCH} predicate.", "NNUpdater": "Exactly one of stringValue(), readerValue(), and binaryValue() must be set."}
{"Origin": "Load the given library with the specified {@link java.lang.ClassLoader}", "Reference": "Load the given library with the specified {@link ClassLoader}", "NNUpdater": "Convenience method for {@link #methodType(java.lang.Class, java.lang.Class[]) methodType}."}
{"Origin": "Gets policy for resource set.", "Reference": "Delete policy for resource set.", "NNUpdater": "Lists the policy for a certificate."}
{"Origin": "No processing is performed on the filenames other than comparison.", "Reference": "No processing is performed on the fileNames other than comparison.", "NNUpdater": "No validation is performed on the date-time other than ensuring it is not null."}
{"Origin": "Only sizes in the range [16..128] are accepted.", "Reference": "Only sizes in the range [8..128] are accepted.", "NNUpdater": "Checks password, length [1, 16]."}
{"Origin": "Create item cosmos sync item response.", "Reference": "Create a cosmos item synchronously.", "NNUpdater": "Adds new item after the given item."}
{"Origin": "Waits until {@link WebElement} which defined by {@code element} does not contain the specified {@code expectedText}.", "Reference": "Waits until {@link WebElement} which defined by {@code element} does not contain the specified {@code absentText}.", "NNUpdater": "WebElement#getText()} equals to provided {@code expectedText}."}
{"Origin": "Sets the parameters.", "Reference": "Set the parameters.", "NNUpdater": "Sets the parameter string."}
{"Origin": "Also, appropriate directory permissions (777 + StickyBit, namely ``drwxrwxrwt``) are set.", "Reference": "Also, appropriate directory permissions (w/ StickyBit) are set.", "NNUpdater": "Changes local file's permission to be ``rwxrwxrwx``."}
{"Origin": "Obtain a {@link RemoteRepository} for the data set having the specified SPARQL end point.", "Reference": "Obtain a flyweight {@link RemoteRepository} for the data set having the specified SPARQL end point.", "NNUpdater": "Engine."}
{"Origin": "Returns if this {@link SerialDate} is within the specified range (INCLUSIVE).", "Reference": "Returns {@code true} if this {@link SerialDate} is within the specified range (INCLUSIVE).", "NNUpdater": "The start_date."}
{"Origin": "Returns the serializeProperties indicator parsed from the annotation value.", "Reference": "Returns the serialize indicator parsed from the annotation value.", "NNUpdater": "Returns the configured properties."}
{"Origin": "If the headsign IS ALL CAPS, it will be converted to title case (Is All Caps), otherwise the returned string will match the input.", "Reference": "If the displayText IS ALL CAPS and more than one word, it will be converted to title case (Is All Caps), otherwise the returned string will match the input.", "NNUpdater": "Computes and returns the hash of the specified capsString using the specified hashAlgorithm."}
{"Origin": "Creates a ModuleReference to an exploded module.", "Reference": "Creates a ModuleReference to a possibly-patched exploded module.", "NNUpdater": "Returns a {@code ModuleReference} to an exploded module on the file system."}
{"Origin": "Convert the attributes if necessary and add them to the profile.", "Reference": "Convert the profile and authentication attributes, if necessary, and add them to the profile.", "NNUpdater": "Set the identifier."}
{"Origin": "For not good inters (such 'weak' inters have already survived the first REDUCTION step) we put them aside as optional glyphs that can take part of the symbols glyphs clustering and thus compete for valuable compounds.", "Reference": "For not good inters (some ``weak`` inters have already survived the first REDUCTION step) we put them aside as optional glyphs that can take part of the symbols glyphs clustering and thus compete for valuable compounds.", "NNUpdater": "For not good inters (such 'weak' inters have already survived the first REDUCTION step) we put them aside as optional glyphs that can take part of the symbols glyphs clustering and thus compete for valuable compounds."}
{"Origin": "Returns the annotation mirror as specified by the ``qualifier`` element in {@code metaAnno}, with arguments taken from {@code argumentAnno}.", "Reference": "Returns the annotation mirror as specified by the ``qualifier`` element in {@code contractAnno}, with arguments taken from {@code argumentAnno}.", "NNUpdater": "Is {@code anno} the {@link UnderInitializion} annotation (with any type frame)?"}
{"Origin": "Same as {@link #testModuleWithWorkQueue(KeyFactory, Optional)} but with default task store and key factory.", "Reference": "Same as {@link #testModuleWithWorkQueue(KeyFactory)} but with default key factory.", "NNUpdater": "Operation fails."}
{"Origin": "Tests for {@link ContactEditorUtils#shouldShowAccountChangedNotification()}, starting with 1 accounts.", "Reference": "Tests for {@link ContactEditorUtils#shouldShowAccountChangedNotification(List)}, starting with 1 accounts.", "NNUpdater": "Operation fails."}
{"Origin": "Returns the (unbiased) kurtosis of all the values within a {@link PointSet} region of a {@link Dataset}", "Reference": "Returns the (biased) skew of all the values within a {@link PointSet} region of a {@link Dataset}", "NNUpdater": "The class of the {@link DatasetsFinder} is read from property {@link #DATASET_PROFILE_CLASS_KEY}."}
{"Origin": "Creates a list of {@link ComponentBuildingDefinition} built on copies of {@link #baseDefinitionBuilder}.", "Reference": "Creates a list of {@link ComponentBuildingDefinition} built on copies of {@link #definitionBuilder}.", "NNUpdater": "Creates a {@link Builder} for building instance of {@link FlowSpecification}."}
{"Origin": "This method extracts a registered {@link BaseRelayForwarderRPC} from the {@link Dispatcher}.", "Reference": "This method extracts a registered {@link BaseRelayServer} from the {@link Dispatcher}.", "NNUpdater": "This method extracts a registered {@link BaseRelayForwarderRPC} from the {@link Dispatcher}."}
{"Origin": "Removes the specified properties of the {@link NamespacedEntityId}.", "Reference": "Removes the specified properties of the {@link MetadataEntity}.", "NNUpdater": "Removes the specified properties of the {@link NamespacedEntityId}."}
{"Origin": "paste the swatch data", "Reference": "Paste the swatch data", "NNUpdater": "Copy a {@link PaletteItem}'s HSL values into a new float[]."}
{"Origin": "Note: No will be instantiated by this method.", "Reference": "No will be instantiated by this method.", "NNUpdater": "Determine whether a type is instantiated."}
{"Origin": "Wraps an iterator as a stream.", "Reference": "Converts iterator to a stream.", "NNUpdater": "Constructor."}
{"Origin": "The NoopNegotiator should be used to do IRCv3 negotiation but not set up anything at that moment.", "Reference": "The NoopNegotiator should be used to do IRCv3 negotiation (enabling IRCv3 in the process) but not set up anything at that moment.", "NNUpdater": "Set the XMPP connection associated."}
{"Origin": "Adds an unqualified ``exports dynamic private`` directive to the declaration.", "Reference": "Adds an unqualified ``opens`` directive to the declaration.", "NNUpdater": "Adds a ``requires transitive`` directive to the declaration."}
{"Origin": "Find all matching tuples - a slot of NodeId.NodeIdAny (or null) means match any", "Reference": "Find all matching tuples - a slot of NodeId.NodeIdAny means match any", "NNUpdater": "CounterId."}
{"Origin": "This is only possible if the {@link javax.script.ScriptEngine} implementation implements {@link javax.script.Compilable}.", "Reference": "This is only possible if the {@link javax.script.ScriptEngine} implementation implements {@link Compilable}.", "NNUpdater": "Get the {@link Script} from the script bytes or null if it doesn't parse."}
{"Origin": "Returns current {@link ISeedingStrategy}.", "Reference": "Returns current {@link SeedingStrategy}.", "NNUpdater": "Returns current {@link ISeedingStrategy}."}
{"Origin": "Trust all certificates and add them to the {@link #CLIENT_CERTS_LIST}.", "Reference": "Trust all certificates and add them to the {@link #clientCertsList}.", "NNUpdater": "Adds the specified {@link ClientOption} and its {@code value}."}
{"Origin": "Predict a sequence of steps output states for the given HMM model using the given seed for probabilistic experiments", "Reference": "Predict a sequence of steps output states for the given HMM model", "NNUpdater": "-S seed"}
{"Origin": "Returns true if the class has the specified annotation class.", "Reference": "Returns true if the class has the specified annotation type.", "NNUpdater": "Returns true if the class has the specified annotation type."}
{"Origin": "Returns the member logical timestamp.", "Reference": "Returns the member incarnation number.", "NNUpdater": "Returns a member by ID."}
{"Origin": "Creates a course and an instructor for it.", "Reference": "Creates a course and an associated instructor for the course.", "NNUpdater": "This method loops through all instructors for the given course until a verified (Corresponding Account Exists) and registered Instructor is found."}
{"Origin": "The current thread might be already in any request scope and in that case the scope will be changed to the scope defined by the {@link RequestScope.Instance scope instance}.", "Reference": "The current thread might be already in any request scope and in that case the scope will be changed to the scope defined by the {@link RequestContext scope context}.", "NNUpdater": "Maps a {@link Scope} instance to a given annotation."}
{"Origin": "Returns the sync d l objects before and after the current sync d l object in the ordered set where companyId = ?", "Reference": "Returns the sync d l objects before and after the current sync d l object in the ordered set where repositoryId = ?", "NNUpdater": "Returns the sync d l object ID of this sync d l object."}
{"Origin": "Binds the specified {@link Service} at the specified path pattern of the default {@link VirtualHost}.", "Reference": "Binds the specified {@link HttpService} at the specified path pattern of the default {@link VirtualHost}.", "NNUpdater": "Binds the specified {@link Service} at the specified {@link Route} of the default {@link VirtualHost}."}
{"Origin": "Searches for a {@link SharedKeyCredential} in the passed {@link HttpPipeline}.", "Reference": "Searches for a {@link StorageSharedKeyCredential} in the passed {@link HttpPipeline}.", "NNUpdater": "Create a {@link Kind#SHARE_PARENT_RO} {@link RContext}."}
{"Origin": "This function initializes the Facebook SDK, the behavior of Facebook SDK functions are undetermined if this function is not called.", "Reference": "The behavior of Facebook SDK functions are undetermined if this function is not called.", "NNUpdater": "Sets the application's Facebook ID."}
{"Origin": "{@codesnippet com.azure.data.applicationconfig.configurationclient.listSettingRevisions#settingSelector-context}", "Reference": "{@codesnippet com.azure.data.applicationconfig.configurationclient.listRevisions#settingSelector-context}", "NNUpdater": "{@codesnippet com.azure.data.applicationconfig.configurationclient.listSettingRevisions#settingSelector-context}"}
{"Origin": "Test that DocumentElement.add does not throw any exception when passing a null value.", "Reference": "Test that DocumentElement.addValue does not throw any exception when passing a null value.", "NNUpdater": "Returns {@code null} when either the given {@code property} does not exists in this element or does not corresponds to a {@link LiteralListElement}."}
{"Origin": "Get the media item with the given media id.", "Reference": "Gets the media item with the given media id.", "NNUpdater": "Gets the media id for this item."}
{"Origin": "The {@link AsyncCallback} to use when the execution of the action wrapped by this object is completed.", "Reference": "The callback to use when the execution of the action wrapped by this object is completed.", "NNUpdater": "The default behavior of this method is to return doneAsync() on the wrapped request object."}
{"Origin": "Returns the correct {@link io.netty.channel.socket.ServerSocketChannel} class based on {@link ChannelType}.", "Reference": "Returns the correct {@link io.netty.channel.socket.ServerSocketChannel} class for use by the worker.", "NNUpdater": "Returns the {@link NettyChannel} for given {@link Channel}, this method never return null."}
{"Origin": "A return type signature represents the return value from a method.", "Reference": "A returntype signature represents the return value from a method.", "NNUpdater": "Returns the result type signature for the method."}
{"Origin": "or throws a {@link com.liferay.knowledgebase.NoSuchFolderException} if it could not be found.", "Reference": "or throws a {@link NoSuchFolderException} if it could not be found.", "NNUpdater": "Operation fails."}
{"Origin": "This property is not returned if the dialog node has no previous sibling.", "Reference": "This property is omitted if the dialog node has no previous sibling.", "NNUpdater": "Returns the previous sibling or the parent itself when no sibling yet"}
{"Origin": "Run the standalone ZooKeeper process and the job.", "Reference": "Run the ZooKeeper in-process and the job.", "NNUpdater": "Create a {@link ModuleDeploymentStatus} from a ZooKeeper path and data."}
{"Origin": "Tests that Grindstone mills all cards to graveyard while Painter's Servant is in play", "Reference": "Tests that Grindstone mills all cards to graveyard while Painter's", "NNUpdater": "Returns label painter."}
{"Origin": "Removes all properties for the specified {@link NamespacedEntityId}.", "Reference": "Removes all properties for the specified {@link MetadataEntity}.", "NNUpdater": "Removes all properties for the specified {@link NamespacedEntityId}."}
{"Origin": "Enables full-control mode in an organization.", "Reference": "Enables all features in an organization.", "NNUpdater": "Set Organisation."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Check the duration as computed in this measure from its contained voices, compared to its theoretical duration.", "Reference": "Check the duration as computed in this stack from its contained voices, compared to its theoretical duration.", "NNUpdater": "Check the duration of the voice, compared to measure expected duration"}
{"Origin": "Set Nominalmenge in Preiseinheit.", "Reference": "Set Abzurechnen.", "NNUpdater": "Add result set."}
{"Origin": "Adds a filter query.", "Reference": "Creates and adds a filter query.", "NNUpdater": "Gets scan query filter."}
{"Origin": "Creates a valid {@link Aggregate} operation.", "Reference": "Creates a valid {@link AggregateTableOperation} operation.", "NNUpdater": "Get the current {@link AggregateLifecycle} instance for the current thread."}
{"Origin": "Returns true if the given instruction belongs to this list.", "Reference": "Returns {@literal true} if the given instruction belongs to this list.", "NNUpdater": "The instruction which produces the input value to this instruction."}
{"Origin": "Whether this codec is capable of encoding the given Java type.", "Reference": "Whether this codec is capable of processing the given Java type.", "NNUpdater": "The Java type of this column."}
{"Origin": "This will return the {@link Key key} with key material included of its latest version.", "Reference": "This will return the {@link KeyVaultKey key} with key material included of its latest version.", "NNUpdater": "This operation can then be used to get the full key with its key material from {@code keyProperties}."}
{"Origin": "This method should be called before reusing same instructions list between several s.", "Reference": "This method should be called before reusing an instruction list between several s.", "NNUpdater": "This method can be called several times and will always return the same representation instance."}
{"Origin": "Gets whether the user can sort this column or not.", "Reference": "Gets whether sorting is enabled for this column.", "NNUpdater": "AddColumn throws an exception if the cell added does not sort after the last cell in the map."}
{"Origin": "The returned language supplier is intended to be cached in the currently adopted AST.", "Reference": "The returned language reference is intended to be cached in the currently adopted AST.", "NNUpdater": "Reference: URL"}
{"Origin": "Amalgamate all post-construct callbacks and return a read only list", "Reference": "Amalgamate all post-construct callbacks and return a read only set", "NNUpdater": "Adds a PostConstruct method"}
{"Origin": "Returns the folder with the primary key or throws a {@link com.liferay.mail.NoSuchFolderException} if it could not be found.", "Reference": "Returns the folder with the primary key or throws a {@link NoSuchFolderException} if it could not be found.", "NNUpdater": "The folder won't be added if the previous folder is the same."}
{"Origin": "Computes the coverage percentage for a given metric, over a subset of the available source files.", "Reference": "Computes the coverage percentage over a subset of the available source files.", "NNUpdater": "Returns {@link Coverage} only for the given CC source filenames, filtering out every other CC sources of the given coverage."}
{"Origin": "Maps all index descriptors according to {@link #indexReference(IndexDescriptor)}.", "Reference": "Maps all index descriptors according to {@link #indexReference(IndexDescriptor2)}.", "NNUpdater": "E.g setZIndex() becomes ``zIndex``."}
{"Origin": "Use the endorsed standards override mechanism to load JAX-WS VERSION API", "Reference": "Use the standard override mechanism to load JAX-WS VERSION or newer API.", "NNUpdater": "The auth_type."}
{"Origin": "Returns the command sequence number.", "Reference": "Returns the command sequence numbers.", "NNUpdater": "Returns the session operation sequence number."}
{"Origin": "If more than one private key is present, the key that is returned is undefined.", "Reference": "If more than one eligible private key entry is present, which key will be returned is undefined.", "NNUpdater": "If the key is not a hidden key, return key."}
{"Origin": "Return the resource mappings, either manually configured or auto-detected when the Spring {@code ApplicationContext} is refreshed.", "Reference": "Return a read-only view of the resource handler mappings either manually configured or auto-detected when the Spring {@code ApplicationContext} is refreshed.", "NNUpdater": "Sets Spring resource context."}
{"Origin": "Return true if the given attribute name is the name of a pre-defined attribute that is not allowed in the class file.", "Reference": "Return true if the given attribute name is the name of a pre-defined attribute in JVMS VERSION that is not allowed in a module-info class.", "NNUpdater": "Returns the method parameter name."}
{"Origin": "For integration testing allows to prime the environment via provided configuration.", "Reference": "For integration testing allows to prime the environment via provided parameters.", "NNUpdater": "For testing only"}
{"Origin": "Returns the last asset entry set in the ordered set where createTime = ?", "Reference": "Returns the first asset entry set in the ordered set where createTime > ?", "NNUpdater": "Returns the create time of this asset entry set."}
{"Origin": "Get an enumeration of the keys of the JSONObject.", "Reference": "Get a set of keys of the JSONObject.", "NNUpdater": "The order of the keys is undefined."}
{"Origin": "Sets the configuration resolver for the SAML filter chain.", "Reference": "Sets the registration resolver for the SAML filter chain.", "NNUpdater": "Sets the secrets verifier."}
{"Origin": "Integers 0 ... n.", "Reference": "Integers 0 ... n - 1.", "NNUpdater": "Creates a sequence with the specified items."}
{"Origin": "Try to find a {@link ConstructorDeclaration} by its parameters types.", "Reference": "Try to find a {@link ConstructorDeclaration} by its parameter types.", "NNUpdater": "Equivalent to {@code transform(``transform``, func)}."}
{"Origin": "Test the case with Blob_Not_Found errors from most servers, and Blob_Deleted at just one server.", "Reference": "Test the case with Blob_Not_Found errors from most servers, and Blob_Deleted, Blob_Expired or", "NNUpdater": "Returns the {@link BlobInfo} for the target blob."}
{"Origin": "NameSpaceSymbTable)}, whereas it takes into account that subtree-c14n is -- well -- subtree-based.", "Reference": "NameSpaceSymbTable, Map)}, whereas it takes into account that subtree-c14n is -- well -- subtree-based.", "NNUpdater": "Operation fails."}
{"Origin": "Returns the node representing the element type of the array.", "Reference": "Returns the node representing the array type being instantiated.", "NNUpdater": "Narrows the {@link #getMapKeyTypeDescriptor() mapKeyType} property to the class of the provided map key."}
{"Origin": "Computes the price of a Domestic Cash Digital option using the call spread approximation", "Reference": "Computes the future price of a Domestic Cash Digital option using the call spread approximation", "NNUpdater": "Sets the additional spread added to the price."}
{"Origin": "Created a new {@link RxInstrumenter}.", "Reference": "Created a new {@link InvocationInstrumenter}.", "NNUpdater": "Retrieve instance of {@link RxJavaDefaultSchedulers} to use based on order of precedence as defined in {@link RxJavaPlugins} class header."}
{"Origin": "Called when GUI design has changed.", "Reference": "Called when the GUI design has changed.", "NNUpdater": "Updates the cluster when the configuration changes."}
{"Origin": "Test for {@link ArrayBuilder#append(Array)}.", "Reference": "Test for {@link ArrayBuilder#append(XQArray)}.", "NNUpdater": "For example, consider {@code builder.appendValue(YEAR).appendValue(MONTH_OF_YEAR, 2);}"}
{"Origin": "Sets the current end icon to be VISIBLE or INVISIBLE.", "Reference": "Sets the current end icon to be VISIBLE or GONE.", "NNUpdater": "Set verbose settings to the default"}
{"Origin": "Build mongo template mongo template.", "Reference": "Build mongo template.", "NNUpdater": "Configures the {@link MongoOperations} to be used."}
{"Origin": "Determines whether a room is created for each user that is created by automatic import (like a home folder).", "Reference": "DEPRECATED, will be ignored Determines whether a room is created for each user that is created by automatic import (like a home folder).", "NNUpdater": "Sets the create."}
{"Origin": "Creates a ModuleReference to a module packaged as a JMOD.", "Reference": "Creates a ModuleReference to a module in a JMOD file.", "NNUpdater": "Creates the ModuleReference."}
{"Origin": "Returns the response object with list of dhcp servers without counters.", "Reference": "Returns results with aggregate of counters.", "NNUpdater": "Resets the member selector."}
{"Origin": "Search for Visual Studio link.exe Search Order is: VS2013, VS2015, VS2012.", "Reference": "Search for Visual Studio link.exe Search Order is: VS2017+, VS2013, VS2015, VS2012.", "NNUpdater": "Search All cases"}
{"Origin": "Generates a code sample for using {@link ShareDirectoryClient#createSubDirectory(String)}", "Reference": "Generates a code sample for using {@link ShareDirectoryClient#createSubdirectory(String)}", "NNUpdater": "Generates a code sample for using {@link DirectoryClient#createSubDirectoryWithResponse(String, Map, Context)}"}
{"Origin": "In that case the ISO code of the preferred language in the UMS settings is returned.", "Reference": "In that case the ISO 639 code of the preferred language in the UMS settings is returned.", "NNUpdater": "In that case the ISO code of the preferred language in the UMS settings is returned."}
{"Origin": "The given {@link FirmwareUID} represents the UID of the latest updatable firmware for the thing.", "Reference": "The given firmware version represents the version of the latest updatable firmware for the thing.", "NNUpdater": "Will use the thing UID to infer the unique channel UID from the given ID."}
{"Origin": "The transfered element is returned by this associated poll.", "Reference": "The transfered element is returned by the associated poll.", "NNUpdater": "poll returns non-null when the returned task is completed"}
{"Origin": "Waits until the System.currentTimeMillis() results has changed.", "Reference": "Waits until System.currentTimeMillis() has flipped to the next second.", "NNUpdater": "Time in time until no new instruction"}
{"Origin": "Add a server to the known list of servers.", "Reference": "Add a server to the known list of servers to blacklist.", "NNUpdater": "Retrieve ``known`` (i.e."}
{"Origin": "Returns size of the allocated memory used to store pixels of this object.", "Reference": "Returns size of the memory needed to store pixels of this object.", "NNUpdater": "maxNumOfPixels is used to specify the maximal size in pixels that is tolerable in terms of memory usage."}
{"Origin": "Deletes the specified variable from the configuration.", "Reference": "Deletes the specified variable from the CONFIGURATION.", "NNUpdater": "Returns the value of the specified variable."}
{"Origin": "Invoked when the future is completed, it must cleanup all task related to this collector.", "Reference": "Invoked when the collector's future is completed, it must cleanup all task related to this collector.", "NNUpdater": "Method isSuccessful returns true when work has completed successfully."}
{"Origin": "Sets the identifier of the transaction.", "Reference": "Sets the identifier of the command.", "NNUpdater": "Sets the label"}
{"Origin": "If the requested index is greater than the current size, the list will grow to the new size and a new object will be returned from the factory.", "Reference": "If the requested index is greater than the current size, the list will grow to the new size and a new object will be returned from the factory or transformer.", "NNUpdater": "Create a new {@link BatchDescriptor} that is the minimum of the requested size and the buffer size."}
{"Origin": "Main method to invoke this demo about how to detect language of a text input.", "Reference": "Main method to invoke this demo about how to detect the language of an input text.", "NNUpdater": "A language may be detected from an existing file using {@link #findLanguage(File)}."}
{"Origin": "Check whether the {@link Class} declares a {@literal copy} method or {@literal copy} method with parameter defaulting.", "Reference": "Check whether the owning type of {@link PersistentProperty} declares a {@literal copy} method or {@literal copy} method with parameter defaulting.", "NNUpdater": "Add stream record with given {@literal body} to {@literal key}."}
{"Origin": "During the prefetch, a session should not hold audio focus in order to allow other sessions play seamlessly.", "Reference": "During the prepare, a session should not hold audio focus in order to allow other sessions play seamlessly.", "NNUpdater": "During the prefetch, a session should not hold audio focus in order to allow other sessions play seamlessly."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Note that this rule will be inserted in VNI table (table 0).", "Reference": "Note that this rule will be inserted in vTag table.", "NNUpdater": "Returns the table with the specified logical table name."}
{"Origin": "Clears all the mount points.", "Reference": "Clears all the mount points except the root.", "NNUpdater": "Returns all of data points in order."}
{"Origin": "Code snippets for {@link BlobClientBase#setHTTPHeaders(BlobHttpHeaders)}", "Reference": "Code snippets for {@link BlobClientBase#setHttpHeaders(BlobHttpHeaders)}", "NNUpdater": "Code snippet for {@link AppendBlobClient#createWithResponse(BlobHTTPHeaders, Map, BlobAccessConditions,"}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "This merges the two objects - {@code this} and the specified time - to form an instance of {@code OffsetDateTime}.", "Reference": "This merges the two objects - {@code this} and the specified time - to form an instance of {@code ZonedDateTime}.", "NNUpdater": "Checks if this date-time is equal to another date-time."}
{"Origin": "Since the rule to be excluded doesn't exist, there should be warning about that as well.", "Reference": "Since the rule to be excluded doesn't exist, there should be a warning about that.", "NNUpdater": "Every Rule from the referred to RuleSet will be added as a RuleReference except for those explicitly excluded, below the minimum priority threshold for this"}
{"Origin": "Returns the number of sync d l objects where parentFolderId = ?.", "Reference": "Returns the number of sync d l objects where modifiedTime > ?", "NNUpdater": "Returns the number of sync d l objects where type = ?"}
{"Origin": "Returns URI of image which is loading at this moment into passed {@link ImageView}", "Reference": "Returns URI of image which is loading at this moment into passed {@link android.widget.ImageView ImageView}", "NNUpdater": "Returns URI of image which is loading at this moment into passed {@link ImageView}"}
{"Origin": "Code snippets for {@link BlobClient#setHTTPHeaders(BlobHttpHeaders)}", "Reference": "Code snippets for {@link BlobClient#setHttpHeaders(BlobHttpHeaders)}", "NNUpdater": "Code snippet for {@link AppendBlobClient#createWithResponse(BlobHTTPHeaders, Map, BlobAccessConditions,"}
{"Origin": "See Immutable Map Static Factory Methods for details.", "Reference": "See Unmodifiable Maps for details.", "NNUpdater": "VerificationTimes supports multiple static factory methods:"}
{"Origin": "Returns the class name local service.", "Reference": "Returns the journal article local service.", "NNUpdater": "Returns the document library file entry local service."}
{"Origin": "Replace the current expression with a given multi-expression and mark the method as modified.", "Reference": "Replace the current expression with a given replacement and mark the method as modified.", "NNUpdater": "Ignore last expression if iy's value is null."}
{"Origin": "Check that we boot successfully when the Elasticsearch dialect is configured explicitly, and that the Elasticsearch client starts in the second phase of bootstrap in that case.", "Reference": "Check that we boot successfully when the Elasticsearch version is configured explicitly, and that the Elasticsearch client starts in the second phase of bootstrap in that case.", "NNUpdater": "The client supplier to consume for connectivity to elasticsearch."}
{"Origin": "Usefull when you know, that there should be js val or something at the stage", "Reference": "Useful whenyou know that there should be a Javascript value or something at the stage.", "NNUpdater": "The nullValue of the type"}
{"Origin": "Finds all {@link UnderFileSystemFactory} from the lib directory and caches.", "Reference": "Finds all {@link UnderFileSystemFactory} from the lib directory.", "NNUpdater": "Tests the {@link UnderFileSystemFactoryRegistry#find(String)} method when using a core factory."}
{"Origin": "Return a {@link CollectionStatePredicate} that returns true if a collection has the expected number of active shards and active replicas", "Reference": "Return a {@link CollectionStatePredicate} that returns true if a collection has the expected number of shards and active replicas", "NNUpdater": "and code = ?."}
{"Origin": "Return that one RDFNode or null Throw exception if more than one.", "Reference": "Return that one RDFNode or null.", "NNUpdater": "The method will throw a runtime exception if no or more than one {@link TogglzConfig} implementation is found."}
{"Origin": "Get name of the Cosmos DB MongoDB database.", "Reference": "Get the resource value.", "NNUpdater": "Get Spaltenname."}
{"Origin": "Test of var method, of class NegativeBinomialDistribution.", "Reference": "Test of variance method, of class NegativeBinomialDistribution.", "NNUpdater": "Test of negativeBinomial method, of class DiscreteDistributions."}
{"Origin": "This can be trained with {@link ClauseSplitter#train(Stream, Optional, Optional, Featurizer)}.", "Reference": "This can be trained with {@link ClauseSplitter#train(Stream, Featurizer, TrainingOptions, Optional, Optional)}.", "NNUpdater": "Required."}
{"Origin": "Thus 31st January plusWrapField one day goes to the 1st January.", "Reference": "Thus 31st January addWrapField one day goes to the 1st January.", "NNUpdater": "Thus 31st January addWrapField one day goes to the 1st January."}
{"Origin": "Creates query for the given queryString.", "Reference": "Queries this search source for the given queryString.", "NNUpdater": "-D"}
{"Origin": "The subscription will only send notifications for those ERROR events in the Availability and Backup categories for the specified clusters.", "Reference": "The subscription will only send notifications for those ERROR events in the", "NNUpdater": "Returns the categories map."}
{"Origin": "A query parameter is defined by using the Expression's parameter(_ name: String) function.", "Reference": "A query parameter is defined by using the Expression's parameter(String name) function.", "NNUpdater": "You can retrieve the {@link ParameterExpression} from the {@link DeclarationStatement#parameter} field of the result."}
{"Origin": "Calculates Maximum - Nulls are handled as zeros.", "Reference": "Calculates Maximum - Nulls are ignored.", "NNUpdater": "Calculates the maximum of this elements according to their natural order."}
{"Origin": "Upsampling size", "Reference": "Upsampling size int", "NNUpdater": "Gets the size of the cluster."}
{"Origin": "Sets the jdbc driver class name.", "Reference": "Sets the JDBC driver class name.", "NNUpdater": "Find a JDBC driver class name based on given JDBC URL"}
{"Origin": "All foldable conditions that fold to FALSE should have been removed by the {@link Optimizer}.", "Reference": "All foldable conditions that fold to FALSE should have been removed by the {@link Optimizer}#SimplifyCase.", "NNUpdater": "Returns the objects that have been changed."}
{"Origin": "Return the failed hash so the client can correlate replies with requests", "Reference": "Return the request ID or failed hash so the client can correlate replies with requests", "NNUpdater": "Return the key."}
{"Origin": "Run ERiC with fixed parameters and compare the result to a golden standard.", "Reference": "Run LMCLUS with fixed parameters and compare the result to a golden standard.", "NNUpdater": "Run 4F with fixed parameters and compare the result to a golden standard."}
{"Origin": "Creates the full tree of nodes for the provided files/symlinks and returns the root node.", "Reference": "Creates the full tree of nodes for the provided files, symlinks and empty directories and returns the root node.", "NNUpdater": "Return the root nodes of the tree."}
{"Origin": "This allows additional information to be attached to the trade.", "Reference": "This allows additional information to be attached.", "NNUpdater": "This allows an attribute about a security to be obtained if available."}
{"Origin": "Test of npara method, of class WeibullDistribution.", "Reference": "Test of length method, of class WeibullDistribution.", "NNUpdater": "This method returns the index of the maximum probability as provided by {@link #classDistribution(O) classDistribution(M)}."}
{"Origin": "Updates the account.", "Reference": "Replaces the account.", "NNUpdater": "Updates the account index for the given protocol provider."}
{"Origin": "Group: consumer", "Reference": "Group: producer", "NNUpdater": "Guide."}
{"Origin": "Prepare a pooled {@link HttpClient}.", "Reference": "Prepare an {@link HttpClient}.", "NNUpdater": "The proxy to the component may be one of three types: 1. pooled 2. not pooled, created only once 3. created/disposed per request"}
{"Origin": "Test affinity awareness partition distributions cache size property with semicolon.", "Reference": "Test Partition Awareness partition distributions cache size property with semicolon.", "NNUpdater": "Get the current awareness as list of cognitions."}
{"Origin": "Creates a histogram of the given arguments", "Reference": "Creates a count of the given arguments", "NNUpdater": "The histogram array of the returned {@link Histogram} will look like this:"}
{"Origin": "R is a rotation transformation specified by the quaternion (qx, qy, qz, qw).", "Reference": "R is a rotation - and possibly scaling - transformation specified by the quaternion (qx, qy, qz, qw).", "NNUpdater": "Set this matrix to the rotation transformation of the given {@link Quaternionf}."}
{"Origin": "Note that this performs chains construction but wil not inject {@link MuleContext} or {@link FlowConstruct} or perform any lifecycle.", "Reference": "Note that this performs chains construction but wil not inject {@link MuleContext} or perform any lifecycle.", "NNUpdater": "Typically, either this property is set, or {@link #setDefaultUri(String)}, but not both."}
{"Origin": "Basically, this method runs the following instructions:", "Reference": "This method run the following instructions:", "NNUpdater": "This will write the processing instructions to the given Writer."}
{"Origin": "For a list of the event categories and source types, go to", "Reference": "For a list of the event categories and source types, go to Amazon Redshift Event Notifications.", "NNUpdater": "Returns the categories map."}
{"Origin": "Look up the 3 bits base64-encoded by the specified character, range-checking against conversion table", "Reference": "Look up the 3 bits base64-encoded by the specified character, range-checking againt conversion table", "NNUpdater": "Look up the 3 bits base64-encoded by the specified character, range-checking against conversion table"}
{"Origin": "Creates an URI based on the RedisURI.", "Reference": "Creates an URI based on the RedisURI if possible.", "NNUpdater": "Given an IRI, returns a IRI."}
{"Origin": "[A6] If the new lookup class is not accessible to the old lookup class, using the original access modes, then no members, not even public members, will be accessible.", "Reference": "[A8] If the new lookup class is not accessible to the old lookup class, then no members, not even public members, will be accessible.", "NNUpdater": "(In all other cases, public members will continue to be accessible.)"}
{"Origin": "If {@link #IGNORE_OVERFLOW} is true and one of the bounds is outside the Integer range, then that bound is set to the bound of the Integer range.", "Reference": "If {@link #ignoreOverflow} is true and one of the bounds is outside the Integer range, then that bound is set to the bound of the Integer range.", "NNUpdater": "Gets the period range, which the field is bound by."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Generate an implicit tuplet for the provided group of chords.", "Reference": "Generate one implicit tuplet for the provided group of chords.", "NNUpdater": "Add an implicit Collection for the given type."}
{"Origin": "Initializes a new instance id for the given container element.", "Reference": "Adjusts formatter settings and initializes a new instance id for the given container element.", "NNUpdater": "Initializes a {@link BlobContainerClient} object pointing to the specified container."}
{"Origin": "This method will retrieve one ExternalSourceEntryResource based on the ExternalSource for the given", "Reference": "This method will retrieve one ExternalSourceEntryResource based on the ExternalSource for the given externalSourceName and with the given entryId", "NNUpdater": "Set the name value."}
{"Origin": "NOTE:You cannot authorize ingress from an Amazon EC2 security group in one region to an ElastiCache cluster in another region.", "Reference": "You cannot authorize ingress from an Amazon EC2 security group in one region to an ElastiCache cluster in another region.", "NNUpdater": "NOTE: You cannot authorize ingress from an EC2 security group in one Region to an Amazon RDS DB instance in another."}
{"Origin": "Returns true if field execTime is set (has been assigned a value) and false otherwise", "Reference": "Returns true if field limit is set (has been assigned a value) and false otherwise", "NNUpdater": "Returns true if field eB is set (has been assigned a value) and false otherwise"}
{"Origin": "Gets dockerfile file name of this github url", "Reference": "Gets devfile file name of this github url", "NNUpdater": "Gets the mixed."}
{"Origin": "Overrides the state changed to determine if the state is new or changed and then to call the {@link #_wrappedCallback} if it has", "Reference": "Overrides the state changed to determine if the state is new or changed and then to call the {@link #wrappedCallback} if it has", "NNUpdater": "Overrides the state changed to determine if the state is new or changed and then to call the {@link #wrappedCallback} if it has"}
{"Origin": "Returns a suitable content for the argument file given to dx with --main-dex-list.", "Reference": "This can be passed to dx as a file with --main-dex-list.", "NNUpdater": "Opens an input file, which could be a .dex or a .jar/.apk with a classes.dex inside."}
{"Origin": "Resolves a collection of root modules, with service binding, to create configuration.", "Reference": "Resolves a collection of root modules, with service binding, to create a Configuration for the boot layer.", "NNUpdater": "Resolves the resource configuration."}
{"Origin": "If any offset in this is a less than or equal to an offset in other, then that offset is an offset for the array in lub.", "Reference": "If any offset in this is a less than or equal to an offset in other, then that offset is an offset for the sequence in lub.", "NNUpdater": "Set the cursor."}
{"Origin": "Converts an array of characters representing hexidecimal values into an array of bytes of those same values.", "Reference": "Converts an array of characters representing hexadecimal values into an array of bytes of those same values.", "NNUpdater": "An array of the (formatted) sort values used."}
{"Origin": "Add Tapi Topology to Dcs store.", "Reference": "Add Tapi TopologyContext and Topology to Dcs store.", "NNUpdater": "Add to this quaternion and store the result in ."}
{"Origin": "Scenario: - CA inherited trust - gateway trusts service via CA - service trusts gateway via CA", "Reference": "Scenario: - CA inherited trust - gateway trusts API via CA - API trusts gateway via CA", "NNUpdater": "[BC]}"}
{"Origin": "Updates a module's structure when the user selects a build variant from the tool window.", "Reference": "Updates a module's structure when the user selects a build variant or ABI.", "NNUpdater": "Updates this module to read another module."}
{"Origin": "The default implementation returns {@link AttributeFactory#DEFAULT_ATTRIBUTE_FACTORY}.", "Reference": "The default implementation returns {@link TokenStream#DEFAULT_TOKEN_ATTRIBUTE_FACTORY}.", "NNUpdater": "(Default: false)"}
{"Origin": "Adds one more acceptable indentation level.", "Reference": "Adds one or more acceptable indentation level.", "NNUpdater": "Set the basic offset."}
{"Origin": "This method generates the set of error parameters from an {@link BaseEvent} to use on the error response function.", "Reference": "This method generates the set of error parameters from an {@link CoreEvent} to use on the error response function.", "NNUpdater": "Set the score."}
{"Origin": "Time (in ms) of last received appendPosition.", "Reference": "Time (in ns) of last received appendPosition.", "NNUpdater": "Set the current buffered position in ms."}
{"Origin": "{@codesnippet com.azure.security.keyvault.certificates.CertificateClient.getIssuer#issuerProperties}", "Reference": "{@codesnippet com.azure.security.keyvault.certificates.CertificateClient.listPropertiesOfIssuers}", "NNUpdater": "{@codesnippet com.azure.security.keyvault.certificates.CertificateClient.getIssuer#issuerProperties}"}
{"Origin": "Create a {@link InstanceManager}.", "Reference": "Create a {@link InjectionManager}.", "NNUpdater": "Creates a FileManager."}
{"Origin": "Wraps the given object if necessary.", "Reference": "Wrap an object, if necessary.", "NNUpdater": "Returns a context that wraps a list of contexts."}
{"Origin": "Creates a new {@link FileIOChannel.ID} in one of the temp directories.", "Reference": "Creates a new {@link ID} in one of the temp directories.", "NNUpdater": "Creates a new {@link FileIOChannel.ID} in one of the temp directories."}
{"Origin": "Returns an InputRowPlusRaw object containing the InputRow plus the raw, unparsed data corresponding to the next row available.", "Reference": "Returns an {@link InputRowListPlusRawValues} object containing the InputRow plus the raw, unparsed data corresponding to the next row available.", "NNUpdater": "Adds a row."}
{"Origin": "Obtains an instance from the specified unique name.", "Reference": "Obtains an instance from the specified name.", "NNUpdater": "Obtains the type from a unique name."}
{"Origin": "Fetches the configuration settings that match the {@code options}.", "Reference": "Fetches the configuration settings that match the {@code selector}.", "NNUpdater": "Fetches all {@link BatchScanConfig}s that have been set on the given Hadoop configuration."}
{"Origin": "Same as {@link #isAnyPipelineConfigSet()}, but blocks execution.", "Reference": "Same as {@link #isAnyPipelineConfigSet(long)}, but blocks execution.", "NNUpdater": "Returns the serialized {@link ExecutionConfig}."}
{"Origin": "Setting the timeline is not allowed after a call to {@link #setMediaSource(MediaSource)}.", "Reference": "Setting the timeline is not allowed after a call to {@link #setMediaSources(MediaSource...)}.", "NNUpdater": "Calls {@link MediaSource#releaseSource(Listener)} on the playback thread."}
{"Origin": "Returns the tree for an annotation given an Attribute to search (recursively) and its corresponding tree.", "Reference": "Returns the tree for an attribute given an enclosing attribute to search (recursively) and the enclosing attribute's corresponding tree.", "NNUpdater": "Initializes the main tree."}
{"Origin": "Encode a PI action group to a action profile group.", "Reference": "Encode a PI action profile group to a action profile group.", "NNUpdater": "Guide."}
{"Origin": "Deserializes the data as an object of the type.", "Reference": "Deserializes the data as an object of the type using the given instance.", "NNUpdater": "De-serializes the object and returns the result."}
{"Origin": "Loads resource IDs from R.txt file and returns the list of their names, if successful.", "Reference": "Loads resource IDs from R.txt file.", "NNUpdater": "However, such IDs can be obtained from the R.txt file."}
{"Origin": "Get the fileCacheControl property: Sets the file's cache control.", "Reference": "Get the cacheControl property: Sets the file's cache control.", "NNUpdater": "Set the default {@link HttpCachePolicy.Policy} cache policy."}
{"Origin": "Retrieves a node relative to the node of the live application, e.g.", "Reference": "Retrieves a node relative to the node of the live application", "NNUpdater": "Get or Create a node relative to the Parent Node."}
{"Origin": "Gets an {@link BaseBiome} from a {@link ArgumentStack}.", "Reference": "Gets an {@link BiomeType} from a {@link ArgumentStack}.", "NNUpdater": "Gets an {@link BaseBiome} from a {@link ArgumentStack}."}
{"Origin": "Gets the list of scopes translated to {@link OAuthPermission} instances", "Reference": "Set the list of scopes translated to {@link OAuthPermission} instances", "NNUpdater": "Checks translation of AND(x, x)."}
{"Origin": "Delegates to {@link #getAttributeTypedNames()} and extracts the names.", "Reference": "Delegates to {@link #getTypedAttributeNames()} and extracts the names.", "NNUpdater": "It will also register the factory under names returned by {@link FactoryNames#getNames()}} if it implements {@link FactoryNames}."}
{"Origin": "Retrieves the data source with the specified id.", "Reference": "Retrieves the legacy datasource with the specified id.", "NNUpdater": "Retrieves the metadata for the specified {@link NamespacedEntityId}."}
{"Origin": "Tests a operating in bounded mode, created with a {@link StreamOutOfBoundException}.", "Reference": "Tests a operating in bounded mode and throwing a {@link StreamOutOfBoundException}.", "NNUpdater": "Tests the {@link Mode#getUMask()} and {@link Mode#applyUMask(Mode)} methods."}
{"Origin": "Returns a rule that restricts access according to the {@link Role} of the current authenticated {@link User}.", "Reference": "Adds a rule that restricts access according to the {@link Role} of the current authenticated {@link User}.", "NNUpdater": "Add a notification to a user."}
{"Origin": "The {@link Poller poller} allows users to automatically poll on the create certificate operation status.", "Reference": "The {@link PollerFlux poller} allows users to automatically poll on the create certificate operation status.", "NNUpdater": "Parse a ``poller`` element to create a Trigger and add it to the property values of the target builder."}
{"Origin": "Get statistics for table for given filtering constraint.", "Reference": "Get statistics for table for given columns and filtering constraint.", "NNUpdater": "Get the name value."}
{"Origin": "Sort the overlapping intervals first.", "Reference": "Sort the overlapping intervals by start first.", "NNUpdater": "Implements a cached binary search of the overlapping intervals."}
{"Origin": "Verify that duplicate exported packages are detected.", "Reference": "Verify that duplicate requires are detected.", "NNUpdater": "Test remove duplicate."}
{"Origin": "Tests the {@link FileSystemMaster#checkConsistency(AlluxioURI, CheckConsistencyOptions)} method when running on a file that is inconsistent.", "Reference": "Tests the {@link FileSystemMaster#checkConsistency(AlluxioURI, CheckConsistencyContext)} method when running on a file that is inconsistent.", "NNUpdater": "Tests the {@link FileSystemMaster#checkConsistency(AlluxioURI, CheckConsistencyOptions)} method when all files are consistent."}
{"Origin": "Produces a {@link RunnerApi.CombinePayload} from a {@link Combine}.", "Reference": "Produces a {@link RunnerApi.CombinePayload} from a {@link Combine.PerKey}.", "NNUpdater": "Returns the {@link GlobalCombineFn} used by this Combine operation."}
{"Origin": "Evaluates the condition and returns the matching expression.", "Reference": "Evaluates the condition and returns the offset of the resulting branch.", "NNUpdater": "Evaluates the condition and returns the matching expression."}
{"Origin": "Cancels touch focus for the specified actor.", "Reference": "Cancels touch focus for all listeners with the specified listener actor.", "NNUpdater": "Cancels touch focus for the specified actor."}
{"Origin": "Returns the built-in service account's credential for the application if running on", "Reference": "This is the built-in service account if running on Google", "NNUpdater": "Creates a credential object for the Bigquery client using application default credentials."}
{"Origin": "Sets the event index.", "Reference": "Sets the event indexes.", "NNUpdater": "Sets the request events."}
{"Origin": "Returns the node for the specified file path.", "Reference": "Returns the node for the specified file.", "NNUpdater": "Returns the absolute file path."}
{"Origin": "Sets the session's state machine name.", "Reference": "Returns the session timeout.", "NNUpdater": "Sets the service name."}
{"Origin": "TODO: Change this into selectTrack(TrackInfo)", "Reference": "TODO: Change this into selectTrack(TrackInfo) (b/132928418)", "NNUpdater": "Set this {@link Track}'s disc number"}
{"Origin": "Returns the class name persistence.", "Reference": "Returns the journal article persistence.", "NNUpdater": "Returns the document library file entry persistence."}
{"Origin": "Record an {@link ExecutionEvent} for a container or test that was skipped.", "Reference": "Record an {@link Event} for a container or test that was skipped.", "NNUpdater": "Evaluate all {@link ContainerExecutionCondition} extensions registered for the supplied {@link ExtensionContext}."}
{"Origin": "Creates a Hive database from CatalogDatabase.", "Reference": "Creates a Hive database from a CatalogDatabase.", "NNUpdater": "Uses the finder cache."}
{"Origin": "BIC score of the mixture for given data.", "Reference": "The BIC score of the mixture for given data.", "NNUpdater": "Sets the sentiment."}
{"Origin": "Runs a query and retrieves JSON.", "Reference": "Runs a query and retrieves a map.", "NNUpdater": "Executes the query."}
{"Origin": "Browse the histogram to detect the sequence of peaks (similar to stems) and spaces (blanks).", "Reference": "Browse the projection to detect the sequence of peaks (similar to stems) and spaces (blanks).", "NNUpdater": "Appends length blanks."}
{"Origin": "Apache Spark (camel-spark)", "Reference": "Spark Rest (camel-spark-rest)", "NNUpdater": "``spark`` - launch the cluster with Apache Spark installed."}
{"Origin": "Get Type.", "Reference": "Get Art.", "NNUpdater": "Get OrderType."}
{"Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}", "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveFromRangeEnd }{@code >}}", "NNUpdater": "Create an instance of {@link JAXBElement }{@code <}{@link CTStrokeChild }{@code >}}"}
{"Origin": "Gets a new {@link PiNode} that replaces this placeholder during snippet instantiation.", "Reference": "Replaces this node with a {@link PiNode} during snippet instantiation.", "NNUpdater": "Replaces this node with a {@link PiNode} during snippet instantiation."}
{"Origin": "Gets the list of {@link IssuerProperties issuers} on this page.", "Reference": "Gets the iterable stream of {@link IssuerProperties issuers} on this page.", "NNUpdater": "Loop over the {@link IssuerProperties issuerProperties} and call {@link CertificateClient#getIssuer(IssuerProperties issuerProperties)} ."}
{"Origin": "Retrieves the default value of a parameter, or otherwise an empty String", "Reference": "Retrieves the default value of a parameter, or otherwise returns null", "NNUpdater": "Retrieves the type of a parameter, or otherwise null"}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Returns {@code true} if this manifestation represents a field that is neither {@code final}, {@code transient} or {@code volatile}.", "Reference": "Returns {@code true} if this manifestation represents a field that is neither {@code final} or {@code volatile}.", "NNUpdater": "Returns {@code true} if this manifestation represents a field that is neither {@code final}, {@code transient} or {@code volatile}."}
{"Origin": "Sets the context.", "Reference": "Set the context.", "NNUpdater": "Sets the name of the context client."}
{"Origin": "Returns true if the image is a JPEG and its data is already complete at the specified length, false otherwise.", "Reference": "Returns true if the image is a JPEG or DNG and its data is already complete at the specified length, false otherwise.", "NNUpdater": "Returns true if field isCompleted is set (has been assigned a value) and false otherwise"}
{"Origin": "See {@link Upsertable#rowidHasPriority()} for more information.", "Reference": "See {@link Upsertable#rowidSupersedesLogicalKey()} for more information.", "NNUpdater": "See {@link #newDirectory()} for more information."}
{"Origin": "To do this, we use the boolean to indicate which table to use.", "Reference": "To do this, we use the boolean {@code trainLeaving} to indicate which table to use.", "NNUpdater": "Returns the string to use as a method annotation to indicate the nullability of this property."}
{"Origin": "Does NOT write the ID.", "Reference": "Does NOT write the ID or order.", "NNUpdater": "Remove the key from the write set (does not write through to the unisolated index)."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Create introspection invalid response.", "Reference": "Build unauthorized response entity.", "NNUpdater": "Clear the introspection cache for the given ClassLoader, removing the introspection results for all classes underneath that ClassLoader, and removing the ClassLoader (and its children) from the acceptance list."}
{"Origin": "{@codesnippet com.azure.storage.blob.specialized.BlobClientBase.copyFromURL#URL}", "Reference": "{@codesnippet com.azure.storage.blob.specialized.BlobClientBase.copyFromURL#String}", "NNUpdater": "{@codesnippet com.azure.storage.blob.specialized.BlobClientBase.Builder.buildClient}"}
{"Origin": "Manipulate the zoom level of the application and pans to specific location", "Reference": "Manipulate the zoom level of the application", "NNUpdater": "Sets the current zoom level which will be 2 to the power of zoom (2^zoom)"}
{"Origin": "On Android, the default charset is UTF-8.", "Reference": "Android note: The Android platform default is always UTF-8.", "NNUpdater": "The default value for regular Resources is ``UTF-8``."}
{"Origin": "Create a new BoneCP configuration object.", "Reference": "Create a new connection.", "NNUpdater": "The array should be organized so that the appropriate Track can be retrieved based on a bone index."}
{"Origin": "Generates a valid document ID for a service, used to index the service in ES.", "Reference": "Generates a valid document ID for a API, used to index the API in ES.", "NNUpdater": "Get the used service list."}
{"Origin": "Compares that two secrets are equal.", "Reference": "Compares that two secrets are equal and not null.", "NNUpdater": "Compares two CharSequences, returning if they are equal."}
{"Origin": "Tests the {@link BlockWorker#createBlock(long, long, String, long)} method.", "Reference": "Tests the {@link BlockWorker#createBlock(long, long, String, String, long)} method.", "NNUpdater": "Tests the {@link TieredBlockStore#createBlock(long, long, BlockStoreLocation, long)} method to work with eviction."}
{"Origin": "Creates query that searches for SourceContacts which match a specific query String.", "Reference": "Queries this ContactSourceService for SourceContacts which match a specific query String.", "NNUpdater": "Queries this ContactSourceService for SourceContacts which match a specific query Pattern."}
{"Origin": "{@codesnippet com.azure.storage.blob.specialized.PageBlobAsyncClient.copyIncremental#URL-String}", "Reference": "{@codesnippet com.azure.storage.blob.specialized.PageBlobAsyncClient.copyIncremental#String-String}", "NNUpdater": "{@codesnippet com.azure.storage.blob.BlobClientBuilder.buildAsyncClient}"}
{"Origin": "This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the character_set_database parameter.", "Reference": "This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the parameter.", "NNUpdater": "Uses the finder cache."}
{"Origin": "Rule a subsumes rule b, if a subsumes b AND a has got least the same expected predictive accuracy as b.", "Reference": "The defintion of subsumption is: Rule a subsumes rule b, if a subsumes b AND a has got least the same expected predictive accuracy as b.", "NNUpdater": "In particular, each trait set satisfies itself, because each trait subsumes itself."}
{"Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTIntProperty }{@code >}}", "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTFontFamily }{@code >}}", "NNUpdater": "Create an instance of {@link JAXBElement }{@code <}{@link CTStrokeChild }{@code >}}"}
{"Origin": "VMThreads.THREAD_MUTEX should be held when iterating the list.", "Reference": "{@link #THREAD_MUTEX} must be held when iterating the list.", "NNUpdater": "Check the {@link VApp}s current status."}
{"Origin": "Depth-first traversal of the control flow graph.", "Reference": "Non-recursive depth-first traversal of the control flow graph.", "NNUpdater": "Provides a collection of all the nodes in the tree using a depth-first preorder traversal."}
{"Origin": "Tests that when an etag is passed to set it will only set if the current representation of the setting has the etag.", "Reference": "Tests that when an ETag is passed to set it will only set if the current representation of the setting has the ETag.", "NNUpdater": "Set the routeFilter value."}
{"Origin": "To compare the underlying local date of two {@code DateTimeAccessor} instances, use {@link ChronoField#EPOCH_DAY} as a comparator.", "Reference": "To compare the underlying local date of two {@code TemporalAccessor} instances, use {@link ChronoField#EPOCH_DAY} as a comparator.", "NNUpdater": "Gets this date-time {@code ChronoLocalDate}."}
{"Origin": "Returns the k b folder with the primary key or throws a {@link com.liferay.knowledgebase.NoSuchFolderException} if it could not be found.", "Reference": "Returns the k b folder with the primary key or throws a {@link NoSuchFolderException} if it could not be found.", "NNUpdater": "The folder won't be added if the previous folder is the same."}
{"Origin": "Same as {@link #setPipelineConfig(PiPipeconf, ByteBuffer)}, but blocks execution.", "Reference": "Same as {@link #setPipelineConfig(long, PiPipeconf, ByteBuffer)}, but blocks execution.", "NNUpdater": "Operation fails."}
{"Origin": "Register one or more annotated classes to be processed.", "Reference": "Register one or more component classes to be processed.", "NNUpdater": "Acknowledge one or more records as processed."}
{"Origin": "creates a MOP method name from a method", "Reference": "Creates a MOP method name from a method.", "NNUpdater": "Returns the simple name of the method."}
{"Origin": "If the variable was set, a configuration {@link ConfigurationEvent event} will be passed to all registered listeners.", "Reference": "If the variable was set, a CONFIGURATION {@link ConfigurationEvent event} will be passed to all registered listeners.", "NNUpdater": "Is responsible for calling {@link EventSource#onEvent(InboundEvent)} and all registered {@link EventListener} instances."}
{"Origin": "This is the {@code location} given in the constructor after being resolved against the core instance dir.", "Reference": "This is the {@code location} given in the constructor.", "NNUpdater": "Whether the {@code call} is calling the given `functionName` in the `resolvedModuleName` with the `resolvedFinalArity`"}
{"Origin": "Returns the last state from which the simulated annealing search found a solution state.", "Reference": "Returns the last explored state.", "NNUpdater": "Sets the state if the current state {@code .equals()} the specified expected state."}
{"Origin": "Set runtime DI locator.", "Reference": "Set runtime DI injection manager.", "NNUpdater": "Set Lagerort."}
{"Origin": "Set the width of container for navigation icon.", "Reference": "Sets the width of container for navigation icon.", "NNUpdater": "Set the width for all dimensions."}
{"Origin": "The IHAWriteMessage is returned to the caller.", "Reference": "The {@link IHAWriteMessage} is returned to the caller.", "NNUpdater": "Gets the write request or throws runtime exception if mMessage is not of type {@link Protocol.WriteRequest}."}
{"Origin": "Remove a storage block by the name.", "Reference": "Removes a buffer block by the name.", "NNUpdater": "Remove a block from Tachyon cache space."}
{"Origin": "Returns whether or not icon for the specified identifier exists.", "Reference": "Returns whether or not {@link Icon} for the specified identifier exists.", "NNUpdater": "Returns the resource type name."}
{"Origin": "Unsubscribes us to notifications about incoming Coin packets.", "Reference": "Unsubscribes us from notifications about incoming Coin packets.", "NNUpdater": "Unsubscribes from all topics queues"}
{"Origin": "Draws a marker on a speficic position.", "Reference": "Draws a marker on a specific position.", "NNUpdater": "Draws text at the specified position."}
{"Origin": "Sets the value.", "Reference": "Set the value.", "NNUpdater": "Sets the valueText."}
{"Origin": "Using the provided abscissa range, extract the relevant foreground pixels from the NO_STAFF image and evaluate possible glyph instances.", "Reference": "In the provided slice, extract the relevant foreground pixels from the NO_STAFF image and evaluate possible glyph instances.", "NNUpdater": "Collect the image foreground pixels located under the template foreground areas, with some additional margin."}
{"Origin": "Add a file to the list of the successfully uploaded files.", "Reference": "Add a file to the list of the successfully uploaded files and remove it from the file list", "NNUpdater": "Add a file or a closeable to the list of temporary objects to delete."}
{"Origin": "This method wraps raw in the character provided by {@link #getNameEscape()}.", "Reference": "This method escapes raw using method {@link #escapeName(String)}.", "NNUpdater": "Like {@link #URLEnc(String, Charset)} but doesn't escape the slash character ({@code /})."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Set Manufacturing Order.", "Reference": "Set Produktionsauftrag.", "NNUpdater": "Set Manufacturing Cost Collector."}
{"Origin": "Parses the WSDL file in order to validate the service, port and operation, to get the SOAP Action (if defined) and to check if the operation requires input parameters or not.", "Reference": "Resolves the WSDL file in order to validate the service, port and operation, to get the SOAP Action (if defined) and to check if the operation requires input parameters or not.", "NNUpdater": "Get the SOAPBinding style for the specified WSDL Port."}
{"Origin": "Creates and loads a resource repository.", "Reference": "Creates and loads a resource repository without using a persistent cache.", "NNUpdater": "Engine."}
{"Origin": "Swaps the operands of the expression if better performance is expected.", "Reference": "Swaps the operands of the expression if this might improve performance.", "NNUpdater": "It is possible to disable transaction journal for better write performance"}
{"Origin": "This merges the two objects - {@code this} and the specified offset - to form an instance of {@code OffsetTime}.", "Reference": "This merges the two objects - {@code this} and the specified date - to form an instance of {@code LocalDateTime}.", "NNUpdater": "Combines this date with an offset time to create an {@code OffsetDateTime}."}
{"Origin": "The input file must be a list of tab-separated verb-POS pairs, one verb per line.", "Reference": "The input file must be a list of whitespace-separated verb-lemma-POS triples, one verb form per line.", "NNUpdater": "Get method's http verbs."}
{"Origin": "After you enable full-control mode, the master account in the organization can apply OCPs on all member accounts.", "Reference": "After you enable all features in your organization, the master account in the organization can apply policies on all member accounts.", "NNUpdater": "Invoked on the master to send the member list (see {@link MembersUpdateOperation}) to non-master nodes."}
{"Origin": "Associates this cache configuration to a quorum.", "Reference": "Associates this cache configuration to a split brain protection.", "NNUpdater": "Returns the cluster read quorum strategy."}
{"Origin": "Test of process method, of class ABITracer.", "Reference": "Test of local method, of class ABITracer.", "NNUpdater": "Initialize sharding tracer."}
{"Origin": "Sets the {@link EncryptionScope encryption scope} that is used to encrypt blob contents on the server.", "Reference": "Sets the {@code encryption scope} that is used to encrypt blob contents on the server.", "NNUpdater": "Set the encryptionAlgorithm property: The algorithm used to produce the encryption key hash."}
{"Origin": "Gets any cached {@link SyncSession} for the given {@link SyncConfiguration} or create a new one if no one exists.", "Reference": "Gets a cached {@link SyncSession} for the given {@link SyncConfiguration} or throw if no one exists yet.", "NNUpdater": "Gets any cached {@link SyncSession} for the given {@link SyncConfiguration} or create a new one if no one exists."}
{"Origin": "Defines enum set for the filter.", "Reference": "Defines enum set of dispatcher types for the filter.", "NNUpdater": "Returns an {@link ProtoEnumAdapter} for the given enum class."}
{"Origin": "Each adapter will try to send blocks until have got special {@link Block} with type {@link PacketTypes#ACK}, that means receiver have got block.", "Reference": "Each adapter will try to send blocks until have got special {@link Packet} with type {@link PacketTypes#ACK}, that means receiver have got block.", "NNUpdater": "Tests the {@link BlockMaster#removeBlocks(List, boolean)} method."}
{"Origin": "The curves themselves are provided in {@link ScenarioMarketData} using {@link CurveId} as the identifier.", "Reference": "The curves themselves are provided in {@link ScenarioMarketData} using {@link RatesCurveId} as the identifier.", "NNUpdater": "The curves themselves are provided in {@link CalculationMarketData} using {@link CurveId} as the identifier."}
{"Origin": "Returns newly created {@link NinePatchIcon} containing stretchable shadow.", "Reference": "Returns newly created shadow {@link NinePatchIcon}.", "NNUpdater": "Returns loader icon for this node."}
{"Origin": "Formats a millisecond {@code long} value into the supplied {@code StringBuilder}.", "Reference": "Formats a millisecond {@code long} value into the supplied {@code StringBuffer}.", "NNUpdater": "Formats a {@code Date} object into the supplied {@code StringBuffer} using a {@code GregorianCalendar}."}
{"Origin": "Creates and sends share intent across the system.", "Reference": "Creates and sends a share intent across the system.", "NNUpdater": "Sets the intentName."}
{"Origin": "Group: consumer", "Reference": "Group: producer", "NNUpdater": "Guide."}
{"Origin": "Attaches an existing database.", "Reference": "Attaches an udb database to Alluxio catalog.", "NNUpdater": "Attaches a target Filter."}
{"Origin": "Defaults to 30000.", "Reference": "Defaults to 60000.", "NNUpdater": "Defaults to ``AUTO``."}
{"Origin": "Load enOrganizationModel", "Reference": "Load Organization Model", "NNUpdater": "Set Organisation."}
{"Origin": "Wait for the transport thread to finish.", "Reference": "Wait for all transport threads to finish.", "NNUpdater": "Finish the test."}
{"Origin": "XML Catalogs, OASIS Standard V1.1, invalid path entries will be ignored.", "Reference": "XML Catalogs, OASIS Standard V1.1, if a catalog entry is invalid, it is ignored.", "NNUpdater": "Default is 1."}
{"Origin": "Sets the path to the configuration file.", "Reference": "Sets the path to the CONFIGURATION file.", "NNUpdater": "Returns the path to the configuration file on the current platform."}
{"Origin": "Receives all emails that matches given {@link EmailFilter filter} and set given flags.", "Reference": "Receives all emails that match given {@link EmailFilter} and set given {@link Flags}.", "NNUpdater": "Creates a new {@link Route.Filter} that delegate the execution to the given filter."}
{"Origin": "The meta-property for the {@code productType} property.", "Reference": "The meta-property for the {@code type} property.", "NNUpdater": "The meta-property for the {@code curveGroupName} property."}
{"Origin": "TODO If the last HALog file (in commit counter sequence) is discovered without a closing root block (the opening and closing root blocks are the same) then it can not be used.", "Reference": "Note: If the last HALog file (in commit counter sequence) is discovered without a closing root block (the opening and closing root blocks are the same) then it can not be used.", "NNUpdater": "Returns the index of the opening parenthesis, i.e."}
{"Origin": "Sets the {@link ISeedingStrategyFactory} to be used by this factory.", "Reference": "Sets the {@link SeedingStrategyFactory} to be used by this factory.", "NNUpdater": "Sets the {@link ISeedingStrategyFactory} to be used by this factory."}
{"Origin": "This method is a shortcut to {@linkplain #prefix(String, boolean) prefix(prefix, true)}.", "Reference": "This method is a shortcut to {@linkplain #pathPrefix(String, boolean) pathPrefix(prefix, true)}.", "NNUpdater": "Returns a prefix for the specified id."}
{"Origin": "Returns the service type corresponding to the name of a services configuration file if it is a valid Java identifier.", "Reference": "Returns the service type corresponding to the name of a services configuration file if it is a legal type name.", "NNUpdater": "Returns the {@link Type} corresponding to the given internal name."}
{"Origin": "Generates a code sample for using {@link DirectoryClient#createFileWithResponse(String, long, FileHTTPHeaders,", "Reference": "Generates a code sample for using {@link DirectoryClient#createFileWithResponse(String, long, FileHttpHeaders,", "NNUpdater": "Generates a code sample for using {@link DirectoryClient#createFileWithResponse(String, long, FileHTTPHeaders, Map, Context)}"}
{"Origin": "Construct StringDataSource from the underneath byte channel which is associated with the entity struct.", "Reference": "Construct StringDataSource from the underneath byte channel which is associated with the entity object.", "NNUpdater": "Wrap the byte channel associated with the given entity as the EntityBodyStream."}
{"Origin": "Tracked blobstore entries are rotated out of the stored map periodically.", "Reference": "Tracked topology entries are rotated out of the stored map periodically.", "NNUpdater": "Directory where rotated agent logs are stored."}
{"Origin": "See {@link #newDatabase(File, Config, GraphDatabaseFacadeFactory.Dependencies)} instead.", "Reference": "See {@link #newDatabase(File, Config, ExternalDependencies)} instead.", "NNUpdater": "Operation fails."}
{"Origin": "The refresh is only effective if the device is: offlinedoes not support GCM GCM registration failed", "Reference": "The refresh is only effective if the device is: offlinedoes not support FCM FCM registration failed", "NNUpdater": "The refresh is only effective if the device is: offlinedoes not support GCM GCM registration failed"}
{"Origin": "Does this search ONLY for DWR*Service classes and ignores Test classes.", "Reference": "Does this search ONLY for DWR*Service classes.", "NNUpdater": "Use the sorted index of all the classes and add all the classes to the content list."}
{"Origin": "Set this {@link AxisAngle4d} to be equivalent to the rotational component of the given {@link Matrix4x3f}.", "Reference": "Set this {@link AxisAngle4d} to be equivalent to the rotational component of the given {@link Matrix4x3fc}.", "NNUpdater": "Set this {@link AxisAngle4d} to be equivalent to the rotational component of the given {@link Matrix4fr}."}
{"Origin": "Start grid.", "Reference": "Start one grid instance.", "NNUpdater": "Returns true if the grid coordinates (gridY and gridX) are set on this element, i.e."}
{"Origin": "Expands {@code this} pattern with the given variable mapping.", "Reference": "Missing {@code variables} mapping are removed from the expanded tree.", "NNUpdater": "2014-09-09-Holiday"}
{"Origin": "Sets the value of the spinCount property.", "Reference": "Sets the value of the saltValue property.", "NNUpdater": "Sets the value of the bigint property."}
{"Origin": "Constuct a trace log event.", "Reference": "Constuct an informational log event.", "NNUpdater": "Always log an event."}
{"Origin": "Gets an action with empty request body sent.", "Reference": "Gets an action with empty request body and empty multipart config.", "NNUpdater": "Gets the displayAs."}
{"Origin": "The modules are located in the {@code ${test.classes}/modules} directory.", "Reference": "The modules are located on the test module path ({@code ${test.module.path}}).", "NNUpdater": "Register modules and objects using the {@link #bindings(groovy.lang.Closure)} method."}
{"Origin": "Gets the value of the 'publicPort' field.", "Reference": "Gets the value of the 'publicPorts' field.", "NNUpdater": "Gets the value of the 'paramName' field."}
{"Origin": "Computes a mapping from the {@link SystemStreamPartition} to {@link TaskName} using the provided {@param grouperContext}", "Reference": "Computes a mapping from the {@link SystemStreamPartition} to {@link TaskName} using the provided {@param grouperMetadata}", "NNUpdater": "Returns the {@link Route} of the {@link #service()}."}
{"Origin": "Set the driver classname.", "Reference": "Sets the driver classname.", "NNUpdater": "-W classifierstring"}
{"Origin": "For details see also {@link #getFieldOrAlias(String)}", "Reference": "For details see also {@link #getFieldOrAlias(Field)}", "NNUpdater": "See also {@link #getAllInterfacesAndAnnotations()}."}
{"Origin": "Gets the destination associated with this appender.", "Reference": "Gets the connection associated with this appender.", "NNUpdater": "Creates a Servlet Appender."}
{"Origin": "Get TU-UPC.", "Reference": "Get UPC.", "NNUpdater": "Get Auf LUs anwenden."}
{"Origin": "Returns an {@link Operator} to allow the query to be run once per parameter list in the source.", "Reference": "Returns an {@link Transformer} to allow the query to be run once per parameter list in the source.", "NNUpdater": "Returns Operator from query parameter operator notation."}
{"Origin": "Applies all included s to xmlSignatureInput and returns the result of these transformations.", "Reference": "Applies all included {@code Transform}s to xmlSignatureInput and returns the result of these transformations.", "NNUpdater": "Transforms the input, and generates {@link XMLSignatureInput} as output."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Returns the number of sync d l objects where companyId = ?", "Reference": "Returns the number of sync d l objects where repositoryId = ?", "NNUpdater": "Returns the number of feeds where userId = ?"}
{"Origin": "Add given object to the deque, prepending to head.", "Reference": "Prepend given object to the head.", "NNUpdater": "Returns the number of elements in this deque."}
{"Origin": "Bugsnag.onBreadcrumb(new OnBreadcrumb() { public boolean run(Breadcrumb breadcrumb) { return false; ignore the breadcrumb } })", "Reference": "Bugsnag.onBreadcrumb(new OnBreadcrumbCallback() { public boolean run(Breadcrumb breadcrumb) { return false; ignore the breadcrumb } })", "NNUpdater": "Bugsnag.beforeRecordBreadcrumb(new BeforeRecordBreadcrumb() { public boolean send(Breadcrumb breadcrumb) { return false; ignore the breadcrumb } })"}
{"Origin": "Computes the minimum for each pixel across all bands in the {@link Planar} image.", "Reference": "Computes the minimum for each pixel across selected bands in the {@link Planar} image.", "NNUpdater": "Computes the average for each pixel across all bands in the {@link Planar} image."}
{"Origin": "Sets the {@link IClassCache} for the given application.", "Reference": "Sets the {@link IGetAndSetLocator} for the given application.", "NNUpdater": "Uses the given application to find a {@link ConverterFactory} or, if application is null, uses the {@link Application#getCurrent()}."}
{"Origin": "Gets a path to an artifact with given version and groupId=org.apache.ignite and artifactId={@code artifactName}.", "Reference": "Gets a path to an artifact with given version and groupId=org.apache.ignite and artifactId={@code artifactId}.", "NNUpdater": "Gets a path to an artifact with given version and groupId=org.apache.ignite and artifactId={@code artifactName}."}
{"Origin": "Clean up after each test by resetting the Fuseki instance", "Reference": "Clean up after each test by resetting the data", "NNUpdater": "Clean the repository."}
{"Origin": "Reset starting address.", "Reference": "Reset head segment.", "NNUpdater": "Return the current starting address."}
{"Origin": "Returns whether PUT is supported for the given {@link ResourceMetadata}.", "Reference": "Returns whether PUT requests can be used to create new instances for the type backing the given {@link ResourceMetadata}.", "NNUpdater": "Checks whether fields indexing is enabled for objects of the given {@code cls}."}
{"Origin": "No guarantee of order for past timers is assumed when expired later.", "Reference": "No guarantee of order for expired timers is assumed when later polled.", "NNUpdater": "Returns true if the expired date of the current access token is within a week or less."}
{"Origin": "The same as {@link #indexReference(IndexDescriptor2)}, except no schema lock is taken.", "Reference": "The same as {@link #indexReference(IndexDescriptor)}, except no schema lock is taken.", "NNUpdater": "E.g setZIndex() becomes ``zIndex``."}
{"Origin": "Returns a {@link StartAtlasDbTransactionResponseV4} which has a single immutable ts, and a range of timestamps to be used as start timestamps.", "Reference": "Returns a {@link StartTransactionResponseV4} which has a single immutable ts, and a range of timestamps to be used as start timestamps.", "NNUpdater": "Sets an offset that will be added to the timestamps (and sub-sample timestamps) of samples subsequently written to the sample queues."}
{"Origin": "Corresponds to `hex.tree.drf.DrfMojoModel.score0()`", "Reference": "Corresponds to `hex.tree.gbm.GbmMojoModel.score0()`", "NNUpdater": "Operation fails."}
{"Origin": "Stores the {@link FCPPluginConnection} so in the future it can be obtained by its ID with {@link #getConnection(UUID)}.", "Reference": "Stores the {@link FCPPluginConnectionImpl} so in the future it can be obtained by its ID with {@link #getConnection(UUID)}.", "NNUpdater": "The client is not running within the node, it is attached by network with the given {@link FCPConnectionHandler} clientConnection."}
{"Origin": "Submits a bar notification for drawing.", "Reference": "Returns the notification manager instance.", "NNUpdater": "Returns the message delivery policy."}
{"Origin": "Getter for the Training Parameters of the Feature Selector.", "Reference": "Getter for the Training Parameters of the Feature Selectors.", "NNUpdater": "Getter for the Training Parameters of the Machine Learning modeler."}
{"Origin": "Receives all emails that matches given {@link EmailFilter filter}.", "Reference": "Receives all emails that matches given {@link EmailFilter}.", "NNUpdater": "Creates a new {@link Route.Filter} that delegate the execution to the given filter."}
{"Origin": "Returns a supplier that returns the current execution context associated with the given language.", "Reference": "Returns a reference that returns the current execution context associated with the given language.", "NNUpdater": "Returns the {@link ExecutionResult} that is associated with the given key."}
{"Origin": "Returns an enumeration of URL objects to all the resources with the given name on the class path of this class loader.", "Reference": "Returns an enumeration of URL objects to all the resources with the given name in modules defined to this class loader or on the class path of this loader.", "NNUpdater": "Returns an enumeration of URL objects to all the resources with the given name in modules defined to this class loader or on the class path of this loader."}
{"Origin": "Wind the wheel forward by setting the current tick of the wheel to examine on the next {@link #poll}.", "Reference": "Set the current tick of the wheel to examine on the next {@link #poll}.", "NNUpdater": "Finds a wheel in the cache."}
{"Origin": "Cross root, height(left) + height(right) 2.", "Reference": "If not, the diameter is the depth(left) + depth(right).", "NNUpdater": "This height is the sum of mCameraPreviewLayoutHeight + gallery height."}
{"Origin": "The array length access has been removed from the offset.", "Reference": "The sequence length access has been removed from the offset.", "NNUpdater": "Indicates that a MetaContactGroup has been removed from the MetaContact list."}
{"Origin": "Returns a reference to a chatRoom named roomName or null if that room does not exist.", "Reference": "Returns a reference to a chatRoom named roomName.", "NNUpdater": "Returns a reference to a chatRoom named roomName or null if that room does not exist."}
{"Origin": "Adds next request to {@link RequestType#BUNDLE_TRANSPORT_UPDATE} query.", "Reference": "Adds next request to {@link RequestType#CHANNEL_INFO_UPDATE} query.", "NNUpdater": "Adds both a new request ID and request log using {@link RequestId#bind()} and {@link RequestLog#log()} respectively."}
{"Origin": "Calling with null will terminate the PublishProcessor and a NullPointerException is signalled to the Subscribers.", "Reference": "Calling with a null value will terminate the PublishProcessor and a NullPointerException is signaled to the Subscribers.", "NNUpdater": "IllegalArgumentException."}
{"Origin": "Discards a Message from the not-Acked-List", "Reference": "Discards a Message from the not-Acked-List and returns the messageobject", "NNUpdater": "Discards samples from the write side of the queue."}
{"Origin": "Returns an immutable map containing zero mappings.", "Reference": "Returns an unmodifiable map containing zero mappings.", "NNUpdater": "Returns an immutable map of named bindings."}
{"Origin": "Close connection (blocking call).", "Reference": "Close connection.", "NNUpdater": "Closes this connection."}
{"Origin": "Create a new innovation.", "Reference": "Create a new neuron innovation.", "NNUpdater": "Create a transient instance."}
{"Origin": "Otherwise an empty {@link CachedResponse} will be added to the context, this will be used to cache the response once it has been received from the back-end service", "Reference": "Otherwise an empty {@link CachedResponse} will be added to the context, this will be used to cache the response once it has been received from the back-end API", "NNUpdater": "Note: it will only called once, the IResourceStream will be cached by"}
{"Origin": "This method will convert ballerina @Service to swaggers @Swagger object.", "Reference": "This method will convert ballerina @Service to openApi @OpenApi object.", "NNUpdater": "Generates {@link BallerinaPackageDoc} objects for each Ballerina package from the given ballerina files."}
{"Origin": "Get Nominalmenge in Preiseinheit.", "Reference": "Get Zu berechn.", "NNUpdater": "Get the primarybytesIn value."}
{"Origin": "Scheduler: {@code combineLatest} does not operate by default on a particular {@link Scheduler}.", "Reference": "Scheduler: {@code combineLatestArray} does not operate by default on a particular {@link Scheduler}.", "NNUpdater": "Scheduler: {@code combineLatestDelayError} does not operate by default on a particular {@link Scheduler}."}
{"Origin": "Converts array of to {@link EmailAddress}.", "Reference": "Converts array of {@link String} to {@link EmailAddress}.", "NNUpdater": "Delegates to {@link EmailStartingBuilder#replyingTo(Email)}."}
{"Origin": "Gets the deprecated keys, in the order to be checked.", "Reference": "Gets the fallback keys, in the order to be checked.", "NNUpdater": "Size of the environment."}
{"Origin": "If a mock can be assigned to a field, do it.", "Reference": "If a mock without field name can be assigned to a field, do it.", "NNUpdater": "If it has no fake, does nothing."}
{"Origin": "Each value will be separated on the command line by the host-specific path separator.", "Reference": "Each value will be separated on the command line by the ':' character, the option parser's", "NNUpdater": "Each level is separated by `>`."}
{"Origin": "Updates the Connection's line associated with the given action id to its new position.", "Reference": "Updates the wire associated with the given action id to its new position.", "NNUpdater": "Remove the connection associated with the given connectionId."}
{"Origin": "Creates a valid {@link WindowAggregate} operation.", "Reference": "Creates a valid {@link WindowAggregateTableOperation} operation.", "NNUpdater": "Get the current {@link AggregateLifecycle} instance for the current thread."}
{"Origin": "Expected to be used by the Poller to release resources on socket close, errors etc.", "Reference": "Expected to be used by the Endpoint to release resources on socket close, errors etc.", "NNUpdater": "Forcibly close the counter and release resources."}
{"Origin": "If the server ID matches the local server ID, it also updates myQuorumAddr and myElectionAddr.", "Reference": "If the server ID matches the local server ID, it also updates myAddrs.", "NNUpdater": "Otherwise return {@link Request#getRemoteAddr()}."}
{"Origin": "Returns a list of all application which have registered.", "Reference": "Returns a list of all instances of applications which have registered.", "NNUpdater": "Default registry for all registered application."}
{"Origin": "Sets useIndex parameter and returns trainer instance.", "Reference": "Set useIndex parameter and returns trainer instance.", "NNUpdater": "Generates a new instance of a Trainable by providing the Class of the algorithm."}
{"Origin": "Sets the class name local service.", "Reference": "Sets the journal article local service.", "NNUpdater": "Sets the document library file entry local service."}
{"Origin": "Get the content of this element.", "Reference": "Gets the value of the content property.", "NNUpdater": "Removes all child content from this parent."}
{"Origin": "or throws a {@link com.liferay.wsrp.NoSuchProducerException} if it could not be found.", "Reference": "or throws a {@link NoSuchProducerException} if it could not be found.", "NNUpdater": "Operation fails."}
{"Origin": "This method is always invoked after {@link #responseHeadersStart(Call)}.", "Reference": "This method is always invoked after {@link #responseHeadersStart}.", "NNUpdater": "Otherwise, {@link #call(Object)} is invoked."}
{"Origin": "Otherwise returns a {@code Success} containing the given {@code value}.", "Reference": "Otherwise returns a {@link Try.Success} containing the given {@code value}.", "NNUpdater": "Return the actual {@link Exception} thrown."}
{"Origin": "This only applies to classes configured by {@link #withVerboseClasses(String...) verboseClasses}.", "Reference": "This only applies to classes configured by {@link #setVerboseClasses(String...) verboseClasses}.", "NNUpdater": "Send a {@link android.util.Log#VERBOSE} log message."}
{"Origin": "Adds next payload type information update request to {@link RequestType#RTP_DESCRIPTION_UPDATE} query currently being built.", "Reference": "Adds next payload type information update request to {@link RequestType#CHANNEL_INFO_UPDATE} query currently being built.", "NNUpdater": "Returns an {@link UpdateSink} that adds all update operations into an internal {@link UpdateRequest} object."}
{"Origin": "Replace the class values of the instances from the current iteration with residuals ater predicting with the supplied classifier.", "Reference": "Replace the class values of the instances from the current iteration with residuals after predicting with the supplied classifier.", "NNUpdater": "Gets the current settings of the Loader."}
{"Origin": "Group: consumer", "Reference": "Group: producer", "NNUpdater": "Guide."}
{"Origin": "See Immutable Map Static Factory Methods for details.", "Reference": "See Unmodifiable Maps for details.", "NNUpdater": "VerificationTimes supports multiple static factory methods:"}
{"Origin": "Returns the builder for the settings used for calls to snapshotTable.", "Reference": "Returns the builder for the settings used for all RPCs.", "NNUpdater": "Returns a builder for the object."}
{"Origin": "Returns an immutable list containing nine elements.", "Reference": "Returns an unmodifiable list containing nine elements.", "NNUpdater": "The returned List is immutable."}
{"Origin": "Sets the selection model for this listing.", "Reference": "Sets the selection model for the grid.", "NNUpdater": "Sets the data items of this listing."}
{"Origin": "Iterating with two Progenius for a draw", "Reference": "Servant is in play Iterating with two Progenius for a draw", "NNUpdater": "Draw PNG image with build stats."}
{"Origin": "Refreshes the rendering of the specified file, or its parent, in the tree.", "Reference": "Refreshes the rendering of the specified file, and its parents, in the tree.", "NNUpdater": "Refreshes the filter view."}
{"Origin": "Gets the amount of local iterations.", "Reference": "Get the amount of local iterations.", "NNUpdater": "-I iterations"}
{"Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}", "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveFromRangeEnd }{@code >}}", "NNUpdater": "Create an instance of {@link JAXBElement }{@code <}{@link CTStrokeChild }{@code >}}"}
{"Origin": "When area is downloaded, geodatabases gets registered with the original service to support syncronization.", "Reference": "When an area is downloaded, geodatabases are registered with the original service to support syncronization.", "NNUpdater": "Gets a registered service by revision."}
{"Origin": "Called to invalidate the cache - clearing it so that subsequent calls to getService() or getContract() will trigger a new fetch from the ES store.", "Reference": "Called to invalidate the cache - clearing it so that subsequent calls to getApi() or getContract() will trigger a new fetch from the ES store.", "NNUpdater": "Subsequent calls to {@link CachedNodeImpl#getData()} for this node will return ."}
{"Origin": "I. e. index 0 of the new TimeSeries will be index startIndex of this TimeSeries.", "Reference": "I. e. index 0 of the new BaseBarSeries will be index startIndex of this BaseBarSeries.", "NNUpdater": "Returns the Entry object at the given xIndex."}
{"Origin": "ClosePullRequest leaves issue open if no rebase mode.", "Reference": "ClosePullRequest can leave issue open if no rebase mode.", "NNUpdater": "closeBlock : OPEN_ENDBLOCK helperName CLOSE { $$ = $2; } ;"}
{"Origin": "The {@link RsaKeyCreateOptions#getKeySize() keySize} can be optionally specified.", "Reference": "The {@link CreateRsaKeyOptions#getKeySize() keySize} can be optionally specified.", "NNUpdater": "The {@link RsaKeyCreateOptions#getKeySize() keySize} can be optionally specified."}
{"Origin": "removes the citation of the removed entry as it's not needed anymore", "Reference": "removes the citation of the removed entries as they are not needed anymore", "NNUpdater": "Removes a specific listener, which should not be notified about the model's events, anymore."}
{"Origin": "Unless backing array needs resizing, operates in O(1) time.", "Reference": "(enqueue to tail) Unless backing array needs resizing, operates in O(1) time.", "NNUpdater": "Return true iff changes would be lost unless the B+Tree is flushed to the backing store using {@link #write()}."}
{"Origin": "Construct a new MemberSummaryBuilder.", "Reference": "Construct a new MemberSummaryBuilder for an annotation type.", "NNUpdater": "Construct a new AnnotationTypeBuilder."}
{"Origin": "Unregisters all methods observing the given event from the provided context.", "Reference": "Unregister all methods observing the given event from the provided context.", "NNUpdater": "Unregisters all subscriber methods on a registered {@code object}."}
{"Origin": "Returns the current range of the segment.", "Reference": "Returns the segment length.", "NNUpdater": "Returns the name of the primary range key."}
{"Origin": "The {@link Secret} is required.", "Reference": "The {@link KeyVaultSecret} is required.", "NNUpdater": "The {@code secret} is required and its fields secret.name and secret.value cannot be null."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "The unicode provided has to be a unicode representation of the emoji that is supposed to be represented by the Reaction.", "Reference": "The unicode provided has to be a unicode representation of the emoji that is supposed to be used for the Reaction.", "NNUpdater": "This will set the ToUnicode object."}
{"Origin": "The value is ``put``, which means it is either replaced or added.", "Reference": "The value is ``put``.", "NNUpdater": "If the operation replaced any {@link Value.Mutable}s, this returns a collection of the replaced {@link Value.Immutable}s."}
{"Origin": "Process password file, auth and rela settings on the server description.", "Reference": "Process password file, auth and realm settings on the server description.", "NNUpdater": "auth client with rootPass and user name"}
{"Origin": "Stage where the actual wrapped method call occurs.", "Reference": "Final stage where the actual wrapped method call occurs.", "NNUpdater": "Marks the node as DEAD."}
{"Origin": "Conditions can be imported statically from {@link ExecutionEventConditions} and {@link TestExecutionResultConditions}.", "Reference": "Conditions can be imported statically from {@link EventConditions} and {@link TestExecutionResultConditions}.", "NNUpdater": "Evaluate all {@link ShouldTestBeExecutedCondition Conditions} registered for the supplied {@link ExtensionContext}."}
{"Origin": "Creates a new block blob, or updates the content of an existing block blob.", "Reference": "Creates a new block blob.", "NNUpdater": "Creates a new block blob, or updates the content of an existing block blob."}
{"Origin": "Check if an active user with the given email exits in database", "Reference": "Search for an active user with the given email exits in database", "NNUpdater": "Exit the application."}
{"Origin": "Basic test of ``requires public``: m1 requires m2, m2 requires public m3", "Reference": "Basic test of ``requires transitive``: m1 requires m2, m2 requires transitive m3", "NNUpdater": "Basic test of ``requires transitive``: m1 requires m2, m2 requires transitive m3"}
{"Origin": "Uses the IconicsImageView styleable tags to get the iconics data of menu items", "Reference": "Inflates an menu by resource id and uses the styleable tags to get the iconics data of menu items", "NNUpdater": "Set the background of the menu items to the given resource."}
{"Origin": "See Immutable Set Static Factory Methods for details.", "Reference": "See Unmodifiable Sets for details.", "NNUpdater": "VerificationTimes supports multiple static factory methods:"}
{"Origin": "Updates a single entry of the local entity map with the given {@code key} and {@code value}, and then broadcasts the update to all nodes in the cluster.", "Reference": "Updates a single entry of the local entity map with the given {@code key} and {@code value}, and broadcasts the operation to all nodes in the cluster.", "NNUpdater": "Adds a key-value entry to this hash."}
{"Origin": "Returns an immutable list containing six elements.", "Reference": "Returns an unmodifiable list containing six elements.", "NNUpdater": "The returned List is immutable."}
{"Origin": "Sets the output.", "Reference": "Set the output.", "NNUpdater": "Sets the output as simple sting."}
{"Origin": "Creates a {@link Behavior} that uses the given {@link WicketFunction function} to do something with a component's attribute.", "Reference": "Creates a {@link Behavior} that uses the given {@code SerializableFunction function} to do something with a component's attribute.", "NNUpdater": "Creates a {@link ParDo} {@link PTransform} that will invoke the given {@link DoFn} function."}
{"Origin": "The filter will be combined to existing filters using {@link AppendableFilterDataProvider#combineFilters(Object, java.util.Optional)}.", "Reference": "The filter will be combined to existing filters using {@link AppendableFilterDataProvider#combineFilters(Object, Object)}.", "NNUpdater": "Operation fails."}
{"Origin": "Start leader election.", "Reference": "Start participation in a leader election.", "NNUpdater": "Adds a leader election listener."}
{"Origin": "To obtain an ARN with Amazon SNS, you must create a topic in Amazon SNS and subscribe to the topic.", "Reference": "To obtain an ARN with Amazon SNS, you must create a topic in", "NNUpdater": "A target can be either an Amazon SQS queue or an Amazon SNS topic."}
{"Origin": "Code snippets for {@link BlobAsyncClient#setHTTPHeaders(BlobHttpHeaders)}", "Reference": "Code snippets for {@link BlobAsyncClient#setHttpHeaders(BlobHttpHeaders)}", "NNUpdater": "Code snippet for {@link AppendBlobAsyncClient#createWithResponse(BlobHTTPHeaders, Map, BlobAccessConditions)}"}
{"Origin": "Returns the formatted date and time of the signing date in UTC zone.", "Reference": "Returns the formatted date and time of the request signing date in UTC zone.", "NNUpdater": "Compares this date-time to another date-time based on the UTC equivalent date-times then offset."}
{"Origin": "The option is a: type.", "Reference": "The option will be converted to a type.", "NNUpdater": "Returns the {@link OptionsBase} class the defines the given option, null if the option isn't recognized."}
{"Origin": "This method blocks and waits until the provided index has been updated across the entire Titan cluster and reached a stable state.", "Reference": "This method blocks and waits until the provided index has been updated across the entire JanusGraph cluster and reached a stable state.", "NNUpdater": "Blocks connection until element available or {@literal timeout} reached."}
{"Origin": "Note: giving argument doesn't mean that a single block that uses that wrap can't be wrapped.", "Reference": "Note: giving {@code 'false'} argument doesn't mean that a single block that uses that wrap can't be wrapped.", "NNUpdater": "Note: the fact that the given value is of type Comparable doesn't mean that this value is of the same type as the one that's stored in the index, thus the conversion is needed."}
{"Origin": "Calculate Sum of all elements in a column, and return as a Vector", "Reference": "Calculate Sums of elements in a column, and return as a Vector.", "NNUpdater": "Sums elements of a SET sum{i | i in set} = SUM"}
{"Origin": "notifies the registered listeners that a user has been removed.", "Reference": "Notifies the registered listeners that a user has been removed.", "NNUpdater": "Notifies the listeners, that a tab has been removed from the model."}
{"Origin": "Converts an entity to a DBObject.", "Reference": "Converts an entity to a Document.", "NNUpdater": "Converts an object to a datastore Entity with the appropriate Key type."}
{"Origin": "Return the incoming binding sets associated with the optimized query plan (after running the optimizers).", "Reference": "Return the incoming binding sets associated with the optimized AST.", "NNUpdater": "Sets the state."}
{"Origin": "Try a SIGTERM once, then try again (twice) with SIGKILL.", "Reference": "Try a SIGINT first, then try again with SIGKILL.", "NNUpdater": "Equivalent to {@code transform(``transform``, func)}."}
{"Origin": "RelationshipType for the left or right label as indicated by the second parameter.", "Reference": "RelationshipType for the left or right type as indicated by the second parameter.", "NNUpdater": "Return as a {@link RelationType} if the {@link Concept} is a {@link RelationType}."}
{"Origin": "This is an overload of {@link #getUsers(int)} with {@code 100}.", "Reference": "This is an overload of {@link #retrieveUsers(int)} with {@code 100}.", "NNUpdater": "Overload of {@link #getClients(BleServerState)} that returns a {@link java.util.List} for you."}
{"Origin": "Sets the quorum name for operations.", "Reference": "Sets the split brain protection name for operations.", "NNUpdater": "Sets the cluster read quorum strategy."}
{"Origin": "Then build a list of version differences i.e difference between the version in the GossipDigest and the version in the local state for a given NetEndpoint.", "Reference": "Then build a list of version differences i.e difference between the version in the GossipDigest and the version in the local state for a given NetNode.", "NNUpdater": "Then build a list of version differences i.e difference between the version in the GossipDigest and the version in the local state for a given InetAddress."}
{"Origin": "Joins a collection into an entire row of comma separated values.", "Reference": "Joins a series into an entire row of comma separated values.", "NNUpdater": "Parameters of a method or function."}
{"Origin": "Returns the (biased) estimate of the sample variance of the values within a {@link Dataset}.", "Reference": "Returns the (unbiased) estimate of the sample standard deviation of the values within a {@link Dataset}.", "NNUpdater": "Return the naive variance (not taking sampling into account)"}
{"Origin": "Updates the classifier with the given instance.", "Reference": "Updates the classifier with information from one training instance.", "NNUpdater": "Test get classifiers."}
{"Origin": "The maximum number of statements that can remain idle in the pool, without extra ones being released, or negative for no limit.", "Reference": "Gets the maximum number of statements that can remain idle in the pool, without extra ones being released, or negative for no limit.", "NNUpdater": "The maximum time, in seconds, that an instance can remain in a or state."}
{"Origin": "Load balancing decision are based on this normalized {@link #getScore() score} (work is assigned to hosts in inverse proportion to the normalized load of the host).", "Reference": "Load balancing decision are based on this normalized {@link #getAvailability() score} (work is assigned to hosts in inverse proportion to the normalized load of the host).", "NNUpdater": "Calls through to {@link NormalizedCache#loadRecord(String, CacheHeaders)}."}
{"Origin": "Getter Parameter Value for isReconcileAutomatically", "Reference": "Getter Parameter Value for Reconcile Automatically", "NNUpdater": "Getter Parameter Value for D-U-N-S"}
{"Origin": "Set ``global`` CORS configuration based on URL patterns.", "Reference": "Set the ``global`` CORS configurations based on URL patterns.", "NNUpdater": "Adds an pattern to patterns."}
{"Origin": "Returns the primitive ID.", "Reference": "Returns the primitive name.", "NNUpdater": "Returns the primitives service."}
{"Origin": "Returns a {@link InferredRowCoder} with row type factory overridden by {@code rowTypeFactory}.", "Reference": "Returns a {@link InferredRowCoder} with row type factory overridden by {@code schemaFactory}.", "NNUpdater": "Returns a {@link Schema}."}
{"Origin": "Don't change anything in he tree of export.", "Reference": "Don't change anything in the tree of export.", "NNUpdater": "Set Kann exportieren."}
{"Origin": "Applies the {@link DefaultCamelBeanPostProcessor} to this instance.", "Reference": "Applies the {@link CamelBeanPostProcessor} to this instance.", "NNUpdater": "The convention used for a {@link CamelContext} ObjectName is: :context=,type=context,name="}
{"Origin": "{@codesnippet com.azure.data.applicationconfig.configurationclient.getSetting#string-string-OffsetDateTime}", "Reference": "{@codesnippet com.azure.data.applicationconfig.configurationclient.getConfigurationSetting#string-string-OffsetDateTime}", "NNUpdater": "{@codesnippet com.azure.data.applicationconfig.configurationclient.deleteSetting#string-string}"}
{"Origin": "API allowing to search for documents allowing to have multiple entries per language", "Reference": "API allowing to search for documents allowing to have multiple entries per locale", "NNUpdater": "Privileged API allowing to access the underlying main XWiki Object"}
{"Origin": "The level of logging required.", "Reference": "Gets the level of logging required.", "NNUpdater": "Sets the logging configuration for service requests"}
{"Origin": "Sets the statistic repository with the specified statistic repository.", "Reference": "Sets the option query service with the specified option query service.", "NNUpdater": "Returns this statistic's {@link StatisticCategory}."}
{"Origin": "or throws a {@link com.liferay.opensocial.NoSuchOAuthConsumerException} if it could not be found.", "Reference": "or throws a {@link NoSuchOAuthConsumerException} if it could not be found.", "NNUpdater": "Operation fails."}
{"Origin": "NOTE:This operation is eventually consistent.", "Reference": "This operation is eventually consistent.", "NNUpdater": "Sets the request action."}
{"Origin": "An instance of {@link ApplicableRegionSet} will always be returned, even if regions are disabled or region data failed to load.", "Reference": "An instance of {@link RegionResultSet} will always be returned, even if regions are disabled or region data failed to load.", "NNUpdater": "Returns the regions/devices that are ``peers`` to this region."}
{"Origin": "If the item is already collapsed, does nothing.", "Reference": "For items that are already collapsed, does nothing.", "NNUpdater": "A no-op if the directory already exists."}
{"Origin": "Returns the configured JavaScript head include resources.", "Reference": "Returns the schema configured JavaScript head include resources.", "NNUpdater": "Returns the configured JavaScript head include resources."}
{"Origin": "Takes a package and a relative path to a resource and returns an absolute path to the resource.", "Reference": "Takes a package and a path to a resource and returns an absolute path to the resource.", "NNUpdater": "Takes a Class and a relative path to a class and returns any class at that relative path."}
{"Origin": "Use reflection to discover and report on the bigdata build information.", "Reference": "Method used to discover and report on the bigdata build information.", "NNUpdater": "A {@link BigdataValueFactoryImpl}"}
{"Origin": "Returns a collection of model objects which are based on the given permissions and target user.", "Reference": "Returns a collection of model objects which are based on the given permissions and target entity.", "NNUpdater": "Managing User Permissions."}
{"Origin": "Called from {@link FritzAhaUpdateXmlCallback} to provide new values for things.", "Reference": "Called from {@link FritzAhaUpdateCallback} to provide new values for things.", "NNUpdater": "Calls {@link #authenticator(String, Client[])} with {@link #DEFAULT_AUTHENTICATOR_PATH}."}
{"Origin": "Gets the valueType.", "Reference": "Gets the type.", "NNUpdater": "Gets the fieldType."}
{"Origin": "Sets {@link View.OnClickListener} of the {@code CarMenuItem}.", "Reference": "Sets {@link OnClickListener} of the {@code CarMenuItem}.", "NNUpdater": "Operation fails."}
{"Origin": "Apply the XPath and assert the number of nodes found.", "Reference": "Apply the XPath and assert the number value found.", "NNUpdater": "Apply the JSON path and assert the resulting value."}
{"Origin": "Getting RawUpdatesHandler provider if set", "Reference": "Getting RawUpdatesHandler if set", "NNUpdater": "Getting Calls provider if set"}
{"Origin": "Release an allocated buffer.", "Reference": "Releases an allocated buffer.", "NNUpdater": "Gets the free count."}
{"Origin": "Prints out the pair of objects found in the file that is the first and only argument.", "Reference": "Prints out the pair of {@code Extractors} objects found in the file that is the first and only argument.", "NNUpdater": "Returns value of the node"}
{"Origin": "The KeyStore type (jks, jceks, pkcs12, etc) for the identity and trust store for connections created by this listener.", "Reference": "The KeyStore type (jks, jceks, pkcs12, etc) for the identity and trust store for connections of a particular type.", "NNUpdater": "Gets the key store path."}
{"Origin": "Checks whether the 'publicPort' field has been set", "Reference": "Checks whether the 'publicPorts' field has been set", "NNUpdater": "Checks whether the 'paramName' field has been set"}
{"Origin": "Find if there is an ``engine option`` (covers engine, compiler and instruments options) present among the given options.", "Reference": "Find if there is an ``engine option`` (covers engine and instruments options) present among the given options.", "NNUpdater": "Correlation Engine."}
{"Origin": "The option will be converted to a", "Reference": "The option will be converted to a type.", "NNUpdater": "A {@code null} source value will be converted to an empty List."}
{"Origin": "Set the Date that this Token was Created", "Reference": "Set the ZonedDateTime that this Token was Created", "NNUpdater": "The range_date_created."}
{"Origin": "Returns a basic {@link ValueSupplier} that serves the value passed in", "Reference": "Returns a basic {@link org.ehcache.ValueSupplier} that serves the value passed in", "NNUpdater": "Position."}
{"Origin": "Reads a {@link ServiceRequest} from information found in the inbound portion of the http request.", "Reference": "Reads a {@link ApiRequest} from information found in the inbound portion of the http request.", "NNUpdater": "Specify a {@link InboundRequestMapper} implementation to map from the inbound HTTP request to a Message."}
{"Origin": "Helper to parse the imported file into an {@link ImportedGradeWrapper} depending on its type", "Reference": "Helper to parse the imported file into an {@link ImportedSpreadsheetWrapper} depending on its type", "NNUpdater": "Set Importiert."}
{"Origin": "delete child from this node", "Reference": "Delete child from this node.", "NNUpdater": "Gets the index of the specified child in this node's child list."}
{"Origin": "Find all RootGlideModules and save them to an instance variable (throw if > 1).", "Reference": "Find all AppGlideModules and save them to an instance variable (throw if > 1).", "NNUpdater": "We find the metadata by meta names: - If cannot find any, then throw an exception."}
{"Origin": "Remove all identities which are not used by other services or components", "Reference": "Remove all identities which are related to the specified set of components and not used by other services or components", "NNUpdater": "Adds one or more identities to the policy under the role specified."}
{"Origin": "Returns true if at least one argument returns the empty sequence.", "Reference": "Returns the first expression that yields an empty sequence.", "NNUpdater": "Returns iff one of the files exists otherwise"}
{"Origin": "This method is called from {@link #copy()}.", "Reference": "This method is called from {@link #clone()}.", "NNUpdater": "(The method {@link Population#populationSort()} is called by this method.)"}
{"Origin": "These trytes can then be easily converted into the actual transaction object.", "Reference": "These trytes can then be converted into the actual transaction object.", "NNUpdater": "Returns the standard base time if it cannot be converted."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Queries {@code _mapping} definition to automatically detect all types for an index", "Reference": "Queries {@code _alias} definition to automatically detect all indices", "NNUpdater": "Gets the generator given an annotations definition."}
{"Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}", "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveToRangeEnd }{@code >}}", "NNUpdater": "Create an instance of {@link JAXBElement }{@code <}{@link CTStrokeChild }{@code >}}"}
{"Origin": "Setter for {@link #allowOnlyRequestedHeaders}", "Reference": "Setter for {@link #exposedHeaders}", "NNUpdater": "Specifies the headers that should be returned in the CORS {@code ``Access-Control-Allow-Headers``} response header."}
{"Origin": "This works if {@link #dbnodes} is set to true.", "Reference": "This works if {@link #data} is assigned.", "NNUpdater": "By default this is set to ``false``."}
{"Origin": "Returns true if field ttlAction is set (has been assigned a value) and false otherwise", "Reference": "Returns true if field ttlActionNotUsed is set (has been assigned a value) and false otherwise", "NNUpdater": "Returns true if field ttlAction is set (has been assigned a value) and false otherwise"}
{"Origin": "{@link Publication#isOriginal()} is true, then an {@link AeronException} will be thrown and the recording not initiated.", "Reference": "{@link Publication#isOriginal()} is true, then an {@link ArchiveException} will be thrown and the recording not initiated.", "NNUpdater": "{@link Publication#isOriginal()} is true, then an {@link AeronException} will be thrown and the recording not initiated."}
{"Origin": "Schedules a set media items action to be executed.", "Reference": "Schedules a new source preparation action to be executed.", "NNUpdater": "Prepares the {@code request} to be executed at some point in the future."}
{"Origin": "Start building a new factory class-based service binding.", "Reference": "Start building a new supplier class-based service binding.", "NNUpdater": "Start building a new DELETE query that deletes the provided names."}
{"Origin": "Send request for execution via {@link #cliIo}.", "Reference": "Send request for execution via corresponding singleIo from {@link #ios} or sticky singleIo.", "NNUpdater": "When the ``also`` command is run, it will receive all of the arguments passed to this method as {@link io.bootique.cli.Cli} instance."}
{"Origin": "Returns a session attribute.", "Reference": "Returns the value of a session attribute.", "NNUpdater": "Updates a session attribute."}
{"Origin": "Returns the list documents that have been processed or if no documents were present.", "Reference": "Returns the list documents that have been processed or an empty list if no documents were present.", "NNUpdater": "Get the count of documents in collection that would match a criteria."}
{"Origin": "See {@link #setPadding(int, int, int, int)}", "Reference": "See {@link #setPadding(float, float, float, float)}", "NNUpdater": "See {@link #logLikelihoodRatio(long, long, long, long)}."}
{"Origin": "Caching of path expression results (GH-1197).", "Reference": "Caching of path expression results.", "NNUpdater": "To create a repository in an organization, see {@link GHOrganization#createRepository(String, String, String, GHTeam, boolean)}"}
{"Origin": "Returns an Intent to view the details of the group identified by the given URI.", "Reference": "Returns true the URI is a group URI.", "NNUpdater": "This removes the attribute with the given name and within the given namespace URI."}
{"Origin": "See also the {@link #setThreshold(Level) threshold} emthod.", "Reference": "See also the {@link #setThreshold(Level) threshold} method.", "NNUpdater": "Set the bias array."}
{"Origin": "Returns current socket timeout limit (milliseconds), default is 10000 (10sec)", "Reference": "Returns current socket timeout limit (milliseconds).", "NNUpdater": "Sets the timeout of a socket write attempt in milliseconds."}
{"Origin": "This is either a colon ``:`` followed by the channel number, or the empty string.", "Reference": "This is either a colon ``:`` followed by the channel number, or the empty string for a configuration channel.", "NNUpdater": "Returns either the passed in as a String, or, if the is , an empty String (````)."}
{"Origin": "Gets the batch size.", "Reference": "Get the batch size.", "NNUpdater": "Returns the packet size."}
{"Origin": "Compares the relative fitness of two sets of parameter types in terms of matching a third set of runtime parameter types, such that a list ordered by the results of the comparison would return the best match first (least).", "Reference": "Compares the relative fitness of two Executables in terms of how well they match a set of runtime parameter types, such that a list ordered by the results of the comparison would return the best match first (least).", "NNUpdater": "Compares the relative fitness of two sets of parameter types in terms of matching a third set of runtime parameter types, such that a list ordered by the results of the comparison would return the best match first (least)."}
{"Origin": "The option will be converted to a type.", "Reference": "The option will be converted to a", "NNUpdater": "Later, the collection will be converted into the target type."}
{"Origin": "Informs main activity and other listeners like tasker whether logging has started/stopped", "Reference": "Informs main activity and broadcast listeners whether logging has started/stopped", "NNUpdater": "Adds a thing and informs all listeners."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Creates a DBObject from this Point", "Reference": "Creates a Document from this Point", "NNUpdater": "Creates a new DB instance from a DB snapshot."}
{"Origin": "The attribute values of annotations must be primitive or String constants.", "Reference": "The attribute values of annotations must be primitive, String or Enum constants.", "NNUpdater": "Returns the value of the Append option."}
{"Origin": "Compares if the given md5 matches another md5 hash.", "Reference": "Compares if the given hash matches another hash.", "NNUpdater": "Compares if the file md5 matches a given md5 hash"}
{"Origin": "OR o onto v inplace, i.e.", "Reference": "OR o onto v in-place, i.e.", "NNUpdater": "Serialize a node or leaf."}
{"Origin": "Get the certificate store of all processed certificates until now.", "Reference": "Get the map of all processed certificates until now.", "NNUpdater": "Get Verarbeitet."}
{"Origin": "Attaches {@link ImageObserver} to the load icon of this node.", "Reference": "Attaches {@link ImageObserver} to the load icon of this {@link AsyncUniqueNode}.", "NNUpdater": "Returns SVG image resource."}
{"Origin": "This method tries to process all the available Genbank records in the File or InputStream, closes the underlying resource, and return the results in {@link LinkedHashMap}.", "Reference": "This method will return all the available Genbank records in the File or InputStream, closes the underlying resource, and return the results in {@link LinkedHashMap}.", "NNUpdater": "Alias for {@link LinkedHashMap#of(K, V, K, V)}"}
{"Origin": "Determines whether or not a value is of slavo-germanic orgin.", "Reference": "Determines whether or not a value is of slavo-germanic origin.", "NNUpdater": "Determines whether the provided key is a hidden key or not."}
{"Origin": "Map module name to the new name.", "Reference": "Maps a module name to its new name.", "NNUpdater": "The map key is the entry name, typically the module name."}
{"Origin": "Sets the values for the ModuleTarget attribute.", "Reference": "Sets the value for the ModuleTarget attribute.", "NNUpdater": "Updates this module to read the source module."}
{"Origin": "Makes the given module visitor visit this open declaration.", "Reference": "Makes the given module visitor visit this opened package.", "NNUpdater": "Makes the given visitor visit the Java class of this Class Reader."}
{"Origin": "New attribute statement.", "Reference": "New attribute statement attribute statement.", "NNUpdater": "Add statement."}
{"Origin": "Encode a PiActionGroupMember to a ActionProfileMember.", "Reference": "Encode a PiActionProfileMember to a ActionProfileMember.", "NNUpdater": "Returns a member by ID."}
{"Origin": "Map a json string to a javabean.", "Reference": "Serialize a json string into a javabean object.", "NNUpdater": "Javabean tester summary."}
{"Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}", "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveFromRangeEnd }{@code >}}", "NNUpdater": "Create an instance of {@link JAXBElement }{@code <}{@link CTStrokeChild }{@code >}}"}
{"Origin": "Initialize the SSL Context, factory and verifier.", "Reference": "Initialize the SSL Context and factory.", "NNUpdater": "Returns the hostname verifier by looking up the ``hostnameVerifier`` attribute of the client's context."}
{"Origin": "Decodes a byte array where each byte represents an ascii '0' or '1'.", "Reference": "Decodes a byte array where each byte represents an ASCII '0' or '1'.", "NNUpdater": "Converts a byte array into a {@link ByteString}."}
{"Origin": "Create single chunk on the already existing empty frame.", "Reference": "Create chunks on the h2o backend.", "NNUpdater": "Returns the single instance of Nil."}
{"Origin": "Create a {@link SNSNotificationsPublisher} unless one exists in the context already.", "Reference": "Create a {@link JobStateChangeSNSPublisher} unless one exists in the context already.", "NNUpdater": "This takes the place of a {@link Streams#bindExec(Publisher)} call."}
{"Origin": "Delivers the exception to all registered child channels, and prohibits new streams being created on this connection.", "Reference": "Close all registered child channels, and prohibit new streams from being created on this connection.", "NNUpdater": "Delivers the content"}
{"Origin": "So, if the given {@link Quaterniond} is the identity (does not apply any additional rotation), the reflection plane will be z=0, offset by the given .", "Reference": "So, if the given {@link Quaterniondc} is the identity (does not apply any additional rotation), the reflection plane will be z=0, offset by the given .", "NNUpdater": "So, if the given {@link Quaternionf} is the identity (does not apply any additional rotation), the reflection plane will be z=0, offset by the given ."}
{"Origin": "Invoke Builder.requires(Requires[])", "Reference": "Builder.requires(Requires[])", "NNUpdater": "Basic test of ``requires transitive``: m1 requires m2, m2 requires transitive m3"}
{"Origin": "***** Property SXAPP *****", "Reference": "***** Property SXAPPSTORE *****", "NNUpdater": "Operation fails."}
{"Origin": "Register an input stream, using the PCollection id as the config id.", "Reference": "Register an input stream with certain config id.", "NNUpdater": "Set the input as a stream"}
{"Origin": "Get attribute value.", "Reference": "Get property value.", "NNUpdater": "Get Merkmal."}
{"Origin": "Creates a ModuleReference to a module packaged as a modular JAR.", "Reference": "Creates a ModuleReference to a possibly-patched module in a modular JAR.", "NNUpdater": "Returns a {@code ModuleReference} to a module in modular JAR file on the file system."}
{"Origin": "Adds next ICE transport update request to {@link RequestType#TRANSPORT_UPDATE} query currently being built.", "Reference": "Adds next ICE transport update request to {@link RequestType#CHANNEL_INFO_UPDATE} query currently being built.", "NNUpdater": "Returns an {@link UpdateSink} that adds all update operations into an internal {@link UpdateRequest} object."}
{"Origin": "If we failed on either stream in or out, reply fail to coordinator", "Reference": "If we failed on either stream in or out, respond fail to coordinator", "NNUpdater": "Set reply-to address"}
{"Origin": "Finds a declaration with the given name that is in scope at the current location.", "Reference": "Finds a variable declaration with the given name that is in scope at the current location.", "NNUpdater": "Check if an element is a declaration of ``main``."}
{"Origin": "If the original rendering contains spaces, the returned value is the original rendering enclosed in single quotes.", "Reference": "Manchester syntax parser then the returned value is the original rendering enclosed in single quotes.", "NNUpdater": "Sets the value of the renderMapping property."}
{"Origin": "Adds a WarningMessage to the message set.", "Reference": "Adds a warning to the message set.", "NNUpdater": "Set Meldung."}
{"Origin": "Used to store a few UI related settings for the current session only.", "Reference": "Used to store a few UI related settings in the PreferencesService (serialized to db)", "NNUpdater": "Returns a channel provider."}
{"Origin": "Comma separated list of servers to start when starting tests", "Reference": "Comma separated list of servers to serverList when starting tests", "NNUpdater": "Parameters of a method or function."}
{"Origin": "Get the content of this element.", "Reference": "Gets the value of the content property.", "NNUpdater": "Removes all child content from this parent."}
{"Origin": "First, the first record is always recorded.", "Reference": "The current record is always recorded.", "NNUpdater": "Return the new value."}
{"Origin": "choosing return type is based on existence of @class field in JSON", "Reference": "choosing return type is based on existence of @class and @type field in JSON", "NNUpdater": "Creates a field based on the given data type."}
{"Origin": "Convert a UTC datetime in millis to an encoded date in the default timezone.", "Reference": "Convert a local datetime in millis to an encoded date.", "NNUpdater": "Parses the given string into a Date (SQL DATE type) using UTC as a default timezone."}
{"Origin": "Sets the paramConsolescript.", "Reference": "Sets the web server script parameter.", "NNUpdater": "Get the param value."}
{"Origin": "Returns the indexes of the rows to be read/built.", "Reference": "Returns the indexes of the rows to be read/built if the related data is available.", "NNUpdater": "Returns the value at the given indexes as a double"}
{"Origin": "Datascience is always available as long as there is a valid license", "Reference": "Analytics is always available as long as there is a valid license", "NNUpdater": "This is a valid formatting: URL"}
{"Origin": "Provide a lazy {@link LaunchJobService} bean if one hasn't already been defined.", "Reference": "Provide a lazy {@link JobProcessManager} bean if one hasn't already been defined.", "NNUpdater": "Provide a lazy {@link LoggingListener} bean."}
{"Origin": "Tests intersecting a non-empty list with an subset of iteself.", "Reference": "Tests intersecting a non-empty list with an subset of itself.", "NNUpdater": "Constructs a non empty list from the given elements."}
{"Origin": "Reads {@link AnnotationData annotation data} on provided accessible object.", "Reference": "Reads {@link AnnotationData annotation data} on provided annotated element.", "NNUpdater": "annotation* SEMICOLON"}
{"Origin": "Returns the built-in service account's credential for the application if running on", "Reference": "This is the built-in service account if running on Google", "NNUpdater": "Creates a credential object for the Bigquery client using application default credentials."}
{"Origin": "Sets the units of this drug order", "Reference": "Sets the dose units of this drug order", "NNUpdater": "Most units are related to other units."}
{"Origin": "Generates a valid document ID for a service referenced by a contract, used to retrieve the service from ES.", "Reference": "Generates a valid document ID for a api referenced by a contract, used to retrieve the api from ES.", "NNUpdater": "Store the subItem."}
{"Origin": "Determines whether a character is upper case according to {@linkplain Character#isUpperCase(char) Java's definition}.", "Reference": "Determines whether a BMP character is upper case according to {@linkplain Character#isUpperCase(char) Java's definition}.", "NNUpdater": "Converts char to lower case {@link Character#toLowerCase(int)}."}
{"Origin": "Tests that when an etag is passed to delete it will only delete if the current representation of the setting has the etag.", "Reference": "Tests that when an ETag is passed to delete it will only delete if the current representation of the setting has the ETag.", "NNUpdater": "If {@link ConfigurationSetting#getETag() etag} is specified, the configuration value is updated if the current setting's etag matches."}
{"Origin": "returns the object with the given ID from the pool", "Reference": "Returns the object with the given ID from the pool.", "NNUpdater": "Returns the child with the given inode id."}
{"Origin": "The {@code onErrorResumeNext} method changes this behavior.", "Reference": "The {@code onErrorResumeWith} method changes this behavior.", "NNUpdater": "Must be the first call in {@link Activity#onResume()} method, even before super.onResume call."}
{"Origin": "Log rule execution statistics.", "Reference": "Log rule execution statistics @ INFO.", "NNUpdater": "Returns the execution log of the given the node."}
{"Origin": "Returns the specified session attribute of a session.", "Reference": "Returns the value of a session attribute.", "NNUpdater": "Updates a session attribute."}
{"Origin": "Checks whether the openstack node contains the given physical interface.", "Reference": "Checks whether the openstack node contains the given patch port.", "NNUpdater": "Returns the router bridge device ID."}
{"Origin": "Checks if the given key is present in the modifiedProperties of this queue.", "Reference": "Checks if the given key is present for the given graph object in the modifiedProperties of this queue.", "NNUpdater": "Returns true if the given KeyValue row is a queue entry of the given queue based on queue row prefix"}
{"Origin": "Does this time interval contain the specified time interval completely.", "Reference": "Does this time interval contain or equal the specified time interval.", "NNUpdater": "Test get interval time0."}
{"Origin": "Sets the {@link SharedKeyCredential} used to authorize requests sent to the service.", "Reference": "Sets the {@link StorageSharedKeyCredential} used to authorize requests sent to the service.", "NNUpdater": "Sets the SAS token used to authorize requests sent to the service"}
{"Origin": "Obtains the type from a unique name.", "Reference": "Obtains an instance from the specified name.", "NNUpdater": "Obtains the type from a unique name."}
{"Origin": "When the byte array is converted to a string, the UTF-8 is used.", "Reference": "When the byte array is converted to a string, UTF-8 is used.", "NNUpdater": "The default value for regular Resources is ``UTF-8``."}
{"Origin": "This can be trained with {@link ClauseSplitter#train(Stream, Featurizer, TrainingOptions, Optional, Optional)}.", "Reference": "This can be trained with {@link ClauseSplitter#train(Stream, Optional, Optional, Featurizer)}.", "NNUpdater": "Required."}
{"Origin": "This is necessary as the custom parameters must be applied in a certain order, and we can't assume that the consumer of this API will add them in the right order.", "Reference": "Builder is necessary here as the custom parameters must be applied in a certain order, and we can't assume that the consumer of this API will add them in the right order.", "NNUpdater": "Add an order to an order book."}
{"Origin": "return the DataFlavors for this", "Reference": "Return the DataFlavors for this", "NNUpdater": "Return the DataFlavors for this ."}
{"Origin": "Create a new reader with the new type {@code B}.", "Reference": "Create a new reader for the new mapped type {@code B}.", "NNUpdater": "Create a new item, with a new internal ID."}
{"Origin": "Invoke Builder.provides(Provides[] provides)", "Reference": "Builder.provides(Provides[] provides)", "NNUpdater": "Provides a {@link RequestMappingKey} for the given method."}
{"Origin": "The aspectRatio method is called", "Reference": "The size method is called", "NNUpdater": "Computes average aspect ratio of a rectangle list."}
{"Origin": "This can be trained with {@link ClauseSplitter#train(Stream, Featurizer, TrainingOptions, Optional, Optional)}.", "Reference": "This can be trained with {@link ClauseSplitter#train(Stream, Optional, Optional, Featurizer)}.", "NNUpdater": "Required."}
{"Origin": "Get UPC/EAN.", "Reference": "Get CU-UPC.", "NNUpdater": "Equivalent to uriInfo.getPathParameters().getFirst(name)"}
{"Origin": "set Parser state to {@link XmlState}.", "Reference": "set Parser state to {@link ProcessingInstructionEncounteredState}.", "NNUpdater": "This method delegates to {@link #fast(VectorEntry.State)} with state {@link VectorEntry.State#SET}."}
{"Origin": "Throw an {@link IllegalArgumentException} if the request is null or negative.", "Reference": "Log an {@link IllegalArgumentException} if the request is null or negative.", "NNUpdater": "If not, throw an SketchesArgumentException."}
{"Origin": "Adds a state (as a vertix) to the State-Flow Graph if not already present.", "Reference": "Adds a state (as a vertex) to the State-Flow Graph if not already present.", "NNUpdater": "Sets the state if the current state {@code .equals()} the specified expected state."}
{"Origin": "Whether the calendar should be infinite or limited to a number of days.", "Reference": "Whether the calendar should be infinite (default) or limited to a number of days.", "NNUpdater": "Interval expression (INTERVAL '1' DAY i.e)"}
{"Origin": "Check if the type is a generated function, i.e.", "Reference": "Checks if the type is a generated function, i.e.", "NNUpdater": "function."}
{"Origin": "If a full restart recovery is currently pending, this recovery is included in the count.", "Reference": "If a recovery is currently pending, this recovery is included in the count.", "NNUpdater": "This is used to make sure no existing shard will recover from this index using ops based recovery."}
{"Origin": "Namespace is not considered in this opperations.", "Reference": "Namespace is not considered in this operations.", "NNUpdater": "Returns the namespace URI reference for the specified prefix and node, or 0 if namespace cannot be found."}
{"Origin": "The supported fields are Year, DayOfYear and MillisOfDay.", "Reference": "The supported fields are Year, MonthOfDay, DayOfMonth and MillisOfDay.", "NNUpdater": "Returns day of year for the year and month."}
{"Origin": "Add validation for a particular signature", "Reference": "Add verification for a particular signature", "NNUpdater": "Get short description."}
{"Origin": "Store the result of the current assignment statement in the given scope.", "Reference": "Stores the result of an current assignment expression in the given scope.", "NNUpdater": "Add to this quaternion and store the result in ."}
{"Origin": "Get the value of password.", "Reference": "Gets the value of password.", "NNUpdater": "Get the access token."}
{"Origin": "**See also:** * [Working with grammars](URL) * [Add grammars to the custom language model](URL).", "Reference": "**See also:** * [Understanding grammars](URL) * [Add a grammar to the custom language model](URL).", "NNUpdater": "Operation fails."}
{"Origin": "Returns a number that encodes how contents of the arrangement are aligned vertically.", "Reference": "Returns a number that encodes how contents of the %type% are aligned vertically.", "NNUpdater": "Produce a string from a Number."}
{"Origin": "This delegates to {@link #execute(CommandSender, String, String[], CommandMessages)}.", "Reference": "This delegates to {@link #execute(CommandSender, String, String[], ResourceBundle,", "NNUpdater": "Operation fails."}
{"Origin": "Since this may read it's inputs more than once this method does all the opening and checking of the inputs.", "Reference": "Since this may read its inputs more than once this method does all the opening and checking of the inputs.", "NNUpdater": "Run the List.Output> getInputs() method test."}
{"Origin": "Get offset segment.", "Reference": "Get offset parameter index.", "NNUpdater": "After this method returns, the operation will have its TargetSegmentOffset set to the length of the Target Segment."}
{"Origin": "What happens when you put an object in an Entity?", "Reference": "What happens when you put a single null in a collection in an Entity?", "NNUpdater": "What happens if the batch is ready to flush?"}
{"Origin": "Returns the Java types corresponding to the argument types of the given method descriptor.", "Reference": "Returns the {@link Type} values corresponding to the argument types of the given method descriptor.", "NNUpdater": "Returns the {@link Type} values corresponding to the argument types of the given method descriptor."}
{"Origin": "The output fraction will have the minimum width necessary between the minimum and maximum widths - trailing zeroes are omitted.", "Reference": "The printed fraction will have the minimum width necessary between the minimum and maximum widths - trailing zeroes are omitted.", "NNUpdater": "Calculates the minimum, maximum, granularity and range values of the YAxis with the given minimum and maximum values from the chart data."}
{"Origin": "WorkflowExecutionSignaled event is recorded in the history of the current open workflow with the matching workflowId in the domain.", "Reference": "If a runId is not specified, then the event is recorded in the history of the current open workflow with the matching workflowId in the domain.", "NNUpdater": "Get gets the reference to workflow version."}
{"Origin": "Determines if an DRACOON account is automatically created for a new user who successfully logs on with his / her AD account.", "Reference": "Determines if a DRACOON account is automatically created for a new user who successfully logs on with his / her AD / IDP account.", "NNUpdater": "The target is an authorized {@link Facebook} instance if the current user has connected his or her account with a Facebook account."}
{"Origin": "Creates external docs swagger definition.", "Reference": "Creates external docs openApi definition.", "NNUpdater": "Set External Line ID."}
{"Origin": "If no filter is specified, a default of ``(objectClass=*)`` is returned.", "Reference": "If no filter is specified, a default of ``(objectClass=user)`` is returned.", "NNUpdater": "If there is no such header or the header is not a formatted date, the {@code defaultValue} is returned."}
{"Origin": "Creates a temporary snapshot directory for the given path.", "Reference": "Creates a local temporary snapshot directory for the given path.", "NNUpdater": "Constructs a temporary file resource given the temporary directory and a filename."}
{"Origin": "Returns the {@link ResolvedJavaMethod} for the vmtarget of a java.lang.invoke.MemberName.", "Reference": "Returns the {@link ResolvedJavaMethod} for the method of a java.lang.invoke.MemberName.", "NNUpdater": "Convenience method for {@link #methodType(java.lang.Class, java.lang.Class[]) methodType}."}
{"Origin": "Computes the average for each pixel across all bands in the {@link Planar} image.", "Reference": "Computes the average for each pixel across selected bands in the {@link Planar} image.", "NNUpdater": "Computes the average for each pixel across all bands in the {@link Planar} image."}
{"Origin": "Returns the number of open flows on this connection, if the connection has been established.", "Reference": "Returns the number of open flows on this connection.", "NNUpdater": "Checks if the connection to the office server has been established."}
{"Origin": "Runs bean level validators on the bean after saving.", "Reference": "Runs bean level validators on the bean after writing.", "NNUpdater": "Adds the bean after the given item id."}
{"Origin": "Use this method if you don't have the source root but a LSDocument instance for a document in the project.", "Reference": "Use this method if you don't have the source root but a LSDocument instance for a lsDocument in the project.", "NNUpdater": "Returns the source."}
{"Origin": "Commits and closes the transaction without returning CommitLog", "Reference": "Commits and closes the transaction", "NNUpdater": "Commits the transaction."}
{"Origin": "Returns a {@link TrackedDevicePose} view of the {@code standingTrackedDevicePose} field.", "Reference": "Returns a {@link TrackedDevicePose} view of the {@code trackedDevicePose} field.", "NNUpdater": "Which is why {@link SquareImage_to_FiducialDetector} is returned instead of the more generic {@link FiducialDetector}."}
{"Origin": "Encode a PiActionGroupMember to a ActionProfileMember.", "Reference": "Encode a PiActionProfileMember to a ActionProfileMember.", "NNUpdater": "Returns a member by ID."}
{"Origin": "If the list is empty no prefiltering can be done.", "Reference": "If the list is empty no partition can match.", "NNUpdater": "If no user, no action is done"}
{"Origin": "or throws a {@link com.liferay.calendar.NoSuchBookingException} if it could not be found.", "Reference": "or throws a {@link NoSuchBookingException} if it could not be found.", "NNUpdater": "Operation fails."}
{"Origin": "Falls back on the attribute if the groups are the same size.", "Reference": "Falls back on the group key if the groups are the same size.", "NNUpdater": "Guide."}
{"Origin": "Create an initial optimistic locking value according the {@link VersionType} contract for the version property.", "Reference": "Create an initial optimistic locking value according the {@link VersionSupport} contract for the version property.", "NNUpdater": "Create an initial optimistic locking value according the {@link VersionType} contract for the version property."}
{"Origin": "Returns a copy of this ZonedDateTime changing the zone offset to the later of the two valid offsets at a local time-line overlap.", "Reference": "Returns a copy of this date-time changing the zone offset to the later of the two valid offsets at a local time-line overlap.", "NNUpdater": "Returns a copy of this OffsetDateTime with a different zone offset using the same local date-time."}
{"Origin": "Register one or more annotated classes to be processed.", "Reference": "Register one or more component classes to be processed.", "NNUpdater": "Acknowledge one or more records as processed."}
{"Origin": "Returns a range of all the sync d l objects where companyId = ?", "Reference": "Returns a range of all the sync d l objects where modifiedTime > ?", "NNUpdater": "Finds a range of all the articles where groupId = ?"}
{"Origin": "Get the value of the {@code accessible} flag for this object.", "Reference": "Get the value of the {@code accessible} flag for this reflected object.", "NNUpdater": "Get the error value."}
{"Origin": "Rotate this vector the specified radians about the given rotation axis.", "Reference": "Rotate this vector the specified radians around the given rotation axis.", "NNUpdater": "Apply a rotation to quaternion rotating the given radians about the specified axis."}
{"Origin": "Get a {@link DirectExecutionContext} for the provided {@link PTransformNode} and key.", "Reference": "Get a {@link DirectStateAndTimers} for the provided {@link PTransformNode} and key.", "NNUpdater": "Get a {@link DirectExecutionContext} for the provided {@link PTransformNode} and key."}
{"Origin": "Creates a {@link Service} which handles SAML messages.", "Reference": "Creates an {@link HttpService} which handles SAML messages.", "NNUpdater": "Converts an {@link AggregatedHttpRequest} which is received from the remote entity to a {@link SAMLObject}."}
{"Origin": "Return an empty list for no children, and return {@code null} for the error.", "Reference": "Return an empty list for no children rather than using result code for error.", "NNUpdater": "If the given {@code Iterable} is empty or {@code null}, this method will return an empty {@code List}."}
{"Origin": "Sets the alternateIntents.", "Reference": "Set the alternateIntents.", "NNUpdater": "Adds an intent to intents."}
{"Origin": "This maps either the security ID or the legal entity ID to a group.", "Reference": "This maps the legal entity ID to a group.", "NNUpdater": "- The ID of the security group for the instance."}
{"Origin": "Is grand type supported service.", "Reference": "Is grant type supported service.", "NNUpdater": "Checks if the element has a grand parent."}
{"Origin": "Build the extern package list from given URL or the directory path, as specified with the ``-linkoffline`` flag.", "Reference": "Build the extern element list from given URL or the directory path, as specified with the ``-linkoffline`` flag.", "NNUpdater": "Get the FindBugs home directory."}
{"Origin": "Sets the userId.", "Reference": "Set the userId.", "NNUpdater": "Sets the user id of this resource."}
{"Origin": "Removes the specified keys from the metadata of the specified {@link NamespacedEntityId}.", "Reference": "Removes the specified keys from the metadata of the specified {@link MetadataEntity}.", "NNUpdater": "Removes the specified keys from the metadata of the specified {@link NamespacedEntityId}."}
{"Origin": "After the {@link InstanceManager} is created, we specifically do not call any more methods on it: the locator must instantiate the Immediate service without any further prompting to the locator.", "Reference": "After the {@link InjectionManager} is created, we specifically do not call any more methods on it: the locator must instantiate the Immediate service without any further prompting to the locator.", "NNUpdater": "Set Lagerort."}
{"Origin": "Refreshes the JList with the log records contained by {@link DebugConsoleHandler}.", "Reference": "Refreshes the JList with the log records contained by {@link DebugConsoleAppender}.", "NNUpdater": "Send a {@link android.util.Log#DEBUG} log message."}
{"Origin": "Here it checks whether the Sample took to long to be considered successful.", "Reference": "Here it checks whether the Sample data is XML.", "NNUpdater": "Here it checks the Sample responseData length."}
{"Origin": "The calibration is defined using {@link CurveGroupDefinition}.", "Reference": "The calibration is defined using {@link RatesCurveGroupDefinition}.", "NNUpdater": "This stores the calibration information in the additional information map using the key {@link CurveInfoType#JACOBIAN}."}
{"Origin": "Returns the descriptor corresponding to the given Java type.", "Reference": "Returns the descriptor corresponding to the given class.", "NNUpdater": "Returns the descriptor corresponding to the given class."}
{"Origin": "Gets the count of P2SH Sig Ops in the Script scriptSig scaled by WITNESS_SCALE_FACTOR", "Reference": "Gets the count of P2SH Sig Ops in the Script scriptSig", "NNUpdater": "Get the {@link Script} from the script bytes or null if it doesn't parse."}
{"Origin": "Checks whether this connection has a ongoing handshake initiated receiving the provided client hello.", "Reference": "Checks whether this connection is started for the provided CLIENT_HELLO.", "NNUpdater": "Checks whether this connection has a ongoing handshake initiated receiving the provided client hello."}
{"Origin": "Code snippets for {@link DataLakePathAsyncClient#setAccessControl(PathAccessControl)}", "Reference": "Code snippets for {@link DataLakePathAsyncClient#setAccessControlList(List, String, String)}", "NNUpdater": "Return the value of the {@code Access-Control-Request-Method} request header."}
{"Origin": "Determines whether a character is a digit according to {@linkplain Character#isDigit(char)", "Reference": "Determines whether a character is a BMP digit according to {@linkplain Character#isDigit(char)", "NNUpdater": "Parses a decimal-digit-pattern."}
{"Origin": "Returns the name that identifies this service for the config-sentinel.", "Reference": "Returns the name that identifies this service for the config-sentinel, never null", "NNUpdater": "Pickup the first available sentinel, if all sentinel down, return false."}
{"Origin": "Calculate the log10 likelihoods of the ref/alt het genotype for each alt allele, then subtracts these from the hom ref log10 likelihood to get the log-odds.", "Reference": "Calculate the log likelihoods of the ref/alt het genotype for each alt allele, then subtracts these from the hom ref log likelihood to get the log-odds.", "NNUpdater": "(ALT_REWRITE (ALT ...) (-> (ALT ...))); rewrite might nested in subrule"}
{"Origin": "Returns the {@code AccountGroup} for the specified UUID if it exists.", "Reference": "Returns the {@code InternalGroup} for the specified UUID if it exists.", "NNUpdater": "Returns the parent {@link GlobalFrame}, if it exists."}
{"Origin": "Get all {@link Execution}s contained in this {@link ExecutionResults}.", "Reference": "Get all Test {@link Execution}s contained in this {@link ExecutionResults}.", "NNUpdater": "Returns the serialized {@link ExecutionConfig}."}
{"Origin": "Applies a configuration entry to the internal state machine.", "Reference": "Applies a command entry to the state machine.", "NNUpdater": "Applies connect entry to the state machine."}
{"Origin": "Returns an unmodifiable Map of metadata for a given alias.", "Reference": "Returns an unmodifiable Map of properties for a given alias.", "NNUpdater": "Obtain an unmodifiable map of input matrix/frame metadata."}
{"Origin": "Sets the color of the description text.", "Reference": "Returns the Description object of the chart.", "NNUpdater": "Get the RGB text color of this node."}
{"Origin": "Get the current all agents state.", "Reference": "Get the agents.", "NNUpdater": "Get all agent agents."}
{"Origin": "Escapes a URI, replacing ``/`` and ``.``", "Reference": "Escapes a URI, replacing ``/`` with ``%2F``.", "NNUpdater": "Set allowSpaceEscapes."}
{"Origin": "See {@link IChangeLog#transactionCommited()}.", "Reference": "See {@link IChangeLog#transactionCommited(long)}.", "NNUpdater": "Operation fails."}
{"Origin": "With the check in the {@link Callable} passed to the guava cache, we avoid building an extra context.", "Reference": "With the check in the {@link Callable} passed to the Guava cache, we avoid building an extra context.", "NNUpdater": "Stops a {@link TwillRunnerService}."}
{"Origin": "Gets the request page number from the specified request URI and tag title.", "Reference": "Gets the request page number from the specified request URI and category URI.", "NNUpdater": "Return the request {@link UriComponents}"}
{"Origin": "Do nothing if {@link BaseConfiguration#nocomment} is set to true.", "Reference": "Do nothing if {@link BaseOptions#noComment} is set to true.", "NNUpdater": "If already present, does nothing."}
{"Origin": "Returns a literal for the {@link Reference} cardinality.", "Reference": "Returns a literal for the {@link ScrService.Reference} cardinality.", "NNUpdater": "Get a substring of value of {@literal key} between {@literal start} and {@literal end}."}
{"Origin": "The option will be converted to a type.", "Reference": "The option will be converted to a", "NNUpdater": "Later, the collection will be converted into the target type."}
{"Origin": "This function completes the input future when the channel is registered.", "Reference": "This function completes the input future when the channel is ready.", "NNUpdater": "Completes or cancels this write."}
{"Origin": "Delegates to {@link AutowireUtils#resolveDependency}.", "Reference": "Delegates to {@link ParameterResolutionDelegate#resolveDependency}.", "NNUpdater": "Just delegates to {@link #aggregateResolveState() resolve state}."}
{"Origin": "Get Divide Rate.", "Reference": "Get Divisor.", "NNUpdater": "Get Divisor."}
{"Origin": "Support for X11 cannot be provided due to an oversight in the way that XRecord currently operates.", "Reference": "Event propagation support for X11 cannot be provided due to an oversight in the way that XRecord currently operates.", "NNUpdater": "Returns accessor for provided object"}
{"Origin": "Removes an {@link OnNavigatedListener} from this controller.", "Reference": "Removes an {@link OnDestinationChangedListener} from this controller.", "NNUpdater": "Removes all {@link ResponseListener} listeners from the client handler."}
{"Origin": "If this node is Array Node and has value for specified index, {@code this} is returned to allow chaining; otherwise {@link IllegalArgumentException} is thrown.", "Reference": "If this node is Array Node and has value for specified index, {@code this} is returned to allow chaining; otherwise exception is thrown.", "NNUpdater": "If it hasn't been, an {@link IllegalStateException} is thrown."}
{"Origin": "Create an array of MapSqlParameterSource objects populated with data from the values passed in.", "Reference": "Create an array of {@link MapSqlParameterSource} objects populated with data from the values passed in.", "NNUpdater": "Creates a Map from a source array where values are ANSI escape sequences."}
{"Origin": "Timeout waiting to hear the status of all cluster members before voting if a majority have been heard from.", "Reference": "Timeout waiting to canvass the status of cluster members before voting if a majority have been heard from.", "NNUpdater": "Returns a list of remote members for the given type."}
{"Origin": "Jsonify string.", "Reference": "Jsonify.", "NNUpdater": "String, SASProtocol, IpRange, String, String, String, String, String)}"}
{"Origin": "Parses the ballerina/http@config annotation and builds swagger definition.", "Reference": "Parses the ballerina/http@config annotation and builds openApi definition.", "NNUpdater": "Convert {@link BallerinaAnnotation} to {@link AnnotationHolder}"}
{"Origin": "Gets the synonymText.", "Reference": "Gets the synonym.", "NNUpdater": "Gets the synonymText."}
{"Origin": "Returns true if overlap tokens are discounted from the document's length.", "Reference": "Returns true iff overlap tokens are discounted from the document's length.", "NNUpdater": "This is the discounted forecast value."}
{"Origin": "Complexity: 6 (2 of which emulated) trigonometric functions.", "Reference": "Complexity: 6 trigonometric functions.", "NNUpdater": "The complexity constant C. (default 1)"}
{"Origin": "Specifies if a visual feedback should be shown when a button with an assigned image is pressed.", "Reference": "Specifies if a visual feedback should be shown when a %type% with an assigned image is pressed.", "NNUpdater": "Called when a button is pressed."}
{"Origin": "Overload of {@link #connect(String, ServerStateListener, ServerConnectionFailListener)} with only one listener.", "Reference": "Overload of {@link #connect(String, ServerStateListener, ServerReconnectFilter)} with only one listener.", "NNUpdater": "Overload of {@link #connect(String, ServerStateListener, ConnectionFailListener)} with only one listener."}
{"Origin": "Creates a RFC-6454 comparable origin from the {@code origin} string.", "Reference": "Creates a RFC-6454 comparable URI from the {@code uri} string.", "NNUpdater": "Creates a instance of (@link StorageAccountType)."}
{"Origin": "Creates an instance of {@link RowFactory} using provided {@link RowTypeFactory} and {@link GeneratedGetterFactory}.", "Reference": "Creates an instance of {@link RowFactory} using provided {@link SchemaFactory} and {@link GeneratedGetterFactory}.", "NNUpdater": "Creates a {@link Row} from the list of values and {@link #getSchema()}."}
{"Origin": "Create or obtain a {@link PreparedStatement} from the pool.", "Reference": "Creates or obtains a {@link PreparedStatement} from the pool.", "NNUpdater": "Execute a SQL statement using the given parameters."}
{"Origin": "Special handling for NTFS ADS: Don't accept colon in the filename.", "Reference": "Special handling for NTFS ADS: Don't accept colon in the fileName.", "NNUpdater": "A factory method for creating a node setting the given special attribute."}
{"Origin": "ModifyCluster API to associate a different security group and different parameter group with the restored cluster.", "Reference": "Amazon Redshift creates the cluster, you can use the ModifyCluster API to associate a different security group and different parameter group with the restored cluster.", "NNUpdater": "Guide."}
{"Origin": "Report the reference point for the moving inter located on 'center' point.", "Reference": "Report the staff reference point for the moving inter location.", "NNUpdater": "( Dynamic Point A - Dynamic Point B )"}
{"Origin": "Get the sorted iterable of all {@link RankedProvider providers} (custom and default) registered for the given service provider contract in the underlying {@link InstanceManager instance manager} container.", "Reference": "Get the sorted iterable of all {@link RankedProvider providers} (custom and default) registered for the given service provider contract in the underlying {@link InjectionManager injection manager} container.", "NNUpdater": "Get the iterable of all providers (custom and default) registered for the given service provider contract in the underlying {@link ServiceLocator HK2 service locator} container."}
{"Origin": "This method returns the textual part of the filename before the last dot.", "Reference": "This method returns the textual part of the fileName before the last dot.", "NNUpdater": "The extension of a file is the part of the name after the last dot, including the dot."}
{"Origin": "The second record is gets decrypted so this method also checks its content.", "Reference": "The third record is decrypted so this method also checks its content.", "NNUpdater": "Invoke callback with the decryptedBlobContent"}
{"Origin": "Obtain a {@link RemoteRepository} for the data set having the specified SPARQL end point.", "Reference": "Obtain a flyweight {@link RemoteRepository} for the data set having the specified SPARQL end point.", "NNUpdater": "Engine."}
{"Origin": "Get infrastructure properties ### Functional Description: DRACOON infrastructure properties entry point.", "Reference": "Get infrastructure properties ### \ud83d\ude80 Since version VERSION ### Functional Description: DRACOON infrastructure properties entry point.", "NNUpdater": "Gets infrastructure links."}
{"Origin": "Inserts the given instruction at the begining of this list.", "Reference": "Inserts the given instruction at the beginning of this list.", "NNUpdater": "Indicate that a stream created at given source Location escapes at the given target Location."}
{"Origin": "Creates a new standby {@link FileSystemMaster} from journal along with its dependencies, and returns the master registry containing that master.", "Reference": "Creates a new standby {@link FileSystemMaster} from journal along with its dependencies, and returns the master registry and the journal system.", "NNUpdater": "Creates a new standby {@link DefaultFileSystemMaster} from journal."}
{"Origin": "Checks the dirty status of the 'batchId' field.", "Reference": "Checks the dirty status of the 'sitemaps' field.", "NNUpdater": "Checks if the number of fields are equal to the batch field size then adds the Value Arrray to the end of the batch"}
{"Origin": "Whether the given {@code @InitBinder} method should be used to initialize the given WebDataBinder instance.", "Reference": "Determine whether the given {@code @InitBinder} method should be used to initialize the given {@link WebDataBinder} instance.", "NNUpdater": "Whether the given {@code @InitBinder} method should be used to initialize the given WebDataBinder instance."}
{"Origin": "The {@link RsaKeyCreateOptions#getKeyType() keyType} indicates the type of key to create.", "Reference": "The {@link CreateRsaKeyOptions#getKeyType() keyType} indicates the type of key to create.", "NNUpdater": "Get the Type of {@link IN}."}
{"Origin": "Sets the text.", "Reference": "Set the text.", "NNUpdater": "Sets the name."}
{"Origin": "Write a line of the CoNLL output.", "Reference": "Produce a line of the CoNLL output.", "NNUpdater": "Write the subscription options part of the line (including the #!)."}
{"Origin": "Returns an array containing some validators in order to validate the", "Reference": "Returns an array containing some validators in order to validate the SootClass", "NNUpdater": "validateSignature."}
{"Origin": "Set the sentenceLocation.", "Reference": "Set the sentenceLocations.", "NNUpdater": "Set the sentenceLocation."}
{"Origin": "Registers the LocalDispatcher with this ServiceDispatcher", "Reference": "Registers the loader with this ServiceDispatcher", "NNUpdater": "Returns the default dispatcher."}
{"Origin": "[A5] If the new lookup class is not within the same package member as the old one, private members will not be accessible.", "Reference": "[A7] If the new lookup class is not within the same package member as the old one, private members will not be accessible.", "NNUpdater": "The proxy class is not accessible to any module."}
{"Origin": "Test if the paths are the same.", "Reference": "Test if the paths are the same name.", "NNUpdater": "Returns all data paths for the given index."}
{"Origin": "Integers 0 ... n.", "Reference": "Integers 0 ... n - 1.", "NNUpdater": "Creates a sequence with the specified items."}
{"Origin": "Create parameters necessary for creating a single use Alipay source.", "Reference": "Create single-use Alipay Source params.", "NNUpdater": "Resolve a source file, creating its package structure if necessary."}
{"Origin": "Size of a dash array is even and sum of all the units off in the array is 0.", "Reference": "It's solid when the size of a dash array is even and sum of all the units off in the array is 0.", "NNUpdater": "Array - the array size"}
{"Origin": "The {@link MessageReceiver} will be selected in the following way from the {@link Cause} in {@link #getCause()}:", "Reference": "The {@link MessageChannel} will be selected in the following way from the {@link Cause} in {@link #getCause()}:", "NNUpdater": "The cause of {@link Throwable}"}
{"Origin": "Create or obtain a {@link PreparedStatement} from the pool.", "Reference": "Creates or obtains a {@link PreparedStatement} from the pool.", "NNUpdater": "Execute a SQL statement using the given parameters."}
{"Origin": "Associates memoryCacheKey with imageView.", "Reference": "Associates memoryCacheKey with imageAware.", "NNUpdater": "Associates encodedImage with given key in disk cache."}
{"Origin": "Get the current file's imports.", "Reference": "Get the current module's imports.", "NNUpdater": "Returns a set of loads in this BUILD file."}
{"Origin": "Sets the propagate flags for this event.", "Reference": "Sets the reserved flags for this event.", "NNUpdater": "Sets the specified value to the {@code reset} field."}
{"Origin": "Main method to invoke this demo about how to recognize entities of a text input.", "Reference": "Main method to invoke this demo about how to recognize the entities of an input text.", "NNUpdater": "Test list all the classifiers."}
{"Origin": "Returns all the sync d l objects where modifiedTime > ?", "Reference": "Returns an ordered range of all the sync d l objects where modifiedTime > ?", "NNUpdater": "Returns the number of sync d l objects where type = ?"}
{"Origin": "Converts a single {@link OutputStream} into multiple {@link ByteString ByteStrings}.", "Reference": "Converts a single element delimited {@link OutputStream} into multiple {@link ByteString ByteStrings}.", "NNUpdater": "Serialize {@code byte} into byte array with following scheme: [{@link #BYTE_FLAG}] + [byte]."}
{"Origin": "The rotations in this policy", "Reference": "The endpoints of this policy", "NNUpdater": "Returns a transaction which deletes these rotations if they exist"}
{"Origin": "[IF Sidecar19-SE]", "Reference": "[IF Java14]", "NNUpdater": "Test the alternate API for booting WeldContainer from an SE app."}
{"Origin": "Decorates and binds the specified {@link ServiceWithRoutes} at multiple {@link Route}s of the default {@link VirtualHost}.", "Reference": "Decorates and binds the specified {@link HttpServiceWithRoutes} at multiple {@link Route}s of the default {@link VirtualHost}.", "NNUpdater": "Decorates and binds the specified {@link ServiceWithRoutes} at multiple {@link Route}s of the default {@link VirtualHost}."}
{"Origin": "Create client request filtering stage using the instance manager.", "Reference": "Create client request filtering stage using the injection manager.", "NNUpdater": "Marks the node as DEAD."}
{"Origin": "Initialization required for editing an xml bundle.", "Reference": "Initialize the key set for an xml bundle.", "NNUpdater": "Sets a property."}
{"Origin": "return the Transfer Data of type DataFlavor from InputStream", "Reference": "Return the Transfer Data of type DataFlavor from InputStream", "NNUpdater": "Return the Transfer Data of type DataFlavor from InputStream."}
{"Origin": "This method allocates a new instance of a class implementing Vector3f on every call.", "Reference": "This method allocates a new instance of a class implementing Vector3fc on every call.", "NNUpdater": "Allocates a new native buffer."}
{"Origin": "The timestamp for the most recent update to the synonym.", "Reference": "The timestamp for the most recent update to the object.", "NNUpdater": "Sets the synonymText."}
{"Origin": "Return the name for the selector header.", "Reference": "Return the name for the selector header name.", "NNUpdater": "Returns the IO controller."}
{"Origin": "Amazon CloudSearch will still automatically scale your domain based on the volume of data and traffic, but not below the desired instance type and replication count.", "Reference": "CloudSearch will still automatically scale your domain based on the volume of data and traffic, but not below the desired instance type and replication count.", "NNUpdater": "For more information, see Searching Your Data in the Amazon CloudSearch Developer"}
{"Origin": "Sets the value of the 'RowKey' field.", "Reference": "Sets the value of the 'rowKey' field.", "NNUpdater": "Sets the value of the 'paramName' field."}
{"Origin": "Creates a multi expression for evaluating a method call instance, possible clinit, and all arguments.", "Reference": "Creates a lists of expression for evaluating a method call instance, possible clinit, and all arguments.", "NNUpdater": "Creates a MethodCallExpression that represents a call to a method that takes arguments, with an explicit return type."}
{"Origin": "Test ModuleModule with a JAR file containing a .class file in the top level directory.", "Reference": "Test ModuleFinder with a JAR file containing a .class file in the top level directory.", "NNUpdater": "Returns a {@code ModuleReference} to represent a modular JAR on the file system."}
{"Origin": "You should always check the response for a at which to continue the list; if there are no more items the is .", "Reference": "You should always check the response for a marker at which to continue the list; if there are no more items the marker is null.", "NNUpdater": "If there are more destinations to list, the response would contain a nextToken value in the response body."}
{"Origin": "Gets the list of {@link SecretProperties SecretProperties} on this page.", "Reference": "Gets the iterable stream of {@link SecretProperties SecretProperties} on this page.", "NNUpdater": "Iterate over all the {@link SecretProperties secret} by each page and call {@link SecretClient#getSecret(SecretProperties)} ."}
{"Origin": "Return the {@link CacheManager} that this instance use.", "Reference": "Return the {@link CacheManager} that this instance uses.", "NNUpdater": "Return the tenancy schema provider."}
{"Origin": "The meta-property for the {@code referenceEntityIds} property.", "Reference": "The meta-property for the {@code legalEntityIds} property.", "NNUpdater": "The meta-property for the {@code referenceStartMonth} property."}
{"Origin": "See Immutable Set Static Factory Methods for details.", "Reference": "See Unmodifiable Sets for details.", "NNUpdater": "VerificationTimes supports multiple static factory methods:"}
{"Origin": "This will always return false until the scanning service starts up, at which time it will be known.", "Reference": "This will always return false until the scanning service starts up, at which time it will be known if it is in a different process.", "NNUpdater": "This method will never return null, it will always return a valid SdkServiceException"}
{"Origin": "Get field types for an AVRO-generated SpecificRecord.", "Reference": "Get field types for an AVRO-generated SpecificRecord or a POJO.", "NNUpdater": "Sets the value of the 'avroSchemaMapping' field."}
{"Origin": "If {@code null} is passed, warn logging is turned off.", "Reference": "If {@code null} or empty String is passed, warn logging is turned off.", "NNUpdater": "If {@code null} is passed, this method is a no-op."}
{"Origin": "This method will interpolate between each two successive quaternions via {@link #nlerp(Quaternionf, float)} using their relative interpolation weights.", "Reference": "This method will interpolate between each two successive quaternions via {@link #nlerp(Quaternionfc, float)} using their relative interpolation weights.", "NNUpdater": "This implementation forwards to the {@link #containsFloat(float)} method."}
{"Origin": "Sets the value of the 'cf_name' field", "Reference": "Sets the value of the 'cfName' field.", "NNUpdater": "Sets the value of the 'paramName' field."}
{"Origin": "Get the operation", "Reference": "Get the operator", "NNUpdater": "The Get Create Operation Status operation returns the status of the specified create operation."}
{"Origin": "The {@link RsaKeyCreateOptions#getKeyType() keyType} indicates the type of key to create.", "Reference": "The {@link CreateRsaKeyOptions#getKeyType() keyType} indicates the type of key to create.", "NNUpdater": "Get the Type of {@link IN}."}
{"Origin": "Transforms this {@code Try} by applying either {@code onSuccess} to this value or {@code onFailure} to this cause.", "Reference": "Transforms this {@code Option} by applying either {@code ifDefined} to this value or by calling {@code ifEmpty}.", "NNUpdater": "Transforms the value of this {@code Future}, whether it is a success or a failure."}
{"Origin": "Matches the display name of the xry meta key to the appropriate enum type.", "Reference": "Matches the display name of the xry key to the appropriate enum type.", "NNUpdater": "Get the authorizationSource value."}
{"Origin": "Epilog for any user action sequence.", "Reference": "Background epilog for any user action sequence.", "NNUpdater": "The actual processing should take place in an overridden runEpilog method"}
{"Origin": "The hash code for a module directive is computed as using {@code int} arithmetic.", "Reference": "using {@code int} arithmetic.", "NNUpdater": "Parses a module directive and returns it as a ModuleDirective."}
{"Origin": "Writes the service response to the HTTP servlet response object.", "Reference": "Writes the API response to the HTTP servlet response object.", "NNUpdater": "Sets the HTTP response body."}
{"Origin": "Check for expected local values and types in the LiveStackFrame", "Reference": "Check for expected local values in the LiveStackFrame", "NNUpdater": "Updates the LiveFrame with the statistics in the given NISTAlign."}
{"Origin": "set duration specifications according to 'rate' requirements", "Reference": "To set duration specifications according to 'rate' requirements", "NNUpdater": "Set Wechselkurs."}
{"Origin": "Access a flat view of the layers available in the WMS.", "Reference": "Access a flat view of the layers available in the WMTS.", "NNUpdater": "Flat Map the wrapped Observable"}
{"Origin": "Posts a constructive disjunction constraint", "Reference": "Make an constructive disjunction constraint", "NNUpdater": "Posts a constructive disjunction constraint"}
{"Origin": "Get Repeated type.", "Reference": "Get Time Unit.", "NNUpdater": "Get OrderType."}
{"Origin": "get a copy from all member entries", "Reference": "Get a copy from all member entries.", "NNUpdater": "Get a copy of all the records with a specific tag"}
{"Origin": "Gets the {@link MessageReceiver} that should be the target for any messages sent by the command (by default).", "Reference": "Gets the {@link MessageChannel} that should be the target for any messages sent by the command (by default).", "NNUpdater": "Sets the command message that was sent to the server."}
{"Origin": "Unregisters a content observer which was previously registered by calling registerContentObserver().", "Reference": "Unregisters a library observer which was previously registered by calling registerLibraryObserver().", "NNUpdater": "last cluster state and status observed by this observer."}
{"Origin": "Verifies that the given {@code csvContent} is the same as the content given in the file at {@code filePathParam}.", "Reference": "Verifies that the given {@code csvContent} is the same as the content given in the file at {@code fileName}.", "NNUpdater": "Verifies that main content specified id ``mainContent`` in currently loaded page has the same HTML content as the content given in the file at {@code filePath}."}
{"Origin": "Sets the character used for thousands separator.", "Reference": "Sets the character used for grouping separator.", "NNUpdater": "Sets separator painter."}
{"Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}", "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveFromRangeEnd }{@code >}}", "NNUpdater": "Create an instance of {@link JAXBElement }{@code <}{@link CTStrokeChild }{@code >}}"}
{"Origin": "Checks to see if the AST is annotated with the passed in annotation.", "Reference": "Checks if the AST is annotated with the passed in annotation.", "NNUpdater": "Determine if the supplied {@link AnnotatedElement} is annotated with a composed annotation that is meta-annotated with an annotation of the specified {@code annotationName}."}
{"Origin": "Returns a String representation of this Version instance in the generic form of major.minor.revision[.nightly.build.id].", "Reference": "Returns a String representation of this Version instance in the generic form of major.minor[.nightly.build.id].", "NNUpdater": "The string representation of the path: /{Object ID}/{ObjectInstance ID}/{Resource ID}/{ResourceInstance ID}"}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "18:43:59 CAUTION: Does NOT recognize values with a timezone information (...[+-Z]...)", "Reference": "CAUTION: Does NOT recognize values with a timezone information (...[+-Z]...)", "NNUpdater": "Operation fails."}
{"Origin": "Adds a {@link CameraCaptureSession.StateCallback} callback.", "Reference": "Adds a {@link CameraCaptureCallback} callback for single and repeating requests.", "NNUpdater": "Calls {@link #authenticator(String, Client[])} with {@link #DEFAULT_AUTHENTICATOR_PATH}."}
{"Origin": "Returns the int value if this primitive value is of type int.", "Reference": "Returns the int value if this primitive value is of size 4", "NNUpdater": "If you need access to the primitive {@code int} value then the enum provides the {@link Month#getValue() int value}."}
{"Origin": "Adds next SSRC information update request to {@link RequestType#CHANNEL_INFO_UPDATE} query currently being built.", "Reference": "Adds next source information update request to {@link RequestType#CHANNEL_INFO_UPDATE} query currently being built.", "NNUpdater": "Returns an {@link UpdateSink} that adds all update operations into an internal {@link UpdateRequest} object."}
{"Origin": "Creates a MutableOptionsBundle from an existing immutable Configuration.", "Reference": "Creates a MutableOptionsBundle from an existing immutable Config.", "NNUpdater": "Gets an options bundle from a collection of options."}
{"Origin": "Map field name to the new name.", "Reference": "Maps a field name to its new name.", "NNUpdater": "Returns the tab bar height."}
{"Origin": "Create a new {@link BaseEvent} for each invocation.", "Reference": "Create a new {@link CoreEvent} for each invocation.", "NNUpdater": "Create a new {@link Like} event."}
{"Origin": "Obtain a {@link RemoteRepository} for a data set managed by the remote service.", "Reference": "Obtain a flyweight {@link RemoteRepository} for a data set managed by the remote service.", "NNUpdater": "Returns the document library file entry remote service."}
{"Origin": "Returns true if the mark is new, the member will be retained, and its own dependencies should be traversed.", "Reference": "Returns true if the mark is new, the member will be retained, and reachable objects should be traversed.", "NNUpdater": "Should be false."}
{"Origin": "Sets port for NAT.", "Reference": "Sets min port for NAT.", "NNUpdater": "Set source endpoint context."}
{"Origin": "Returns a boolean indicating whether the given ID has a protocol configuration.", "Reference": "Converts the given primitive Id to a protocol.", "NNUpdater": "Returns a member by ID."}
{"Origin": "Get the active candidate selector.", "Reference": "Get the active exclude selector.", "NNUpdater": "Returns the IO controller."}
{"Origin": "Convert the attribute if necessary and add it to the profile.", "Reference": "Convert a profile or authentication attribute, if necessary, and add it to the profile.", "NNUpdater": "Set the identifier."}
{"Origin": "Sets the client and server transport.", "Reference": "Sets the client and server protocol.", "NNUpdater": "Sets the client and server transport."}
{"Origin": "Single root expressions (GH-1231).", "Reference": "Single root expressions.", "NNUpdater": "To create a repository in an organization, see {@link GHOrganization#createRepository(String, String, String, GHTeam, boolean)}"}
{"Origin": "The meta-property for the {@code upFrontFee} property.", "Reference": "The meta-property for the {@code upfrontFee} property.", "NNUpdater": "The meta-property for the {@code curveGroupName} property."}
{"Origin": "This method can be used to simply adapt an observable to a promise, but can also be used to bind an observable to the current execution.", "Reference": "This method can be used to simply adapt a Single to a promise, but can also be used to bind a Single to the current execution.", "NNUpdater": "Lift a function to the current Observable and return a new Observable that when subscribed to will pass the values of the current Observable through the function."}
{"Origin": "Finds out non joining dimensions for this cube.", "Reference": "Finds out non-joining dimensions for this measure group.", "NNUpdater": "Searches dimension values in a {@link Cube} as defined by {@link Cube#findDimensionValues(CubeExploreQuery)}."}
{"Origin": "Configuring Analysis Schemes in the Amazon CloudSearch Developer Guide .", "Reference": "CloudSearch Developer Guide.", "NNUpdater": "For more information, see Sorting Results in the Amazon CloudSearch Developer Guide."}
{"Origin": "This path will be the canonical path unless an exception is thrown in which case it will be the absolute path.", "Reference": "If that produces an IOException, the path will be the canonical path unless an exception is thrown in which case it will be the absolute path.", "NNUpdater": "Return the path."}
{"Origin": "It should be encoded in 7-bit ASCII, but UTF-8 is supported too.", "Reference": "It should be encoded in 7-bit ASCII, but UTF-8 and UTF-16 are supported too.", "NNUpdater": "Reads a potentially Huffman encoded string byte string."}
{"Origin": "If there is no applicable default, fall back to returning the provided default.", "Reference": "If there is no applicable default, fall back to returning the provided non null default.", "NNUpdater": "If there is no match, the default executor is called."}
{"Origin": "Returns an offset date-time formed from this date at the specified time.", "Reference": "Returns a zoned date-time formed from this date at the specified time.", "NNUpdater": "Returns a ChronoLocalDateTime formed from this date at the specified time."}
{"Origin": "Add an {@link NlModel} to DesignSurface.", "Reference": "Add an {@link NlModel} to DesignSurface and refreshes the rendering of the model.", "NNUpdater": "Add an {@link NlModel} to DesignSurface and return the associated SceneManager."}
{"Origin": "Returns either namePrimary or nameAlternative based on the {@link ContactsPreferences}.", "Reference": "Returns either namePrimary or nameAlternative based on the value of displayOrderPreference", "NNUpdater": "Returns either namePrimary or nameAlternative based on the value of sortOrderPreference"}
{"Origin": "Build the extern package list from given URL or the directory path.", "Reference": "Build the extern element list from given URL or the directory path.", "NNUpdater": "Sets the source kind."}
{"Origin": "Extracts value of given type from expression assuming it is a {@link ValueLiteralExpression}.", "Reference": "Extracts the value (excluding null) of a given class from an expression assuming it is a {@link ValueLiteralExpression}.", "NNUpdater": "TemplateLiteral ( Expression )"}
{"Origin": "Creates a mutable copy of {@code graph} with the same nodes and edges.", "Reference": "Creates a mutable copy of {@code graph} with the same nodes, edges, and edge values.", "NNUpdater": "Creates a mutable copy of {@code graph} with the same nodes and edges."}
{"Origin": "Gets the width of the account information widget.", "Reference": "Initializes the width of the dialog contents.", "NNUpdater": "Gets information for the given account."}
{"Origin": "Determines whether the current user has permission to update the given target user, adding or removing the given permissions.", "Reference": "Determines whether the current user has permission to update the given target entity, adding or removing the given permissions.", "NNUpdater": "Updates the given permission set patch by queuing an add or remove operation for the given permission based on the given patch operation."}
{"Origin": "Charset Registry.", "Reference": "Registry.", "NNUpdater": "Shortcut for {@code new Charset(charset)}."}
{"Origin": "Get a set of notification filters preferences that are available for the current user and that corresponds to the given filter.", "Reference": "Get a collection of notification filters preferences that are available for the current user and that corresponds to the given filter.", "NNUpdater": "Set the filter data for the offset from the given {@link Configuration}"}
{"Origin": "Returns a boolean indicating whether the given descriptor is for a primitive event.", "Reference": "Returns a boolean indicating whether the given method is an asynchronous method.", "NNUpdater": "Returns a member by ID."}
{"Origin": "You are running on JDK6 which comes with JAX-WS {0} API, but this tool requires JAX-WS {1} API.", "Reference": "You are running on JDK6 or newer which comes with JAX-WS {0} API, but this tool requires JAX-WS {1} or newer API.", "NNUpdater": "Add custom JAX-RS provider to the list of providers"}
{"Origin": "Sets the confidence.", "Reference": "Gets the confidence.", "NNUpdater": "This is measured from the bottom, thus equal to {@code 1 - confidence level}."}
{"Origin": "Returns the defining class name, so that super.getClassInfo() returns the {@link ClassInfo} object for the defining class.", "Reference": "Returns the name of the declaring class, so that super.getClassInfo() returns the {@link ClassInfo} object for the declaring class.", "NNUpdater": "Return definingClassName, so that getClassInfo() returns the {@link ClassInfo} object for the containing class."}
{"Origin": "The {@link EcKeyCreateOptions} parameter is required.", "Reference": "The {@link CreateEcKeyOptions} parameter is required.", "NNUpdater": "{@codesnippet com.azure.keyvault.keys.keyclient.createEcKeyWithResponse#keyOptions-Context}"}
{"Origin": "Set Allowed En Cashment?.", "Reference": "Set Allowed Encashment.", "NNUpdater": "Translate TARGETFEATURES to HTSCONTEXT"}
{"Origin": "The result is expectedFragmentCount - 1 (for initial) - 1 (for leftovers).", "Reference": "The result is expectedFragmentCount - (initials + 1) - 1 (for leftovers).", "NNUpdater": "Specify the expected {@link XPathEvaluationType}."}
{"Origin": "Find cites along a specific line and add them to a map.", "Reference": "Find cites along a specific line and store them.", "NNUpdater": "Adds bytes to the current line buffer."}
{"Origin": "Merges Context ``ct`` into THIS Context, except for local symbols in ``ct`` Two symbols clash if they have the same name AND the same class; that is an error.", "Reference": "Merges Context ``ct`` into THIS Context, except for local symbols in ``ct`` Two symbols clash if they have the same name AND a different class; that is an error.", "NNUpdater": "Same as {@link #create(Symbol, Collection)}, but works for multiple symbols and allows re-using a {@link SourceSymbols} class."}
{"Origin": "No connection to the hosts is attempted.", "Reference": "No connection to the host is attempted.", "NNUpdater": "Sets the {@link NodesSniffer} to be used to read hosts."}
{"Origin": "Titan's schema which is tied to this particular transaction and not the graph.", "Reference": "JanusGraph's schema which is tied to this particular transaction and not the graph.", "NNUpdater": "Report the x-ordered collection of chords which are directly tied to the right of this chord"}
{"Origin": "Marks an existing lucene index with a new history uuid and sets the given maxSeqNo as the local checkpoint as well as the maximum sequence number.", "Reference": "Marks an existing lucene index with a new history uuid and sets the given local checkpoint as well as the maximum sequence number.", "NNUpdater": "Marks an existing lucene index with a new history uuid and sets the given local checkpoint as well as the maximum sequence number."}
{"Origin": "Checks a name to ensure that it's a legal type name.", "Reference": "Checks a name to ensure that it's a legal qualified class name", "NNUpdater": "Ensure that:"}
{"Origin": "Checks that a randomly generated {@link SkylarkSemanticsOptions} object can be converted to a {@link SkylarkSemantics} object with the same field values.", "Reference": "Checks that a randomly generated {@link SkylarkSemanticsOptions} object can be converted to a {@link StarlarkSemantics} object with the same field values.", "NNUpdater": "Like {@link #convert(Object, String, Object)}, but converts skylark {@code None} to given {@code defaultValue}."}
{"Origin": "If the given language code is {@code null}, uses {@link DisplaySettings#getShowsLanguage(Context)}.", "Reference": "If the given language code is {@code null}, uses {@link DisplaySettings#getShowsLanguageFallback(Context)}.", "NNUpdater": "Operation fails."}
{"Origin": "In case of failure the {@link Flux} will error.", "Reference": "In case of failure the {@link CosmosContinuablePagedFlux} will error.", "NNUpdater": "Get the id of the {@link CosmosContainer}"}
{"Origin": "Dispatches to the JSP location created from result value and JSP extension.", "Reference": "Dispatches to the template location created from result value and JSP extension.", "NNUpdater": "Test on VF file."}
{"Origin": "If you specify both tag keys and tag values in the same request,", "Reference": "If you specify both tag keys and tag values in the same request, Amazon", "NNUpdater": "Returns a tag or attribute name."}
{"Origin": "Note that new constant types may be added in future versions of the Java Virtual Machine.", "Reference": "Note that new constant types may be added in future versions of the", "NNUpdater": "Note that new constant types may be added in future versions of the"}
{"Origin": "Inserts the given text at the position returned from {@code getAbsolutePosition(paragraphIndex, columnIndex)}.", "Reference": "Inserts the given text at the position returned from {@code getAbsolutePosition(paragraphIndex, columnPosition)}.", "NNUpdater": "Moves the item placed at position {@code fromPosition} to the position {@code toPosition}."}
{"Origin": "Loads all entries on the given path.", "Reference": "Loads the sitemap entry for the given site path.", "NNUpdater": "Loads a service from the given configuration path."}
{"Origin": "If it's successfully completed, {@link BrowserResult#getMediaItem()} will return the library root.", "Reference": "If it's successfully completed, {@link LibraryResult#getMediaItem()} will return the library root.", "NNUpdater": "Operation fails."}
{"Origin": "or throws a {@link com.liferay.opensocial.NoSuchGadgetException} if it could not be found.", "Reference": "or throws a {@link NoSuchGadgetException} if it could not be found.", "NNUpdater": "Operation fails."}
{"Origin": "Obtains an instance from the specified unique name.", "Reference": "Obtains an instance from the specified name.", "NNUpdater": "Obtains the type from a unique name."}
{"Origin": "Returns the {@link DecisionTable} that is requested.", "Reference": "Returns the {@link DmnDecisionTable} that is requested.", "NNUpdater": "Returns the {@link DmnDecisionTable} that is requested."}
{"Origin": "Get Menge in Catch Weight Einheit.", "Reference": "Get Geliefert Catch.", "NNUpdater": "Get Bestellmenge."}
{"Origin": "Sets the entity attribute of this Endpoint to entity", "Reference": "Sets the entity attribute of this Endpoint's element to entity", "NNUpdater": "Sets the entityName."}
{"Origin": "The sencond argument, level, is used for the prefix length.", "Reference": "The second argument, level, is used for the prefix length.", "NNUpdater": "The string length is equal to the prefix length + 1."}
{"Origin": "Register one or more annotated classes to be processed.", "Reference": "Register one or more component classes to be processed.", "NNUpdater": "Acknowledge one or more records as processed."}
{"Origin": "Cleanup the analyzer's temp files, etc.", "Reference": "Cleanup temp files, close resources, etc.", "NNUpdater": "Delete all registered temp resources."}
{"Origin": "Replaces pattern in query in form of ``${param}`` with values from message header", "Reference": "Replaces pattern in query in form of ``${param}`` with values from message header Raises an error if param value not found in headers", "NNUpdater": "Form parameters (no longer applicable: ``same as %query-param if GET is used``)."}
{"Origin": "This method returns the textual part of the filename after the last dot.", "Reference": "This method returns the textual part of the fileName after the last dot.", "NNUpdater": "The extension of a file is the part of the name after the last dot, including the dot."}
{"Origin": "This method returns an interface that is both ``up`` and supports multicast.", "Reference": "This method returns the first interface that is both ``up`` and supports multicast.", "NNUpdater": "Returns the list of endpoints"}
{"Origin": "Decorates {@link Service}s with the specified {@link Route}.", "Reference": "Decorates {@link HttpService}s with the specified {@link Route}.", "NNUpdater": "Decorates and binds the specified {@link ServiceWithRoutes} at multiple {@link Route}s of the default {@link VirtualHost}."}
{"Origin": "HadoopFormatIO.Write#withConfiguration(Configuration) withConfiguration(Configuration)} function when value class is not provided by the user in configuration.", "Reference": "HadoopFormatIO.Write.Builder#withConfiguration(Configuration) withConfiguration(Configuration)} function when value class is not provided by the user in configuration.", "NNUpdater": "Parse the specified {@link Configuration @Configuration} class."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Merges this frame with the given frame.", "Reference": "Merges the given frame into this frame.", "NNUpdater": "Computes the final size of this frame."}
{"Origin": "Add classpath elements, separated by the system path separator character.", "Reference": "Add classpath entries, separated by the system path separator character.", "NNUpdater": "Normalize a path by converting all the system-dependent separator characters to the standard '/' separator character."}
{"Origin": "Creates an exception from an service id and version.", "Reference": "Creates an exception from an API id and version.", "NNUpdater": "Create an instance of {@link ServerException }"}
{"Origin": "The provided will *NOT* be closed by this method.", "Reference": "It is noteworthy that the provided will not be closed by this method.", "NNUpdater": "The output stream is closed by this method."}
{"Origin": "Returns the member with the given name and type.", "Reference": "Returns the property with the given name and type.", "NNUpdater": "Returns a member by ID."}
{"Origin": "[A8] (In all other cases, public members will continue to be accessible.)", "Reference": "[A9] (In all other cases, public members will continue to be accessible.)", "NNUpdater": "(In all other cases, public members will continue to be accessible.)"}
{"Origin": "Returns the hash string for the given module name, {@code null} if there is no hash recorded for the module.", "Reference": "Returns the hash for the given module name, {@code null} if there is no hash recorded for the module.", "NNUpdater": "Returns the {@code ModuleReference} for the given named module or {@code null} if a module of the given name is not in this configuration."}
{"Origin": "Creates a mutable copy of {@code graph} with the same nodes and edges.", "Reference": "Creates a mutable copy of {@code network} with the same nodes and edges.", "NNUpdater": "Creates a mutable copy of {@code graph} with the same nodes and edges."}
{"Origin": "Note this method creates a HotStream that starts emitting data only when the first connecting Stream connects.", "Reference": "Note this method creates a Connectable that starts emitting data only when the first connecting Stream connects.", "NNUpdater": "Creates a new {@link ConnectedDataStream} by connecting {@link DataStream} outputs of different type with each other."}
{"Origin": "Executes tasks after an operation.", "Reference": "Executes pending tasks.", "NNUpdater": "Executes an operation to the given partition."}
{"Origin": "Defines message number filter.", "Reference": "Defines filteer for message number.", "NNUpdater": "Define a message parameter"}
{"Origin": "Creates a new {@link FileSystemMaster} from journal along with its dependencies, and returns the master registry containing that master.", "Reference": "Creates a new {@link FileSystemMaster} from journal along with its dependencies, and returns the master registry and the journal system.", "NNUpdater": "Creates a new {@link DefaultFileSystemMaster} from journal."}
{"Origin": "For example, the period in hours between two times can be calculated using {@code startTime.periodUntil(endTime, HOURS)}.", "Reference": "For example, the period in hours between two times can be calculated using {@code startTime.until(endTime, HOURS)}.", "NNUpdater": "For example, the period in hours between two times can be calculated using {@code startTime.until(endTime, HOURS)}."}
{"Origin": "Test the array method for a IoBuffer containing one ByteBuffer", "Reference": "Test the array method for a IoBuffer containing one ByteBuffer (cases 2 and 3)", "NNUpdater": "Returns the source buffer."}
{"Origin": "Once the prefetch is done, the session will change its playback state to {@link SessionPlayer2#PLAYER_STATE_PAUSED}.", "Reference": "Once the prepare is done, the session will change its playback state to {@link SessionPlayer2#PLAYER_STATE_PAUSED}.", "NNUpdater": "Once the prefetch is done, the session will change its playback state to {@link SessionPlayer2#PLAYER_STATE_PAUSED}."}
{"Origin": "Add an cache entry", "Reference": "Add an cache entries", "NNUpdater": "Adds a new cache entry."}
{"Origin": "Checks that Android SDK has build tools with aapt that supports `--output-test-symbols`.", "Reference": "Checks that Android SDK has build tools with aapt2 that supports `--output-test-symbols`.", "NNUpdater": "MergedAndroidResources, AndroidAaptVersion)}."}
{"Origin": "Gets the curent contents of this byte stream as a byte array.", "Reference": "Gets the current contents of this byte stream as a byte array.", "NNUpdater": "Returns content length."}
{"Origin": "If {@code timeout} and {@code nanos} are both zero, then real time is not taken into consideration and the thread waits until awakened by one of the other causes.", "Reference": "If {@code timeoutMillis} and {@code nanos} are both zero, then real time is not taken into consideration and the thread waits until awakened by one of the other causes.", "NNUpdater": "If {@code this == 0} and {@code value == 0} then zero is returned, otherwise the result is positive."}
{"Origin": "Parses the Set-Cookie value into an array of Cookies.", "Reference": "Parses the Set-Cookie value into an array of {@code Cookie}s.", "NNUpdater": "Returns an immutable array of {@link Cookie cookies} that this HTTP state currently contains."}
{"Origin": "See the Apache Http Client documentation for more details.", "Reference": "Apache HTTP Commons Client documentation for more details.", "NNUpdater": "For details, see the"}
{"Origin": "Prepare name id attribute id p attribute.", "Reference": "Prepare name id attribute.", "NNUpdater": "Set Merkmal."}
{"Origin": "If the package is not in the module then the resource is not encapsulated.", "Reference": "If the resource is not in a package in the module then the resource is not encapsulated.", "NNUpdater": "If the other module is {@code EVERYONE_MODULE} then this method tests if the package is exported unconditionally."}
{"Origin": "Specifies the type of value.", "Reference": "Specifies the type of entity value.", "NNUpdater": "Specifies default action result."}
{"Origin": "A2DP Bluetooth device(s) are available, but wired headset is plugged in and activated", "Reference": "A2DP Bluetooth device(s) are connectable, no matter active or inactive", "NNUpdater": "One Hands Free Profile Bluetooth device is available and activated"}
{"Origin": "Return {@code true} if the given {@code @InitBinder} method should be invoked to initialize the given WebDataBinder.", "Reference": "Whether the given {@code @InitBinder} method should be used to initialize the given WebDataBinder instance.", "NNUpdater": "Whether the given {@code @InitBinder} method should be used to initialize the given WebDataBinder instance."}
{"Origin": "Effectively clones the original proxy object and it adds the ConstantAnnotationMarker interface.", "Reference": "Effectively clones the original proxy object and it adds the constant-annotation-marker interface.", "NNUpdater": "adds a sign to the map"}
{"Origin": "Creates a new SchemaInfoLevel builder with settings for detailed schema information.", "Reference": "Creates a new SchemaInfoLevel with settings for detailed schema information.", "NNUpdater": "Schema found for given schemaPath is a root schema."}
{"Origin": "Output: FileStatus", "Reference": "FileStatus", "NNUpdater": "and main = ?."}
{"Origin": "Test a basic feature (SQL) which doesn't require any trial license.", "Reference": "Test a basic feature (SQL) after the upgrade which only requires the ``default`` basic license.", "NNUpdater": "Test a basic feature (SQL) after the upgrade which only requires the ``default`` basic license."}
{"Origin": "Obtains an instance from the specified unique name.", "Reference": "Obtains an instance from the specified name.", "NNUpdater": "Obtains the type from a unique name."}
{"Origin": "testEstimationParametersMaterializedView", "Reference": "testSelectReplicated", "NNUpdater": "Table macro that returns a materialized view."}
{"Origin": "Event whenever flush fails.", "Reference": "Event whenever flush completes.", "NNUpdater": "Flush the Profiles."}
{"Origin": "Convenience method for creating a new primitive for the key given in {@code proto}.", "Reference": "Convenience method for creating a new primitive for the key given in {@code serializedKey}.", "NNUpdater": "Convenience method for creating a new primitive for the key given in {@code keyData}."}
{"Origin": "Tests the functionality of writeTo and readFrom.", "Reference": "Tests the functionality of copyTo(OutputStream).", "NNUpdater": "Tests Write, Read"}
{"Origin": "This unsubscribes all previous subscription with the parent id, regardless of the extra that was previously sent to the library service.", "Reference": "This unsubscribes all previous subscription with the parent id, regardless of the library param that was previously sent to the library service.", "NNUpdater": "Returns the complete set of modules in this library and all module libraries that in the path of libraries."}
{"Origin": "The comparison is based on the time-line position of the local date-times.", "Reference": "The comparison is primarily based on the date-time, from earliest to latest.", "NNUpdater": "The comparison is based on the date and time within the calendar system."}
{"Origin": "The factory itself is bound in a per-lookup scope.", "Reference": "The supplier itself is bound in a per-lookup scope.", "NNUpdater": "InScope {in ('a', 'b')}."}
{"Origin": "This factory converts the arbitrary date-time object to an instance of {@code OffsetDateTime}.", "Reference": "This factory converts the arbitrary temporal object to an instance of {@code OffsetDateTime}.", "NNUpdater": "This factory converts the arbitrary date-time object to an instance of {@code OffsetDateTime}."}
{"Origin": "Extracts the expressions from a selection query, expands {@code 'SELECT *'} to all physical columns if applies.", "Reference": "Extracts the expressions from a selection order-by query, expands {@code 'SELECT *'} to all physical columns if applies.", "NNUpdater": "If it is not star query, sorts out columns into three categories: 1. table columns 2. partition columns 3. implicit file columns"}
{"Origin": "Creates a {@link ModuleInfo} to reopen data at the given path.", "Reference": "Creates a {@link CommandInfo} to reopen data at the given path.", "NNUpdater": "(see {@link IndexReader#openIfChanged})."}
{"Origin": "Returns the enclosed type node, or an empty optional if this is void.", "Reference": "Returns the enclosed type node, or an null if this is void.", "NNUpdater": "If stream is empty, throws {@code NoSuchElementException}."}
{"Origin": "Map treatment to output_ecmp action.", "Reference": "Map treatment for hashed table to routing v4 action.", "NNUpdater": "Pack traffic treatment."}
{"Origin": "This method assumes that the dag is valid as per OIO constraints", "Reference": "This method assumes that the DAG is valid as per OIO constraints", "NNUpdater": "This will mark this DAG as a child DAG, the dependencies of nodes in this DAG will be merged with (copied to) the parent DAG"}
{"Origin": "Catches any exception thrown by provided {@link Supplier} and rethrows it as {@link", "Reference": "Catches any exception thrown by provided {@link ThrowingSupplier} and rethrows it as {@link", "NNUpdater": "If it has not already been called, it calls {@link #startupInternal()} and catches any exceptions it might throw."}
{"Origin": "Strings greater than 500 chars get converted to Text and back.", "Reference": "Strings greater than some number of chars get converted to Text and back.", "NNUpdater": "Must be greater than zero and less than 2048."}
{"Origin": "Populates the given {@link BasicDBList} with values from the given {@link Collection}.", "Reference": "Populates the given {@link Collection sink} with converted values from the given {@link Collection source}.", "NNUpdater": "Populates the given {@link BasicDBList} with values from the given {@link Collection}."}
{"Origin": "Get SQL scripts configured via {@link Sql @Sql} for the supplied {@link AnnotatedElement}.", "Reference": "Get the {@link Sql @Sql} annotations declared on the supplied {@link AnnotatedElement}.", "NNUpdater": "Converts a {@link java.sql.Types} value to a {@link mondrian.spi.Dialect.Datatype}."}
{"Origin": "Returns the Java type corresponding to the return type of the given method descriptor.", "Reference": "Returns the {@link Type} corresponding to the return type of the given method descriptor.", "NNUpdater": "Returns the {@link Type} corresponding to the return type of the given method descriptor."}
{"Origin": "Creates a ModuleReference to a module packaged as a JMOD.", "Reference": "Creates a ModuleReference to a module in a JMOD file.", "NNUpdater": "Creates the ModuleReference."}
{"Origin": "Creates a randomized list of urls for the given shard.", "Reference": "Creates a list of urls for the given shard.", "NNUpdater": "Gets all ShardStates for a given shard."}
{"Origin": "This method will convert ballerina @Service to swaggers @Swagger object.", "Reference": "This method will convert ballerina @Service to OpenApi @OpenApi object.", "NNUpdater": "Generates {@link BallerinaPackageDoc} objects for each Ballerina package from the given ballerina files."}
{"Origin": "Appends drag data to row data json if generator function is set by the user of this extension.", "Reference": "Appends drag data to row data json if generator function(s) are set by the user of this extension.", "NNUpdater": "Adds a row."}
{"Origin": "Creates new {@link Week} in the UTC timezone.", "Reference": "Creates new {@link Week}.", "NNUpdater": "Creates new {@link Week} in the UTC timezone."}
{"Origin": "This operates using {@link Map#putAll(Map)} semantics using the index as the key.", "Reference": "This operates using {@link Map#put(Object, Object)} semantics using the index as the key.", "NNUpdater": "This is stored in the additional information map using {@code Map.put} semantics, removing the key if the instance is null."}
{"Origin": "Returns a List of item childs that holds information about roles, affiliation, jids and nicks.", "Reference": "Returns a List of item children that holds information about roles, affiliation, jids and nicks.", "NNUpdater": "Returns a List of item childs that holds information about roles, affiliation, jids and nicks."}
{"Origin": "***** Property JVERSIONint *****", "Reference": "***** Property JAVAVERSIONNUMBER *****", "NNUpdater": "Operation fails."}
{"Origin": "Returns true if the current task was cancelled or no agent is alive anmore.", "Reference": "Returns true if the current task was cancelled or no agent is alive anymore.", "NNUpdater": "Check if this statement was canceled."}
{"Origin": "Delete from disk the samples and image if any of a defunct sheet", "Reference": "Delete from disk the samples, tribes and image if any of a defunct sheet.", "NNUpdater": "Report the id of the index/sheet if any"}
{"Origin": "NOTE: You should consider using RequestCancelWorkflowExecution action instead because it allows the workflow to gracefully close while TerminateWorkflowExecution does not.", "Reference": "RequestCancelWorkflowExecution action instead because it allows the workflow to gracefully close while TerminateWorkflowExecution does not.", "NNUpdater": "Get gets the reference to workflow version."}
{"Origin": "Sets the connecting client ID.", "Reference": "Sets the connecting session ID.", "NNUpdater": "Sets the name of the container that contains the blob."}
{"Origin": "Otherwise throws an {@link IllegalArgumentException}.", "Reference": "Otherwise throws an {@link UnsupportedConnectionStringException}.", "NNUpdater": "Returns the name of the class if it is a standard class and it is in a whitelisted package, otherwise throws an IllegalArgumentException."}
{"Origin": "Generates a code sample for using {@link FileAsyncClient#uploadRangeFromUrlWithResponse(long, long, long, URI)}", "Reference": "Generates a code sample for using {@link FileAsyncClient#uploadRangeFromUrlWithResponse(long, long, long, String)}", "NNUpdater": "Generates a code sample for using {@link FileAsyncClient#uploadRangeFromUrlWithResponse(long, long, long, URI)}"}
{"Origin": "Sets the {@link DrmProvider} to use when handling DRM for media.", "Reference": "Sets the {@link MediaDrmCallback} to use when handling DRM for media.", "NNUpdater": "If {@link OnDrmConfigHelper} is registered, it will be called during preparation to allow configuration of the DRM properties before opening the DRM session."}
{"Origin": "Code snippets for {@link BlobClientBase#setHTTPHeadersWithResponse(BlobHTTPHeaders, BlobAccessConditions, Duration,", "Reference": "Code snippets for {@link BlobClientBase#setHTTPHeadersWithResponse(BlobHttpHeaders, BlobAccessConditions, Duration,", "NNUpdater": "Code snippet for {@link AppendBlobClient#createWithResponse(BlobHTTPHeaders, Metadata, BlobAccessConditions,"}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Create a {@link InstanceManager}.", "Reference": "Create a {@link InjectionManager}.", "NNUpdater": "Creates a FileManager."}
{"Origin": "Removes instructor access but does not delete the account.", "Reference": "Cascade deletes all instructors associated with the account.", "NNUpdater": "Access level: admin, instructors using own id."}
{"Origin": "The {@link RsaKeyCreateOptions#getExpires() expires} and {@link", "Reference": "The {@link CreateRsaKeyOptions#getExpiresOn() expires} and {@link", "NNUpdater": "Set the {@link LocalDateTime expires} time value."}
{"Origin": "Returns {@code true} if this class loader is {@linkplain #registerAsParallelCapable parallel capable}, otherwise {@code false}.", "Reference": "Returns {@code true} if this class loader is registered as {@linkplain #registerAsParallelCapable parallel capable}, otherwise {@code false}.", "NNUpdater": "Returns the parallel mode."}
{"Origin": "Time (in ms) of last received appendPosition.", "Reference": "Time (in ns) of last received appendPosition.", "NNUpdater": "Set the current buffered position in ms."}
{"Origin": "If there are no {@link TradeOfferListMutator}s registered for the desired level and {@link Career}, the list remains unmodified.", "Reference": "If there are no {@link TradeOfferListMutator}s registered for the desired level and {@link Profession}, the list remains unmodified.", "NNUpdater": "Gets the {@link ListValue.Mutable} of {@link TradeOffer}s that can be offered."}
{"Origin": "Sets the master secret to use for encrypting application layer data exchanged in this session.", "Reference": "Sets the master secret to be use on session resumptions.", "NNUpdater": "Get the secret of this client"}
{"Origin": "Note that for success blocks needs to call {@link UDPAdapter2#sendAck(SessionReader, Integer)}", "Reference": "Note that for success blocks needs to call {@link UDPAdapter2#sendAck(Session, int)}", "NNUpdater": "Operation fails."}
{"Origin": "Code snippets for {@link LeaseClientBuilder#buildAsyncClient()}.", "Reference": "Code snippets for {@link BlobLeaseClientBuilder#buildAsyncClient()}.", "NNUpdater": "Code snippets for {@link PageBlobAsyncClient#create(long)}"}
{"Origin": "Set the fileCacheControl property: Sets the file's cache control.", "Reference": "Set the cacheControl property: Sets the file's cache control.", "NNUpdater": "Set the default {@link HttpCachePolicy.Policy} cache policy."}
{"Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}", "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveToRangeEnd }{@code >}}", "NNUpdater": "Create an instance of {@link JAXBElement }{@code <}{@link CTStrokeChild }{@code >}}"}
{"Origin": "Configure HTTP message readers to de-serialize the request body with.", "Reference": "Configure HTTP message writers to serialize the request body with.", "NNUpdater": "Return the configurer for HTTP message readers."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Returns a copy of this with a new node version added.", "Reference": "Returns a copy of this containing only the given node versions", "NNUpdater": "Returns a copy of this period with the specified period added."}
{"Origin": "Parses a list of options for this object.", "Reference": "Parses a given list of options.", "NNUpdater": "Parses a given list of options."}
{"Origin": "For example, this demonstrates loading from the models jar file, which you therefore need to include in the classpath for ParserDemo to work.", "Reference": "For example, this demonstrates loading a grammar from the models jar file, which you therefore need to include on the classpath for ParserDemo to work.", "NNUpdater": "Loading of the CRFPP models."}
{"Origin": "If present then it is not an error if the schedule does not exist", "Reference": "If present then it is not an error if the task does not exist", "NNUpdater": "Writes a String to a file creating the file if it does not exist."}
{"Origin": "Create and return a SqlRow based on the resultSet and the dbTrueValue.", "Reference": "Create and return a SqlRow based on the resultSet with dbTrueValue and binaryOptimizedUUID options.", "NNUpdater": "Performs the given SQL query and return the first row of the result set."}
{"Origin": "Maven coordinates: org.apache.camel:camel-spark-rest", "Reference": "Maven coordinates: org.apache.camel:camel-spark", "NNUpdater": "A helper method to return the StreamCaching instance for a given {@link org.apache.camel.CamelContext} if one is enabled"}
{"Origin": "Creates a sequence with the specified value.", "Reference": "Creates a singleton sequence with the specified value.", "NNUpdater": "Creates a sequence with the specified items."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Test ModuleFinder.of with a file path to a directory containing a file starting with ``.", "Reference": "Test ModuleFinder.of with a file path to a directory containing a file that will not be recognized as a module.", "NNUpdater": "Test ModuleFinder.of with one directory of modules"}
{"Origin": "Return a long value which is the number of rows in the table.", "Reference": "Return a long value from a prepared query.", "NNUpdater": "Gets the number of rows in the matrix."}
{"Origin": "Atomically updates the current values with the results of applying the given deltas.", "Reference": "Atomically adds the given deltas to the current hi and lo values.", "NNUpdater": "Resets the {@link Position} for forward traversal."}
{"Origin": "search for possible variables which are possible accessible inside rendered twig template", "Reference": "search for variables which are possible accessible inside rendered twig template", "NNUpdater": "Return the id used for indexing if possible"}
{"Origin": "Note that the file contents should be encoded as a Base64 string and the 10KB limit refers to the number of bytes in the decoded data not the number of characters in the encoded data.", "Reference": "Note that the file contents should be encoded as a Base64 string and the size limit refers to the number of bytes in the decoded data not the number of characters in the encoded data.", "NNUpdater": "Read the contents of a file as a base64 encoded data URL."}
{"Origin": "Generate a new voice ID, starting in provided staff.", "Reference": "Generate a new voice ID, based on voice family and current measure voices.", "NNUpdater": "Create a staff info, using the staffCandidate that corresponds to the staff lines."}
{"Origin": "If any field binding validator fails, no values are saved and a {@code ValidationException} is thrown.", "Reference": "If any field binding validator fails, no values are written and a {@code ValidationException} is thrown.", "NNUpdater": "If this validation fails, then a is thrown."}
{"Origin": "Note, that an exception is thrown if the vertex id is not a valid Titan vertex id or if a vertex with the given id already exists.", "Reference": "Note, that an exception is thrown if the vertex id is not a valid JanusGraph vertex id or if a vertex with the given id already exists.", "NNUpdater": "Converts a Titan vertex id of a given vertex to the user provided id as the inverse mapping of {@link #toVertexId(long)}."}
{"Origin": "Tika Config Uri: The URI of tika-config.xml", "Reference": "Tika Config Uri: The URI of tika-config.xml file to use.", "NNUpdater": "Given an IRI, returns a IRI."}
{"Origin": "Adding fields to a POJO as keyed state should require a state migration.", "Reference": "Adding fields to a POJO as keyed state should succeed.", "NNUpdater": "Sets the state if the current state {@code .equals()} the specified expected state."}
{"Origin": "Returns the ``black`` prefabricated value of the sepcified type.", "Reference": "Returns the ``black`` prefabricated value of the specified type.", "NNUpdater": "Getter for the ``red`` prefabricated value of the specified type."}
{"Origin": "Saves the field values into the given bean if all field level validators pass.", "Reference": "Writes the field values into the given bean if all field level validators pass.", "NNUpdater": "Return the field type for a field."}
{"Origin": "Set the metadata flag for this method to indicate that it is a script body implementation.", "Reference": "Sets the flag for this method to indicate it is a script body implementation.", "NNUpdater": "Set Skript."}
{"Origin": "Main method to invoke this demo about how to recognize linked entities of a text input.", "Reference": "Main method to invoke this demo about how to recognize the linked entities of an input text.", "NNUpdater": "Test list all the classifiers."}
{"Origin": "Returns the output type of the Java method.", "Reference": "Returns the raw annotation value.", "NNUpdater": "Returns the output type of the Java method."}
{"Origin": "Adds an individual container (belonging to any software system) to this view.", "Reference": "Adds an individual container (belonging to any software system) to this view, including relationships to/from that container.", "NNUpdater": "Adds all other containers in the software system to this view."}
{"Origin": "Access Control Using AWS Identity and Access Management (IAM) .", "Reference": "For more information, see Access Control Using AWS Identity and Access Management (IAM).", "NNUpdater": "Access Management (IAM) user account."}
{"Origin": "Converts a Titan vertex id of a given vertex to the user provided id as the inverse mapping of {@link #toVertexId(long)}.", "Reference": "Converts a JanusGraph vertex id of a given vertex to the user provided id as the inverse mapping of {@link #toVertexId(long)}.", "NNUpdater": "Converts a Titan vertex id of a given vertex to the user provided id as the inverse mapping of {@link #toVertexId(long)}."}
{"Origin": "This may be due to an error being propagated from the Flow or fue to a failure sending a success response.", "Reference": "This may be due to an error being propagated from the Flow or due to a failure sending a success response.", "NNUpdater": "The request may also expire due to a timeout or network error."}
{"Origin": "Returns the tree for an annotation given an Attribute to search (recursively) and its corresponding tree.", "Reference": "Returns the tree for an attribute given an enclosing attribute to search (recursively) and the enclosing attribute's corresponding tree.", "NNUpdater": "Initializes the main tree."}
{"Origin": "and repositoryId = ?", "Reference": "and parentFolderId = ?", "NNUpdater": "Engine."}
{"Origin": "Respond a limited number of times with the provided message in reply to each intercepted outbound message.", "Reference": "Respond a limited number of times with the provided message in response to each intercepted outbound message.", "NNUpdater": "Create a message with outbound and invocation properties."}
{"Origin": "Creates a new label name if the given label does not yet have one.", "Reference": "Constructs a new label name if the given label does not yet have one.", "NNUpdater": "label1 and label2 in X.Y.Z-label1-lable2."}
{"Origin": "Get all the indexed documents (no paginated results).", "Reference": "Get all the indexed documents (no paginated results) of the specified type.", "NNUpdater": "{@link ApiFuture#get()} returns an {@link AsyncPage} object that can be used to asynchronously handle paginated results."}
{"Origin": "If either collection or watchlist have changes newer than last stored.", "Reference": "If either collection, watchlist or watched list have changes newer than last stored.", "NNUpdater": "Removes the cache from the watchlist"}
{"Origin": "Computes the next larger double in the power series point = 2( i / ppo ) given the current point in the series.", "Reference": "Computes the next larger double in the power series point = logBase( i / ppo ) given the current point in the series.", "NNUpdater": "Returns the size of data point."}
{"Origin": "or throws a {@link com.liferay.privatemessaging.NoSuchUserThreadException} if it could not be found.", "Reference": "or throws a {@link NoSuchUserThreadException} if it could not be found.", "NNUpdater": "Operation fails."}
{"Origin": "Get create Builtin Function Snippet Block.", "Reference": "Get convert Builtin Function Snippet Block.", "NNUpdater": "Get Object Initializer Snippet Block."}
{"Origin": "Opens the given snapshot writer.", "Reference": "Opens the given snapshot output stream.", "NNUpdater": "Opens the underlying proxy client."}
{"Origin": "Create an immutable view of this {@link Vector4f}.", "Reference": "Create a new immutable view of this {@link Vector4f}.", "NNUpdater": "Multiply this Vector4f component-wise by another Vector4f."}
{"Origin": "Client will automatically attempt to reconnect to the server if the connection is lost.", "Reference": "Sets whether the client will automatically attempt to reconnect to the server if the connection is lost.", "NNUpdater": "Is the connection lost for more than 3 minutes, the user will be removed (within 3 minutes the user can reconnect)"}
{"Origin": "The outer most component is the root component in the Component hierarchy representing this InternalNode.", "Reference": "The head component is the root component in the Component hierarchy representing this InternalNode.", "NNUpdater": "Returns the actor type."}
{"Origin": "Same as {@link #list()}, only returns an array instead.", "Reference": "Same as {@link #build()}, only returns an array instead of a list.", "NNUpdater": "Use {@code getElementValueArray} instead."}
{"Origin": "Returns the value of the {@code bitfield} field.", "Reference": "Returns the value of the {@code direction} field.", "NNUpdater": "Returns the value of the {@code to_cache} field."}
{"Origin": "Returns the intersection (set theory) of two given sets, retaining order.", "Reference": "Returns the intersection (set theory) of two given (sorted) sets, retaining order only when natural order.", "NNUpdater": "Returns the intersection of these two sets, using {@code Sets.intersection}:"}
{"Origin": "Sets MediaSession2 token to control corresponding MediaSession2.", "Reference": "Sets MediaSession token to control corresponding MediaSession.", "NNUpdater": "Connects to service app's MediaSession2ProviderService."}
{"Origin": "Reads the Hashes attribute", "Reference": "Reads the ModuleHashes attribute", "NNUpdater": "The Hashes attribute will be emitted to the module-info with the hashes encapsulated in the given {@code ModuleHashes} object."}
{"Origin": "This method attaches a linked file from a URL (if not already linked) to an entry using the key and value pair from the findFullTexts map", "Reference": "This method attaches a linked file from a URL (if not already linked) to an entry using the key and value pair from the findFullTexts map and then downloads the file into the given targetDirectory", "NNUpdater": "Removes a key/value pair from the list"}
{"Origin": "If {@code labels = ``abc,def``}, settings with labels ``abc`` or ``def`` are returned.", "Reference": "If {@code labelFilter = ``abc,def``}, settings with labels ``abc`` or ``def`` are returned.", "NNUpdater": "If {@code keys = ``*abc*``}, settings with a key containing ``abc`` are returned."}
{"Origin": "Sets the value of the 'RowKey' field", "Reference": "Sets the value of the 'rowKey' field.", "NNUpdater": "Sets the value of the 'paramName' field."}
{"Origin": "Note that checking for collisions with a rotated ImageSprite currently checks against the sprite's unrotated position.", "Reference": "Note that checking for collisions with a rotated ImageSprite currently checks against its unrotated position.", "NNUpdater": "{@link SpriteBatchVertexBuffer#add(Sprite)}."}
{"Origin": "Defaults to .", "Reference": "Sets .", "NNUpdater": "Defaults to ``AUTO``."}
{"Origin": "Tests the {@link MasterWorkerInfo#generateClientWorkerInfo()} method.", "Reference": "Tests the {@link MasterWorkerInfo#generateWorkerInfo} method.", "NNUpdater": "Tests the {@link BlockWorker#sessionHeartbeat(long)} method."}
{"Origin": "Tests the {@link FileSystemMaster#checkConsistency(AlluxioURI, CheckConsistencyOptions)} method when all files are consistent.", "Reference": "Tests the {@link FileSystemMaster#checkConsistency(AlluxioURI, CheckConsistencyContext)} method when all files are consistent.", "NNUpdater": "Tests the {@link FileSystemMaster#checkConsistency(AlluxioURI, CheckConsistencyOptions)} method when all files are consistent."}
{"Origin": "Unsubscribe from all state channels of the component.", "Reference": "Unsubscribes from all state channels of the component.", "NNUpdater": "Unsubscribe from all channel and channel groups."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Perform a 302 redirect to `url`.", "Reference": "Perform a 302 redirect to {@code url}.", "NNUpdater": "302) to the client using the specified redirect location."}
{"Origin": "Get the active candidate selector.", "Reference": "Get the active exclude selector.", "NNUpdater": "Returns the IO controller."}
{"Origin": "Get information about a specific batch-processing request.", "Reference": "Get information about a specific batch-processing job.", "NNUpdater": "Get Neuen Lauf erstellen."}
{"Origin": "Tests the engine starts up, executes 1 trade cycle successfully, but then receives unexpected Exception from", "Reference": "Tests the engine starts up, executes 1 trade cycle successfully, but then receives unexpected", "NNUpdater": "If an UnexpectedExceptionInformation is not found for the status code the default UnexpectedExceptionInformation will be returned."}
{"Origin": "DO NOT change the order of the expressions returned because broker relies on that to process the query.", "Reference": "NOTE: DO NOT change the order of the expressions returned because broker relies on that to process the query.", "NNUpdater": "Note: This method cannot be overridden since the selection and the internal methods rely on it."}
{"Origin": "For the underlying REST API, go to", "Reference": "For the underlying REST API, go to List Jobs", "NNUpdater": "Implementation of getStream REST API."}
{"Origin": "By defualt MapDB uses {@link java.nio.channels.FileChannel}.", "Reference": "By default MapDB uses {@link java.io.RandomAccessFile}.", "NNUpdater": "Reads the buffer from a Java NIO {@link java.nio.FileChannel}."}
{"Origin": "This needs to be implemented in order to display the fullscreen button.", "Reference": "A non-null listener needs to be set in order to display the fullscreen button.", "NNUpdater": "If this method is implemented by an iterator, {@link #get} needs to be implemented as well."}
{"Origin": "Verify the validity of an 'EC_SIGN_P256_SHA256' signature for the specified plaintext message", "Reference": "Verify the validity of an 'EC_SIGN_P256_SHA256' signature for the specified message", "NNUpdater": "- {@link #KEY_SIGNATURE}: value specified by {@link #setCreator(String)}."}
{"Origin": "Amazon Redshift returns all HSM client certificates that match any combination of the specified keys and values.", "Reference": "Redshift returns all HSM client certificates that match any combination of the specified keys and values.", "NNUpdater": "Describes the SQL Query to execute on an Amazon Redshift database for an"}
{"Origin": "Set the default factory.", "Reference": "Changes the default factory.", "NNUpdater": "Set Standard."}
{"Origin": "Returns a map of methods and corresponding SkylarkCallable annotations of the methods of the classObj class reachable from Skylark.", "Reference": "Returns a map of methods and corresponding SkylarkCallable annotations of the methods of the objClass class reachable from Skylark.", "NNUpdater": "Returns the list of Skylark callable Methods of objClass with the given name."}
{"Origin": "Tests using mapify on entities", "Reference": "Tests using mapify on refs", "NNUpdater": "Adds an entity to entities."}
{"Origin": "Adds a WebSocket to the members list.", "Reference": "Adds a WebSocket to the clients list.", "NNUpdater": "Creates a {@link WebSocketCreator} that uses the given handler class/instance for the WebSocket connections."}
{"Origin": "or throws a {@link com.liferay.knowledgebase.NoSuchCommentException} if it could not be found.", "Reference": "or throws a {@link NoSuchCommentException} if it could not be found.", "NNUpdater": "Operation fails."}
{"Origin": "Appends the name of the given label to {@link #buf buf}.", "Reference": "Appends the name of the given label to {@link #stringBuilder}.", "NNUpdater": "Writes rec file position to given {@code buf}."}
{"Origin": "registerLaserOre | NBTTag with an ItemStack saved on it, with the weight on the ``value`` attribute, | A ValuedItem with item and value set.", "Reference": "registerLaserOre | NBTTag with an @Nonnull ItemStack saved on it, with the weight on the ``value`` attribute, | A ValuedItem with item and value set.", "NNUpdater": "Gets the {@link Value.Mutable} for the represented {@link ItemStack} as an {@link ItemStackSnapshot}."}
{"Origin": "Caches numeric host names AND DNS host names, and negative caches also.", "Reference": "Caches numeric host names, and negative caches also.", "NNUpdater": "Creates and caches a Jest client from host and port."}
{"Origin": "Set the timeout after which the job should be aborted.", "Reference": "Set the execution id for this job.", "NNUpdater": "Set the connection and socket timeout."}
{"Origin": "Resource ID for drawable.", "Reference": "Get resource ID.", "NNUpdater": "Returns a drawable object associated with a particular resource ID."}
{"Origin": "Converts the entries from this query result into actual {@link TitanRelation}.", "Reference": "Converts the entries from this query result into actual {@link JanusGraphRelation}.", "NNUpdater": "Return as a {@link RelationshipType} if the {@link Concept} is a {@link RelationshipType}."}
{"Origin": "Returns the app area component.", "Reference": "Sets the app content component.", "NNUpdater": "Returns the {@link App app}'s {@link JobManager}"}
{"Origin": "NOTE:You cannot delete a parameter group if it is associated with a cluster.", "Reference": "You cannot delete a parameter group if it is associated with a cluster.", "NNUpdater": "You cannot delete an application version that is associated with a running environment."}
{"Origin": "Test that a JAR file with a Main-Class attribute that is not a valid", "Reference": "Test that a JAR file with a Main-Class attribute that is not a qualified type name.", "NNUpdater": "Generates a JAR file that contains zero or more classes with a static main method."}
{"Origin": "RsaKeyCreateOptions#getNotBefore() notBefore} values are optional.", "Reference": "CreateRsaKeyOptions#getNotBefore() notBefore} values are optional.", "NNUpdater": "{@codesnippet com.azure.keyvault.keys.keyclient.createRsaKeyWithResponse#keyOptions-Context}"}
{"Origin": "Sets the left border for a region of cells by manipulating the cell style of the individual cells on the left", "Reference": "Sets the left border style for a region of cells by manipulating the cell style of the individual cells on the left", "NNUpdater": "Sets the left border for a region of cells by manipulating the cell style of the individual cells on the left"}
{"Origin": "Returns the source file containing the new expression.", "Reference": "Returns the source file containing the expression.", "NNUpdater": "Returns the resource."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "{@codesnippet com.azure.storage.blob.specialized.BlobAsyncClientBase.copyFromURL#URL}", "Reference": "{@codesnippet com.azure.storage.blob.specialized.BlobAsyncClientBase.copyFromURL#String}", "NNUpdater": "{@codesnippet com.azure.storage.blob.BlobClientBuilder.buildAsyncClient}"}
{"Origin": "Returns a {@code Charset} instance for the named charset.", "Reference": "Returns a charset object for the named charset.", "NNUpdater": "Shortcut for {@code new Charset(charset)}."}
{"Origin": "If keys = ``*abc*``, settings with a key containing ``abc`` are returned.", "Reference": "If {@code keyFilter = ``*abc*``}, settings with a key containing ``abc`` are returned.", "NNUpdater": "If keys = ``*abc*``, settings with a key containing ``abc`` are returned."}
{"Origin": "Creates a new explicit {@link MessageProcessorChain} from one or more {@link Processor}'s.", "Reference": "Creates a new explicit {@link MessageProcessorChain} from a {@link List} of {@link Processor}'s.", "NNUpdater": "Creates a {@link Processor} that will process messages from the configured {@link MessageSource} ."}
{"Origin": "In order to set the matrix to a rotation transformation without post-multiplying, use {@link #rotation(Quaterniond)}.", "Reference": "In order to set the matrix to a rotation transformation without post-multiplying, use {@link #rotation(Quaterniondc)}.", "NNUpdater": "In order to set the matrix to a rotation transformation without post-multiplying, use {@link #rotation(Quaternionf)}."}
{"Origin": "Creates a new SchemaInfoLevel builder with settings for standard schema information.", "Reference": "Creates a new SchemaInfoLevel with settings for standard schema information.", "NNUpdater": "Schema found for given schemaPath is a root schema."}
{"Origin": "Returns the descriptor corresponding to the given Java type.", "Reference": "Returns the descriptor corresponding to the given class.", "NNUpdater": "Returns the descriptor corresponding to the given class."}
{"Origin": "Connects this channel to a group and gets a state from a specified state provider.", "Reference": "Joins the cluster and gets a state from a specified state provider.", "NNUpdater": "Sets the state if the current state {@code .equals()} the specified expected state."}
{"Origin": "In case the {@code parent} service locator is not specified, the locator will not be parented.", "Reference": "In case the {@code name} is not specified, the locator will be unnamed.", "NNUpdater": "Set Lagerort."}
{"Origin": "Currently only HTTP live streaming data URI's embedded with timed ID3 tags generates {@link TimedMetaData2}.", "Reference": "Currently only HTTP live streaming data URI's embedded with timed ID3 tags generates {@link TimedMetaData}.", "NNUpdater": "Currently only HTTP live streaming data URI's embedded with timed ID3 tags generates {@link TimedMetaData2}."}
{"Origin": "Gets the value of the 'BloomFilter' field", "Reference": "Gets the value of the 'bloomFilter' field.", "NNUpdater": "Determines whether a given bloom filter is compatible with this bloom filter."}
{"Origin": "Static factory that immediately returns {@link #to() method picker}.", "Reference": "Static factory that immediately returns {@link #get() method picker}.", "NNUpdater": "Returns the current value of the date picker."}
{"Origin": "Implements Operator.DIVIDE.", "Reference": "Implements 'x y'.", "NNUpdater": "Set Divisor."}
{"Origin": "Verifies traced span event for when {@link org.apache.activemq.ActiveMQMessageProducer ActiveMQMessageProducer} sends the message.", "Reference": "Verifies traces for when {@link org.apache.activemq.ActiveMQMessageProducer ActiveMQMessageProducer} sends the message.", "NNUpdater": "Test for sending a message batch that is {@link EventHubAsyncProducer#MAX_MESSAGE_LENGTH_BYTES} with partition key."}
{"Origin": "Sets the quorum name for operations.", "Reference": "Sets the split brain protection name for operations.", "NNUpdater": "Sets the cluster read quorum strategy."}
{"Origin": "The context (if defined) for the dialog node.", "Reference": "The context for the dialog node.", "NNUpdater": "Sets the dialogNodeId."}
{"Origin": "Register sub-objects such as caches", "Reference": "Register sub-objects such as caches and our own metrics", "NNUpdater": "Update all caching nodes"}
{"Origin": "Returns raw parameter component types.", "Reference": "Returns number of parameters.", "NNUpdater": "Returns the types map."}
{"Origin": "[A6] If the new lookup class is not accessible to the old lookup class, using the original access modes, then no members, not even public members, will be accessible.", "Reference": "[A8] If the new lookup class is not accessible to the old lookup class, then no members, not even public members, will be accessible.", "NNUpdater": "(In all other cases, public members will continue to be accessible.)"}
{"Origin": "create a network bridge", "Reference": "Create a network bridge", "NNUpdater": "Creates a for adding a new cache server."}
{"Origin": "Checks that collection {@param col} contains string {@param str}.", "Reference": "Checks that collection {@param col} contains element {@param elem}.", "NNUpdater": "Get the param value."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Create a new {@link MergedAnnotation} instance from the specified annotation type and attributes map.", "Reference": "Create a new {@link MergedAnnotation} instance of the specified annotation type with attributes values supplied by a map.", "NNUpdater": "Get {@link Annotation} attributes"}
{"Origin": "Find the runtime Module corresponding to the given ResolvedModule in the given parent Layer (or its parents).", "Reference": "Find the runtime Module corresponding to the given ResolvedModule in the given parent layer (or its parents).", "NNUpdater": "Test that the given Module reads all module in the given Layer and its parent Layers."}
{"Origin": "Reads boolean type system property.", "Reference": "Reads a system property.", "NNUpdater": "Get the operationResult value."}
{"Origin": "This implementation returns the underlying File's length.", "Reference": "This implementation returns the underlying File/Path length.", "NNUpdater": "This implementation reads the entire InputStream to calculate the content length."}
{"Origin": "Sets the Raft serializer.", "Reference": "Sets the server protocol.", "NNUpdater": "Sets the Raft serializer."}
{"Origin": "For Kotlin classes, it returns the Java constructor corresponding to the Kotlin primary constructor (as defined in", "Reference": "For Kotlin classes, this returns the Java constructor corresponding to the Kotlin primary constructor (as defined in the Kotlin specification).", "NNUpdater": "Returns the constructor specified in declaringClass."}
{"Origin": "Returns true if this result is an overflow condition.", "Reference": "Tells whether or not this object describes an overflow condition.", "NNUpdater": "This method returns an {@link Overflow} instance with the result of the subtraction and any overflow in days."}
{"Origin": "Decrypts the byte array using the configured {@link #getCipher() cipher}.", "Reference": "Decrypts the byte array using the configured {@link #getCipherService() cipherService}.", "NNUpdater": "Gets the Java Cryptography Architecture transformation corresponding to the suite's underlying cipher algorithm."}
{"Origin": "If you have an EdgeIteratorState the other createTraversalKey is preferred!", "Reference": "If you have an EdgeIteratorState the other createTraversalId is preferred!", "NNUpdater": "Create an _IteratorV."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "[A6] If the new lookup class is not accessible to the old lookup class, using the original access modes, then no members, not even public members, will be accessible.", "Reference": "[A8] If the new lookup class is not accessible to the old lookup class, then no members, not even public members, will be accessible.", "NNUpdater": "(In all other cases, public members will continue to be accessible.)"}
{"Origin": "A {@code DateTimeAccessor} represents some form of date and time information.", "Reference": "A {@code TemporalAccessor} represents some form of date and time information.", "NNUpdater": "Checks if the instant of this date-time is after that of the specified date-time."}
{"Origin": "Filter a list of {@link MetadataSearchResultRecord} that ensures the logged-in user has a privilege on", "Reference": "Filter a list of {@link MetadataRecord}s that ensures the logged-in user has a privilege on", "NNUpdater": "Returns the last user that has logged in that are still valid."}
{"Origin": "Returns an immutable collection of all the snapshot ids in the repository, both active and incompatible snapshots.", "Reference": "Returns an immutable collection of all the snapshot ids in the repository.", "NNUpdater": "Returns the snapshot name"}
{"Origin": "Throw a {@link RuntimeException} with a message for a send error.", "Reference": "Throw a {@link AeronException} with a message for a send error.", "NNUpdater": "Send an {@link android.util.Log#ERROR} log message."}
{"Origin": "Defines target size for image.", "Reference": "Defines target size for image aware view.", "NNUpdater": "Defines target size for image aware view."}
{"Origin": "Returns a literal for the {@link Component} state.", "Reference": "Returns a literal for the {@link ScrService.Component} state.", "NNUpdater": "Returns time zone component of this literal."}
{"Origin": "Waits for an existing process to finish, a custom timeout and a process terminator.", "Reference": "Waits for an existing process to finish, using a custom termination check interval and a process terminator.", "NNUpdater": "Waits up to {@code timeoutMillis} milliseconds for the given process to finish."}
{"Origin": "The option will be converted to a type.", "Reference": "The option is a: type.", "NNUpdater": "Later, the collection will be converted into the target type."}
{"Origin": "We check if there is a registered comparator for all the superclasses of {@code clazz} 3.", "Reference": "We check if there is a registered comparator for a superclass of {@code clazz} 3.", "NNUpdater": "If a comparator is set the default comparator for the given {@link ValueType} is used."}
{"Origin": "Adds a sample request for {@link #getService()}.", "Reference": "Adds an example request for {@link #getService()}.", "NNUpdater": "Generates a code sample for using {@link FileServiceClient#getPropertiesWithResponse(Duration, Context)}"}
{"Origin": "This method sets the value of the database column s_user.dateofbirth", "Reference": "This method sets the value of the database column s_user.birthday", "NNUpdater": "This method sets the value of the database column litemall_user.update_time"}
{"Origin": "Indicates whether external XML entities are processed when converting to a Source.", "Reference": "Indicate whether external XML entities are processed when converting to a Source.", "NNUpdater": "Adds an entity to entities."}
{"Origin": "Determine if this instance only contains only a single attribute named {@code value}.", "Reference": "Determine if this instance only contains a single attribute named {@code value}.", "NNUpdater": "VALUE_ONLY: Value only."}
{"Origin": "Moves entries inside an array.", "Reference": "Removes entries inside an array.", "NNUpdater": "Moves a folder in the Cms."}
{"Origin": "Common test method to be able to check security from any authentication plugin", "Reference": "Common test method to be able to check auth metrics from any authentication plugin", "NNUpdater": "Adds new security scan to TestStep SecurityTest config"}
{"Origin": "This declaration is of the form ``Label lXXX = new Label();``.", "Reference": "This declaration is of the form ``Label labelXXX = new Label();``.", "NNUpdater": "label1 and label2 in X.Y.Z-label1-lable2."}
{"Origin": "A {@code DateTimeAccessor} represents some form of date and time information.", "Reference": "A {@code TemporalAccessor} represents some form of date and time information.", "NNUpdater": "Checks if the instant of this date-time is after that of the specified date-time."}
{"Origin": "Set the elevation (in meters) of the point.", "Reference": "Set the elevation of the point.", "NNUpdater": "Retrieve the elevation of a single location."}
{"Origin": "where a, b, and c are all arrays, and a has type {@literal @}SameLen(``d``).", "Reference": "where a, b, and c are all arrays, and a has type {@code @SameLen(``d``)}.", "NNUpdater": "Operation fails."}
{"Origin": "Creates new {@link DayOfYear} in UTC.", "Reference": "Creates new {@link DayOfYear}.", "NNUpdater": "Creates new {@link DayOfYear} in UTC."}
{"Origin": "Assign the timeOffset since the beginning of the measure, for all chords in this time slot.", "Reference": "Assign the timeOffset since the beginning of the measure.", "NNUpdater": "Assign the timeOffset since the beginning of the measure, for all chords in this time slot."}
{"Origin": "Sets the current end icon to be VISIBLE or GONE.", "Reference": "Sets the current end icon to be VISIBLE or INVISIBLE.", "NNUpdater": "Set a view visibility to VISIBLE (true) or INVISIBLE (false)."}
{"Origin": "See Immutable Set Static Factory Methods for details.", "Reference": "See Unmodifiable Sets for details.", "NNUpdater": "VerificationTimes supports multiple static factory methods:"}
{"Origin": "Checks that a randomly generated {@link SkylarkSemantics} object can be serialized and deserialized to an equivalent object.", "Reference": "Checks that a randomly generated {@link StarlarkSemantics} object can be serialized and deserialized to an equivalent object.", "NNUpdater": "a deserialized serialized unit is the same instance"}
{"Origin": "Gets the available {@link TradeOfferListMutator}s for the desired {@link Career} and {@code level}.", "Reference": "Gets the available {@link TradeOfferListMutator}s for the desired {@link Profession} and {@code level}.", "NNUpdater": "Gets the {@link ListValue.Mutable} of {@link TradeOffer}s that can be offered."}
{"Origin": "Reset {@link #KEY_LAST_MOVIES_WATCHED_AT} to 0 so all watched movies will be downloaded the next time a sync runs.", "Reference": "Remove {@link #KEY_LAST_MOVIES_WATCHED_AT} so all watched movies will be downloaded the next time a sync runs.", "NNUpdater": "Operation fails."}
{"Origin": "If there are more vaults to list, the response field contains the vault Amazon Resource Name (ARN) at which to continue the list with a new List Vaults request; otherwise, the field is .", "Reference": "If there are more vaults to list, the response marker field contains the vault Amazon Resource Name (ARN) at which to continue the list with a new List Vaults request; otherwise, the marker field is null.", "NNUpdater": "Resource Name (ARN)."}
{"Origin": "Set this {@link AxisAngle4d} to be equivalent to the given {@link Quaterniond}.", "Reference": "Set this {@link AxisAngle4d} to be equivalent to the given {@link Quaterniondc}.", "NNUpdater": "Set this {@link AxisAngle4d} to be equivalent to the given {@link Quaterniondr}."}
{"Origin": "If recipient set contains {@link #ALL_RECIPIENTS} then the message will be sent to all distribution managers.", "Reference": "Message.ALL_RECIPIENTS then the message will be sent to all distribution managers.", "NNUpdater": "Adds anew {@link Recipient} instances to the list on account of given name, address with recipient type {@link Message.RecipientType#TO}."}
{"Origin": "This logic is used for default partitioning and can be used to implement {@link Partitionable}.", "Reference": "This logic is used for default partitioning and can be used to implement {@link Partitioner}.", "NNUpdater": "The partitioning for the table streams."}
{"Origin": "Generates a code sample for using {@link FileAsyncClient#uploadRangeFromUrl(long, long, long, URI)}", "Reference": "Generates a code sample for using {@link FileAsyncClient#uploadRangeFromUrl(long, long, long, String)}", "NNUpdater": "Generates a code sample for using {@link FileAsyncClient#uploadRangeFromUrl(long, long, long, URI)}"}
{"Origin": "const MAX = 10; ( 3) ConstantDeclaration; (4) ConstantElement", "Reference": "const MAX = 10; ( 6) ConstantDeclaration; (7) ConstantElement", "NNUpdater": "Get a field constant from the constant pool."}
{"Origin": "The playback of the prefetched content should start in the later calls of {@link SessionPlayer2#play()}.", "Reference": "The playback of the prepareed content should start in the later calls of {@link SessionPlayer2#play()}.", "NNUpdater": "The playback of the prefetched content should start in the later calls of {@link SessionPlayer2#play()}."}
{"Origin": "Top element on the stack contains the return value or exception instance.", "Reference": "The top element on the stack contains the return value or the exception instance.", "NNUpdater": "Removes and returns the top element or returns {@code null} if this stack is empty."}
{"Origin": "Adds pending task object.", "Reference": "Adds continuous task object.", "NNUpdater": "Adds a pending delete for the given index."}
{"Origin": "{@codesnippet com.azure.storage.file.datalake.DataLakeDirectoryClient.createSubDirectory#String}", "Reference": "{@codesnippet com.azure.storage.file.datalake.DataLakeDirectoryClient.createSubdirectory#String}", "NNUpdater": "{@codesnippet com.azure.storage.file.directoryClient.createSubDirectoryWithResponse#string-map-Context}"}
{"Origin": "An array containing any synonyms for the entity value.", "Reference": "An array of synonyms for the entity value.", "NNUpdater": "Adds an synonym to synonyms."}
{"Origin": "Remove any key material: slices potential alter and key shape.", "Reference": "Remove any key material: slices potential alter.", "NNUpdater": "KeyImportOptions#getKeyMaterial() key material} cannot be null."}
{"Origin": "If such an URL was returned during login, it will be returned as an {@link URL}.", "Reference": "If such an URL was returned during login, it will be returned {@link URL}.", "NNUpdater": "See URL()"}
{"Origin": "Overrides the default comparator (which returns the oldest event available).", "Reference": "Overrides the default trackedEventComparator.", "NNUpdater": "If a comparator is set the default comparator for the given {@link ValueType} is used."}
{"Origin": "For patterns of type {@link Type#SINGLE_TARGET}, returns the {@link Label} of the target.", "Reference": "For patterns of type {@link Type#SINGLE_TARGET}, returns the target path.", "NNUpdater": "See {@link Target#calculateDistance(Target, Target)}"}
{"Origin": "Get the current values from all resources.", "Reference": "Get the current monitored values from all resources.", "NNUpdater": "Get all values of this property from the provided Element."}
{"Origin": "Use a map to store level and the node values in it.", "Reference": "Use a map to store column and the node values in it.", "NNUpdater": "Use a map to store level and the node values in it."}
{"Origin": "Locks existing inodes on the path to the inode specified by an id, in the specified {@link LockMode}.", "Reference": "Locks existing inodes on the path to the inode specified by an id, in the specified {@link LockPattern}.", "NNUpdater": "Tests the {@link InodeTree#lockDescendants(LockedInodePath, InodeTree.LockMode)} method."}
{"Origin": "Persist the fallbackStorageProperties to the fallbackStorageFile.", "Reference": "Persist the fallbackStorage to the fallbackStorageFile.", "NNUpdater": "Finds the best fallback for the given exception type and apply it to the exception or throw the original error if no fallback found."}
{"Origin": "If defaultSessionType is null, TEAMEVALUATION is selected by default.", "Reference": "If defaultSessionTemplateType is null, TEAMEVALUATION is selected by default.", "NNUpdater": "Default is two strings."}
{"Origin": "Gets a location for the module containing a specific file representing a Java source or class, to be found within a location, which may be either a module-oriented location or an output location.", "Reference": "Gets a location for the module containing a specific file to be found within a location, which may be either a module-oriented location or an output location.", "NNUpdater": "Set Nach Ort."}
{"Origin": "Adds a WAN publisher configuration to this WAN replication.", "Reference": "Adds a custom WAN publisher implementation configuration to this WAN replication.", "NNUpdater": "Clears the WAN queues for the wan replication name and publisher ID defined by the command parameters."}
{"Origin": "Creates instance of {@link SecureServerExposerFactory} that will expose secure servers for runtime with the specified runtime identity.", "Reference": "Creates instance of {@link SecureServerExposerFactory} that will expose secure servers of", "NNUpdater": "The default factory instance is configured to be namespace-aware, not validating, and to use {@link XMLConstants#FEATURE_SECURE_PROCESSING secure XML processing}."}
{"Origin": "Obtains an instance from the specified unique name.", "Reference": "Obtains an instance from the specified name.", "NNUpdater": "Obtains the type from a unique name."}
{"Origin": "This is the {@code location} given in the constructor after being resolved against the core instance dir.", "Reference": "This is the {@code location} given in the constructor.", "NNUpdater": "Whether the {@code call} is calling the given `functionName` in the `resolvedModuleName` with the `resolvedFinalArity`"}
{"Origin": "A helper method to search for segments of a request path.", "Reference": "A helper method to search for pathSegments of a request path.", "NNUpdater": "Append path segments to the existing path."}
{"Origin": "Validates and returns the underlying {@link LogicalType} of the given {@link Schema.Field}.", "Reference": "Validates and returns the underlying {@link LogicalType} Schema of the given {@link Schema.Field}.", "NNUpdater": "Returns the field's {@link ValueType}"}
{"Origin": "Sets new reference to partition counters page (logical cache sizes).", "Reference": "Sets new reference to page with logical cache sizes in cache group.", "NNUpdater": "Create a new Partition."}
{"Origin": "In this case dependant plugins not disabled.", "Reference": "In this case dependent plugins not disabled.", "NNUpdater": "Enabled --"}
{"Origin": "Deletes all files and sub-directories under .", "Reference": "Recursively deletes all files and sub-directories under .", "NNUpdater": "Creates a {@link FileHelper} that will by default match all files and all directories under the given basePath."}
{"Origin": "Encodes the given object using the configured {@link #serializer}.", "Reference": "Encodes the given object using the given encoder.", "NNUpdater": "Encodes a message object."}
{"Origin": "The curves themselves are provided in {@link ScenarioMarketData} using {@link CurveId} as the identifier.", "Reference": "The curves themselves are provided in {@link ScenarioMarketData} using {@link RatesCurveId} as the identifier.", "NNUpdater": "The curves themselves are provided in {@link CalculationMarketData} using {@link CurveId} as the identifier."}
{"Origin": "Set the elements of this matrix to the upper left 3x3 of the given {@link Matrix4d}.", "Reference": "Set the elements of this matrix to the upper left 3x3 of the given {@link Matrix4dc}.", "NNUpdater": "Set the upper left 3x3 submatrix of this {@link Matrix4d} to that of the given {@link Matrix4d} and don't change the other elements."}
{"Origin": "Prints a record with the specified fields.", "Reference": "Prints a record with the specified entries.", "NNUpdater": "Called by the default implementation of {@link #readRecord} to set a record fields value to a record instance."}
{"Origin": "See Immutable Map Static Factory Methods for details.", "Reference": "See Unmodifiable Maps for details.", "NNUpdater": "VerificationTimes supports multiple static factory methods:"}
{"Origin": "Returns a copy of this ZonedDateTime changing the zone offset to the earlier of the two valid offsets at a local time-line overlap.", "Reference": "Returns a copy of this date-time changing the zone offset to the earlier of the two valid offsets at a local time-line overlap.", "NNUpdater": "If you simply want to use the later offset at overlaps then call {@link ZonedDateTime#withLaterOffsetAtOverlap()} immediately after this method."}
{"Origin": "Returns the parent folder to the resource in the current site.", "Reference": "Returns the parent folder of this resource in the current site.", "NNUpdater": "Sets the current site root of the user."}
{"Origin": "The detailed format of the region ID depends on the group.", "Reference": "The detailed format of the region ID depends on the group supplying the data.", "NNUpdater": "Adds the specified group to the list of subgroups that this group is composed of."}
{"Origin": "Receives all emails that matches given {@link EmailFilter filter} and mark them as 'seen' (ie 'read').", "Reference": "Receives all emails that matches given {@link EmailFilter} and mark them as 'seen' (ie 'read').", "NNUpdater": "{@link Filter#getDocIdSet}."}
{"Origin": "Run 4F with fixed parameters and compare the result to a golden standard.", "Reference": "Run 4C with fixed parameters and compare the result to a golden standard.", "NNUpdater": "Run 4F with fixed parameters and compare the result to a golden standard."}
{"Origin": "Checks if pos is in range [offset .. offset+length]", "Reference": "Checks if pos is in range [offset..end]", "NNUpdater": "Gets the view offset."}
{"Origin": "The gossip digest is built based on randomization rather than just looping through the collection of live endpoints.", "Reference": "The gossip digest is built based on randomization rather than just looping through the collection of live nodes.", "NNUpdater": "Sets the time to live for documents in the collection"}
{"Origin": "Sets the {@link EncryptionScope encryption scope} that is used to encrypt blob contents on the server.", "Reference": "Sets the {@code encryption scope} that is used to encrypt blob contents on the server.", "NNUpdater": "Set the encryptionAlgorithm property: The algorithm used to produce the encryption key hash."}
{"Origin": "Modifies the client to accept only requests with a given certificate.", "Reference": "Modifies the builder to accept only requests with a given certificate.", "NNUpdater": "Get a certificate signing request."}
{"Origin": "Gets whether this factory supports the given path and thus whether calling the {@link #create(String, UnderFileSystemConfiguration, AlluxioConfiguration)} can succeed for this path.", "Reference": "Gets whether this factory supports the given path and thus whether calling the {@link #create(String, UnderFileSystemConfiguration)} can succeed for this path.", "NNUpdater": "Tests the {@link UnderFileSystemRegistry#find(String)} method."}
{"Origin": "Code snippets for {@link BlobClientBase#setHTTPHeaders(BlobHTTPHeaders)}", "Reference": "Code snippets for {@link BlobClientBase#setHTTPHeaders(BlobHttpHeaders)}", "NNUpdater": "Code snippet for {@link AppendBlobClient#createWithResponse(BlobHTTPHeaders, Map, BlobAccessConditions,"}
{"Origin": "Returns the quorum name for operations.", "Reference": "Returns the split brain protection name for operations.", "NNUpdater": "Returns the cluster read quorum strategy."}
{"Origin": "If the element already has the attribute set, it will be overridden.", "Reference": "If the element already has the attribute set, it will be overridden with this value.", "NNUpdater": "If a factory with the given name already exists it will be overridden."}
{"Origin": "The comparison is based on the Unicode value of each character in the strings.", "Reference": "The comparison is based on the Unicode value of each character in the CharSequences.", "NNUpdater": "The comparison is based on the local-time and the offset."}
{"Origin": "Returns the paramSitetitle.", "Reference": "Returns the paramSitename.", "NNUpdater": "Get the param value."}
{"Origin": "{@link SyncTrainingListener#onTrainingStart(SyncTrainingEvent) onTrainingStart()} is called once when the training starts.", "Reference": "{@link TrainingListener#onTrainingStart() onTrainingStart()} is called once when the training starts.", "NNUpdater": "Returns string representation of this data set"}
{"Origin": "Closes any watchers, thread pools that may react to changes in tenant state, and removes any state in filesystem and zookeeper", "Reference": "Closes any watchers, thread pools that may react to changes in tenant state, and removes any session data in filesystem and zookeeper.", "NNUpdater": "Closes any watchers, thread pools that may react to changes in tenant state, and removes any state in filesystem and zookeeper"}
{"Origin": "Sets the quorum name for queue operations.", "Reference": "Sets the split brain protection name for queue operations.", "NNUpdater": "Sets the cluster read quorum strategy."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "This method is called when a component will be rendered standalone.", "Reference": "This method is called when a component will be rendered as a part.", "NNUpdater": "Adds components to the list of components to be rendered"}
{"Origin": "Returns table with all users, or users from a specified database.", "Reference": "Returns table with all users, or users from a specific database.", "NNUpdater": "Returns all available users."}
{"Origin": "Fill all the options for a given CoreNLP annotator.", "Reference": "Fill all the options for a given subcomponent.", "NNUpdater": "Returns the {@link BiConsumer} for this generator"}
{"Origin": "Lifecycle method called at the very end of the result values pprocessing", "Reference": "Lifecycle method called at the very end of the result values processing", "NNUpdater": "The value of each region i s reduced by one at the very end."}
{"Origin": "When 'false' is set, FAB visibility is set to View.GONE programmatically,", "Reference": "When 'false' is set, FAB is greyed out", "NNUpdater": "Set a view visibility to VISIBLE (true) or INVISIBLE (false)."}
{"Origin": "Decorates {@link Service}s whose {@link Route} matches the specified {@code pathPattern}.", "Reference": "Decorates {@link HttpService}s whose {@link Route} matches the specified {@code pathPattern}.", "NNUpdater": "Finds the {@link Service} whose {@link Router} matches the {@link PathMappingContext}."}
{"Origin": "Walk through the jdk11 directory and create a mapping, {@link #jdk11StubFiles}, from file name to the class contained with in it.", "Reference": "Walk through the jdk directory and create a mapping, {@link #jdkStubFiles}, from file name to the class contained with in it.", "NNUpdater": "Allows {@link Files#walkFileTree} to be faked in tests."}
{"Origin": "Download ZIP file ### Functional Description: Download multiple files in a ZIP archive.", "Reference": "Download ZIP file(s) ### Functional Description: Download multiple files in a ZIP archive.", "NNUpdater": "Set PLZ."}
{"Origin": "Pre-multiply the rotation transformation of the given {@link Quaterniond} to this matrix.", "Reference": "Pre-multiply the rotation transformation of the given {@link Quaterniondc} to this matrix.", "NNUpdater": "Pre-multiply the rotation transformation of the given {@link Quaternionfc} to this matrix."}
{"Origin": "Returns the type node to the left of the ``::`` if it exists.", "Reference": "Returns the type node to the left of the ``::`` if it exists and is unambiguous.", "NNUpdater": "Get the connections on this port."}
{"Origin": "Register a record reader.", "Reference": "Register a record writer listener.", "NNUpdater": "Register a record reader listener."}
{"Origin": "Creates a {@code Catalog} object using the specified feature settings and path to one or more catalog files.", "Reference": "Creates a {@code Catalog} object using the specified feature settings and uri(s) to one or more catalog files.", "NNUpdater": "Creates a {@code Catalog} object using the specified feature settings and path to one or more catalog files."}
{"Origin": "Adds tags for the specified {@link NamespacedEntityId}.", "Reference": "Adds tags for the specified {@link MetadataEntity}.", "NNUpdater": "Adds tags for the specified {@link NamespacedEntityId}."}
{"Origin": "This method sets all fields, which are custom in bibtext and therefore supported by jabref, but which are not included in the DublinCore format.", "Reference": "This method sets all fields, which are custom in BibTeX and therefore supported by JabRef, but which are not included in the DublinCore format.", "NNUpdater": "Utility method for pattern-matching metadata elements."}
{"Origin": "If the set etag doesn't match anything the update won't happen, this will result in a 412.", "Reference": "If the set ETag doesn't match anything the update won't happen, this will result in a 412.", "NNUpdater": "Set the routeFilter value."}
{"Origin": "Get list of index keys.", "Reference": "Get the resource value.", "NNUpdater": "Get the keys."}
{"Origin": "Get the numbe rof relationships in the collection.", "Reference": "Get the number of relationships in the collection.", "NNUpdater": "Returns the valid relationships for this processor as supplied by the script itself."}
{"Origin": "Returns a builder for custom analyzers that loads all resources from classpath.", "Reference": "Returns a builder for custom analyzers that loads all resources from", "NNUpdater": "Get the List of the analyzers."}
{"Origin": "This will specify the destination document to open in a new window.", "Reference": "This will specify whether to open the destination document in a new window.", "NNUpdater": "Specify whether the reply destination is a Topic."}
{"Origin": "Parses options in the specified map.", "Reference": "Parses and assigns options from the specified map.", "NNUpdater": "Extracts options from the specified item."}
{"Origin": "Returns all rotations for this application", "Reference": "Returns all rotations assigned to this", "NNUpdater": "Returns a transaction which deletes these rotations if they exist"}
{"Origin": "Extracts GCM topic names out of a given Criteria object (e.g.", "Reference": "Extracts FCM topic names out of a given Criteria object (e.g.", "NNUpdater": "Parses the topic from the given fully-qualified path which represents a topic resource."}
{"Origin": "Returns the provider for the given load-balancing policy, or {@code null} if no suitable provider can be found.", "Reference": "Returns the effective provider for the given load-balancing policy, or {@code null} if no suitable provider can be found.", "NNUpdater": "If no load balancing policy is set through this method, {@link Policies#DEFAULT_LOAD_BALANCING_POLICY} will be used instead."}
{"Origin": "Sets the value of the 'KeepDeletedCells' field", "Reference": "Sets the value of the 'keepDeletedCells' field.", "NNUpdater": "Sets the value of the 'paramName' field."}
{"Origin": "Removes virtual port.", "Reference": "Removes virtual port related flow rules.", "NNUpdater": "Removes a port from the ServerPortRegistry and any Service it belongs to."}
{"Origin": "It can only be used to create method handles to public members in public classes in packages that are exported unconditionally.", "Reference": "It can only be used to create method handles to public members of public classes in packages that are exported unconditionally.", "NNUpdater": "If publicOnly is true, filter by 'visibleToPublicUsers' flag"}
{"Origin": "Now loop through the sorted list and retrieve the GossipDigest corresponding to the endpoint from the map that was initially constructed.", "Reference": "Now loop through the sorted list and retrieve the GossipDigest corresponding to the node from the map that was initially constructed.", "NNUpdater": "Removes the endpoint from unreachable endpoint set"}
{"Origin": "Gets (and removes from the queue) the handshake message with this handshake's next expected message sequence number.", "Reference": "Gets (and removes from the queue) the next record of the handshake message with this handshake's next expected message sequence number.", "NNUpdater": "Returns a {@link Future} that will get notified once the handshake completes."}
{"Origin": "Note that time is adjusted backwards by a week to account for possible clock drift in the block headers.", "Reference": "Note that timeSecs is adjusted backwards by a week to account for possible clock drift in the block headers.", "NNUpdater": "Gets a clock that obtains the current date and time using best available system clock."}
{"Origin": "If you define two fields with same name but different cases, behavior is undefined.", "Reference": "When entity posted with two duplicate names with different cases, last one wins.", "NNUpdater": "If two {@link IdentityProvider} define two users with the same login, then users are considered as identical."}
{"Origin": "if the message have the embeds suppressed then this action can undo the suppressed embeds.", "Reference": "If the message have the embeds suppressed then this action can undo the suppressed embeds.", "NNUpdater": "Get the unmodifiable set of suppressedIdentifiers."}
{"Origin": "Checks if a message needs to be encrypted/decrypted.", "Reference": "Checks if a message needs to be encrypted/decrypted, or whether it can bypass encryption", "NNUpdater": "This means only ciphertexts encrypted for one of these private key can be decrypted."}
{"Origin": "Read an item list DAO from a file.", "Reference": "Read an item list DAO from a file with no header rows.", "NNUpdater": "readZipFile"}
{"Origin": "NOTE: This operation enables you to check the status of your job.", "Reference": "This operation enables you to check the status of your job.", "NNUpdater": "The Get Create Operation Status operation returns the status of the specified create operation."}
{"Origin": "Reset the value given the timestamp, value and reals.", "Reference": "Reset the value given the timestamp and value.", "NNUpdater": "Returns a {@link LegacySQLTypeName#TIMESTAMP} field value."}
{"Origin": "Returns the checkout with the primary key or throws a {@link com.liferay.ams.NoSuchCheckoutException} if it could not be found.", "Reference": "Returns the checkout with the primary key or throws a {@link NoSuchCheckoutException} if it could not be found.", "NNUpdater": "Provides the ``smart checkout`` procedure the same as in {@link #checkout(String, Runnable)}."}
{"Origin": "Factory method that returns list of callable tasks for performing maxpooling operation", "Reference": "Factory method that returns list of callable tasks for performing pooling operation", "NNUpdater": "If needed wraps the passed in Callable in a new {@link Callable} that propagates the current request state when the returned Callable is invoked."}
{"Origin": "This function initializes the Facebook SDK, the behavior of Facebook SDK functions are undetermined if this function is not called.", "Reference": "The behavior of Facebook SDK functions are undetermined if this function is not called.", "NNUpdater": "Sets the application's Facebook ID."}
{"Origin": "We cannot just use a map, because it may result in an eternal recurrent call, guava does a good job at handling that situation.", "Reference": "We cannot just use a map, because it may result in an eternal recurrent call, Guava does a good job at handling that situation.", "NNUpdater": "Use {@link Duration#ZERO} to declare an eternal cache."}
{"Origin": "Simple example of a replacement pattern, deleting entries which only include SSNs", "Reference": "Simple example of a replacement pattern, deleting entries which only include credit cards", "NNUpdater": "Test Inserting a Text XML Document."}
{"Origin": "Actually copy the contents of the {@code src} file/directory to the {@code dest} file/directory.", "Reference": "Recursively copy the contents of the {@code src} file/directory to the {@code dest} file/directory.", "NNUpdater": "Copies the file src in from to this directory under the new file name dest."}
{"Origin": "Such permission depends on whether the current user is a system administrator, whether they have explicit UPDATE permission on the target user, and whether they have explicit ADMINISTER permission on all affected objects.", "Reference": "Such permission depends on whether the current user is a system administrator, whether they have explicit UPDATE permission on the target entity, and whether they have explicit ADMINISTER permission on all affected objects.", "NNUpdater": "Sets the permission."}
{"Origin": "Public interface to perform IPA over a given DML program.", "Reference": "Main interface to perform IPA over a given DML program.", "NNUpdater": "Experimental: Execute DML script without any arguments if parsePyDML=true, using default configuration."}
{"Origin": "Unlock the given region, throw an IOException if we fail.", "Reference": "Unlock the given region.", "NNUpdater": "Unlocks the block"}
{"Origin": "Standard getter for the rightwardlabel String in this Relationship", "Reference": "Standard getter for the rightwardValue String in this Relationship", "NNUpdater": "Sets the value(s) for identifier (An identifier for the person as this patient)"}
{"Origin": "Return the current starting address.", "Reference": "Return the current head segment.", "NNUpdater": "Return the current starting address."}
{"Origin": "Recursively assigns an iterable value to a list literal.", "Reference": "Recursively assigns an iterable value to a sequence of assignable expressions.", "NNUpdater": "Converts an iterable over members to a list of members."}
{"Origin": "In this case the underlying stream is advanced to the end of the associated MPEG frame.", "Reference": "In this case the underlying stream is advanced to the end of the associated MPEG frame or until the EOF is reached.", "NNUpdater": "Sets the path to the case directory for the job."}
{"Origin": "Returns an unmodifiable list of the command args for this job specification.", "Reference": "Returns an unmodifiable list of arguments provided by the user for this job.", "NNUpdater": "Returns an unmodifiable list of the Cms file resources in this publish list."}
{"Origin": "It can only be used to create method handles to public members in public classes in packages that are exported unconditionally.", "Reference": "It can only be used to create method handles to public members of public classes in packages that are exported unconditionally.", "NNUpdater": "If publicOnly is true, filter by 'visibleToPublicUsers' flag"}
{"Origin": "Create a TransactionStatus instance for the given arguments.", "Reference": "Create a ReactiveTransaction instance for the given arguments.", "NNUpdater": "Create a new TransactionStatus for the given arguments, also initializing transaction synchronization as appropriate."}
{"Origin": "This method is always invoked after {@link #secureConnectStart(Call)}.", "Reference": "This method is invoked after {@link #secureConnectStart}.", "NNUpdater": "Otherwise, {@link #call(Object)} is invoked."}
{"Origin": "Alias for {@link Future#successful(ExecutorService, Object)}", "Reference": "Alias for {@link Future#successful(Executor, Object)}", "NNUpdater": "Alias for {@link TreeMap#of(K, V, K, V)}"}
{"Origin": "Returns the last sync d l object in the ordered set where companyId = ?", "Reference": "Returns the last sync d l object in the ordered set where repositoryId = ?", "NNUpdater": "Finds the gadget where companyId = ?"}
{"Origin": "Test of npara method, of class NegativeBinomialDistribution.", "Reference": "Test of length method, of class NegativeBinomialDistribution.", "NNUpdater": "Test of negativeBinomial method, of class DiscreteDistributions."}
{"Origin": "Gets an integer from the given element.", "Reference": "Gets an integer from the given string.", "NNUpdater": "Gets the 'from' value as a primitive integer."}
{"Origin": "When non-empty, the list is intended to specify those cipher suites (from a larger collection of implementation- supported cipher suties) that can be used to establish encryption.", "Reference": "When non-empty, the list is intended to specify those cipher suites (from a larger collection of implementation- supported cipher suites) that can be used to establish encryption.", "NNUpdater": "Returns the list of disabled cipher suites."}
{"Origin": "Removes all the sync d l objects where companyId = ?", "Reference": "Removes all the sync d l objects where repositoryId = ?", "NNUpdater": "Removes the feed where userId = ?"}
{"Origin": "Invokes parent.resolveRequires to resolve the given root modules.", "Reference": "Invokes parent.resolve to resolve the given root modules.", "NNUpdater": "Resolve the given modules, by name, and returns the resulting"}
{"Origin": "The script is added to the tree of scripts and its templates loaded, if any.", "Reference": "The script is added to the tree of scripts and its scripts/templates loaded, if any.", "NNUpdater": "The user's templates and scripts associated with the given engine are not removed but its engine is set to {@code null}."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Returns true if this result represents an unmappable-character error.", "Reference": "Tells whether or not this object describes an unmappable-character error.", "NNUpdater": "Returns this decoder's when an unmappable character error occurred during the decoding process."}
{"Origin": "Extracts options from the specified item.", "Reference": "Assign options to the specified options.", "NNUpdater": "Extracts the bytes from a given item."}
{"Origin": "Convenience routine to return the specified error's underlying Exception, or null if it isn't one.", "Reference": "Returns the specified error's underlying Exception, or null if it isn't one.", "NNUpdater": "Return the exception for this field, or if there isn't any."}
{"Origin": "A {@link Materialization} where the primitive view type is a multimap with fully specified windowed keys.", "Reference": "A {@link Materialization} where the primitive view type is a multimap with fully specified windowed values.", "NNUpdater": "A {@link Materialization} where the primitive view type is a multimap with fully specified windowed keys."}
{"Origin": "Sets the command sequence number.", "Reference": "Sets the command sequence numbers.", "NNUpdater": "Sets the event sequence number."}
{"Origin": "Objects of the following type(s) are allowed in the list {@link Response.Fixed.Category }", "Reference": "Objects of the following type(s) are allowed in the list {@link Response.Fixed.Item }", "NNUpdater": "Objects of the following type(s) are allowed in the list {@link ConfigurationCategory }"}
{"Origin": "Resources ending in ``{@code .class}`` or where the package name is not a Java identifier are resources that can never be encapsulated.", "Reference": "Resources ending in ``{@code .class}`` or where the package name is not a legal package name can not be encapsulated.", "NNUpdater": ")*(Java identifier)([])* URL"}
{"Origin": "Converts an array of raw binary data into a String of ascii 0 and 1 characters.", "Reference": "Converts an array of raw binary data into a String of ASCII 0 and 1 characters.", "NNUpdater": "Converts a byte array into a {@link ByteString}."}
{"Origin": "We should also flush the buffer is there are any thints for the node there, and close the writer (if any), so that we don't leave any hint files lying around.", "Reference": "We should also flush the buffer if there are any hints for the node there, and close the writer (if any), so that we don't leave any hint files lying around.", "NNUpdater": "If there are e.g."}
{"Origin": "Brings the BIND nodes in a correct order according to the dependencies that they have.", "Reference": "Brings the nodes in a correct order according to binding req dependencies that they have.", "NNUpdater": "Returned in the order they were added."}
{"Origin": "Queries this search source for the given queryString.", "Reference": "Creates query for the given query.", "NNUpdater": "Queries this ContactSourceService for SourceContacts which match a specific query Pattern."}
{"Origin": "Number of direct children (no recursion; for rooms / folders only)", "Reference": "Number of direct children (no recursion; for rooms / folders only) [Deprecated since version VERSION]", "NNUpdater": "getNodeCount the number of direct subnodes in this node"}
{"Origin": "Prepare name id attribute id p attribute.", "Reference": "Prepare name id attribute.", "NNUpdater": "Set Merkmal."}
{"Origin": "This method always return {@code true} when invoked on an unnamed module.", "Reference": "This method always returns {@code true} when invoked on an unnamed module.", "NNUpdater": "This method always returns {@code true} when invoked on an unnamed module."}
{"Origin": "Scope of the schedule.", "Reference": "Scope of the task.", "NNUpdater": "Suspend a schedule."}
{"Origin": "An Exception occured which may be retrieved from the arguments., FAILED_TRUNCATED -", "Reference": "An Exception occured which may be retrieved from the arguments., FAILED_TRUNCATED - Parsing failed.", "NNUpdater": "Returns the UIContactDescriptor for which this event occured."}
{"Origin": "Create a new builder preconfigured to connect to the Bigtable emulator.", "Reference": "Create a new builder preconfigured to connect to the Bigtable emulator with port number.", "NNUpdater": "Kill midlet process."}
{"Origin": "When possible this method will present the bytes to the caller without copying them into another buffer copy.", "Reference": "When possible this method will present the bytes to the caller without copying them into a new buffer copy.", "NNUpdater": "Creates a new big-endian composite buffer which wraps the readable bytes of the specified buffers without copying them."}
{"Origin": "get the list of git markers web-elements in the editor", "Reference": "Gets the list of git markers web-elements in the editor.", "NNUpdater": "Get the TextArea of the editor."}
{"Origin": "Convert to primitive types, returning default value if text is null.", "Reference": "Convert to long integer, returning default value if text is inconvertible.", "NNUpdater": "Convert all types, both reference and primitive, to {@code Object}."}
{"Origin": "This method allocates a new instance of a class implementing Vector4f on every call.", "Reference": "This method allocates a new instance of a class implementing Vector4fc on every call.", "NNUpdater": "Multiply this Vector4f component-wise by another Vector4f."}
{"Origin": "Create and return a {@link UserDefinedFunctionInfo} object encapsulating information obtained from the given function and from its parsed docstring.", "Reference": "Create and return a {@link StarlarkFunctionInfo} object encapsulating information obtained from the given function and from its parsed docstring.", "NNUpdater": "Returns the user-defined function implementation for the given function name and argTypes."}
{"Origin": "You can also limit the number of vaults returned in the response by specifying the parameter in the request.", "Reference": "You can also limit the number of vaults returned in the response by specifying the limit parameter in the request.", "NNUpdater": "You can also limit the number of log events returned in the response by specifying the limit parameter in the request."}
{"Origin": "In case we have a expiry of 0, this means that the entry should not be cached.", "Reference": "In case we have an expiry of 0, this means that the entry should not be cached.", "NNUpdater": "Deletes a cached entry."}
{"Origin": "Tests the creation of a message authentication code for the md5 algorithm.", "Reference": "Tests the creation of message authentication codes for the md5 algorithm.", "NNUpdater": "Get the md5 of the given string key."}
{"Origin": "Returns {@code true} if the given name is a legal binary name.", "Reference": "Returns {@code true} if the given name is a legal type name.", "NNUpdater": "Returns the tab bar height."}
{"Origin": "TraverseOps a Collection of Either3 producing an Either3 with a ListX, applying the transformation function to every element in the list", "Reference": "Traverse a Collection of Either3 producing an Either3 with a ListX, applying the transformation function to every element in the list", "NNUpdater": "List[AnyM[Either3:lazyRight[1],Either3:lazyLeft[10]]] }"}
{"Origin": "For EL need to unquote everything but no need to convert anything.", "Reference": "Once inside EL, no need to unquote or convert anything.", "NNUpdater": "Get Value Need to convert to String"}
{"Origin": "Clean up.", "Reference": "Set up.", "NNUpdater": "Clean the repository."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Calculates and returns the bottom margin of a view, which visualizes a tab.", "Reference": "Calculates and returns the bottom margin of a specific tab.", "NNUpdater": "Adapts the margins of the tab container and the toolbars."}
{"Origin": "Waits until the job has reached a certain state.", "Reference": "Waits until the Job has reached a certain state.", "NNUpdater": "Waits for up to 10 seconds until the given thread can be executed."}
{"Origin": "Code snippet for {@link DataLakeDirectoryClient#getSubDirectoryClient(String)}", "Reference": "Code snippet for {@link DataLakeDirectoryClient#getSubdirectoryClient(String)}", "NNUpdater": "Generates a code sample for using {@link DirectoryClient#createSubDirectoryWithResponse(String, Map, Context)}"}
{"Origin": "As service binding involves resolution then it may fail with {@link", "Reference": "Post-resolution consistency checks may fail with {@code", "NNUpdater": "Examples Specifying Link Resolution"}
{"Origin": "Gets the redirection validator, that ensures the followed redirections are in scan's scope.", "Reference": "Gets the HTTP request configuration, that ensures the followed redirections are in scan's scope.", "NNUpdater": "InScope {in ('a', 'b')}."}
{"Origin": "Slight performance increase over {@link #render(VertexBuffer)}.", "Reference": "Slight performance increase over {@link #render(BufferBuilder)}.", "NNUpdater": "Operation fails."}
{"Origin": "Returns a flag, indicating if automatic pulling is enabled by default.", "Reference": "Returns a flag, indicating if automatic pulling first is enabled by default.", "NNUpdater": "Enables this group by setting the FLAG_ENABLED flag."}
{"Origin": "Given a persister and primary key, find the locally cross-referenced natural id.", "Reference": "Given a descriptor and primary key, find the locally cross-referenced natural id.", "NNUpdater": "Call through to {@link DataPersister#generateId()}"}
{"Origin": "Appends {@link ImageWindow#close()}.", "Reference": "Prepends {@link ImageWindow#close()}.", "NNUpdater": "Closes the window."}
{"Origin": "Return a set of all extensions with the given element name and namespace.", "Reference": "Return a list of all extensions with the given element name and namespace.", "NNUpdater": "Test extensions to element."}
{"Origin": "Begin insert before the current line by creating a new blank line above the current line", "Reference": "Begin insert before the current line by creating a new blank line above the current line for all carets", "NNUpdater": "Read the current line builder (start line or header line)."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "If this happens, a configuration {@link ConfigurationEvent event} will be sent to all registered listeners.", "Reference": "If this happens, a CONFIGURATION {@link ConfigurationEvent event} will be sent to all registered listeners.", "NNUpdater": "Returns Event Processing Configuration defined in this Configuration."}
{"Origin": "Reset password ### Functional Description: Resets a user's password to a new value.", "Reference": "Reset password ### Functional Description: Resets user's password.", "NNUpdater": "-P"}
{"Origin": "Walk through the jdk11 directory and create a mapping, {@link #jdk11StubFilesJar}, from file name to the class contained with in it.", "Reference": "Walk through the jdk directory and create a mapping, {@link #jdkStubFilesJar}, from file name to the class contained with in it.", "NNUpdater": "Allows {@link Files#walkFileTree} to be faked in tests."}
{"Origin": "Returns the package directory.", "Reference": "Returns the path to the package.", "NNUpdater": "Returns the directory path."}
{"Origin": "Sets the space between children.", "Reference": "Sets the vertical space between children.", "NNUpdater": "Sets the specified value to the {@code baseline.withContext} field."}
{"Origin": "Stop the sync manager.", "Reference": "1.", "NNUpdater": "A shortcut to {@link #stop() stop().syncUninterruptibly()}."}
{"Origin": "Register a module this this class loader.", "Reference": "Register a module this class loader.", "NNUpdater": "Returns the {@code ClassLoader} for this module."}
{"Origin": "If an existing file is overwritten, it is moved to the Recycle Bin instead of the restored one.", "Reference": "If an existing file is overwritten, it is moved to the recycle bin instead of the restored one.", "NNUpdater": "API to check if the recycle bin feature is active recycle bin is activated in xwiki.cfg or in the XWiki"}
{"Origin": "The default implementation fades out the dialog over 400 milliseconds and then removes it from the stage.", "Reference": "The default implementation fades out the dialog over 400 milliseconds.", "NNUpdater": "The default implementation fades out the dialog over {@link #fadeDuration} seconds and then removes it from the stage."}
{"Origin": "Returns the calendar resource with the primary key or throws a {@link com.liferay.calendar.NoSuchResourceException} if it could not be found.", "Reference": "Returns the calendar resource with the primary key or throws a {@link NoSuchResourceException} if it could not be found.", "NNUpdater": "Returns the {@link CalendarConstraints} in use by this {@link MaterialCalendar}."}
{"Origin": "Returns {@link TableHeaderToolTipProvider} for {@link JTableHeader} that uses this {@link TableHeaderPainter}.", "Reference": "Returns {@link TableHeaderToolTipProvider} for {@link JTable} that uses {@link JTableHeader}.", "NNUpdater": "Sets the HTTP method header."}
{"Origin": "Copies entries from one array to another.", "Reference": "Copies entries from one array to another array.", "NNUpdater": "Copies a file to another target."}
{"Origin": "Sends a notification broadcast for a task that has started or became due.", "Reference": "Sends a notification broadcast for a task instance that has started or became due.", "NNUpdater": "Create hide until for this task."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Returns the cluster name.", "Reference": "Returns the cluster identifier.", "NNUpdater": "Sets the client protocol."}
{"Origin": "Adds a {@link SurfaceConfiguration} to the combination.", "Reference": "Adds a {@link SurfaceConfig} to the combination.", "NNUpdater": "Invokes {@link VideoRendererEventListener#onRenderedFirstFrame(Surface)}."}
{"Origin": "Multiply this duration with the given duration", "Reference": "Multiply this amount with the given amount", "NNUpdater": "Returns a copy of this duration with the specified duration added."}
{"Origin": "Returns the border size that sentry robots are restricted to.", "Reference": "Returns the border size that border sentry robots are restricted to.", "NNUpdater": "Sends a message to the Sentry server using the statically stored {@link SentryClient} instance."}
{"Origin": "The given {@link MediaItem2} is set as the tag of the source.", "Reference": "The given {@link MediaItem} is set as the tag of the source.", "NNUpdater": "Create a MediaItem2 from the {@link Bundle} with the specified {@link UUID} string."}
{"Origin": "Test that DocumentElement.add does not throw any exception when passing a reference to an excluded field.", "Reference": "Test that DocumentElement.addValue does not throw any exception when passing a reference to an excluded field.", "NNUpdater": "Add a text field to the InputDocument"}
{"Origin": "Writes events collection to BED file", "Reference": "Writes events collection to file", "NNUpdater": "Writes users to disk."}
{"Origin": "Returns the space-separated OAuth scopes to use with the the service account flow or {@code null} for none.", "Reference": "Returns a collection of OAuth scopes to use with the the service account flow or {@code null} for none.", "NNUpdater": "Returns the first {@code ``If-None-Match``} header or {@code null} for none."}
{"Origin": "Creates a {@code For}-comprehension of 8 Iterables.", "Reference": "Creates a {@code For}-comprehension of 8 Options.", "NNUpdater": "{@code Stream} equivalent: {@link Stream#flatMap} (using a function that produces streams, not iterables)."}
{"Origin": "CaloriesBurned} data point.", "Reference": "CaloriesBurned1} data point.", "NNUpdater": "( Dynamic Point A - Dynamic Point B )"}
{"Origin": "Obtains new ProxyInstantiator based on given {@link WeldConfiguration}.", "Reference": "Obtains a ProxyInstantiator based on given {@link WeldConfiguration}.", "NNUpdater": "Creates a new instance by calling {@link ConfigurationModel#getInstantiator()#instantiateObject()}"}
{"Origin": "Unsafe version of: {@link #shaderc_spvc_compile_into_glsl compile_into_glsl}", "Reference": "Unsafe version of: {@link #shaderc_spvc_initialize_for_glsl initialize_for_glsl}", "NNUpdater": "Operation fails."}
{"Origin": "Set the {@code HttpClient} used for {@linkplain #createAsyncRequest(URI, HttpMethod) asynchronous execution}.", "Reference": "Set the {@code CloseableHttpAsyncClient} used for {@linkplain #createAsyncRequest(URI, HttpMethod) asynchronous execution}.", "NNUpdater": "Return a {@link MutableHttpRequest} for a {@link HttpMethod#GET} request for the given URI"}
{"Origin": "Sets the page changed flag to .", "Reference": "Marks the page as changed.", "NNUpdater": "Sets index of the attribute used."}
{"Origin": "Ensure that at most maxOpenRequests are not complete.", "Reference": "Ensure that at most numberOfRequestsToProceed are not complete.", "NNUpdater": "Ensure that:"}
{"Origin": "Add a series for a Bubble type chart using using Lists", "Reference": "Add a series for a Bubble type chart using using double arrays", "NNUpdater": "Add a series to the chart using Collections"}
{"Origin": "The only other valid location for '}' is inside a StringLiteral.", "Reference": "The only other valid location for '}' is inside a", "NNUpdater": "Case 1: valid regular expression String or char literal"}
{"Origin": "Returns true is this module patcher has no patches.", "Reference": "Returns true is this module patcher has patches.", "NNUpdater": "Returns margin taken from image content patches."}
{"Origin": "A {@link BallerinaException} will be thrown if the key does not exists.", "Reference": "A {@link BallerinaException} will be thrown if the key does not exists and a filler value does not exist.", "NNUpdater": "A null will be returned if the key does not exists."}
{"Origin": "Also clears any idle instances associated with the username that was used to create the PooledConnection.", "Reference": "Also clears any idle instances associated with the user name that was used to create the PooledConnection.", "NNUpdater": "Return the pooled connection to its pool."}
{"Origin": "Fills the combo box with the options 'True', 'False' and 'Not set'.", "Reference": "Fills the selection widget with the options 'True', 'False' and 'Not set'.", "NNUpdater": "Similar to the {@link DefaultComboBoxModel}, but uses our ApiComboBoxItem."}
{"Origin": "Add a Info EventLogItem and log.", "Reference": "Add a Info EventLogEntry and log.", "NNUpdater": "Add to Log"}
{"Origin": "Sets the {@link SharedKeyCredential} used to authorize requests sent to the service.", "Reference": "Sets the {@link StorageSharedKeyCredential} used to authorize requests sent to the service.", "NNUpdater": "Sets the SAS token used to authorize requests sent to the service"}
{"Origin": "This methods sets this armature in its bind pose (aligned with the undeformed mesh)", "Reference": "This methods sets this armature in its bind pose (aligned with the mesh to deform)", "NNUpdater": "This method sets the mesh context for the given mesh old memory address."}
{"Origin": "Asserts that the given violation list has the expected number of violations.", "Reference": "Asserts that the given violation list has no violations (is empty).", "NNUpdater": "Returns the rule from the first selected violation"}
{"Origin": "Stub of {@link Plugin#willDeclareProperty(TypeSpec.Builder, PropertyGenerator, FieldSpec.Builder)} for subclasses to override", "Reference": "Stub of {@link Plugin#beforeDeclareProperty(TypeSpec.Builder, PropertyGenerator, FieldSpec.Builder)} for subclasses to override", "NNUpdater": "Operation fails."}
{"Origin": "or throws a {@link com.liferay.akismet.NoSuchDataException} if it could not be found.", "Reference": "or throws a {@link NoSuchDataException} if it could not be found.", "NNUpdater": "Operation fails."}
{"Origin": "Reset all mocks.", "Reference": "Mock setup.", "NNUpdater": "Create the mocks and find the fields annotated with {@link TestSubject}"}
{"Origin": "Returns true if the method has any Shiro annotations, false otherwise.", "Reference": "Returns true if the method or the class has any Shiro annotations, false otherwise.", "NNUpdater": "Returns true if field eB is set (has been assigned a value) and false otherwise"}
{"Origin": "In other words, other sessions can continue to play during the prefetch of this session.", "Reference": "In other words, other sessions can continue to play during the prepare of this session.", "NNUpdater": "In other words, other sessions can continue to play during the prefetch of this session."}
{"Origin": "Clears the value of the 'publicPort' field", "Reference": "Clears the value of the 'publicPorts' field", "NNUpdater": "Clears the value of the 'paramName' field"}
{"Origin": "Helper method that allows for registration of regexps to the {@link ClassWhiteList}.", "Reference": "Helper method that allows for registration of a regexp to the {@link ClassWhiteList}.", "NNUpdater": "Gets the white list."}
{"Origin": "Register an observer EventListener with the current context (provided).", "Reference": "Register the given EventListener to the contest and event class.", "NNUpdater": "Return the current event observer list"}
{"Origin": "Search text placeholer by its type", "Reference": "Search placeholder by its type", "NNUpdater": "Removes all full text search criteria from the search object."}
{"Origin": "Return the first argument if it yields an empty sequence.", "Reference": "Returns the first argument (or the context) if it yields an empty sequence.", "NNUpdater": "Checks if the specified expression yields a string or binary item."}
{"Origin": "The {@link Flux} will contain one or several feed response of the obtained items.", "Reference": "The {@link CosmosContinuablePagedFlux} will contain one or several feed response of the obtained items.", "NNUpdater": "The {@link Flux} will contain one or several feed response of the obtained containers."}
{"Origin": "Check if the request was successfully handled by the Realm Object Server.", "Reference": "Checks if the request was successfully handled by the Realm Object Server.", "NNUpdater": "Returns the identity or key of this user on the Realm Object Server."}
{"Origin": "The negative of {@code contains} is {@link #absent}.", "Reference": "The negative of {@code contains} is {@link #notContaining}.", "NNUpdater": "Fails if the {@link Optional}{@code } is absent or the subject is null."}
{"Origin": "Configure a SpEL expression to evaluate a {@link RSocketOutboundGateway.Command} for RSocket request type at runtime against a request message.", "Reference": "Configure a SpEL expression to evaluate an {@link RSocketOutboundGateway.Command} for the RSocket request type at runtime against a request message.", "NNUpdater": "Specify an {@link Expression} to evaluate a value for the uri template variable."}
{"Origin": "Send create session evt to all backup node", "Reference": "Send create session event to all backup node", "NNUpdater": "snapshotId"}
{"Origin": "The playback of the prefetched content should start in the later calls of {@link SessionPlayer2#play()}.", "Reference": "The playback of the prepareed content should start in the later calls of {@link SessionPlayer2#play()}.", "NNUpdater": "The playback of the prefetched content should start in the later calls of {@link SessionPlayer2#play()}."}
{"Origin": "Returns the field value run through all converters and validators, but doesn't pass the {@link ValidationStatus} to any status handler.", "Reference": "Returns the field value run through all converters and validators, but doesn't pass the {@link BindingValidationStatus} to any status handler.", "NNUpdater": "Returns the field value run through all converters and validators, but doesn't pass the {@link ValidationStatus} to any status handler."}
{"Origin": "Ensure that the service still exists.", "Reference": "Ensure that the api still exists.", "NNUpdater": "Ensure that:"}
{"Origin": "Connect to a single server with retry.", "Reference": "Connect to a single server.", "NNUpdater": "Open a connection to a Redis server."}
{"Origin": "Peeks from the beginning of the input to see if {@link #FLAC_SIGNATURE} is present.", "Reference": "Peeks from the beginning of the input to see if {@link #FLAC_STREAM_MARKER} is present.", "NNUpdater": "- {@link #KEY_SIGNATURE}: value specified by {@link #setCreator(String)}."}
{"Origin": "Log subscription related events: new, cancel, restore, heartbeat, expire", "Reference": "Log subscription related events: subscribe, start trial, cancel, restore, heartbeat, expire", "NNUpdater": "Returns the HTTP Date indicating the time at which the subscription will expire returned in the subscribe response or {@code null} for an infinite TTL."}
{"Origin": "and repositoryId = ?.", "Reference": "and parentFolderId = ?.", "NNUpdater": "Engine."}
{"Origin": "Returns the calendar with the primary key or throws a {@link com.liferay.calendar.NoSuchCalendarException} if it could not be found.", "Reference": "Returns the calendar with the primary key or throws a {@link NoSuchCalendarException} if it could not be found.", "NNUpdater": "Set Kalender."}
{"Origin": "Creates {@link MinimalHttpAsyncClient} instance that provides essential HTTP/1.1 and HTTP/2 message transport only.", "Reference": "Creates {@link MinimalHttpAsyncClient} instance optimized for HTTP/1.1 and HTTP/2 message transport without advanced HTTP protocol functionality.", "NNUpdater": "Creates {@link MinimalHttpAsyncClient} instance that provides essential HTTP/1.1 and HTTP/2 message transport only."}
{"Origin": "Gets the groups used to find a repo curve.", "Reference": "Gets the groups used to find a repo curve by legal entity.", "NNUpdater": "Get base."}
{"Origin": "Prefixes are used to enrich the mappings of every {@code @RequestMapping} method whose controller type is matched by the corresponding {@link HandlerTypePredicate} in the map.", "Reference": "Prefixes are used to enrich the mappings of every {@code @RequestMapping} method whose controller type is matched by a corresponding {@code Predicate} in the map.", "NNUpdater": "Returns a new {@code TypeResolver} with type variables in {@code formal} mapping to types in {@code actual}."}
{"Origin": "Returns a bitmap flagging the records for which the value in this column is equal to the value in the given column Columnwise isEqualTo.", "Reference": "Returns a bitmap flagging the records for which the value in this column is equal to the value in the given column Column-wise isEqualTo.", "NNUpdater": "Returns a NumberColumn with the absolute value of each value in this column"}
{"Origin": "{@link PathSourcePath}s utilize the {@link ProjectSourcePathResolver#pathSourcePathResolver} to resolve the path.", "Reference": "{@link PathSourcePath}s utilize the {@link ProjectSourcePathResolver#pathSourcePathResolverAdapter} to resolve the path.", "NNUpdater": "Creates a {@link GroupedSource} given a {@link SourceWithFlags}."}
{"Origin": "Convert to object types, returning null if text is null.", "Reference": "Convert to object types, returning null if text is null or empty.", "NNUpdater": "IsNullOrEmpty {is null or empty}."}
{"Origin": "When the returned value is not null use Cookie methods getName() and getValue() to set the Cookie header on an HTTP request with header value of", "Reference": "If the returned value is not null, use Cookie methods getName() and getValue() to set the Cookie header on an HTTP request with header value of", "NNUpdater": "get custom headers"}
{"Origin": "[IF Sidecar19-SE]", "Reference": "[IF Java14]", "NNUpdater": "Test the alternate API for booting WeldContainer from an SE app."}
{"Origin": "If the principal is given, verify that the principal is tenant admin or admin of the tenant domain 2.", "Reference": "If the principal is given, verify that the principal is tenant admin or admin of the tenant domain 3.", "NNUpdater": "Returns a {@link RoleDefinition#tenantAdmin} for the current system and given tenant."}
{"Origin": "User names will always be checked in a case insensitive manner.", "Reference": "User names will always be checked in a case insensitive manner using the system default Locale.", "NNUpdater": "use case-sensitive matching."}
{"Origin": "Application data messages received or sent during a handshake may be dropped or processed deferred after the handshake.", "Reference": "Application data messages sent during a handshake may be dropped or processed deferred after the handshake.", "NNUpdater": "Returns a list of handshake configuredMessages of a given type."}
{"Origin": "Convenience method for calling {@link #newGenericExecuteException(TemplateCallableModel, boolean, String)}.", "Reference": "Convenience method for calling {@link #newGenericExecuteException(String, TemplateCallableModel, boolean, Throwable)}", "NNUpdater": "Convenience method for {@link #genericMethodType(int)}."}
{"Origin": "The input key class is {@link org.apache.sqoop.lib.SqoopAvroRecord}.", "Reference": "The input key class is {@link org.apache.sqoop.lib.SqoopRecord}.", "NNUpdater": "Returns an {@linkplain org.apache.sqoop.connector.spi.ConnectorConfigurableUpgrader} object that can upgrade the connection and job metadata."}
{"Origin": "Removes all of the instructions of this list.", "Reference": "Removes all the instructions of this list.", "NNUpdater": "The list of instructions that produce input for this instruction."}
{"Origin": "IPv4 address in this allocation", "Reference": "Primary address of this allocation", "NNUpdater": "Converts an integer and a prefix length into an IPv4 prefix."}
{"Origin": "If running on Android Oreo or later, we must become a foreground service.", "Reference": "If the user ignored our request to not be optimized, we must become a foreground service.", "NNUpdater": "Returns true if the service is running, but no bound clients exist"}
{"Origin": "Parse the given, comma-separated string into a list of {@code MimeType} objects.", "Reference": "Parse the comma-separated string into a list of {@code MimeType} objects.", "NNUpdater": "Parse the MIME type from a {@code Content-Type} header value or default to ``UTF-8``."}
{"Origin": "Same as above with an additional parameter to allow passing in the threshold checker", "Reference": "Same as above with additional parameters to allow passing in the threshold checker and the max score accumulator.", "NNUpdater": "With this method the configured linkage strategy is used."}
{"Origin": "Creates {@link MinimalHttpAsyncClient} instance that provides essential HTTP/1.1 and HTTP/2 message transport only.", "Reference": "Creates {@link MinimalHttpAsyncClient} instance optimized for HTTP/1.1 and HTTP/2 message transport without advanced HTTP protocol functionality.", "NNUpdater": "Creates {@link MinimalHttpAsyncClient} instance that provides essential HTTP/1.1 and HTTP/2 message transport only."}
{"Origin": "Returns an {@link Operator} that runs a select query for each list of parameter objects in the source observable.", "Reference": "Returns an {@link Transformer} that runs a select query for each list of parameter objects in the source observable.", "NNUpdater": "Returns Operator from query parameter operator notation."}
{"Origin": "Updates the parameter types of the method methodElt in the Scene of the receiverTree's enclosing class based on the arguments to the method.", "Reference": "Updates the parameter types of the method methodElt in the Scene of the enclosing class based on the arguments to the method invocation.", "NNUpdater": "Returns the input types of the Java method."}
{"Origin": "or throws a {@link com.liferay.socialcoding.NoSuchJIRAProjectException} if it could not be found.", "Reference": "or throws a {@link NoSuchJIRAProjectException} if it could not be found.", "NNUpdater": "Operation fails."}
{"Origin": "Apply the rotation transformation of the given {@link Quaterniond} to this {@link #isAffine() affine} matrix and store the result in .", "Reference": "Apply the rotation transformation of the given {@link Quaterniondc} to this {@link #isAffine() affine} matrix and store the result in .", "NNUpdater": "Apply the rotation transformation of the given {@link Quaternionfc} to this {@link #isAffine() affine} matrix and store the result in ."}
{"Origin": "The default implementation wraps the class in a generic type and calls {@link #canEncode(GenericType)}, therefore it is invariant as well.", "Reference": "The default implementation wraps the class in a generic type and calls {@link #accepts(GenericType)}, therefore it is invariant as well.", "NNUpdater": "The default implementation is for {@link Collection}."}
{"Origin": "Sets the vector collection factory used to accelerate the nearest neighbor search.", "Reference": "Sets the vector collection used to accelerate the nearest neighbor search.", "NNUpdater": "Sets the resource type."}
{"Origin": "Casts the {@code DateTime} to {@ChronoLocalDate} with the same chronology.", "Reference": "Casts the {@code DateTime} to {@code ChronoLocalDate} with the same chronology.", "NNUpdater": "Gets this date-time {@code ChronoLocalDate}."}
{"Origin": "Create the default request used when asking for the upgrade plan on a namespace.", "Reference": "Create a request used when asking for the upgrade plan on a namespace.", "NNUpdater": "The default behavior of this method is to return {@link HttpServletRequest#upgrade(Class)} on the wrapped request object."}
{"Origin": "Set body of the Stored Procedure.", "Reference": "Set the resource value.", "NNUpdater": "Read a stored procedure by the stored procedure link."}
{"Origin": "Atomically set the lo integer value without changing the hi value.", "Reference": "Atomically sets the lo value without changing the hi value.", "NNUpdater": "Scales each column of a matrix to range [lo, hi]."}
{"Origin": "Obtains an instance of {@code OffsetDate} from a date-time object.", "Reference": "Obtains an instance of {@code OffsetDate} from a temporal object.", "NNUpdater": "Obtains an instance of {@code OffsetDateTime} from a local date and offset time."}
{"Origin": "Returns true if field ttl is set (has been assigned a value) and false otherwise", "Reference": "Returns true if field ttlNotUsed is set (has been assigned a value) and false otherwise", "NNUpdater": "Returns true if field ex1 is set (has been assigned a value) and false otherwise"}
{"Origin": "SQL-Java type mapping, with specified Beam rules: 1. redirect {@link ReadableInstant} to {@link Date} so Calcite can recognize it.", "Reference": "SQL-Java type mapping, with specified Beam rules: 1. redirect {@link AbstractInstant} to {@link Date} so Calcite can recognize it.", "NNUpdater": "Default is {@link org.apache.calcite.sql.SqlWriter.SubQueryStyle#HYDE}."}
{"Origin": "Sets the cluster name.", "Reference": "Sets the cluster identifier.", "NNUpdater": "Sets the client protocol."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Setter for {@link #exposeHeaders}", "Reference": "Setter for {@link #allowHeaders}", "NNUpdater": "expose as protected"}
{"Origin": "The {@link Flux} will contain one or several feed response of the obtained items.", "Reference": "The {@link CosmosContinuablePagedFlux} will contain one or several feed response of the obtained items.", "NNUpdater": "The {@link Flux} will contain one or several feed response of the obtained containers."}
{"Origin": "Checks the {@link LoadMetadataType} to determine whether or not to proceed in loading metadata.", "Reference": "Checks the {@link LoadMetadataPType} to determine whether or not to proceed in loading metadata.", "NNUpdater": "Checks whether fields indexing is enabled for objects of the given {@code cls}."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Preference should be visible", "Reference": "Preference should be invisible", "NNUpdater": "Preference should be visible"}
{"Origin": "Deserializes the json as an object of the type.", "Reference": "Deserializes the data as an object of the type.", "NNUpdater": "De-serializes the object and returns the result."}
{"Origin": "Get values.", "Reference": "Get value expressions.", "NNUpdater": "Valid Values: |"}
{"Origin": "Loop over the {@link KeyProperties key} and call {@link KeyClient#getKey(KeyProperties key properties)}.", "Reference": "Loop over the {@link KeyProperties key} and call {@link KeyClient#getKey(String, String)}.", "NNUpdater": "Loop over the {@link KeyProperties key} and call {@link KeyClient#getKey(KeyProperties key properties)}."}
{"Origin": "This allows ActiveMQ destinations to be passed around as Strings and converted back again.", "Reference": "This allows ActiveMQ destinations to be passed around as", "NNUpdater": "This allows a {@link LocalDate} to be converted to a {@code ChronoLocalDate}."}
{"Origin": "Structural Specification for more details.", "Reference": "The OWL 2 Structural Specification for more details.", "NNUpdater": "Returns the equivalent structural type."}
{"Origin": "Applies a function f to the error of this Validation if this is an Invalid.", "Reference": "Applies a function f to the errors of this Validation if this is an Invalid.", "NNUpdater": "If the specified locale is null, the default locale is used."}
{"Origin": "Returns the full coordinates of the artifact - package path + version.", "Reference": "Returns the Bintray coordinates of the artifact.", "NNUpdater": "Returns the path of this Artifact relative to this containing Artifact."}
{"Origin": "Tests resilency when egress device is down.", "Reference": "Tests resiliency when egress device is down.", "NNUpdater": "Tests resiliency when egress device is down."}
{"Origin": "return the config File associated with a TunnelController or a default value based on the tunnel name", "Reference": "return the config File associated with a TunnelController or a default", "NNUpdater": "Returns the application ID associated with this resource at creation."}
{"Origin": "Constructs and returns a new instance of {@link Dimension}.", "Reference": "Constructs and returns a new instance of {@link DimensionColumn}.", "NNUpdater": "Constructs a new {@link DistributionViewDescriptor}."}
{"Origin": "Creates a new instance using the given {@code event} to obtain the configuration's parameter values.", "Reference": "Creates a new instance using the given {@code resolverSetResult} to obtain the configuration's parameter values", "NNUpdater": "Creates a new {@link Graph} instance using the default {@link Configuration} from {@link #standardGraphConfiguration()}."}
{"Origin": "Skip until the given string is matched in the stream, but ignoring chars initially escaped by a '\\'.", "Reference": "Skip until the given string is matched in the stream, but ignoring chars initially escaped by a '\\' and any EL expressions.", "NNUpdater": "Appends to a StringBuilder the String src where non-ASCII and XML special chars are escaped."}
{"Origin": "run a method in a new thread", "Reference": "run a new thread", "NNUpdater": "Run thread"}
{"Origin": "This allows multiple versions of the dao to be configured if necessary.", "Reference": "This allows multiple versions of the DAO to be configured if necessary.", "NNUpdater": "This can be necessary if a repository interface redeclares a method in {@link Repository} (e.g."}
{"Origin": "Applies the optimization to all subqueries.", "Reference": "Applies the optimization to a given subquery root.", "NNUpdater": "to the optimization policy."}
{"Origin": "Test of parse method, of class CertificateVerifyMessageParser.", "Reference": "Test of parse method, of class CertificateVerifyParser.", "NNUpdater": "Test of read method, of class Arff."}
{"Origin": "Test {@link ConnectorFactory#searchByViewport(Viewport, MapTokens)}", "Reference": "Test {@link ConnectorFactory#searchByViewport(Viewport)}", "NNUpdater": "Sets the current viewport (defined by {@link #currentViewport}) to the given X and Y positions."}
{"Origin": "Acquires the read lock to block reinitialization.", "Reference": "Acquires the resource to block reinitialization.", "NNUpdater": "Lock a block with lock id."}
{"Origin": "Each cause is appended after the exception is it the cause of.", "Reference": "Each exception is encoded before the exception it causes.", "NNUpdater": "The cause of {@link Throwable}"}
{"Origin": "This method alone will not make any changes to the {@link SessionConfiguration}, it is up to the use case to decide when to modify the session configuration.", "Reference": "This method alone will not make any changes to the {@link SessionConfig}, it is up to the use case to decide when to modify the session configuration.", "NNUpdater": "Set the session ID to be used when #useSessionId() returns true."}
{"Origin": "This factory converts the arbitrary date-time object to an instance of {@code ZoneId}.", "Reference": "This factory converts the arbitrary temporal object to an instance of {@code ZoneId}.", "NNUpdater": "This factory converts the arbitrary date-time object to an instance of {@code ZoneId}."}
{"Origin": "Tests the {@link AlluxioURI#AlluxioURI(String, String, String, Map)} constructor to build an URI from its different components with a query map.", "Reference": "Tests the {@link AlluxioURI#AlluxioURI(String, Authority, String, Map)} constructor to build an URI from its different components with a query map.", "NNUpdater": "Tests the {@link AlluxioURI#AlluxioURI(String)} constructor for basic HDFS paths."}
{"Origin": "Generate the next increment in the optimistic locking value according the {@link VersionType} contract for the version property.", "Reference": "Generate the next increment in the optimistic locking value according the {@link VersionSupport} contract for the version property.", "NNUpdater": "Generate the next increment in the optimistic locking value according the {@link VersionType} contract for the version property."}
{"Origin": "Returns an instance of {@link ProgramHeartbeatStore}.", "Reference": "Returns an instance of {@link ProgramHeartbeatDataset}.", "NNUpdater": "Create an instance of {@link HeartbeatType }"}
{"Origin": "MediaHandler with the specified MediaStream.", "Reference": "MediaStream.", "NNUpdater": "Set a new media list."}
{"Origin": "The current thread might be already in any request scope and in that case the scope will be changed to the scope defined by the {@link RequestScope.Instance scope instance}.", "Reference": "The current thread might be already in any request scope and in that case the scope will be changed to the scope defined by the {@link RequestContext scope instance}.", "NNUpdater": "Maps a {@link Scope} instance to a given annotation."}
{"Origin": "Looks up classes in the virtual Java 9 filesystem jrt:", "Reference": "Looks up classes in Java 9's virtual filesystem jrt:", "NNUpdater": "Looks up a single message for the given component."}
{"Origin": "Utility method for transforming an optional {@link SslConfiguration} into an optional {@link TrustContext}.", "Reference": "Utility method for transforming an {@link SslConfiguration} into a {@link TrustContext}.", "NNUpdater": "Utility method for transforming an optional {@link SslConfiguration} into an optional {@link TrustContext}."}
{"Origin": "Set user keypair ### Functional Description: Set the user's keypair.", "Reference": "Set user's key pair ### Functional Description: Set the user's key pair.", "NNUpdater": "matches name of the given key pair"}
{"Origin": "Optional.absent()} if the AST node doesn't correspond to a 'simple' lock expression.", "Reference": "Optional.empty()} if the AST node doesn't correspond to a 'simple' lock expression.", "NNUpdater": "Optional#empty() Optional.empty()}."}
{"Origin": "Returns the axis aligned bounding box (AABB) of the region, mesh, and skinned mesh attachments for the current pose.", "Reference": "Returns the axis aligned bounding box (AABB) of the region and mesh attachments for the current pose.", "NNUpdater": "This method sets the mesh context for the given mesh old memory address."}
{"Origin": "Returns the event index.", "Reference": "Returns the event indexes.", "NNUpdater": "Returns the index type name"}
{"Origin": "Adds a new job to the pending jobs queue.", "Reference": "Adds a new auto ingest job to the pending jobs queue.", "NNUpdater": "Adds a new job to the pending jobs queue."}
{"Origin": "Adds a single button to the view.", "Reference": "Adds buttons to the view.", "NNUpdater": "Adds the new radio button to the group."}
{"Origin": "Returns a basic Authorization header value for the given {@link Credentials} and charset.", "Reference": "Returns a basic {@code Authorization} header value for the given {@link Credentials} and charset.", "NNUpdater": "Return a filter that adds an Authorization header for HTTP Basic Authentication."}
{"Origin": "{@codesnippet com.azure.storage.blob.specialized.BlobAsyncClientBase.startCopyFromURL#URL}", "Reference": "{@codesnippet com.azure.storage.blob.specialized.BlobAsyncClientBase.startCopyFromURL#String}", "NNUpdater": "{@codesnippet com.azure.storage.blob.BlobClientBuilder.buildAsyncClient}"}
{"Origin": "Returns a range of all the sync d l objects where companyId = ?", "Reference": "Returns a range of all the sync d l objects where repositoryId = ?", "NNUpdater": "Finds a range of all the articles where groupId = ?"}
{"Origin": "Is matching by file name, moduleId and Check name.", "Reference": "Is matching by file name, module id and Check name.", "NNUpdater": "The map key is the entry name, typically the module name."}
{"Origin": "If the score is 60 or lower (on a 1 to 100 interval) the system default charset is returned instead.", "Reference": "If the score is less than 60 (on a 1 to 100 interval) the system default charset is returned instead.", "NNUpdater": "If none is found then the default will be returned, which is -100..100."}
{"Origin": "Binds the specified {@link Service} at the specified {@link Route} of the default {@link VirtualHost}.", "Reference": "Binds the specified {@link HttpService} at the specified {@link Route} of the default {@link VirtualHost}.", "NNUpdater": "Binds the specified {@link Service} at the specified {@link Route} of the default {@link VirtualHost}."}
{"Origin": "Check equality between two String objects, specifying (offset,len) pairs for limiting the fragments to be checked.", "Reference": "Check equality between two CharSequence objects, specifying (offset,len) pairs for limiting the fragments to be checked.", "NNUpdater": "Determines the equality of two objects."}
{"Origin": "For example, the period in days between two dates can be calculated using {@code startInstant.periodUntil(endInstant, SECONDS)}.", "Reference": "For example, the period in days between two dates can be calculated using {@code startInstant.until(endInstant, SECONDS)}.", "NNUpdater": "For example, the amount in days between two dates can be calculated using {@code startInstant.periodUntil(endInstant, SECONDS)}."}
{"Origin": "If the prefetch is not needed, {@link #playFromSearch} can be directly called without this method.", "Reference": "If the prepare is not needed, {@link #playFromSearch} can be directly called without this method.", "NNUpdater": "If the prefetch is not needed, {@link #playFromSearch} can be directly called without this method."}
{"Origin": "Checks whether the {@link EntryEventSource} of an {@link EntryEvent} is crucial for this class.", "Reference": "Checks whether the {@link EntriesEventSource} of an {@link EntriesEvent} is crucial for this class.", "NNUpdater": "Is responsible for calling {@link EventSource#onEvent(InboundEvent)} and all registered {@link EventListener} instances."}
{"Origin": "The meta-property for the {@code convention} property.", "Reference": "The meta-property for the {@code volatilitiesName} property.", "NNUpdater": "The meta-property for the {@code curveConvention} property."}
{"Origin": "If the delete etag doesn't match anything the delete won't happen, this will result in a 412.", "Reference": "If the delete ETag doesn't match anything the delete won't happen, this will result in a 412.", "NNUpdater": "Handles an {@link HttpMethod#DELETE DELETE} request."}
{"Origin": "Overload of {@link #connect(String, ServerStateListener, ServerConnectionFailListener)} with no listeners.", "Reference": "Overload of {@link #connect(String, ServerStateListener, ServerReconnectFilter)} with no listeners.", "NNUpdater": "Overload of {@link #connect(String, ServerStateListener, ConnectionFailListener)} with only one listener."}
{"Origin": "No-op if ParcelFileDescriptor is already closed.", "Reference": "Increases reference count for underlying ParcelFileDescriptor.", "NNUpdater": "If {@code null} is passed, this method is a no-op."}
{"Origin": "The clone is given a new unique ID.", "Reference": "The clones are each given a new unique ID.", "NNUpdater": "Returns a unique id."}
{"Origin": "Tests {@code globalRecommend(long, int)}.", "Reference": "Tests {@code recommendRelatedItems()(long, int)}.", "NNUpdater": "Delegate to {@link #globalRecommend(LongSet, int, LongSet, LongSet)}."}
{"Origin": "Structural Specification for more details.", "Reference": "The OWL 2 Structural Specification for more details.", "NNUpdater": "Returns the equivalent structural type."}
{"Origin": "Match statement against pattern for drop schedule", "Reference": "Match statement against pattern for drop task", "NNUpdater": "Match a pattern element."}
{"Origin": "Create a {@link PooledConnectionImpl.PStmtKey} for the given arguments.", "Reference": "Creates a {@link PooledConnectionImpl.PStmtKey} for the given arguments.", "NNUpdater": "Return the pooled connection to its pool."}
{"Origin": "Test of var method, of class BernoulliDistribution.", "Reference": "Test of variance method, of class BernoulliDistribution.", "NNUpdater": "Test of bernoulli method, of class DiscreteDistributions."}
{"Origin": "Creates new {@link RedisScript} from {@link Resource}.", "Reference": "Creates new {@link RedisScript} (with throw away result) from the given {@link Resource}.", "NNUpdater": "Return a new {@link Loader} for a script using the {@link Compiler}'s specified {@link PainlessLookup}."}
{"Origin": "If the {@code null} is returned, {@link SessionResult#RESULT_CODE_UNKNOWN_ERROR} will be returned.", "Reference": "If the {@code null} is returned, {@link SessionResult#RESULT_ERROR_UNKNOWN_ERROR} will be returned.", "NNUpdater": "See also {@link #hasErrors()}, which will be true if a {@link PathValidator.Status#ERROR} is returned."}
{"Origin": "HadoopFormatIO.Write#withConfiguration(Configuration) withConfiguration(Configuration)} function when key class is not provided by the user in configuration.", "Reference": "HadoopFormatIO.Write.Builder#withConfiguration(Configuration) withConfiguration(Configuration)} function when key class is not provided by the user in configuration.", "NNUpdater": "Parse the specified {@link Configuration @Configuration} class."}
{"Origin": "Returns a {@link RestrictionTracker} which reports all claim attempts to the specified {@link", "Reference": "Returns a thread safe {@link RestrictionTracker} which reports all claim attempts to the specified {@link ClaimObserver}.", "NNUpdater": "Parse a child ClaimType into a Claim object."}
{"Origin": "Returns possibly relative {@link URI} representation of this {@link TruffleFile}.", "Reference": "Returns a relative {@link URI} representation of non absolute {@link TruffleFile}.", "NNUpdater": "This calls {@link #loadContainer(URI)} and uses {@link URI#create(String)} to build the URI."}
{"Origin": "Checks if the parent is null then must be an instance of {@link HK2InjectionManager}.", "Reference": "Checks if the parent is null then must be an instance of {@link ServiceLocator} or {@link HK2InjectionManager}.", "NNUpdater": "If this property is non-null, then {@code rate} must be null and {@code index} must be non-null."}
{"Origin": "Returns the request's call sequence.", "Reference": "Returns the request's command sequence.", "NNUpdater": "Returns the request's call ID."}
{"Origin": "Creates a new {@link FileSystemMaster} from journal along with its dependencies, and returns the master registry containing that master.", "Reference": "Creates a new {@link FileSystemMaster} from journal along with its dependencies, and returns the master registry and the journal system.", "NNUpdater": "Creates a new {@link DefaultFileSystemMaster} from journal."}
{"Origin": "This is why there is not a set method for the paragraphContent property.", "Reference": "This is why there is not a set method for the content property.", "NNUpdater": "This is why there is not a set method for the pathOrFormulasOrHandles property."}
{"Origin": "Update the number.", "Reference": "Update the number at the position.", "NNUpdater": "Updates an existing file link object."}
{"Origin": "As a special case, resources ending with ``{@code .class}`` are never encapsulated.", "Reference": "If the resource name ends with ``{@code .class}`` then it is not encapsulated.", "NNUpdater": "Corner case:"}
{"Origin": "Returns a zoned date-time formed from the instant represented by this date-time and the specified time-zone.", "Reference": "Returns a zoned date-time formed from the instant represented by this date-time and the specified zone ID.", "NNUpdater": "Returns a ChronoLocalDateTime formed from this date at the specified time."}
{"Origin": "Creates query for the given searchString.", "Reference": "Queries this contact source for the given searchString.", "NNUpdater": "Set search string for the ``type`` field."}
{"Origin": "Returns the property sources that were actually applied during {@link #postProcessBeanFactory(ConfigurableListableBeanFactory) post-processing}.", "Reference": "Return the property sources that were actually applied during {@link #postProcessBeanFactory(ConfigurableListableBeanFactory) post-processing}.", "NNUpdater": "Calls {@link #customizeBeanFactory(DefaultListableBeanFactory)} to allow for customizing the context's ."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Sets the {@link DecoratingServiceFunction} and returns {@link ServerBuilder} that this {@link DecoratingServiceBindingBuilder} was created from.", "Reference": "Sets the {@link DecoratingHttpServiceFunction} and returns {@link ServerBuilder} that this {@link DecoratingServiceBindingBuilder} was created from.", "NNUpdater": "Returns a {@link ServiceBindingBuilder} which is for binding a {@link Service} fluently."}
{"Origin": "Gets the classpath component containing the given class.", "Reference": "Gets the base location of the given class.", "NNUpdater": "Gets the classpath component containing the given class."}
{"Origin": "Gedec the value of the 'dec' field.", "Reference": "Gets the value of the 'dec' field.", "NNUpdater": "The readers removed will also be decZoieRef()."}
{"Origin": "Construct a new instance of an {@code Execution} that was skipped with the provided {@code skipReason}.", "Reference": "Create a new instance of an {@code Execution} that was skipped with the provided {@code skipReason}.", "NNUpdater": "Calling {@code get()} will immediately throw the provided {@code Throwable} wrapped in an {@code"}
{"Origin": "The input file must be a list of tab-separated verb-POS pairs, one verb per line.", "Reference": "The input file must be a list of whitespace-separated verb-lemma-POS triples, one verb form per line.", "NNUpdater": "Get method's http verbs."}
{"Origin": "Merging of data is required during an mind-meld.", "Reference": "during an mind-meld.", "NNUpdater": "Required: No"}
{"Origin": "Reads a material from a name or ID, depending on the tag type.", "Reference": "Reads a material from a string ID or numeric ID, depending on the tag type.", "NNUpdater": "Returns a tag or attribute name."}
{"Origin": "Executes {@link Pems#publicKeySpecFromOpenSSH(InputSupplier)} on the string which was OpenSSH", "Reference": "Executes {@link Pems#publicKeySpecFromOpenSSH(ByteSource)} on the string which was OpenSSH", "NNUpdater": "Set the linuxUserConfiguration value."}
{"Origin": "Pre-multiply the rotation transformation of the given {@link Quaterniond} to this matrix.", "Reference": "Pre-multiply the rotation transformation of the given {@link Quaterniondc} to this matrix.", "NNUpdater": "Pre-multiply the rotation transformation of the given {@link Quaternionfc} to this matrix."}
{"Origin": "All handlers will be invoked by this executor.", "Reference": "All handlers will be invoked by the main executor.", "NNUpdater": "Executor on which {@link Callback} methods will be invoked if {@link Call} is used."}
{"Origin": "Test of open method, of class CpeMemoryIndex.", "Reference": "Test of getDocument method, of class CpeMemoryIndex.", "NNUpdater": "Sets the cpe index writer."}
{"Origin": "Returns true if field traceId is set (has been assigned a value) and false otherwise", "Reference": "Returns true if field sampled is set (has been assigned a value) and false otherwise", "NNUpdater": "Returns true if field traceTransactionSequence is set (has been assigned a value) and false otherwise"}
{"Origin": "This method is called when a component was rendered standalone.", "Reference": "This method is called when a component was rendered as a part.", "NNUpdater": "Adds components to the list of components to be rendered"}
{"Origin": "Creates a context-independent copy of the iterator results.", "Reference": "Creates a materialized, context-independent version of the iterator results.", "NNUpdater": "Creates a copy of the Context."}
{"Origin": "Returns the foo with the primary key or throws a {@link com.liferay.testpacl.NoSuchFooException} if it could not be found.", "Reference": "Returns the foo with the primary key or throws a {@link NoSuchFooException} if it could not be found.", "NNUpdater": "Assert.instanceOf(Foo.class, foo, ``Foo expected``);"}
{"Origin": "Parses a sample from the array and returns a proper object representation.", "Reference": "Parses a jsonSymbol from the array and returns a proper object representation.", "NNUpdater": "Returns an object."}
{"Origin": "Returns the execution root for the main package.", "Reference": "Returns the execution root of Blaze.", "NNUpdater": "Returns the execution root for the main package."}
{"Origin": "Sets the group.", "Reference": "Set the group.", "NNUpdater": "Guide."}
{"Origin": "Any criteria implements {@code Queryable} interface at runtime.", "Reference": "Any criteria implements (or holds) {@code Queryable} interface at runtime.", "NNUpdater": "Any criteria implements {@code Queryable} interface at runtime."}
{"Origin": "Add a Debug EventLogItem and log.", "Reference": "Add a Debug EventLogEntry and log.", "NNUpdater": "Send a {@link android.util.Log#DEBUG} log message and log the exception."}
{"Origin": "Standard getter for the leftwardLabel String in this Relationship", "Reference": "Standard getter for the leftwardValue String in this Relationship", "NNUpdater": "Sets the value(s) for identifier (An identifier for the person as this patient)"}
{"Origin": "Wrap an object, if necessary.", "Reference": "Wraps the given object if necessary.", "NNUpdater": "Performs {@code 'soft wrap' -> 'hard wrap'} conversion for soft wrap at the given offset if any."}
{"Origin": "Returns if the given type has {@link ITokenType#TF_SEPARATOR_DOCUMENT} set.", "Reference": "Returns if the given type has {@link ITokenTypeAttribute#TF_SEPARATOR_DOCUMENT} set.", "NNUpdater": "For example, a {@code List} return type can be specified as {@code ofType(new TypeDescriptor>(){})}."}
{"Origin": "Returns the exporerFileEntryOptions.", "Reference": "Returns the explorerFileEntryOptions.", "NNUpdater": "Returns the site path."}
{"Origin": "Compiles the given code generator request.", "Reference": "Generates the given code generator request.", "NNUpdater": "Compiles the classes for the described action."}
{"Origin": "The squared length of the quaternion is obtained by multiplying by its conjugate and summing the terms of the resulting quaternion.", "Reference": "The squared length of the quaternion is obtained by the dot product of the quaternion with its conjugate.", "NNUpdater": "If is quaternion and the quaternion representing the specified rotation, then the new quaternion will be ."}
{"Origin": "SecretProperties secret} and call {@link SecretClient#getSecret(SecretProperties)} .", "Reference": "SecretProperties secret} and call {@link SecretClient#getSecret(String, String)}.", "NNUpdater": "SecretProperties secret} and call {@link SecretClient#getSecret(SecretProperties)}."}
{"Origin": "Saves all dictionary entries that appeared {@literal >} threshold times Note: feature indices are changed to contiguous values starting at 0.", "Reference": "Saves all dictionary entries that appeared > threshold times Note: feature indices are changed to contiguous values starting at 0.", "NNUpdater": "4) Otherwise, if there are features and the feature data source has only one dictionary, then that one is the best dictionary."}
{"Origin": "Returns the property sources that were actually applied during {@link #postProcessBeanFactory(ConfigurableListableBeanFactory) post-processing}.", "Reference": "Return the property sources that were actually applied during {@link #postProcessBeanFactory(ConfigurableListableBeanFactory) post-processing}.", "NNUpdater": "Calls {@link #customizeBeanFactory(DefaultListableBeanFactory)} to allow for customizing the context's ."}
{"Origin": "Sets the specified value to the {@code bitfield} field.", "Reference": "Sets the specified value to the {@code baselineUsesContext} field.", "NNUpdater": "Sets the specified value to the {@code printUsesContext} field."}
{"Origin": "Sets the desired camera lensFacing.", "Reference": "Sets the desired camera by specifying desired lensFacing.", "NNUpdater": "sets the direction vector of the camera."}
{"Origin": "Create a {@link MediaItem2} with the id.", "Reference": "Create a {@link MediaItem} with the id.", "NNUpdater": "Create a MediaItem2 from the {@link Bundle} with the specified {@link UUID} string."}
{"Origin": "Returns the {@link Request} of the context.", "Reference": "Returns the {@link HttpRequest} of the context.", "NNUpdater": "Returns the current users request context."}
{"Origin": "have been added with {@link #activateIndex(StorageIndexReference)}.", "Reference": "have been added with {@link #activateIndex(IndexDescriptor2)}.", "NNUpdater": "E.g setZIndex() becomes ``zIndex``."}
{"Origin": "Copied from {@link SlotCrafting#onCrafting(ItemStack)}", "Reference": "Copied from {@link CraftingResultSlot#onCrafting(ItemStack)}", "NNUpdater": "Returns the {@link CraftingOutput} for the current crafting grid configuration and the {@link World} the player is in."}
{"Origin": "Adds a list of byte arrays as the payloads of the request.", "Reference": "Adds a single payload string to the request.", "NNUpdater": "Compares two 2d-byte arrays."}
{"Origin": "Removes all of the service contracts from ES.", "Reference": "Removes all of the api contracts from ES.", "NNUpdater": "SubItems are not processed by themselves but only as parts of the contracts add with {@link #setContract(Contract)}"}
{"Origin": "Return the nanoseconds when the next scheduled task is ready to be run or {@code -1} if no task is scheduled.", "Reference": "Return the nanoseconds until the next scheduled task is ready to be run or {@code -1} if no task is scheduled.", "NNUpdater": "Run a scheduled task to check agent network usage."}
{"Origin": "Converts array of to {@link EmailAddress}.", "Reference": "Converts array of {@link Address} to {@link EmailAddress}.", "NNUpdater": "Delegates to {@link EmailStartingBuilder#replyingTo(Email)}."}
{"Origin": "The method updates the geometry according to the positions of the bones.", "Reference": "The method updates the geometry according to the poitions of the bones.", "NNUpdater": "It return a list of positions referring to the character positions in the input sequence."}
{"Origin": "invokeAll(empty collection) returns empty collection", "Reference": "invokeAll(empty collection) returns empty list", "NNUpdater": "invokeAll(empty collection) returns empty list"}
{"Origin": "By default, this method will return an instance of {@link XmlConfigurationWriterFactory}.", "Reference": "By default, this method will return an {@link XmlConfigurationWriter} factory.", "NNUpdater": "Creates an unitialized instance of {@link Write}."}
{"Origin": "Checks to make sure that all properties specified in are known to the program by checking that each simply overrides a default value.", "Reference": "Checks to make sure that all properties specified in {@code properties} are known to the program by checking that each simply overrides a default value.", "NNUpdater": "Checks to make sure that there are enough but not too many arguments."}
{"Origin": "Returns true if the button's text should be bold.", "Reference": "Returns true if the text of the %type% should be bold.", "NNUpdater": "Should be false."}
{"Origin": "Initialize source, build, and public resource oracles using the most complete currently available combination of moduleDef and libraryGroup.", "Reference": "Initialize source, build, and public resource oracles using the most complete currently available moduleDef.", "NNUpdater": "Finds the def package or namespace from a reader for a def-file."}
{"Origin": "It satisfies the general contract of the {@link Object#hashCode", "Reference": "It satisfies the general contract of the {@link Object#hashCode Object.hashCode} method.", "NNUpdater": "It satisfies the general contract of the {@link Object#hashCode Object.hashCode} method."}
{"Origin": "Creates a {@link BlockInStream} to read from a netty data server.", "Reference": "Creates a {@link BlockInStream} to read from a gRPC data server.", "NNUpdater": "Creates a {@link PacketOutStream} that writes to a list of locations."}
{"Origin": "Verify that a named subquery exists for each INCLUDE.", "Reference": "Verify that a named subquery of solution set exists for each INCLUDE.", "NNUpdater": "Verify that we use breadcrumb path for both #include and #include ``x/y.h`` in C and C++ (bug REF)"}
{"Origin": "Encode a PI action group to a action profile group.", "Reference": "Encode a PI action profile group to a action profile group.", "NNUpdater": "Guide."}
{"Origin": "{@codesnippet com.azure.data.applicationconfig.configurationclient.listSettings#settingSelector-context}", "Reference": "{@codesnippet com.azure.data.applicationconfig.configurationclient.listConfigurationSettings#settingSelector-context}", "NNUpdater": "{@codesnippet com.azure.data.applicationconfig.configurationclient.listSettings#settingSelector-context}"}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Creates a new leader {@link FileSystemMaster} from journal along with its dependencies, and returns the master registry containing that master.", "Reference": "Creates a new leader {@link FileSystemMaster} from journal along with its dependencies, and returns the master registry and the journal system.", "NNUpdater": "Creates a new {@link DefaultFileSystemMaster} from journal."}
{"Origin": "Returns the desired resource profile for the slot.", "Reference": "Returns the desired resource profile for the task slot.", "NNUpdater": "Returns a given slot in the bucket, given a slot number"}
{"Origin": "Prints a date-time object to an {@code Appendable} using this formatter.", "Reference": "Formats a date-time object to an {@code Appendable} using this formatter.", "NNUpdater": "Formats a date-time object to an {@code Appendable} using this formatter."}
{"Origin": "Submit the entered data.", "Reference": "Submit changes.", "NNUpdater": "Submit a operations."}
{"Origin": "Attempts to close the thread gracefully.", "Reference": "Attempts to shutdown the thread gracefully.", "NNUpdater": "Attempts to close the thread gracefully."}
{"Origin": "### Effects: The selected files are moved from the Recycle Bin to the chosen productive container.", "Reference": "### Effects: The selected files are moved from the recycle bin to the chosen productive container.", "NNUpdater": "API to check if the recycle bin feature is active recycle bin is activated in xwiki.cfg or in the XWiki"}
{"Origin": "Restart if this particular result of the disablement of a plugin and its dependant plugins (depending on the strategy used) has a plugin disablexd.", "Reference": "Restart if this particular result of the disablement of a plugin and its dependent plugins (depending on the strategy used) has a plugin disablexd.", "NNUpdater": "Gets the list of plugins of the given type (e.g., {@link ImageJPlugin})."}
{"Origin": "Fire {@link IStorageSegment} changed when an {@link I_M_AttributeInstance} is changed.", "Reference": "Fire {@link IShipmentScheduleSegment} changed when an {@link I_M_AttributeInstance} is changed.", "NNUpdater": "Operation fails."}
{"Origin": "Calling this method resolves the holiday calendar, returning a function that can convert a {@code SchedulePeriod} to an {@code FxReset}.", "Reference": "Calling this method resolves the holiday calendar, returning a function that can convert a {@code SchedulePeriod} and period index pair to an optional {@code FxReset}.", "NNUpdater": "Obtains a {@code HolidayCalendar} from a unique name."}
{"Origin": "Is called when an agent doesn't select an action.", "Reference": "Method is called when an agent doesn't select an action when asked.", "NNUpdater": "This method is called automatically when an action is added to an actor."}
{"Origin": "Returns a non-empty array of ModuleDescriptors in the run-time image.", "Reference": "Returns a non-empty array of ModuleResolutions in the run-time image.", "NNUpdater": "After flattening, {@link #attributeDescriptors} contains descriptors of all attributes and {@link #attributeGroups} is empty."}
{"Origin": "Creates a Stackdriver Stats exporter.", "Reference": "Creates a Stackdriver Stats exporter with default Monitored Resource.", "NNUpdater": "Only one Stackdriver exporter can be registered at any point."}
{"Origin": "Setting this will open a partially synchronized Realm.", "Reference": "Define this Realm as a fully synchronized Realm.", "NNUpdater": "Returns a Map of realm-id to realm-settings."}
{"Origin": "Get the Java Home property value for the given os_type.", "Reference": "Get the Java Home property value for the given osFamily.", "NNUpdater": "Get the virtualMachineConfiguration value."}
{"Origin": "Exercise --add-exports with unknown values.", "Reference": "Exercise --add-exports and --add-opens with unknown values.", "NNUpdater": "Exercise --add-exports with bad values"}
{"Origin": "If the transport thread has been shut down (or is in the progress of being shut down) this method will instead wait for the transport thread to complete, since no more commands will be performed, and waiting would be forever.", "Reference": "If a transport thread has been shut down (or is in the progress of being shut down) this method will instead wait for the transport thread to complete, since no more commands will be performed, and waiting would be forever.", "NNUpdater": "Shut down immediately."}
{"Origin": "### Precondition: Existing user that is not locked.", "Reference": "### Precondition: Existing user that is **NOT** locked.", "NNUpdater": "Set BillTo Contact Default."}
{"Origin": "Gets the packlet information for given mpack.", "Reference": "Gets the module information for given mpack.", "NNUpdater": "Gets information for the given account."}
{"Origin": "Returns a container with the service type corresponding to the name of a services configuration file.", "Reference": "Returns the service type corresponding to the name of a services configuration file if it is a valid Java identifier.", "NNUpdater": "Returns the binary name of the class corresponding to this type."}
{"Origin": "Sets up the EJB client context to use a selector which processes and sets up EJB receivers based on this testcase specific jboss-ejb-client.properties file", "Reference": "Sets up the EJB client properties based on this testcase specific jboss-ejb-client.properties file", "NNUpdater": "Adds an a DeploymentElement to the Set of modules if it represents an EJB module or a library."}
{"Origin": "create a TimeService by {@link TimeServiceConfig}.", "Reference": "Create time service by {@link TimeServiceConfiguration}.", "NNUpdater": "Invokes {@link Service#serviceAdded(ServiceConfig)}."}
{"Origin": "Update a pending or active batch-processing request.", "Reference": "Update a pending or active batch-processing job.", "NNUpdater": "and code = ?."}
{"Origin": "Creates headers definitions for swagger response.", "Reference": "Creates headers definitions for openApi response.", "NNUpdater": "Sends the response back to the client."}
{"Origin": "Indicate to all associated {@link ExportDataSource} to assume mastership role for the given partition id", "Reference": "Indicate to all associated {@link ExportDataSource} to assume leadership role for the given partition id", "NNUpdater": "Finds the role associated to the given name."}
{"Origin": "Returns a {@link TextureRegion} based on the so called state time.", "Reference": "Returns a frame based on the so called state time.", "NNUpdater": "Adds a {@link BaseTexture} to the TextureManager."}
{"Origin": "Get get value of a key", "Reference": "Get value of a key", "NNUpdater": "Gets the key."}
{"Origin": "initialize the target module IDs with the passed application moduleID and the descriptors", "Reference": "Initializes the target module IDs with the passed application moduleID", "NNUpdater": "If the caller's module is this module then update this module to read the given source {@code Module}."}
{"Origin": "{@code String template}: the template content {@code Map model}: the view model {@code RenderingContext context}: the rendering context (since VERSION)", "Reference": "{@code String template}: the template content {@code Map model}: the view model {@code RenderingContext context}: the rendering context", "NNUpdater": "Returns the Velocity context."}
{"Origin": "Creates a new instance of LDAPConnection, configured as required to use whichever encryption method is requested within guacamole.properties.", "Reference": "Creates a new instance of LdapNetworkConnection, configured as required to use whichever encryption method is requested within guacamole.properties.", "NNUpdater": "Returns the settings of this element."}
{"Origin": "Removes all properties for the specified {@link NamespacedEntityId}.", "Reference": "Removes all properties for the specified {@link MetadataEntity}.", "NNUpdater": "Removes all properties for the specified {@link NamespacedEntityId}."}
{"Origin": "Note this method creates a HotStream that starts emitting data only when the first connecting Stream connects.", "Reference": "Note this method creates a Connectable that starts emitting data only when the first connecting Stream connects.", "NNUpdater": "Creates a new {@link ConnectedDataStream} by connecting {@link DataStream} outputs of different type with each other."}
{"Origin": "Gets analytical statistics for the specified connection.", "Reference": "Gets status analytics for the specified connection.", "NNUpdater": "Returns the statistics for the specified key id."}
{"Origin": "If available, the value is returned, otherwise a new name is generated and returned.", "Reference": "If available, the value is returned, otherwise a new uid is generated and placed within the {@link Map}.", "NNUpdater": "If is not a String object type and it evaluates to an integer value, a new instance is returned, otherwise a new instance is returned."}
{"Origin": "Same as {@link #lockOrRegisterBackupLock(TxInvocationContext, Object, long)}", "Reference": "Same as {@link #lockOrRegisterBackupLock(TxInvocationContext, VisitableCommand, Object, long)}", "NNUpdater": "Same as {@link #lockForWriting(Object)}, but with 0 timeout."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "This method makes sure we are using the root persister.", "Reference": "This method makes sure we are using the root entityDescriptor.", "NNUpdater": "Set the configuration persister factory to use."}
{"Origin": "returns true if any posts in the passed list exist in this list", "Reference": "returns true if any posts in the passed list exist in this list for the given tag", "NNUpdater": "returns a count of which posts in the passed list don't already exist in the db for the passed tag"}
{"Origin": "The timestamp for creation of the counterexample.", "Reference": "The timestamp for creation of the object.", "NNUpdater": "Get the timestamp for when this {@code ReportEntry} was created."}
{"Origin": "If this happens, a configuration {@link ConfigurationEvent event} will be sent to all registered listeners.", "Reference": "If this happens, a CONFIGURATION {@link ConfigurationEvent event} will be sent to all registered listeners.", "NNUpdater": "Returns Event Processing Configuration defined in this Configuration."}
{"Origin": "Returns true if the given type is a primitive type, false otherwise.", "Reference": "Indicates if the given type is a primitive type.", "NNUpdater": "Returns the primitive types."}
{"Origin": "{@code requestType} and {@code options} defaults to {@code null}.", "Reference": "{@code options} defaults to {@code null}.", "NNUpdater": "A {@code null} CharSequence will return {@code -1}."}
{"Origin": "Encodes an integer into 4 bytes in network byte order in the buffer supplied.", "Reference": "Encodes an integer into up to 4 bytes in network byte order in the supplied buffer starting at offset and writing bytes.", "NNUpdater": "Get from the underlying buffer into a supplied {@link ByteBuffer}."}
{"Origin": "Returns an iterator of all of the registered {@code SaslServerFactory}s where the order is based on the order of the Provider registration and/or class path order.", "Reference": "Returns a collection of all of the registered {@code SaslServerFactory}s where the order is based on the order of the Provider registration and/or class path order.", "NNUpdater": "Returns a new {@link Order} with the given {@link Direction}."}
{"Origin": "Indicate to associated {@link ExportGeneration}s to become masters for the given partition id", "Reference": "Indicate to associated {@link ExportGeneration}s to become leaders for the given partition id", "NNUpdater": "Shutdown the BlobStore with given {@link PartitionId} {@code id}."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the character_set_database parameter.", "Reference": "This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the parameter.", "NNUpdater": "Uses the finder cache."}
{"Origin": "Create a new {@code FlatTreeNode} from the given {@code tree}.", "Reference": "Create a new, immutable {@code FlatTreeNode} from the given {@code tree}.", "NNUpdater": "Sets the parent of this tree to a specific tree."}
{"Origin": "Sets the border size that defines the attack range for a {@link robocode.SentryRobot SentryRobot}.", "Reference": "Sets the border size that defines the attack range for a {@link robocode.BorderSentryRobot SentryRobot}.", "NNUpdater": "Builds and sends an {@link Event} to the Sentry server using the statically stored {@link SentryClient} instance."}
{"Origin": "Requests killing of the running program.", "Reference": "Requests graceful termination of the running program.", "NNUpdater": "Prior to running the program, the scheduler will check how many active runs of the scheduled program exist."}
{"Origin": "An override to the global {@code scriptEvaluationTimeout} setting on the script engine.", "Reference": "An override to the global {@code evaluationTimeout} setting on the script engine.", "NNUpdater": "Returns the script for a given Locale."}
{"Origin": "Tests the given {@code operationModel} for a {@link OperationExecutorModelProperty} and if present it returns the enclosed {@link OperationExecutorFactory}.", "Reference": "Tests the given {@code operationModel} for a {@link ComponentExecutorModelProperty} and if present it returns the enclosed {@link ComponentExecutorFactory}.", "NNUpdater": "Returns an {@link OperationExecutor} that was previously registered through {@link #registerOperationExecutor(Configuration, Operation, Object, OperationExecutor)}"}
{"Origin": "Create jar file with specified files from specified location.", "Reference": "Create jar file with specified files.", "NNUpdater": "Creates a new object."}
{"Origin": "Getter for the output directory where the data files are stored.", "Reference": "Getter for the directory where the data files are stored.", "NNUpdater": "Gets the base directory where all the checkpoints are stored."}
{"Origin": "and repositoryId = ?.", "Reference": "and parentFolderId = ?.", "NNUpdater": "Engine."}
{"Origin": "Ensures that the parameters will overwrite the member values.", "Reference": "Ensures that the initial request parameters will overwrite the member values.", "NNUpdater": "Ensures if the given source document is not null."}
{"Origin": "Return the {@link LiquibaseSerializable.SerializationType} to use when serializing this object.", "Reference": "Return the {@link liquibase.serializer.LiquibaseSerializable.SerializationType} to use when serializing this object.", "NNUpdater": "Used by {@link AbstractActionLogic#getPriority(liquibase.action.Action, liquibase.Scope)}"}
{"Origin": "Peeks ID3 tag data (if present) at the beginning of the input.", "Reference": "Peeks ID3 tag data at the beginning of the input.", "NNUpdater": "Peeks data from the input and parses ID3 metadata, including gapless playback information."}
{"Origin": "Check to see if the local variable should be considered for replacement, i.e.", "Reference": "Check to see if the variable should be considered for replacement, i.e.", "NNUpdater": "If a {@link VariableCallback} is set {@link VariableCallback#onDeleteVariable(String)} will be called to check if deletion is allowed."}
{"Origin": "Creates nonce and its hash for use in OpenID Connect Authentication Requests", "Reference": "Creates nonce and its hash for use in OpenID Connect VERSION Authentication Requests.", "NNUpdater": "Connect token for a user authenticated by your backend authentication process."}
{"Origin": "compute sum of squared difference of counts", "Reference": "compute weighted sum of absolute difference of counts", "NNUpdater": "Returns the residual sum of squares."}
{"Origin": "KeyImportOptions#getKeyMaterial() key material} cannot be null.", "Reference": "ImportKeyOptions#getKey() key material} cannot be null.", "NNUpdater": "KeyImportOptions#getKeyMaterial() key material} cannot be null."}
{"Origin": "Constructs an instance of TableAdminClient with the given instanceName and bigtableTableAdminStub", "Reference": "Constructs an instance of TableAdminClient with the given instanceName and stub.", "NNUpdater": "check to see if the a given userid is an admin admin is group 1"}
{"Origin": "Make sure that no part is shared by several candidates.", "Reference": "Make sure that no part is shared by different candidates.", "NNUpdater": "make sure that illegal arguments fail"}
{"Origin": "Saves the bundle with the given name and files so it can be recalled later in the template", "Reference": "Saves the bundled file to the request so it can be recalled later in the template", "NNUpdater": "Saves the current selection for later changes."}
{"Origin": "Helper for {@link #insertBefore(long, Value)} that copies all items into a {@link TreeSeq}.", "Reference": "Helper for {@link #insertBefore(long, Value, QueryContext)} that copies all items into a {@link TreeSeq}.", "NNUpdater": "A helper method that returns {@link Long#intValue()} on the return of {@link #get(char)}, if present."}
{"Origin": "This hack may fail on non-Sun JVMs.", "Reference": "This hack may fail on non-Oracle/OpenJDK JVMs.", "NNUpdater": "HACK: This is used to make a copy of a read."}
{"Origin": "Sends a request to write a list of addresses.", "Reference": "Sends a request to write a list of entries.", "NNUpdater": "Sends an HTTP request and returns the response."}
{"Origin": "NativeLinkable}.", "Reference": "NativeLinkableGroup}.", "NNUpdater": "Returns our {@link #getBuildDeps()}, limited to the subset of those which are {@link NativeLinkable}."}
{"Origin": "Convert a {@link MongoIterable} into an {@link Observable}.", "Reference": "Convert a {@link AsyncMongoIterable} into an {@link Observable}.", "NNUpdater": "Will use the {@link MongoClient} instance configured in {@link #mongo()}."}
{"Origin": "Adds a new {@link StateDescription} for a channel that has multiple options to select from or a custom format string.", "Reference": "Adds a new {@link StateDescriptionFragment} for a channel that has multiple options to select from or a custom format string.", "NNUpdater": "Factory to create a formatter from a pattern string."}
{"Origin": "Sets the occurrence indicator to 1 if the first expression returns at least one non-array item.", "Reference": "Sets the occurrence indicator to 1 if the argument returns at least one item.", "NNUpdater": "Returns the first item from the array."}
{"Origin": "Sets the {@link VectorCollectionFactory} used to produce acceleration structures for the OPTICS computation.", "Reference": "Sets the {@link VectorCollection} used to produce acceleration structures for the OPTICS computation.", "NNUpdater": "Run OPTICS on the database."}
{"Origin": "Produces an Uncollapsed SemanticGraph with optional extras.", "Reference": "Produces an Uncollapsed (basic) SemanticGraph.", "NNUpdater": "Set the semanticRoles."}
{"Origin": "A policy that delegates to another policy that is selected based on the most recently evaluated outcome.", "Reference": "A policy that delegates to another policy that is selected based on the most recent error.", "NNUpdater": "PolicyConfiguration interface are used to define the policy statements of the identified policy context."}
{"Origin": "Returns an Rx Observable that monitors changes to this RealmList.", "Reference": "Returns an Rx Flowable that monitors changes to this RealmList.", "NNUpdater": "Returns an Rx Observable that monitors changes to this RealmObject."}
{"Origin": "Finds elements based on the value of the ``class`` attribute.", "Reference": "Find elements based on the value of the ``class`` attribute.", "NNUpdater": "Returns the class attribute."}
{"Origin": "Turns this FutureStream into a HotStream, a connectable Stream, being executed on a thread on the in it's current task executor, that is producing data", "Reference": "Turns this FutureStream into a Connectable, a connectable Stream, being executed on a thread on the in it's current task executor, that is producing data", "NNUpdater": "Wrap a Stream into a Sequential FutureStream."}
{"Origin": "Performs actual Put operation for the specified record in HBase.", "Reference": "Performs actual Put/delete operation for the specified record in HBase.", "NNUpdater": "Performs the actual filter."}
{"Origin": "Returns a {@link Requires} for a dependence on a module with the given (and possibly empty) set of modifiers.", "Reference": "Returns a {@link Requires} for a dependence on a module with the given (and possibly empty) set of modifiers, and optionally the version recorded at compile time.", "NNUpdater": "Returns the set of modules that this module reads."}
{"Origin": "Sets an integer attribute on the given element.", "Reference": "Sets an integer property on the given element.", "NNUpdater": "Parsed an attribute of an element"}
{"Origin": "For an overview of CIDR ranges, go to the", "Reference": "For an overview of CIDR ranges, go to the Wikipedia Tutorial.", "NNUpdater": "Default to no overview, override to add overview."}
{"Origin": "Reset all mocks.", "Reference": "Mock setup.", "NNUpdater": "Create the mocks and find the fields annotated with {@link TestSubject}"}
{"Origin": "Test method with namespaces.", "Reference": "Bidirectional tests.", "NNUpdater": "Adds namespaces to the namespace stack."}
{"Origin": "Returns the k b template with the primary key or throws a {@link com.liferay.knowledgebase.NoSuchTemplateException} if it could not be found.", "Reference": "Returns the k b template with the primary key or throws a {@link NoSuchTemplateException} if it could not be found.", "NNUpdater": "Returns a {@link com.google.template.soy.jbcsrc.shared.CompiledTemplates} for the given template body."}
{"Origin": "The {@code keyImportOptions} is required and its fields {@link KeyImportOptions#getName() name} and {@link", "Reference": "The {@code keyImportOptions} is required and its fields {@link ImportKeyOptions#getName() name} and {@link", "NNUpdater": "Sets the parsing options."}
{"Origin": "This can also be used to set a custom ShapeRenderer aside from the default ones.", "Reference": "This can also be used to set a custom IShapeRenderer aside from the default ones.", "NNUpdater": "Set encoder."}
{"Origin": "Delivers the given event object to given observer methods.", "Reference": "Delivers the given synchronous event object to synchronous and transactional observer methods.", "NNUpdater": "Delivers the content"}
{"Origin": "Return response headers associated with the exception, possibly required for the given status code (e.g.", "Reference": "Return headers associated with the exception that should be added to the error response, e.g.", "NNUpdater": "Marks the start time of the operation."}
{"Origin": "timed invokeAny(empty collection) throws IAE", "Reference": "timed invokeAny(empty collection) throws IllegalArgumentException", "NNUpdater": "timed invokeAll(empty collection) returns empty list"}
{"Origin": "The tracking state affects the aggressiveness of the alpha/beta gain values in synchronizing with the signal carrier.", "Reference": "The PLLGain state affects the aggressiveness of the alpha/beta gain values in synchronizing with the signal carrier.", "NNUpdater": "Returns a GainValues object for `uri'"}
{"Origin": "Access Control Using AWS Identity and Access Management (IAM) .", "Reference": "For more information, see Access Control Using AWS Identity and Access Management (IAM).", "NNUpdater": "Access Management (IAM) user account."}
{"Origin": "Expected to be used by the Poller to release resources on socket close, errors etc.", "Reference": "Expected to be used by the Endpoint to release resources on socket close, errors etc.", "NNUpdater": "Forcibly close the counter and release resources."}
{"Origin": "Atomically sets the lo int value to the given updated value only if the current value {@code ==} the expected value.", "Reference": "Atomically sets the lo value to the given updated value only if the current value {@code ==} the expected value.", "NNUpdater": "Atomically sets the element at position {@code i} to the given updated value if the current value {@code ==} the expected value."}
{"Origin": "Returns the value of the {@code bitfield} field.", "Reference": "Returns the value of the {@code direction} field.", "NNUpdater": "Returns the value of the {@code to_cache} field."}
{"Origin": "Gets the value of the value property.", "Reference": "Gets the value of the appearance property.", "NNUpdater": "Gets the value of the links property."}
{"Origin": "Gets the option to allow queries to run across all partitions of the collection.", "Reference": "Gets the option to allow empty result pages in feed response.", "NNUpdater": "Returns value of the toList option."}
{"Origin": "Throws {@code IllegalArgumentException} if the value is null.", "Reference": "Throws {@code NullPointerException} if the value is null.", "NNUpdater": "Throws an IllegalArgumentException with given error message if the first, toCheck, parameter is {@code null}."}
{"Origin": "Return repositories available for target os version on host based on {@code repoVersion} repository definition", "Reference": "Return repositories available for target os version on host based on the host family.", "NNUpdater": "Set the cloudServiceConfiguration value."}
{"Origin": "Sets the TEXT value of the ds:XPath Element.", "Reference": "Sets the TEXT value of the {@code ds:XPath} Element.", "NNUpdater": "Sets the value of the print property."}
{"Origin": "Scenario: - CA inherited trust - gateway trusts service via CA - service does not evaluate trust", "Reference": "Scenario: - CA inherited trust - gateway trusts API via CA - API does not evaluate trust", "NNUpdater": "[BC]}"}
{"Origin": "Unsafe version of: {@link #shaderc_spvc_compile_into_vulkan compile_into_vulkan}", "Reference": "Unsafe version of: {@link #shaderc_spvc_get_decoration get_decoration}", "NNUpdater": "Operation fails."}
{"Origin": "Sets the source.", "Reference": "Set the source.", "NNUpdater": "Sets the source object."}
{"Origin": "Corresponds to `hex.tree.drf.DrfMojoModel.score0()`", "Reference": "Corresponds to `hex.tree.gbm.GbmMojoModel.score0()`", "NNUpdater": "Operation fails."}
{"Origin": "Get OpenID Connect authentication information ### Functional Description: Provides information about OpenID Connect authentication options.", "Reference": "Get OpenID Connect provider authentication information ### Functional Description: Provides information about OpenID Connect authentication options.", "NNUpdater": "Connect token for a user authenticated by your backend authentication process."}
{"Origin": "Kept for compatibility with NativeScript.", "Reference": "Kept for source-level compatibility with NativeScript.", "NNUpdater": "This method is kept only for compatibility and may get removed at any version in the future."}
{"Origin": "Resets the states.", "Reference": "Resets all the states.", "NNUpdater": "Reset the circuitBreaker states."}
{"Origin": "Ensure that the {@link #offsets} array has enough space to store {@code index}.", "Reference": "Ensure that the {@link #typeOffsets} array has enough space to store {@code index}.", "NNUpdater": "Helper method to ensure a buffer has enough capacity."}
{"Origin": "Hardware Security Modules in the Amazon Redshift Cluster Management Guide.", "Reference": "Hardware Security Module (HSM).", "NNUpdater": "Describes the SQL Query to execute on an Amazon Redshift database for an"}
{"Origin": "Moves the caret to the position indicated by {@code pos}.", "Reference": "Moves the caret to the given position.", "NNUpdater": "Moves the caret to the position indicated by {@code pos}."}
{"Origin": "Get report type.", "Reference": "Get selected report option.", "NNUpdater": "Get Kann Berichte erstellen."}
{"Origin": "Create Subject Alternative names with User Principal names.", "Reference": "Set the User Principal Names.", "NNUpdater": "It will also register the factory under names returned by {@link FactoryNames#getNames()}} if it implements {@link FactoryNames}."}
{"Origin": "Get the variation of information (not normalized, 0 = equal)", "Reference": "Get the variation of information (not normalized, small values are good).", "NNUpdater": "Create a variation (copy) of a given resource file"}
{"Origin": "Write a new file using the filename and data passed as parameter.", "Reference": "Write a new file.", "NNUpdater": "Writes data to file, creates new file if necessary."}
{"Origin": "Generates a JAR file that contains zero or more classes with a static main method.", "Reference": "Generates a JAR file that contains zero or more classes with a static main method that all delegates to the same main class.", "NNUpdater": "Generates a JAR file that contains zero or more classes with a static main method."}
{"Origin": "The variables involved while matching the tree {@link #node()}.", "Reference": "The variables involved while matching the tree {@link #tree()}.", "NNUpdater": "Set one component."}
{"Origin": "Code snippet for {@link BlockBlobClient#stageBlockFromURL(String, URL, BlobRange)}", "Reference": "Code snippet for {@link BlockBlobClient#stageBlockFromURL(String, String, BlobRange)}", "NNUpdater": "Code snippet for {@link BlobServiceClient#createBlobContainer(String)}"}
{"Origin": "***** Property ASAPP *****", "Reference": "***** Property RUNNINGASAPP *****", "NNUpdater": "Operation fails."}
{"Origin": "Returns the hash string for the given module name, {@code null} if there is no hash recorded for the module.", "Reference": "Returns the hash for the given module name, {@code null} if there is no hash recorded for the module.", "NNUpdater": "Returns the {@code ModuleReference} for the given named module or {@code null} if a module of the given name is not in this configuration."}
{"Origin": "If the -ea option is not set, an ArrayIndexOutOfBoundsException may occur, but out of optimization considerations we don't want to guarantee this exception.", "Reference": "ArrayIndexOutOfBoundsException may occur, but out of optimization considerations we don't want to guarantee this exception.", "NNUpdater": "Testcase for bug 1938151, ``StringIndexOutOfBoundsException instead of a meaningful error``"}
{"Origin": "Returns a rule that restricts access according to the {@link Role} of the current authenticated {@link User}.", "Reference": "Adds a rule that restricts access according to the {@link Role} of the current authenticated {@link User}.", "NNUpdater": "Add a notification to a user."}
{"Origin": "If the given element is {@code null} or does not have an integer, zero is returned.", "Reference": "If the given string is {@code null} or does not have an integer, zero is returned.", "NNUpdater": "If the key does not exist or its value is not an int tag, then {@code 0} will be returned."}
{"Origin": "The {@link Flux} will contain one or several feed response of the read cosmos users.", "Reference": "The {@link CosmosContinuablePagedFlux} will contain one or several feed response of the read cosmos users.", "NNUpdater": "The {@link Flux} will contain one or several feed response pages of the read cosmos trigger properties."}
{"Origin": "Test to make sure command args are limitted to 10,000 characters.", "Reference": "Test to make sure command args are limited to 10,000 characters.", "NNUpdater": "Make sure we can't set commands with duplicates."}
{"Origin": "Closes the current snapshot writer.", "Reference": "Closes the current snapshot output.", "NNUpdater": "Stop."}
{"Origin": "This method must only be used for type references whose sort is {@link #EXCEPTION_PARAMETER EXCEPTION_PARAMETER} .", "Reference": "This method must only be used for type references whose sort is {@link #EXCEPTION_PARAMETER} .", "NNUpdater": "Find an {@code @ExceptionHandler} method for the given exception."}
{"Origin": "WebPage on a job-by-job basis and thier values indicative of what actions should be associated with a WebPage.", "Reference": "They are assigned to a WebPage on a job-by-job basis and thier values indicative of what actions should be associated with a WebPage.", "NNUpdater": "A web page will be automatically created with the {@code pageMarkup} provided."}
{"Origin": "Issues mCaptureRequestConfigurations to {@link CameraCaptureSession}.", "Reference": "Issues mCaptureRequestConfigs to {@link CameraCaptureSession}.", "NNUpdater": "Set Capture Sequence."}
{"Origin": "NOTE: Changes to dynamic parameters are applied immediately.", "Reference": "Changes to dynamic parameters are applied immediately.", "NNUpdater": "This creates the appropriate changes to be applied in order to change a IRI."}
{"Origin": "Sets the value for for R4+ resources, and places the value in an extension on with the URL for DSTU3 and below.", "Reference": "Sets the value for for R4+ resources, and places the value in an extension on with the URL for DSTU3.", "NNUpdater": "Data in this, e.g."}
{"Origin": "Retires the service, removing it from the engine.", "Reference": "Retires the API, removing it from the engine.", "NNUpdater": "Correlation Engine."}
{"Origin": "If this happens, a configuration {@link ConfigurationEvent event} will be sent to all registered listeners.", "Reference": "If this happens, a CONFIGURATION {@link ConfigurationEvent event} will be sent to all registered listeners.", "NNUpdater": "Returns Event Processing Configuration defined in this Configuration."}
{"Origin": "Access Control Using AWS Identity and Access Management (IAM) .", "Reference": "For more information, see Access Control Using AWS Identity and Access Management (IAM).", "NNUpdater": "Access Management (IAM) user account."}
{"Origin": "Creates an already compressed {@code GroupedList} for storage.", "Reference": "Creates an already compressed {@code GroupedList} with two groups.", "NNUpdater": "Creates a new {@link CompressedVector} from the given {@code array} with compressing (copying) the underlying array."}
{"Origin": "Sets the {@link SharedKeyCredential} used to authorize requests sent to the service.", "Reference": "Sets the {@link StorageSharedKeyCredential} used to authorize requests sent to the service.", "NNUpdater": "Sets the SAS token used to authorize requests sent to the service"}
{"Origin": "Get plain column.", "Reference": "Find plain column.", "NNUpdater": "Get Spalte."}
{"Origin": "Does not close the output stream when the flux is terminated, but does {@linkplain #release(DataBuffer) release} the data buffers in the source.", "Reference": "Does not close the output stream when the flux is terminated, and does not {@linkplain #release(DataBuffer) release} the data buffers in the source.", "NNUpdater": "Attempt to look up the {@code DataSource} by type and the {@linkplain #DEFAULT_DATA_SOURCE_NAME default data source name}."}
{"Origin": "Remove every generated files corresponding to a wiki.", "Reference": "Remove every generated files corresponding to a color theme.", "NNUpdater": "Adds to generated temporary files."}
{"Origin": "Immediately initialize the default WebSocketUpgradeFilter.", "Reference": "Configure the default WebSocketUpgradeFilter.", "NNUpdater": "Creates a {@link WebSocketCreator} that uses the given handler class/instance for the WebSocket connections."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Obtains an instance of {@code OffsetTime} from a date-time object.", "Reference": "Obtains an instance of {@code OffsetTime} from a temporal object.", "NNUpdater": "Obtains an instance of {@code OffsetDateTime} from a local date and offset time."}
{"Origin": "In the latter case, we can't assume that the cwd is writable.", "Reference": "In the latter case, we can't assume that the cwd is writable so '/tmp' is attempted.", "NNUpdater": "Return a path that is relative to the 'cwd/testoutput' when running tests."}
{"Origin": "Adds a task to the queue and makes sure a worker thread is running, unless the queue has been suspended.", "Reference": "Adds a task to the queue and makes sure a worker thread is running.", "NNUpdater": "Adds a task to the thread's queue"}
{"Origin": "Re-loaded scripts need to have their breakpoints re-applied.", "Reference": "Reloaded scripts need to have their breakpoints reapplied.", "NNUpdater": "Re-create a group instance from a textual representation."}
{"Origin": "Queries this contact source for the given queryString.", "Reference": "Creates query for the given queryString.", "NNUpdater": "Queries this ContactSourceService for SourceContacts which match a specific query Pattern."}
{"Origin": "Retruns whether the given type is managed by one of the underlying {@link Metamodel} instances.", "Reference": "Returns whether the given type is managed by one of the underlying {@link Metamodel} instances.", "NNUpdater": "If this type is a {@link Map} and its value type is parameterized, returns the map's value type."}
{"Origin": "Opens a {@link TitanGraph} database configured according to the provided configuration.", "Reference": "Opens a {@link JanusGraph} database configured according to the provided configuration.", "NNUpdater": "Creates a new {@link Graph} instance using the default {@link Configuration} from {@link #standardGraphConfiguration()}."}
{"Origin": "Convenience routine to return the specified error's underlying SyntaxException, or null if it isn't one.", "Reference": "Returns the specified error's underlying SyntaxException, or null if it isn't one.", "NNUpdater": "Return the exception for this field, or if there isn't any."}
{"Origin": "Have the application obtain and close the caching provider instance for the configured Hazelcast library.", "Reference": "Have the application obtain and close the caching provider instance for the configured Infinispan library.", "NNUpdater": "Get the client {@link HazelcastInstance}."}
{"Origin": "Create a new isolate, considering the passed {@linkplain CreateIsolateParameters parameters}.", "Reference": "Creates a new isolate, considering the passed {@linkplain CreateIsolateParameters parameters}.", "NNUpdater": "Returns:"}
{"Origin": "Client will automatically attempt to reconnect to the server if the connection is lost.", "Reference": "Sets whether the client will automatically attempt to reconnect to the server if the connection is lost.", "NNUpdater": "Is the connection lost for more than 3 minutes, the user will be removed (within 3 minutes the user can reconnect)"}
{"Origin": "Starts a Program with the specified argument overrides.", "Reference": "Starts a Program run with the given arguments.", "NNUpdater": "Initialize the upgrade framework, if necessary."}
{"Origin": "If {@code labels = ``*``}, settings with any label are returned.", "Reference": "If {@code labelFilter = ``*``}, settings with any label are returned.", "NNUpdater": "If {@code labels = ``*``}, settings with any label are returned."}
{"Origin": "If {@code keys = ``abc,def``}, settings with a key equal to ``abc`` or ``def`` are returned.", "Reference": "If {@code keyFilter = ``abc,def``}, settings with a key equal to ``abc`` or ``def`` are returned.", "NNUpdater": "If {@code keys = ``*abc*``}, settings with a key containing ``abc`` are returned."}
{"Origin": "Builds a stream cut, mapping the segments of a stream to their offsets from a position object.", "Reference": "Builds a stream cut, mapping the segments of a stream to their offsets from a writer position object.", "NNUpdater": "Called by the StreamManager to provide the streams the group should start reading from."}
{"Origin": "Usage: ascii and spaceChar are integers: 0 = leave, 1 = ascii, 2 = fullwidth.", "Reference": "ascii and spaceChar are integers: 0 = leave, 1 = ascii, 2 = fullwidth.", "NNUpdater": "Converts char sequence into ASCII byte array."}
{"Origin": "Returns an immutable list containing ten elements.", "Reference": "Returns an unmodifiable list containing ten elements.", "NNUpdater": "The returned List is immutable."}
{"Origin": "Creation method for ne calender instances.", "Reference": "Creation method for new calender instances.", "NNUpdater": "Used when moving in the calendar with the keyboard."}
{"Origin": "Search if the given map has given the package format.", "Reference": "Search if the given map has the given element format.", "NNUpdater": "Checks if the given user has the given role in the given organizational unit."}
{"Origin": "testValueCount", "Reference": "testGetValueCount", "NNUpdater": "Get the properties value."}
{"Origin": "Sets the contact points to use for the initial connection to the cluster.", "Reference": "Adds contact points to use for the initial connection to the cluster.", "NNUpdater": "Returns the {@link HttpHost} that the connection points to"}
{"Origin": "Resolve alternatives (relative to {@code PathManager.getHomePath()}) and return absolute path of the first one which resolves to existing directory", "Reference": "Resolve alternatives (relative to {@code PathManager.getHomePath()}) and return absolute path of the first one which resolves to existing file or directory", "NNUpdater": "Returns an absolute path from the parent directory of {@code referencePath} to the sub-element {@code inputPath}."}
{"Origin": "(Try to) create an arpeggiato inter.", "Reference": "(Try to) create and add an arpeggiato inter.", "NNUpdater": "(Try to) create a new FullBeamInter instance that represents a merge of the provided beams."}
{"Origin": "Converts an {@link IntIntOpenHashMap} into a flat int [] array.", "Reference": "Converts an {@link IntIntHashMap} into a flat int [] array.", "NNUpdater": "Converts an {@link IntIntOpenHashMap} into a flat int [] array."}
{"Origin": "Publishes an {@link AfterTestExecutionEvent} to the {@code ApplicationContext} for the supplied {@link TestContext}.", "Reference": "Publish an {@link AfterTestExecutionEvent} to the {@code ApplicationContext} for the supplied {@link TestContext}.", "NNUpdater": "Resolve the given {@link Parameter} for the supplied {@link TestExtensionContext}."}
{"Origin": "Adds next SSRC group information update request to {@link RequestType#CHANNEL_INFO_UPDATE} query currently being built.", "Reference": "Adds next source group information update request to {@link RequestType#CHANNEL_INFO_UPDATE} query currently being built.", "NNUpdater": "Returns an {@link UpdateSink} that adds all update operations into an internal {@link UpdateRequest} object."}
{"Origin": "Inserts a shadow page as needed.", "Reference": "Inserts shadow pages as needed.", "NNUpdater": "Inserts the nodes of the specified page into this page."}
{"Origin": "Returns the descriptor corresponding to this Java type.", "Reference": "Returns the descriptor corresponding to this type.", "NNUpdater": "Returns the descriptor corresponding to this type."}
{"Origin": "Loads the repository interface contained in the given {@link RepositoryConfiguration} using the given {@link ResourceLoader}.", "Reference": "Loads the repository interface contained in the given {@link RepositoryConfiguration} using the given {@link ClassLoader}.", "NNUpdater": "Engine."}
{"Origin": "Returns an induced subgraph of {@code graph}.", "Reference": "Returns an induced subgraph of {@code network}.", "NNUpdater": "Creates a graph from a DataSet of edges."}
{"Origin": "If there's no specific value in the component for that key, first attempt to return the key's global default.", "Reference": "If there's no specific value in the component for that key, fall back to returning the provided non null default.", "NNUpdater": "If the key is not a hidden key, return key."}
{"Origin": "Searches for a ballerina project using outward recursion starting from the file directory, until the given root directory is found.", "Reference": "Searches for a ballerina project root using outward recursion starting from the file directory, until the given root directory is found.", "NNUpdater": "Searches for a ballerina project using outward recursion starting from the file directory, until the given root directory is found."}
{"Origin": "Tries to resolve a table path to a {@link CatalogTableOperation}.", "Reference": "Tries to resolve a table path to a {@link ResolvedTable}.", "NNUpdater": "Returns the table with the specified logical table name."}
{"Origin": "In particular, this method just computes {@code Math.exp(logGamma(x))} anyway.", "Reference": "In particular, this method just computes {@code FastMath.exp(logGamma(x))} anyway.", "NNUpdater": "Operation fails."}
{"Origin": "Get the content of this element.", "Reference": "Gets the value of the content property.", "NNUpdater": "Removes all child content from this parent."}
{"Origin": "Creates an {@link UBQualifier} from the given arrays and offsets.", "Reference": "Creates an {@link UBQualifier} from the given sequences and offsets.", "NNUpdater": "Compares two byte arrays from the given offsets using lexicographic bitwise comparison."}
{"Origin": "Calls {@link Plugin#didDeclareSetter(TypeSpec.Builder, PropertyGenerator, MethodSpec)} on all the bundled plugins", "Reference": "Calls {@link Plugin#afterDeclareSetter(TypeSpec.Builder, PropertyGenerator, MethodSpec)} on all the bundled plugins", "NNUpdater": "Calls {@link Plugin#didDeclareSetter(TypeSpec.Builder, PropertyGenerator, MethodSpec)} on all the bundled plugins"}
{"Origin": "Attempts to get the underlying value backed by a {@link BaseValue} linked to the provided {@link Key}.", "Reference": "Attempts to get the underlying value backed by a {@link Value} linked to the provided {@link Key}.", "NNUpdater": "Attempts to get the underlying value backed by a {@link Value} linked to the provided {@link Key}."}
{"Origin": "Returns the list of subtitles for the chart.", "Reference": "Returns a new list containing all the subtitles for the chart.", "NNUpdater": "Sets a new data object for the chart."}
{"Origin": "Sets the {@link IpRange} which determines the IP ranges that are allowed to use the SAS.", "Reference": "Sets the {@link SasIpRange} which determines the IP ranges that are allowed to use the SAS.", "NNUpdater": "Sets the {@link IpRange} which determines the IP ranges that are allowed to use the SAS."}
{"Origin": "Returns a zoned date-time formed from this time at the specified date.", "Reference": "Returns an offset date-time formed from this time at the specified date.", "NNUpdater": "Returns a ChronoLocalDateTime formed from this date at the specified time."}
{"Origin": "Helper function that converts the components from (and including) startPos to (and including) endPos into its string representation.", "Reference": "Helper function that converts the components from (and including) startPos to (and including) endPos into an internal component string, separated by #.", "NNUpdater": "Each pos value has a pointer, showing which token from the query could be found at that pos."}
{"Origin": "Enters the given tree (se {@link #scan(JCTree)}.", "Reference": "Enters the given tree (se {@link #scan(Tree)}.", "NNUpdater": "Create an instance of {@link JAXBElement }{@code <}{@link Jc }{@code >}}"}
{"Origin": "Generates a code sample for using {@link FileClient#uploadRangeFromUrlWithResponse(long, long, long, URI,", "Reference": "Generates a code sample for using {@link FileClient#uploadRangeFromUrlWithResponse(long, long, long, String,", "NNUpdater": "Generates a code sample for using {@link FileAsyncClient#uploadRangeFromUrlWithResponse(long, long, long, URI)}"}
{"Origin": "The {@link RsaKeyCreateOptions#isEnabled() enabled} field is set to true by Azure Key Vault, if not specified.", "Reference": "The {@link CreateRsaKeyOptions#isEnabled() enabled} field is set to true by Azure Key Vault, if not specified.", "NNUpdater": "The {@link Secret#isEnabled() enabled} field is set to true by key vault, if not specified."}
{"Origin": "Serialize the given TokenStream into a byte array using the provided AttributeSerializer(s).", "Reference": "Serialize the given TwitterTokenStream into a byte array using the provided AttributeSerializer(s).", "NNUpdater": "Serialize the object to a byte array, using the serializer specified by the connection info if set, or the default serializer."}
{"Origin": "Note that the writing process does not start until the returned {@code Mono} is subscribed to.", "Reference": "Note that the writing process does not start until the returned {@code Flux} is subscribed to.", "NNUpdater": "Allow writing the request."}
{"Origin": "Getter for {@link #allowOnlyRequestedHeaders}", "Reference": "Getter for {@link #exposedHeaders}", "NNUpdater": "Getter Parameter Value for D-U-N-S"}
{"Origin": "Get the root reference for the given map id.", "Reference": "Get the snapshot for the given map id", "NNUpdater": "Get Referenz."}
{"Origin": "Ensures that the given node, or a versionable ancestor, is checked out.", "Reference": "Ensures that the given node, or a versionable ancestor, is checked out with auto-checkin set.", "NNUpdater": "Check out the node and add it to the Set of checked out nodes ensureCheckout"}
{"Origin": "This is useful when the default Servlet cannot be auto-detected, for example when it has been manually configured.", "Reference": "This is useful when the default Servlet cannot be autodetected, for example when it has been manually configured.", "NNUpdater": "This can be useful if an {@link Exception} instance is not available (e.g."}
{"Origin": "If the timeout elapses without a result, null will be returned.", "Reference": "If the timeout elapses without a result or if there was an connection error, null will be returned.", "NNUpdater": "If this time elapses, a new batch of IDs will be fetched."}
{"Origin": "Tells if the value can be used as the ``EL function`` parameter to {@link #combine(TemplateModel, TemplateMethodModelEx)}.", "Reference": "Tells if the value can be used as the ``EL function`` parameter to {@link #combine(TemplateModel, TemplateMethodModel)}.", "NNUpdater": "Returns the Velocity context."}
{"Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}", "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveToRangeEnd }{@code >}}", "NNUpdater": "Create an instance of {@link JAXBElement }{@code <}{@link CTStrokeChild }{@code >}}"}
{"Origin": "Sets the title.", "Reference": "Set the title.", "NNUpdater": "Returns the title of the resource."}
{"Origin": "Returns the first sync d l object in the ordered set where parentFolderId = ?.", "Reference": "Returns the first sync d l object in the ordered set where modifiedTime > ?", "NNUpdater": "Returns the first b b b server in the ordered set where active = ?."}
{"Origin": "The caller must check for null return value.", "Reference": "The caller must check for a null return value.", "NNUpdater": "Evaluate and return the callerNameAttribute."}
{"Origin": "(Shiro's default Authenticator allows null IPs to allow localhost and proxy server environments).", "Reference": "(Shiro's default Authenticator allows null hosts to allow localhost and proxy server environments).", "NNUpdater": "Use {@link #proxyAuthenticator} to set the authenticator for proxy servers."}
{"Origin": "Executes and receives the Neighbouring Cell request using the RIL Executor", "Reference": "Executes and receives the Neighboring Cell request using the RIL Executor", "NNUpdater": "Neighbouring Cell List"}
{"Origin": "Implements the ``in`` operator.", "Reference": "Implements 'x in y'.", "NNUpdater": "Returns Operator from query parameter operator notation."}
{"Origin": "Sets the {@link SessionManager SessionManager} to which this DelegatingSession will delegate its method calls.", "Reference": "Sets the {@link NativeSessionManager NativeSessionManager} to which this DelegatingSession will delegate its method calls.", "NNUpdater": "Removes a session."}
{"Origin": "Recursively split based on given regEx.", "Reference": "Split based on given regEx.", "NNUpdater": "Browser: URL"}
{"Origin": "Computes the median for each pixel across all bands in the {@link Planar} image.", "Reference": "Computes the median for each pixel across selected bands in the {@link Planar} image.", "NNUpdater": "Computes the average for each pixel across all bands in the {@link Planar} image."}
{"Origin": "The comparison is based on the Unicode value of each character in the strings.", "Reference": "The comparison is based on the Unicode value of each character in the CharSequences.", "NNUpdater": "The comparison is based on the local-time and the offset."}
{"Origin": "Releases the compilation options.", "Reference": "Destroys the compilation options.", "NNUpdater": "Releases a resource."}
{"Origin": "This accepts locators starting with 'classpath:' or 'file:'.", "Reference": "This accepts locators starting with 'classpath:', 'url:' or 'file:'.", "NNUpdater": "httl.properties: template.directory=/META-INF/templates"}
{"Origin": "This test will create OBJECT_NUM of objects in an SMRMap.", "Reference": "This test will create OBJECT_NUM of objects in an CorfuTable.", "NNUpdater": "-F discretizerstring"}
{"Origin": "Copies or downsamples the given HLLmode sketch to tgtLgK, HLL_8, on the heap.", "Reference": "Copies or downsamples the given candidate HLLmode sketch to tgtLgK, HLL_8, on the heap.", "NNUpdater": "If you do not want the given sketch to be modified use the {@link #copyBuild(DoublesSketch)}."}
{"Origin": "Sets the filed name.", "Reference": "Sets the field name.", "NNUpdater": "Application window only."}
{"Origin": "This method loads the image from the blender file itself.", "Reference": "This method loads a image which is packed into the blender file.", "NNUpdater": "Loads a sequence of RenderedImage's from a file."}
{"Origin": "remove select events, do so via {@link #removeEvent(BaseEvent)}.", "Reference": "remove select events, do so via {@link #removeEvent(CoreEvent)}.", "NNUpdater": "remove select events, do so via {@link #removeEvent(Event)}."}
{"Origin": "Writes an embedded resource to a temp file.", "Reference": "Writes an embedded resource to a temporary file.", "NNUpdater": "Handles an embedded OLE object in the document"}
{"Origin": "Setter for {@link #exposeHeaders}", "Reference": "Setter for {@link #allowHeaders}", "NNUpdater": "expose as protected"}
{"Origin": "Deletes all blob files associated with this coreName.", "Reference": "Deletes all blob files associated with this blobName.", "NNUpdater": "Deletes the (job-unrelated) file associated with the given key from the BLOB cache and BLOB server."}
{"Origin": "Request password reset ### Functional Description: Request an email with a request token for a certain user to reset his / her password.", "Reference": "Request password reset ### Functional Description: Request an email with a password reset token for a certain user to reset his / her password.", "NNUpdater": "Returns the password associated with this set of credentials."}
{"Origin": "Setting the manifest is not allowed after a call to {@link #setMediaSources(MediaSource...)}.", "Reference": "Setting the manifest is not allowed after a call to {@link #setMediaSource(MediaSource)}.", "NNUpdater": "Should be called after {@link #contentType(MediaType)}"}
{"Origin": "Returns a {@link ControllerResult} for session to get notification back.", "Reference": "Returns a {@link SessionResult} for session to get notification back.", "NNUpdater": "Get Nutzersitzung."}
{"Origin": "The conversion extracts and combines the {@code LocalDate} and {@code LocalTime}.", "Reference": "The conversion extracts and combines {@code LocalDate} and {@code LocalTime}.", "NNUpdater": "The conversion extracts and combines the {@code LocalDate} and the {@code LocalTime} from the temporal object."}
{"Origin": "Determine the executor service used to close connections.", "Reference": "Determine the executor service used for target channels.", "NNUpdater": "Executor"}
{"Origin": "Process the potential key signature of the assigned staff.", "Reference": "Process the potential key signature of the underlying staff.", "NNUpdater": "Report the potential time signature in this measure for the related staff"}
{"Origin": "Reads the TargetPlatform attribute", "Reference": "Reads the ModuleTarget attribute", "NNUpdater": "- The platform."}
{"Origin": "Convenience method for calling {@link #newGenericExecuteException(TemplateCallableModel, boolean, String)}.", "Reference": "Convenience method for calling {@link #newGenericExecuteException(String, TemplateCallableModel, boolean, Throwable)}", "NNUpdater": "Convenience method for {@link #genericMethodType(int)}."}
{"Origin": "Generates the jaxp.properties with the specified content.", "Reference": "Generates jaxp.properties with the specified content, takes a backup if possible.", "NNUpdater": "Read from $java.home/conf/jaxp.properties for the specified property"}
{"Origin": "Invokes {@link HTTPSamplerBase#readResponse(SampleResult, InputStream, int)}", "Reference": "Invokes {@link HTTPSamplerBase#readResponse(SampleResult, InputStream, long)}", "NNUpdater": "Test {@link HdfsFileInputStream#read(byte[])}."}
{"Origin": "Activates or desactivates validation for the builder.", "Reference": "Activates or deactivates validation for the builder.", "NNUpdater": "Activates the given member."}
{"Origin": "The returned instance will {@link Profiles#matches(ActiveProfiles) matches} if any one of the given profile strings match.", "Reference": "The returned instance will {@link Profiles#matches(Predicate)} match} if any one of the given profile strings match.", "NNUpdater": "Spring profiles can be configured with a program argument --spring.profiles.active=your-active-profile"}
{"Origin": "Is a value with this type less than or equal to the length of array?", "Reference": "Is a value with this type less than or equal to the length of sequence?", "NNUpdater": "The offset argument must be greater than or equal to , and less than or equal to the length of this AppendingStringBuffer."}
{"Origin": "Note: returned indent is not set to be to it's direct parent block", "Reference": "Note: returned indent is not set to be {@code 'relative'} to it's direct parent block", "NNUpdater": "Note: {@code -1} is returned if the number is unknown, so the returned value has to be checked."}
{"Origin": "Record an {@link ExecutionEvent} for a container or test that started.", "Reference": "Record an {@link Event} for a container or test that started.", "NNUpdater": "Evaluate all {@link ContainerExecutionCondition} extensions registered for the supplied {@link ExtensionContext}."}
{"Origin": "Test ModuleModule with a JAR file containing a .class file in the top level directory.", "Reference": "Test ModuleFinder with a JAR file containing a .class file in the top level directory.", "NNUpdater": "Returns a {@code ModuleReference} to represent a modular JAR on the file system."}
{"Origin": "This implementation opens a FileInputStream for the underlying file.", "Reference": "This implementation opens a NIO file stream for the underlying file.", "NNUpdater": "Opens the file as a {@link InputStream}."}
{"Origin": "Code snippet for {@link BlobAsyncClientBase#downloadWithResponse(BlobRange, ReliableDownloadOptions,", "Reference": "Code snippet for {@link BlobAsyncClientBase#downloadWithResponse(BlobRange, DownloadRetryOptions,", "NNUpdater": "String, BlobRange, ParallelTransferOptions, ReliableDownloadOptions, BlobAccessConditions, boolean)}"}
{"Origin": "Generates a file name for the call based on the current date.", "Reference": "Generates a file name for the call based on the current date and the names of the peers in the call.", "NNUpdater": "Returns the batch name for a Batch StreamSegment based on the name of the current Parent StreamSegment, and the batchId"}
{"Origin": "Retrieve all schedules for a given namespace which were updated to status SUSPENDED between startTime and endTime.", "Reference": "Retrieve all schedules for a given namespace which were updated to status SUSPENDED between startTimeMillis and endTimeMillis.", "NNUpdater": "Is the given service suspending or already suspended?"}
{"Origin": "Returns whether or not specified {@link SVGElement} fits this {@link SvgSelector} attribute conditions.", "Reference": "Returns whether or not specified {@link SVGElement} matches this {@link SvgSelector} attribute conditions.", "NNUpdater": "Render SVG content directly to output stream"}
{"Origin": "Can we use {@code", "Reference": "Can we use {@code ImmutableSet", "NNUpdater": "Can be one of the following options: *useConstant*, *useExchangeId*, *usePropertyValue*."}
{"Origin": "Returns the available edit groups.", "Reference": "Returns the available element views.", "NNUpdater": "Returns the sitemap data."}
{"Origin": "Initialize level value of root as 0.", "Reference": "Initialize column value of root as 0.", "NNUpdater": "Initialize Jena."}
{"Origin": "Note that even {@link PrefetchConfig#maxFetchCapacityBytes} is 0, at least 1 file is always fetched.", "Reference": "Note that even {@link FetchConfig#maxFetchCapacityBytes} is 0, at least 1 file is always fetched.", "NNUpdater": "Note that even {@link PrefetchConfig#maxFetchCapacityBytes} is 0, at least 1 file is always fetched."}
{"Origin": "Reads a collection of values from an input stream.", "Reference": "Reads a sequence of values from an input stream.", "NNUpdater": "Decodes a response value."}
{"Origin": "Return a {@link JsonObject} to be appended to the row data.", "Reference": "Return a {@link String} to be appended to the row as {@code type} data.", "NNUpdater": "Adds a row."}
{"Origin": "Verify that at most {@code maxEntries} per session can be put in the cache", "Reference": "Verify that at most {@code maxEntries} per session can be put in the store", "NNUpdater": "Puts result in cache."}
{"Origin": "Returns a {@code YearMonth} with the specified epoch-month.", "Reference": "Returns a {@code YearMonth} with the specified proleptic-month.", "NNUpdater": "Returns a {@code YearMonth} with the specified proleptic-month."}
{"Origin": "Free the memory that was allocated with {@link #allocateMemory}.", "Reference": "Free the memory that was allocated with {@link #allocateMemory} and update memory allocation tracker accordingly.", "NNUpdater": "Change the state from IN_MEMORY to IN_MEMORY_INVALID."}
{"Origin": "The timestamp for the most recent update to the dialog node.", "Reference": "The timestamp for the most recent update to the object.", "NNUpdater": "Update the value of the timestamp in with ordered semantics."}
{"Origin": "return ..svc.cluster.local", "Reference": "return ..svc", "NNUpdater": "Returns the local clusters."}
{"Origin": "Allows user customization for the {@link OAuth2TokenValidator}", "Reference": "The default is {@link OidcIdTokenValidator}.", "NNUpdater": "Create a OAuth2 auth handler with host pinning"}
{"Origin": "Returns a {@link TakeReceivePort} that can provide at most {@code count} messages from {@code channel}.", "Reference": "Returns a {@link ReceivePort} that can provide at most {@code count} messages from {@code channel}.", "NNUpdater": "Returns a {@link Mix} that receives messages from a set of channels."}
{"Origin": "key in shared preferences which stores whether the passed permission has been asked for", "Reference": "key in shared preferences which stores a boolean telling whether the app has already asked for the passed permission", "NNUpdater": "Gets a {@link SharedPreferences} instance that preferences managed by this will use."}
{"Origin": "Code snippets for {@link BlobAsyncClient#setHTTPHeadersWithResponse(BlobHTTPHeaders, BlobAccessConditions)}", "Reference": "Code snippets for {@link BlobAsyncClient#setHTTPHeadersWithResponse(BlobHttpHeaders, BlobAccessConditions)}", "NNUpdater": "Code snippet for {@link AppendBlobAsyncClient#createWithResponse(BlobHTTPHeaders, Map, BlobAccessConditions)}"}
{"Origin": "I. e. index 0 of the new TimeSeries will be index startIndex of this TimeSeries.", "Reference": "I. e. index 0 of the new TimeSeries will be index startIndex of this", "NNUpdater": "Returns the Entry object at the given xIndex."}
{"Origin": "Is a value with this type less than the length of any of the arrays?", "Reference": "Is a value with this type less than the length of any of the sequences?", "NNUpdater": "TransferInput, CFStore)} for details."}
{"Origin": "Set the pattern for the test set files.", "Reference": "Set the output directory for this crossfold operation.", "NNUpdater": "Set the name displayed in links."}
{"Origin": "Obtains all registered {@link CameraCaptureCallback} callbacks.", "Reference": "Obtains all registered {@link CameraCaptureCallback} callbacks for repeating requests.", "NNUpdater": "Each of the callbacks provided will simply be registered with the store using {@link #registerMessageGroupExpiryCallback(MessageGroupCallback)}."}
{"Origin": "Set type of the Trigger.", "Reference": "Set the resource value.", "NNUpdater": "The name of the metric."}
{"Origin": "In case all entries are invalid, the resolver will return as no mapping is found.", "Reference": "In case all entries are invalid, the resulting Catalog object will contain no Catalog elements.", "NNUpdater": "Returns null if no mapping found."}
{"Origin": "The option is a: type.", "Reference": "The option is a:", "NNUpdater": "Returns the {@link OptionsBase} class the defines the given option, null if the option isn't recognized."}
{"Origin": "This is provided for the event kind: - VMUpdate", "Reference": "This is provided for the event kind: - VMUpdate, VMFlagUpdate", "NNUpdater": "A KindName representing the kind of a missing symbol, given an error kind."}
{"Origin": "Convert to primitive types, returning default value if text is null.", "Reference": "Convert to long integer, returning default value if text is inconvertible.", "NNUpdater": "Convert all types, both reference and primitive, to {@code Object}."}
{"Origin": "All of the types returned are immutable.", "Reference": "All returned values are immutable.", "NNUpdater": "The returned List is immutable."}
{"Origin": "BaseFunction} instances, calling {@link BaseFunction#configure(SkylarkSignature)}.", "Reference": "BuiltinFunction} instances, calling {@link BuiltinFunction#configure(SkylarkSignature)}.", "NNUpdater": "Test method for the integer-to-base() function."}
{"Origin": "Registers view and notifies listeners.", "Reference": "Registers view.", "NNUpdater": "Sets new state, notifies listeners and sends events."}
{"Origin": "Sentry robots cannot move outside this border or do any harm to other robots outside this border.", "Reference": "Border border sentry robots cannot move outside this border or do any harm to other robots outside this border.", "NNUpdater": "Returns the directory containing data files of robots."}
{"Origin": "It is not recommended to expand large trees this way since that might cause huge interface lags.", "Reference": "It is not recommended to expand large tree chunks this way since that might cause interface lags.", "NNUpdater": "Note that this method of authentication is not recommended, since it is very inflexible."}
{"Origin": "See {@link BasicAuthorizationInterceptor} for details.", "Reference": "See {@link BasicAuthenticationInterceptor} for details.", "NNUpdater": "See {@link AttributeResolver} for details."}
{"Origin": "Modifications are acceptable unless they affect a standard field (such as ``author``) besides the ``keywords`` or ``groups' field.", "Reference": "Modifications are acceptable unless they affect a field (such as ``author``) besides the ``keywords`` or ``groups' field.", "NNUpdater": "Get TEST.F_AUTHOR_EXISTS as a field"}
{"Origin": "The {@code keyImportOptions} is required and its fields {@link KeyImportOptions#getName() name} and {@link", "Reference": "The {@code keyImportOptions} is required and its fields {@link ImportKeyOptions#getName() name} and {@link", "NNUpdater": "Sets the parsing options."}
{"Origin": "{@code date} - a {@linkplain Date} object representing {@linkplain LogRecord#getMillis event time} of the log record.", "Reference": "Otherwise, a {@linkplain Date} object representing {@linkplain LogRecord#getMillis event time} of the log record.", "NNUpdater": "{@code date} - a {@linkplain Date} object representing {@linkplain LogRecord#getMillis event time} of the log record."}
{"Origin": "Orchestrates the creation of a terminal pane, then connects to it.", "Reference": "Orchestrates the creation and connection of a terminal.", "NNUpdater": "Which allows get information from terminal on server side."}
{"Origin": "This method will just return the ReflectivePropertyAccessor instance if it is unable to build something more optimal.", "Reference": "This method will just return the ReflectivePropertyAccessor instance if it is unable to build a more optimal accessor.", "NNUpdater": "Get the 'reflective' type of the given type."}
{"Origin": "If the key already exists, the sensitivity value will be merged.", "Reference": "Values with the same market data name and currency will be merged.", "NNUpdater": "If a key with the specified name already exists, Amazon EC2 returns an error."}
{"Origin": "Parses longitude out of a given string.", "Reference": "Parses longitude out of the given string.", "NNUpdater": "Parses the given string as a nested set order"}
{"Origin": "DeploymentConfig that controls it.", "Reference": "Deployment that controls it.", "NNUpdater": "If it's ``deployment`` (which is default), deployment settings are used."}
{"Origin": "The option will be converted to a", "Reference": "The option will be converted to a type.", "NNUpdater": "A {@code null} source value will be converted to an empty List."}
{"Origin": "return the Transfer Data of type DataFlavor from InputStream", "Reference": "Return the Transfer Data of type DataFlavor from InputStream", "NNUpdater": "Return the Transfer Data of type DataFlavor from InputStream."}
{"Origin": "Returns all jar resources indicated to contain native library files (.dll, .so etc.)", "Reference": "Returns all resources indicated to contain native library files (.dll, .so, etc.", "NNUpdater": "Calls {@link #loadNative(Class, String, String)} using {@code Library.class} as the context parameter."}
{"Origin": "Locates a packaged or exploded module, returning a {@code ModuleReference} to the module.", "Reference": "Reads a packaged or exploded module, returning a {@code ModuleReference} to the module.", "NNUpdater": "Returns a {@code ModuleReference} to an exploded module on the file system."}
{"Origin": "Adds an entry for the given {@code ASTNode} to the stack trace.", "Reference": "Adds an entry for the given {@code Node} to the stack trace.", "NNUpdater": "Adds the given rule to the stack trace of the exception (if there is one)."}
{"Origin": "Tests the specifying heap memory with config default value for job manager and task manager.", "Reference": "Tests the specifying job manager heap memory with config default value for job manager and task manager.", "NNUpdater": "Runs the JobManager process in {@link JobManagerMode#CLUSTER}."}
{"Origin": "Ensure that the service still exists.", "Reference": "Ensure that the api still exists.", "NNUpdater": "Ensure that:"}
{"Origin": "Sets the available site selector options.", "Reference": "Sets the site selector options for the sitemap tab.", "NNUpdater": "Returns the IO controller."}
{"Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}", "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveToRangeEnd }{@code >}}", "NNUpdater": "Create an instance of {@link JAXBElement }{@code <}{@link CTStrokeChild }{@code >}}"}
{"Origin": "It retries downloading {@link #maxFetchRetry} times and throws an exception.", "Reference": "It retries downloading {@link FetchConfig#maxFetchRetry} times and throws an exception.", "NNUpdater": "A {@link RetryStrategy} that retries only on {@link UnprocessedRequestException} with the {@link Backoff#ofDefault()}."}
{"Origin": "Returns the list of {@link BufferEdge} - fragments on the bounds of the current fragment, which should be potentially merged with fragments from the neighbor buffer fragments.", "Reference": "Returns the list of {@link ByteFragmentAtOffset} - fragments on the bounds of the current fragment, which should be potentially merged with fragments from the neighbor buffer fragments.", "NNUpdater": "Map atoms to exclusive fragments."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "See Immutable Map Static Factory Methods for details.", "Reference": "See Unmodifiable Maps for details.", "NNUpdater": "VerificationTimes supports multiple static factory methods:"}
{"Origin": "Returns a {@link TextureRegion} based on the so called state time.", "Reference": "Returns a frame based on the so called state time.", "NNUpdater": "Adds a {@link BaseTexture} to the TextureManager."}
{"Origin": "Amazon Redshift returns all parameter groups that match any combination of the specified keys and values.", "Reference": "Redshift returns all parameter groups that match any combination of the specified keys and values.", "NNUpdater": "Describes the SQL Query to execute on an Amazon Redshift database for an"}
{"Origin": "Users with {@link Jenkins#ADMINISTER} may be allowed to do it using {@link #SHOW_TOKEN_TO_ADMINS}.", "Reference": "Users with {@link Jenkins#ADMINISTER} may be allowed to do it using {@link #ADMIN_CAN_GENERATE_NEW_TOKENS}.", "NNUpdater": "Operation fails."}
{"Origin": "closes the window, i.e., if the parent is not null and implements the WindowListener interface it calls the windowClosing method", "Reference": "closes the window, i.e., if the parent is not null and implements the", "NNUpdater": "Set Fenster."}
{"Origin": "Get the fileContentLanguage property: Specifies the natural languages used by this resource.", "Reference": "Get the contentLanguage property: Specifies the natural languages used by this resource.", "NNUpdater": "Get Sprache."}
{"Origin": "Returns the flow table for specified device.", "Reference": "Returns the flow table for a specific device.", "NNUpdater": "Returns the group store eventual consistent id map."}
{"Origin": "Triggers the failure strategy with the given failure message.", "Reference": "Reports a failure with the given message.", "NNUpdater": "The failure cause."}
{"Origin": "Returns the first sync d l object in the ordered set where companyId = ?", "Reference": "Returns the first sync d l object in the ordered set where repositoryId = ?", "NNUpdater": "Finds the last article in the ordered set where resourcePrimKey = ?"}
{"Origin": "Builds an {@link Intent} for stopping all downloads.", "Reference": "Builds an {@link Intent} for resuming all downloads.", "NNUpdater": "Builds an {@link Intent} for setting the manual stop reason for one or all downloads."}
{"Origin": "Highlights the value at the given x-value in the given DataSet.", "Reference": "Highlights any y-value at the given x-value in the given DataSet.", "NNUpdater": "Highlights the value at the given x-position in the given DataSet."}
{"Origin": "This is the largest positive power of B that equal to or less than the given n.", "Reference": "This is the largest positive power of B that equal to or less than the given n and equal to a mathematical integer.", "NNUpdater": "Returns the index of the largest value in an list that is less than (or optionally equal to) a specified value."}
{"Origin": "Close and free all {@link Connection}s from the pool.", "Reference": "Closes and free all {@link Connection}s from the pool.", "NNUpdater": "Closes this connection."}
{"Origin": "Returns the result of interpreting the object as an instance of 'List Of EInt'.", "Reference": "Returns the result of interpreting the object as an instance of 'List Of ELong'.", "NNUpdater": "Returns the result of interpreting the object as an instance of 'User Settings'."}
{"Origin": "Creates new {@link Week} in the UTC timezone.", "Reference": "Creates new {@link Week}.", "NNUpdater": "Creates new {@link Week} in the UTC timezone."}
{"Origin": "Whether we allow the first parameter to be included as a label in the signature.", "Reference": "Whether we skip the first parameter being included as a label in the signature.", "NNUpdater": "label1 and label2 in X.Y.Z-label1-lable2."}
{"Origin": "The playback of the prefetched content should start in the later calls of {@link SessionPlayer2#play()}.", "Reference": "The playback of the prepareed content should start in the later calls of {@link SessionPlayer2#play()}.", "NNUpdater": "The playback of the prefetched content should start in the later calls of {@link SessionPlayer2#play()}."}
{"Origin": "Gets the X509Certificate out of the X509CertificateHolder and add it to the certificateStore map.", "Reference": "Gets the X509Certificate out of the X509CertificateHolder and add it to certificatesMap.", "NNUpdater": "Writes the Certificate of the CertificateMessage into the final byte[]"}
{"Origin": "Create an array of BeanPropertySqlParameterSource objects populated with data from the values passed in.", "Reference": "Create an array of {@link BeanPropertySqlParameterSource} objects populated with data from the values passed in.", "NNUpdater": "Sets the {@code parameterMetadata} property in the builder from an array of objects."}
{"Origin": "Extract the values of given fields/properties from the array's elements under test into a new array composed of", "Reference": "Extract the values of given fields/properties from the array's elements under test into a list composed of", "NNUpdater": "Create an array composed of the elements of the first array minus the elements of the given Iterable."}
{"Origin": "For simplicity, all sensors are synchronized on Sensor.", "Reference": "For simplicity, all sensors are synchronized on this object.", "NNUpdater": "Get or create a sensor with the given unique name and zero or more parent sensors."}
{"Origin": "Deletes the specified key.", "Reference": "Removes the entry with the specified key.", "NNUpdater": "Deletes the element at the specified position."}
{"Origin": "Skip until the given string is matched in the stream, but ignoring chars initially escaped by a '\\'.", "Reference": "Skip until the given string is matched in the stream, but ignoring chars initially escaped by a '\\' and any EL expressions.", "NNUpdater": "Appends to a StringBuilder the String src where non-ASCII and XML special chars are escaped."}
{"Origin": "Writes this Coord4D's data to a ByteBuf for packet transfer.", "Reference": "Writes this Coord4D's data to a PacketBuffer for packet transfer.", "NNUpdater": "Release the Netty ByteBuf if we used ByteBuf to construct this DataByteBuffer."}
{"Origin": "Method that returns delete JSON method", "Reference": "Method that returns delete batch JSON method", "NNUpdater": "Main method."}
{"Origin": "By default this is set to {@link ServerCodecConfigurer} with defaults.", "Reference": "By default this is set to {@link ServerCodecConfigurer}'s default writers.", "NNUpdater": "Invokes {@link ServiceCodec#codecAdded(ServiceConfig)}."}
{"Origin": "Use another separate queue to store levels as integers.", "Reference": "Use another separate queue to store columns as integers.", "NNUpdater": "Use another separate queue to store levels as integers."}
{"Origin": "Returns the valid setting names that aren't {@link Configuration}-only.", "Reference": "Returns the valid setting names for a {@link ProcessingConfiguration}.", "NNUpdater": "{@codesnippet com.azure.data.appconfiguration.ConfigurationClient.setSettingWithResponse#ConfigurationSetting-boolean-Context}"}
{"Origin": "create producer based on uri {@link Endpoint}", "Reference": "create producer based on uri {@link SoroushAction}", "NNUpdater": "Returns the endpoint as a URI."}
{"Origin": "The results are undefined if timing methods are called without invoking at least one pair {@link #start()} / {@link #stop()} methods.", "Reference": "The results are undefined if timing methods are called without invoking at least one pair {@link #start()} / {@code #stop()} methods.", "NNUpdater": "The {@link #getApplication()} and {@link #getUI()} methods might return after this method is called."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Do nothing if {@link BaseConfiguration#nocomment} is set to true.", "Reference": "Do nothing if {@link BaseOptions#noComment} is set to true.", "NNUpdater": "If already present, does nothing."}
{"Origin": "Queries this search source for the given queryString.", "Reference": "Creates query for the given queryString.", "NNUpdater": "Queries this ContactSourceService for SourceContacts which match a specific query Pattern."}
{"Origin": "Create a list of Klusters from whatever type is passed in as the prior", "Reference": "Create a list of Klusters from whatever Cluster type is passed in as the prior", "NNUpdater": "Creates a Predicate that checks if the object passed in is of a particular type, using instanceof."}
{"Origin": "The only other valid location for '}' is inside a StringLiteral.", "Reference": "The only other valid location for '}' is inside a", "NNUpdater": "Case 1: valid regular expression String or char literal"}
{"Origin": "New attribute statement.", "Reference": "New attribute statement attribute statement.", "NNUpdater": "Add statement."}
{"Origin": "The {@link #getProductType() product type} must be {@link EtdProductType#OPTION} otherwise an exception will be thrown.", "Reference": "The {@link #getType() type} must be {@link EtdType#OPTION} otherwise an exception will be thrown.", "NNUpdater": "Get Produkt."}
{"Origin": "Collapses given row, removing all its subtrees.", "Reference": "Collapses given item, removing all its subtrees.", "NNUpdater": "The paths consist of root + all subtrees paths."}
{"Origin": "Verifies that put(key) method called on cache in FULL_SYNC mode returns only when all affinity nodes for this key finished writing binary metadata.", "Reference": "Verifies that put(key) method called from client on cache in FULL_SYNC mode returns only when all affinity nodes for this key finished writing binary metadata.", "NNUpdater": "Requests {@link AffinityFunction} and {@link AffinityKeyMapper} from remote node."}
{"Origin": "Deletes all responses given by a team.", "Reference": "Deletes all feedback response involved a team.", "NNUpdater": "Return the robotCreateTeamMenuItem."}
{"Origin": "An empty query indicates that the app may prefetch any music.", "Reference": "An empty query indicates that the app may prepare any music.", "NNUpdater": "An empty query indicates that the app may prefetch any music."}
{"Origin": "To be executed by monitor process to ask for child process termination", "Reference": "To be executed by monitor process to ask for quick child process termination", "NNUpdater": "To be executed by child process to declare that it is done starting"}
{"Origin": "Returns the Script.", "Reference": "Returns the paramConsolescript.", "NNUpdater": "Returns the script for a given Locale."}
{"Origin": "This function acts as System.arrayCopy() but for ByteBuffers.", "Reference": "This function acts as System.arrayCopy() but for ByteBuffers, and operates safely on direct memory.", "NNUpdater": "Utility function to copy a byte array into a new byte array with given size."}
{"Origin": "See Immutable Set Static Factory Methods for details.", "Reference": "See Unmodifiable Sets for details.", "NNUpdater": "VerificationTimes supports multiple static factory methods:"}
{"Origin": "Returns an immutable list of the extensions on this message in tag order.", "Reference": "Returns an empty byte string if this message has no unknown fields.", "NNUpdater": "Returns an immutable list of the expression names of this"}
{"Origin": "Cleans the views in this schema.", "Reference": "Cleans the triggers in this schema.", "NNUpdater": "Generate the statements to clean the views in this schema."}
{"Origin": "In case of failure the {@link Flux} will error.", "Reference": "In case of failure the {@link CosmosContinuablePagedFlux} will error.", "NNUpdater": "Get the id of the {@link CosmosContainer}"}
{"Origin": "This method will retrieve one ExternalSourceEntryResource based on the ExternalSource for the given", "Reference": "This method will retrieve one ExternalSourceEntryResource based on the ExternalSource for the given externalSourceName and with the given entryId", "NNUpdater": "Set the name value."}
{"Origin": "Assert the primary value of the named response header as a date String, using the preferred date format described in RFC 7231.", "Reference": "Assert the primary value of the named response header parsed into a date using the preferred date format described in RFC 7231.", "NNUpdater": "Assert the primary value of the response header as a String value."}
{"Origin": "Group: producer", "Reference": "Group: consumer", "NNUpdater": "post-processor producer -> copy producer -> inputProducer"}
{"Origin": "Tests assert that the setting can not be deleted after lock the setting.", "Reference": "Tests assert that the setting can not be deleted after set the setting to read-only.", "NNUpdater": "Test setting the setup file."}
{"Origin": "This method writes word vectors to the given OutputStream.", "Reference": "This mehod writes word vectors to the given OutputStream.", "NNUpdater": "This method writes word vectors to the given OutputStream."}
{"Origin": "Adds a control metadata.", "Reference": "Adds a packet metadata.", "NNUpdater": "Adds a control metadata."}
{"Origin": "Group: common", "Reference": "Group: advanced", "NNUpdater": "Returns the default number of {@linkplain CommonPools#blockingTaskExecutor() blocking task executor} threads."}
{"Origin": "Map field name to the new name.", "Reference": "Maps a field name to its new name.", "NNUpdater": "Returns the tab bar height."}
{"Origin": "Returns whether this step deploys to the given region", "Reference": "Returns whether this step specifies the given environment", "NNUpdater": "Method getStepDisplayName returns the stepDisplayName of this FlowStep object."}
{"Origin": "Returns new child style ID container.", "Reference": "Returns new child style identifier container.", "NNUpdater": "Returns style identifier."}
{"Origin": "Tests resilency when D2 device is suspended.", "Reference": "Tests resiliency when D2 device is suspended.", "NNUpdater": "Tests resiliency when D2 device is down."}
{"Origin": "It will be parsed later, but oonly if required.", "Reference": "It will be parsed later, but only if required.", "NNUpdater": "Required: No"}
{"Origin": "Creates a fresh authentication session for the given realm and client.", "Reference": "Creates a fresh authentication session for the given realm .", "NNUpdater": "Performs the multi-realm authentication attempt by calling back to a {@link ModularAuthenticationStrategy} object as each realm is consulted for Account for the specified token."}
{"Origin": "Create a version 0 NewCookie instance by Parsing a String", "Reference": "Create a version 1 NewCookie instance by Parsing a String", "NNUpdater": "Creates a new instance of {@code Cookie} by parsing the supplied string."}
{"Origin": "This factory converts the arbitrary date-time object to an instance of {@code LocalDate}.", "Reference": "This factory converts the arbitrary temporal object to an instance of {@code LocalDate}.", "NNUpdater": "This factory converts the arbitrary date-time object to an instance of {@code LocalDateTime}."}
{"Origin": "Setter for {@link #exposeHeaders}", "Reference": "Setter for {@link #allowHeaders}", "NNUpdater": "expose as protected"}
{"Origin": "Unsubscribe for changes to the children of the parent, which was previously subscribed with {@link #subscribe(String, Bundle)}.", "Reference": "Unsubscribes for changes to the children of the parent, which was previously subscribed with {@link #subscribe(String, LibraryParams)}.", "NNUpdater": "Operation fails."}
{"Origin": "Checks whether this OBIS Identifer and the other identifer equals taking the wildcards into account", "Reference": "Checks whether this OBIS Identifier and the other identifier equals taking the wildcards into account", "NNUpdater": "Return the Object for the given Declaration identifier."}
{"Origin": "Return value of the selected option in the option group", "Reference": "Return list of the selected options in the checkbox group", "NNUpdater": "Returns value of the toList option."}
{"Origin": "Called when this minion dies (destroyed)", "Reference": "Called when this minion dies (destroyAndNotify)", "NNUpdater": "Called when a block is broken."}
{"Origin": "Gets the extension of a filename.", "Reference": "Gets the extension of a fileName.", "NNUpdater": "Gets the extension of a filename."}
{"Origin": "Registers the given connection manager with this reaper;", "Reference": "Register the connection manager with this reaper.", "NNUpdater": "Registers a given function with the connection."}
{"Origin": "Annotate for coreference (statistical)", "Reference": "Annotate for coreference", "NNUpdater": "The method takes the Annotate object as parameter and adds an Annotate.Worker to the correct Annotate queue for later processing."}
{"Origin": "Test queries to notes table including selectionArgs", "Reference": "Test queries to notes table using direct SQL URI", "NNUpdater": "Reduce a collection of {@link DataTable}s to selection rows for selection queries with ."}
{"Origin": "The {@link Flux} will contain one or several feed response of the obtained users.", "Reference": "The {@link CosmosContinuablePagedFlux} will contain one or several feed response of the obtained users.", "NNUpdater": "The {@link Flux} will contain one or several feed response of the obtained containers."}
{"Origin": "Checks if the predicates are successful for the specified item.", "Reference": "Checks if the specified item matches the predicates.", "NNUpdater": "Checks if the specified expression yields an element."}
{"Origin": "Call this once, to enable or disable DEBUG logs.", "Reference": "Call this once, to enable or disable logs.", "NNUpdater": "Enable/disable link with given id"}
{"Origin": "Generates code sample for using {@link ConfigurationClient#addSetting(String, String, String)}", "Reference": "Generates code sample for using {@link ConfigurationClient#addConfigurationSetting(String, String, String)}", "NNUpdater": "Generates code sample for using {@link ConfigurationClient#addSetting(String, String, String)}"}
{"Origin": "Converts AMF value to something human-readable.", "Reference": "Converts AMF value to something human-readable with indentStr `` `` and CRLF newlines", "NNUpdater": "Converts a parse status of the spec to a human-readable string"}
{"Origin": "The first check runs only if {@link ExtractorParameters#getExtractIndependently()} is false.", "Reference": "The second check runs only if {@link ExtractorParameters#getExtractIndependently()} is false.", "NNUpdater": "The first check runs only if {@link ExtractorParameters#getExtractIndependently()} is false."}
{"Origin": "Any of the input words can also be the answer if one is the parent or grandparent of other", "Reference": "Any of the input words can also be the answer if one is the parent or grandparent of other, or if the input words are the same.", "NNUpdater": "Adds an word to words."}
{"Origin": "Initializes this permission set with the current user and the user to whom the permissions in this set are granted.", "Reference": "Initializes this permission set with the current user and the entity to whom the permissions in this set are granted.", "NNUpdater": "Returns if the user has granted the given permission"}
{"Origin": "Return the {@link HttpHeaders} backing header related accessor methods.", "Reference": "Return the {@link HttpHeaders} backing header related accessor methods, allowing for populating selected header entries.", "NNUpdater": "Add all the HTTP headers into the HTTP/2 headers object"}
{"Origin": "Defaults to 0.", "Reference": "Defaults to 100.", "NNUpdater": "Defaults to ``AUTO``."}
{"Origin": "If {@link aboveId} is blank or not found, {@link id} will be placed last in the list.", "Reference": "If {@code aboveId} isn't found, {@code id} will be placed last in the list.", "NNUpdater": "The format is {groupID}:{regionID}#{versionID}."}
{"Origin": "Inspect all measure voices for those that start in first slot and exhibit a duration which is exactly 3/2 times the measure expected duration.", "Reference": "Inspect all measure voices for those that start in first slot and exhibit a duration (without any implicit tuplet) which is exactly 3/2 times the measure expected duration.", "NNUpdater": "Check the duration of the voice, compared to stack expected duration."}
{"Origin": "Allows fluent conversion to another type via a function callback.", "Reference": "This allows fluent conversion to any other type.", "NNUpdater": "This allows fluent conversion to any other type."}
{"Origin": "Writes an entry to the cache.", "Reference": "Writes a compilation unit to the disk cache.", "NNUpdater": "Writes entry synchronously."}
{"Origin": "The label for the C API.", "Reference": "The slug for the C API.", "NNUpdater": "label1 and label2 in X.Y.Z-label1-lable2."}
{"Origin": "Implements Operator.MULT.", "Reference": "Implements 'x * y'.", "NNUpdater": "Returns Operator from query parameter operator notation."}
{"Origin": "Returns the the number of editor columns if it was set by {@link #setColumns(Integer)} or in the screen XML.", "Reference": "Returns the columns mode which defines the number of columns if it was set by {@link #setColumnsMode(ColumnsMode)} or in the screen XML.", "NNUpdater": "Get number parameters."}
{"Origin": "FederatedAddGraphHandler didn't set the adding user.", "Reference": "FederatedAddStoreHandler didn't set the adding user.", "NNUpdater": "Gets a collection of graph objects within FederatedStore scope from the given csv of graphIds, with viability of the given user."}
{"Origin": "This will open a new one Session if it hasn't been opened before", "Reference": "This will open a new graph or retrieve one from shared cache.", "NNUpdater": "This will open a new one {@link Session} if it hasn't been opened before"}
{"Origin": "Set the upper 4x3 submatrix of this {@link Matrix4d} to the given {@link Matrix4x3d} and don't change the other elements.", "Reference": "Set the upper 4x3 submatrix of this {@link Matrix4d} to the given {@link Matrix4x3dc} and don't change the other elements.", "NNUpdater": "Set the upper left 3x3 submatrix of this {@link Matrix4d} to that of the given {@link Matrix4d} and don't change the other elements."}
{"Origin": "This can be called before we get the full set of applications, we should merge the results only in onAppsUpdated() which is idempotent.", "Reference": "This can be called before we get the full set of applications, we should merge the results only in onPredictionsUpdated() which is idempotent.", "NNUpdater": "Must only be called if {@link #next} has not be called before."}
{"Origin": "Returns a new {@link Partitioner.OnVirtualNodes} based on the partition key token.", "Reference": "Returns a new {@link Partitioner.OnVirtualNode} based on the partition key token.", "NNUpdater": "Calls {@link PartitionerServiceOld#augmentPartitionerConfig(PartitionerConfig, List)} twice in a row, with an equal descriptor."}
{"Origin": "[A8] (In all other cases, public members will continue to be accessible.)", "Reference": "[A9] (In all other cases, public members will continue to be accessible.)", "NNUpdater": "(In all other cases, public members will continue to be accessible.)"}
{"Origin": "Tests the {@link InodeTree#createPath(RpcContext, LockedInodePath, CreatePathOptions)} method for creating directories.", "Reference": "Tests the {@link InodeTree#createPath(RpcContext, LockedInodePath, CreatePathContext)} method for creating directories.", "NNUpdater": "Tests the {@link InodeTree#createPath(LockedInodePath, CreatePathOptions)} method for creating directories."}
{"Origin": "or throws a {@link com.liferay.opensocial.NoSuchOAuthTokenException} if it could not be found.", "Reference": "or throws a {@link NoSuchOAuthTokenException} if it could not be found.", "NNUpdater": "Operation fails."}
{"Origin": "Note that a MutableLong isn't and can't be equal to an Long.", "Reference": "Note that a MutableInteger isn't and can't be equal to an Integer.", "NNUpdater": "{@link cgData#loadStoredInViewport(long, long, long, long, CacheType)}"}
{"Origin": "Parses the timestamp from the collection list and returns them in reverse sorted order (most recent 1st)", "Reference": "Result is returned them in sorted order (most recent 1st)", "NNUpdater": "Returns the clipboard data."}
{"Origin": "Sets the output.", "Reference": "Set the output.", "NNUpdater": "Sets the output as simple sting."}
{"Origin": "or throws a {@link com.liferay.sync.NoSuchDLObjectException} if it could not be found.", "Reference": "or throws a {@link NoSuchDLObjectException} if it could not be found.", "NNUpdater": "Operation fails."}
{"Origin": "Tests that when an etag is passed to delete it will only delete if the current representation of the setting has the etag.", "Reference": "Tests that when an ETag is passed to delete it will only delete if the current representation of the setting has the ETag.", "NNUpdater": "If {@link ConfigurationSetting#getETag() etag} is specified, the configuration value is updated if the current setting's etag matches."}
{"Origin": "Negative test, when a CORS request arrives, with a null origin.", "Reference": "Negative test, when a CORS request arrives, with no origin header.", "NNUpdater": "TkCORS can handle connections without origin in the request."}
{"Origin": "The returned set is a view of the keys in this object.", "Reference": "Get a set of keys of the JSONObject.", "NNUpdater": "Method isKeys returns true if this instance is the {@link #GROUP} field set."}
{"Origin": "Click no childer of the specified parent element.", "Reference": "Click no children of the specified parent element.", "NNUpdater": "Execute keyboard actions on the element"}
{"Origin": "Do nothing if {@link BaseConfiguration#nocomment} is set to true.", "Reference": "Do nothing if {@link BaseOptions#noComment} is set to true.", "NNUpdater": "If already present, does nothing."}
{"Origin": "Attaches an application created from a WADL description document available at a given URI.", "Reference": "Attaches an application created from a Swagger description document available at a given URI.", "NNUpdater": "Returns a WADL description of the current resource."}
{"Origin": "Parses {@link Basic1DMatrix} from the given Matrix Market string.", "Reference": "Parses {@link Basic1DMatrix} from the given Matrix Market.", "NNUpdater": "Creates a {@link Basic1DMatrix} of the given 2D {@code array} with copying the underlying array."}
{"Origin": "Tests that require additional {@link PolyglotEngine} global symbols should override this, which will be called just prior to the evaluation.", "Reference": "Tests that require additional {@link Engine} global symbols should override this, which will be called just prior to the evaluation.", "NNUpdater": "Associates the {@linkplain #build() to be created} {@link PolyglotEngine engine} with an {@link PolyglotRuntime execution runtime}."}
{"Origin": "This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the character_set_database parameter.", "Reference": "This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the parameter.", "NNUpdater": "Uses the finder cache."}
{"Origin": "We do not affect the {@link Listener} here because it would be redundant to handling already done in {@link LimiterReleasingCallback}.", "Reference": "We do not affect the {@link Listener} here because it would be redundant to handling already done in callbacks.", "NNUpdater": "It calls the listener's {@code closed()} if it was not already done by {@link #transportReportStatus}."}
{"Origin": "Set the serverBindings", "Reference": "Set the theServerBindings", "NNUpdater": "Registers all the bindings of an Injector with the given MBean server."}
{"Origin": "Generates the jaxp.properties with the specified content.", "Reference": "Generates jaxp.properties with the specified content, takes a backup if possible.", "NNUpdater": "Read from $java.home/conf/jaxp.properties for the specified property"}
{"Origin": "Sets the elementOptionBar.", "Reference": "Sets the element option bar.", "NNUpdater": "Sets the short description of the option."}
{"Origin": "Aggregate given void publishers into a new {@literal Mono} that will be fulfilled when all of the given {@literal sources} have been fulfilled.", "Reference": "Aggregate given publishers into a new {@literal Mono} that will be fulfilled when all of the given {@literal sources} have been fulfilled.", "NNUpdater": "Aggregate given void publisher into a new a {@literal Mono} that will be fulfilled when all of the given {@literal"}
{"Origin": "Obtains an instance from the specified unique name.", "Reference": "Obtains an instance from the specified name.", "NNUpdater": "Obtains the type from a unique name."}
{"Origin": "Creates a ``delta clone`` of this Map, where only the differences are represented.", "Reference": "Creates a ``delta copy`` of this Map, where only the differences from the original Map are represented.", "NNUpdater": "Creates a copy of the request."}
{"Origin": "This will only consider it a match if the a new segment (following slash) or the end of the path immediately follows {@code segments}.", "Reference": "This will only consider it a match if the a new segment (following slash) or the end of the path immediately follows {@code pathSegments}.", "NNUpdater": "Set the (new) values of the {@code If-None-Match} header."}
{"Origin": "So if you want to be sure that your {@link IClassCache} is handled in all situations then call this method twice with your implementations.", "Reference": "So if you want to be sure that your {@link IGetAndSetLocator} is handled in all situations then call this method twice with your implementations.", "NNUpdater": "Note your thread will be blocked during execution - if you want to call the function asynchronously, see {@link #callAsync(String)}."}
{"Origin": "Returns true if the button's text should be bold.", "Reference": "Returns true if the text of the %type% should be bold.", "NNUpdater": "Should be false."}
{"Origin": "see {@link BlockFlowerPot#getActualState(IBlockState, IBlockAccess, BlockPos)}", "Reference": "see {@link FlowerPotBlock#getActualState(BlockState, IWorldReader, BlockPos)}", "NNUpdater": "Creates a new {@link ChangeBlockEvent.SourceBlock}."}
{"Origin": "Test method for {@link com.hazelcast.config.GroupConfig#getName()}.", "Reference": "Test method for {@link com.hazelcast.config.Config#getClusterName()}.", "NNUpdater": "Operation fails."}
{"Origin": "Gets the units of this drug order", "Reference": "Gets the doseUnits of this drug order", "NNUpdater": "Most units are related to other units."}
{"Origin": "Get the iterable of all providers (custom and default) registered for the given service provider contract in the underlying {@link ServiceLocator HK2 service locator} container.", "Reference": "Get the iterable of all providers (custom and default) registered for the given service provider contract in the underlying {@link InstanceManager instance manager} container.", "NNUpdater": "Get the iterable of all providers (custom and default) registered for the given service provider contract in the underlying {@link ServiceLocator HK2 service locator} container."}
{"Origin": "Set Is Reversed with original Accounting.", "Reference": "Set Document Type for Payment.", "NNUpdater": "Getter Parameter Value for Project Accounting"}
{"Origin": "Implements Operator.PERCENT.", "Reference": "Implements 'x % y'.", "NNUpdater": "It is the percent memory free."}
{"Origin": "This signature is the one specified in the constructor (see {@link #SignatureReader(String) SignatureReader}).", "Reference": "This signature is the one specified in the constructor (see {@link #SignatureReader}).", "NNUpdater": "- {@link #KEY_SIGNATURE}: value specified by {@link #setCreator(String)}."}
{"Origin": "Provide custom {@link LayoutHandler}.", "Reference": "Provide custom {@link LithoHandler}.", "NNUpdater": "Specify custom message config, include view type, layout resource id, is send outgoing(according to layout) and custom view holder's {@link Class} object."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Triggers a stack trace sample for a operator to gather the back pressure statistics.", "Reference": "Triggers a back pressure request for a vertex to gather the back pressure statistics.", "NNUpdater": "Compiles a method and gathers some statistics."}
{"Origin": "The {@link RequestScope.Instance scope instance} is NOT released by the method (this must be done explicitly).", "Reference": "The {@link RequestContext scope context} is NOT released by the method (this must be done explicitly).", "NNUpdater": "Maps a {@link Scope} instance to a given annotation."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Generates a code sample for using {@link ShareDirectoryClient#createSubDirectoryWithResponse(String,", "Reference": "Generates a code sample for using {@link ShareDirectoryClient#createSubdirectoryWithResponse(String,", "NNUpdater": "Generates a code sample for using {@link DirectoryClient#createSubDirectoryWithResponse(String, FileSmbProperties, String, Map, Context)}"}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Sets new reference to partition counters page (logical cache sizes).", "Reference": "Sets new reference to page with logical cache sizes in cache group.", "NNUpdater": "Create a new Partition."}
{"Origin": "Final, because its called by a constructor.", "Reference": "Note: final, because its called by a constructor.", "NNUpdater": "Sets the final value."}
{"Origin": "Provided {@link Painter} can be {@code null} in which case current {@link Painter} will be uninstalled.", "Reference": "Provided {@link Painter} can be {@code null} in which case current {@link Painter} will simply be uninstalled.", "NNUpdater": "Returns label painter."}
{"Origin": "Convenience routine to return the specified error's underlying Exception, or null if it isn't one.", "Reference": "Returns the specified error's underlying Exception, or null if it isn't one.", "NNUpdater": "Return the exception for this field, or if there isn't any."}
{"Origin": "See {@code EquivalenceMethod} for more info.", "Reference": "See {@code EqMethod} for more info.", "NNUpdater": "All equivalence types are given as {@link PatternToken}s. They create an equivalence set (with abstraction)."}
{"Origin": "Return a {@link Bucket} that can be used to provide local storage under the given {@code namespace}.", "Reference": "Return a {@link Bucket} that can be used to provide persistent local storage under the given {@code namespace}.", "NNUpdater": "Gets the bucket name used in the collection's namespace."}
{"Origin": "Get service locator.", "Reference": "Get instance manager.", "NNUpdater": "Get Lagerort."}
{"Origin": "Caller should ensure {@code dep} not running.", "Reference": "Caller should ensure dep not running.", "NNUpdater": "Ensure that:"}
{"Origin": "GrantAuthoritesMapperProcess.", "Reference": "GrantAuthoritiesMapperProcess.", "NNUpdater": "Execute the CREATE PROPERTY."}
{"Origin": "Returns the location of the output directory from the configuration or the temporary directory if not defined.", "Reference": "Returns the location of the directory from the configuration or the temporary directory if not defined.", "NNUpdater": "Returns the directory path."}
{"Origin": "Returns the Java method name for the given method descriptor.", "Reference": "Returns the service name for the given service.", "NNUpdater": "Returns the {@link Type} corresponding to the given method descriptor."}
{"Origin": "Sets the disambiguation.", "Reference": "Set the disambiguation.", "NNUpdater": "Also performs disambiguation if the subject and {@code other} have the same toString()'s."}
{"Origin": "Sets the {@link SharedKeyCredential} used to authorize requests sent to the service.", "Reference": "Sets the {@link StorageSharedKeyCredential} used to authorize requests sent to the service.", "NNUpdater": "Sets the SAS token used to authorize requests sent to the service"}
{"Origin": "Indicates if the connection is ready to handle new messages.", "Reference": "Indicates if the connection is available to handle new messages.", "NNUpdater": "Indicates if the connection is empty."}
{"Origin": "Gets the border colour of the element, as a HTML RGB hex string (e.g.", "Reference": "Gets the stroke colour of the element, as a HTML RGB hex string (e.g.", "NNUpdater": "Returns hex color string for the specified color."}
{"Origin": "Register an error channel in the given BeanDefinitionRegistry.", "Reference": "Register an error channel in the application context.", "NNUpdater": "Register a TaskScheduler in the given BeanDefinitionRegistry."}
{"Origin": "DefaultBundleCache documentation for more details its configuration options.", "Reference": "See the DefaultBundleCache documentation for more details its configuration options.", "NNUpdater": "For details, see the"}
{"Origin": "Full-Control Mode in Your Organization in the AWS Organizations User Guide.", "Reference": "For more information, see Enabling All Features in Your Organization in the AWS Organizations User Guide.", "NNUpdater": "Sets the list of root groups."}
{"Origin": "ClosePullRequest closes pull request if rebase mode.", "Reference": "ClosePullRequest can close pull request if rebase mode.", "NNUpdater": "Start a container."}
{"Origin": "Set Type.", "Reference": "Set Art.", "NNUpdater": "Set OrderType."}
{"Origin": "This method is called by the constructor to check that its initialization does not violate any fundemental requirements of the .", "Reference": "This method is called by the constructor to check that its initialization does not violate any fundamental requirements of the .", "NNUpdater": "This method does not check whether the requested class is accessible to its caller."}
{"Origin": "Indicates if an expression has the specified compiler property.", "Reference": "Indicates if an expression has one of the specified compiler properties.", "NNUpdater": "Indicates if an expression accesses the position of a context item."}
{"Origin": "InteropAccessNode} during specialisation, causing the state to constantly be 0.", "Reference": "InteropAccessNode} during specialization, causing the state to constantly be 0.", "NNUpdater": "Adds entries to the Java interop class loader."}
{"Origin": "Can be used to register a {@link IBlockState} as a valid soil.", "Reference": "Can be used to register a {@link BlockState} as a valid soil.", "NNUpdater": "Checks if the provided user name is a valid user name and can be used as an argument value for {@link #setName(String)}."}
{"Origin": "Returns the pivot of a view on a specific axis, when overshooting at the start.", "Reference": "Returns the pivot of an item on a specific axis, when overshooting at the start.", "NNUpdater": "Returns the pivot of a view on a specific axis, when it is swiped."}
{"Origin": "Returns a copy of this qualifier with array-offset pairs where in the original the offset contains an access of an array length in arrays.", "Reference": "Returns a copy of this qualifier with sequence-offset pairs where in the original the offset contains an access of an sequence length in {@code sequences}.", "NNUpdater": "Returns a copy of this OffsetDate with a different zone offset."}
{"Origin": "An empty SortedDocValues which returns {@link SortedSetDocValues#NO_MORE_ORDS} for every document", "Reference": "An empty SortedDocValues which returns {@link BytesRef#EMPTY_BYTES} for every document", "NNUpdater": "Returns SortedSetDocValues for the reader, or {@link #emptySortedSet} if it has none."}
{"Origin": "Logs a {@link TimeSeriesPoint} in WARNING level.", "Reference": "Logs a {@link DiagnosticContext.TimeSeriesPoint} in WARNING level.", "NNUpdater": "Gets the time-series of fixings, defaulted to an empty time-series."}
{"Origin": "Wait for this task to meet the expected number of commits as defined by {@code expectedCommits}.", "Reference": "Wait up to the specified timeout for this task to meet the expected number of commits as defined by {@code expectedCommits}.", "NNUpdater": "Commits the transaction."}
{"Origin": "Access Control Using AWS Identity and Access Management (IAM) .", "Reference": "For more information, see Access Control Using AWS Identity and Access Management (IAM).", "NNUpdater": "Access Management (IAM) user account."}
{"Origin": "The amount of real time, in nanoseconds, is given by the expression {@code 1000000 * timeout + nanos}.", "Reference": "The amount of real time, in nanoseconds, is given by the expression {@code 1000000 * timeoutMillis + nanos}.", "NNUpdater": "Runs the test method for approximately {@code runNanos * durationScale} nanos and returns a Measurement of the nanos per rep and units per rep."}
{"Origin": "Returns true if the button's text should be italic.", "Reference": "Returns true if the text of the %type% should be italic.", "NNUpdater": "For example, a {@link TextStyle} with {@code bold: true, italic: true}} would return {@code true} for and"}
{"Origin": "Returns the global index.", "Reference": "Returns the server log reader.", "NNUpdater": "IndexName - The name of the global secondary index."}
{"Origin": "Returns {@code true} if the given identifier is a legal Java identifier.", "Reference": "Returns {@code true} if the given name is a legal binary name.", "NNUpdater": "Expected format: {@code ':' identifier >} {@code ':' identifier '.'"}
{"Origin": "Returns the first sync d l object in the ordered set where companyId = ?", "Reference": "Returns the first sync d l object in the ordered set where repositoryId = ?", "NNUpdater": "Finds the last article in the ordered set where resourcePrimKey = ?"}
{"Origin": "Sets the storeGenericResponses.", "Reference": "Set the storeGenericResponses.", "NNUpdater": "Sets the value of the 'extensionSyncResponses' field."}
{"Origin": "Adds a message to the console without new line at the end", "Reference": "Adds a message to the console", "NNUpdater": "If {@code pos} is beyond the end of the paragraph, the style at the end of line is returned."}
{"Origin": "This method obtains the extension as the textual part of the filename after the last dot.", "Reference": "This method obtains the extension as the textual part of the fileName after the last dot.", "NNUpdater": "The extension of a file is the part of the name after the last dot, including the dot."}
{"Origin": "Method to add looseConfigs in expanded (non-archive) format", "Reference": "Method to add looseConfigs in both archive and expanded format", "NNUpdater": "The {@link ArchiveMarkFile} for the Archive."}
{"Origin": "Get the {@link edu.stanford.nlp.international.Language} object corresponding to the given language string.", "Reference": "Get the {@link edu.stanford.nlp.international.Languages.Language} object corresponding to the given language string.", "NNUpdater": "Get Sprache."}
{"Origin": "Bind the {@link ModuleHandlerCallback} service - called from DS.", "Reference": "Bind the {@link RuleManager} service - called from DS.", "NNUpdater": "Bind the {@link RuleTemplateRegistry} service - called from DS."}
{"Origin": "Gets the package name from the canonical name.", "Reference": "Gets the package name from the class name.", "NNUpdater": "Return the canonical name for a database object."}
{"Origin": "Returns a builder for a QueryParameterValue object with given value.", "Reference": "Returns a builder for the {@code QueryParameterValue} object.", "NNUpdater": "Returns a builder for a Field object with given name and type."}
{"Origin": "Returns the j i r a action with the primary key or throws a {@link com.liferay.socialcoding.NoSuchJIRAActionException} if it could not be found.", "Reference": "Returns the j i r a action with the primary key or throws a {@link NoSuchJIRAActionException} if it could not be found.", "NNUpdater": "Returns a {@link CallableAction} that creates the {@link IAction} and invokes it."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}", "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveFromRangeEnd }{@code >}}", "NNUpdater": "Create an instance of {@link JAXBElement }{@code <}{@link CTStrokeChild }{@code >}}"}
{"Origin": "Returns the current state of the parameters as an array by parameter index.", "Reference": "Returns the current state of the parameters as a map keyed by parameter name.", "NNUpdater": "Returns the current server role."}
{"Origin": "Notify this session that sync completed/failed with given {@code NodePair}.", "Reference": "Notify this session that sync completed/failed with given {@code SyncNodePair}.", "NNUpdater": "Check if the request failed."}
{"Origin": "Shared actions are tolerated.", "Reference": "Shared actions are not allowed.", "NNUpdater": "By constrast with {@link Eithers#sequence(IterableX)} Either#empty types are tolerated and ignored."}
{"Origin": "{@code inetAddressList} will be non-null and {@code throwable} will be null in the case of a successful DNS lookup.", "Reference": "{@code inetAddressList} will be non-null and {@code ioe} will be null in the case of a successful DNS lookup.", "NNUpdater": "A {@code null} CharSequence will return {@code null}."}
{"Origin": "This method calls {@link #createRecordReader(Map, InputStream, ComponentLog)} with Attributes of the specified FlowFile.", "Reference": "This method calls {@link #createRecordReader(Map, InputStream, long, ComponentLog)} with Attributes of the specified FlowFile.", "NNUpdater": "Operation fails."}
{"Origin": "Map method name to the new name.", "Reference": "Maps a method name to its new name.", "NNUpdater": "Returns the tab bar height."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Inverse of {@link #bsonJackson(String)}", "Reference": "Inverse of {@link #bsonThenJackson(String)}", "NNUpdater": "However, the bson encoder would fail to encode the object of type ValueObject (as shown by {@link #testFullBSONSerialization()})."}
{"Origin": "This operation will ignore blanks.", "Reference": "This operation will produce null for blanks.", "NNUpdater": "Appends length blanks."}
{"Origin": "Returns an array containing all of the instructions in this list.", "Reference": "Returns an array containing all the instructions in this list.", "NNUpdater": "Returns a list containing all the viewes of this table."}
{"Origin": "Executes a query and returns the data of the currunt page.", "Reference": "Executes a query and returns the data of the current page.", "NNUpdater": "Executes a query."}
{"Origin": "list of SummaryListener instances", "Reference": "List of SummaryListener instances", "NNUpdater": "Set Zusammenfassung."}
{"Origin": "The simplest way to create a PII token.", "Reference": "Create a PII token asynchronously.", "NNUpdater": "The simplest way to create a {@link BankAccount} token."}
{"Origin": "Gets the id of the underlying metric.", "Reference": "Gets the name of the underlying metric.", "NNUpdater": "Gets the id of the underlying metric."}
{"Origin": "Encode a PI action group to a action profile group.", "Reference": "Encode a PI action profile group to a action profile group.", "NNUpdater": "Guide."}
{"Origin": "This is because the members (and action parameters) all reference the {@link DomainClass}s, so these need to exist first.", "Reference": "This is because the members (and action parameters) all reference the {@link DomainClassDto}s, so these need to exist first.", "NNUpdater": "see {@link #ActionModel(PageParameters, SpecificationLoader)}"}
{"Origin": "Tests of ``jar:file:`` based URIs", "Reference": "Tests of URIs last segment, including ``jar:file:`` based URIs.", "NNUpdater": "Gets the entity's disambiguations"}
{"Origin": "{@codesnippet com.azure.storage.queue.QueueAsyncClient.setAccessPolicy#List}", "Reference": "{@codesnippet com.azure.storage.queue.QueueAsyncClient.setAccessPolicy#Iterable}", "NNUpdater": "{@codesnippet com.azure.storage.queue.queueClient.setAccessPolicyWithResponse#List-Duration-Context}"}
{"Origin": "Logs a {@link TimeSeriesPoint} in INFO level.", "Reference": "Logs a {@link DiagnosticContext.TimeSeriesPoint} in INFO level.", "NNUpdater": "Gets the time-series of fixings, defaulted to an empty time-series."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Returns a byte-array representation of a {@link BigInteger}.", "Reference": "Returns a byte-array representation of a {@code {@link BigInteger}}.", "NNUpdater": "The {@link SLBigNumber} type of"}
{"Origin": "DocValues query) will return {@link Matches#MATCH_WITH_NO_TERMS}", "Reference": "DocValues query) will return {@link MatchesUtils#MATCH_WITH_NO_TERMS}", "NNUpdater": "A simple query returning all nodes connected to node 1: `start x = (1) match (x) -- (n) return n, n.name`"}
{"Origin": "Should execute action on node by specific node in request.", "Reference": "Should execute action on nodes by specific node ID's in request.", "NNUpdater": "HandlerWrapper, ActionNode)} to perform the action and to schedule the next action node."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Set the conflict resolution policy for the container.", "Reference": "Set the resource value.", "NNUpdater": "Gets the options for the the conflict resolution policy."}
{"Origin": "Getter for {@link #allowOnlyRequestedHeader}", "Reference": "Getter for {@link #allowAllRequestedHeaders}", "NNUpdater": "Getter Parameter Value for D-U-N-S"}
{"Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}", "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveToRangeEnd }{@code >}}", "NNUpdater": "Create an instance of {@link JAXBElement }{@code <}{@link CTStrokeChild }{@code >}}"}
{"Origin": "Static Mary header writer", "Reference": "Mary header writer", "NNUpdater": "Puts custom header for static resources."}
{"Origin": "KeyImportOptions#getKeyMaterial() key material} cannot be null.", "Reference": "ImportKeyOptions#getKey() key material} cannot be null.", "NNUpdater": "KeyImportOptions#getKeyMaterial() key material} cannot be null."}
{"Origin": "Gets the icon URL of the application, if present and in a supported format.", "Reference": "Gets the icon of the application.", "NNUpdater": "Gets the icon URL of the application, if present and in a supported format."}
{"Origin": "anonymous: Cross-origin CORS requests for the element will not have the credentials flag set.", "Reference": "ANONYMOUS: Cross-origin CORS requests for the element will not have the credentials flag set.", "NNUpdater": "Override this method to configure cross origin requests processing."}
{"Origin": "Called when a controller requested to prefetch playback from a search query through {@link MediaController2#prefetchFromSearch(String, Bundle)}.", "Reference": "Called when a controller requested to prepare playback from a search query through {@link MediaController2#prepareFromSearch(String, Bundle)}.", "NNUpdater": "Called when a controller requested to prefetch playback from a search query through {@link MediaController2#prefetchFromSearch(String, Bundle)}."}
{"Origin": "Check if given coordinates lies inside contentRectMinusAllMargins.", "Reference": "Check if given coordinates lies inside contentRect.", "NNUpdater": "Check if given coordinates lies inside contentRectMinusAllMargins."}
{"Origin": "Returns list of nodes filtered based on this {@link NodesAcceptPolicy}.", "Reference": "Returns list of {@link TreeNode}s filtered based on this {@link NodesAcceptPolicy}.", "NNUpdater": "Returns a list of all nodes in the array nodes, excluding the local node."}
{"Origin": "Converts a template name to its corresponding FooParams class name.", "Reference": "Converts a template name to its corresponding Foo class name.", "NNUpdater": "Assert.instanceOf(Foo.class, foo, ``Foo expected``);"}
{"Origin": "Creates a key that is used for the lookup in Redis.", "Reference": "Creates a key in Redis.", "NNUpdater": "Returns the Redis hostname."}
{"Origin": "Binds the specified {@link Service} under the specified directory of the default {@link VirtualHost}.", "Reference": "Binds the specified {@link HttpService} under the specified directory of the default {@link VirtualHost}.", "NNUpdater": "Binds the specified {@link Service} at the specified {@link Route} of the default {@link VirtualHost}."}
{"Origin": "Print a list of {@link Taglet}s that might conflict with standard tags in the future and a list of standard tags that have been overriden.", "Reference": "Print a list of {@link Taglet}s that might conflict with standard tags in the future and a list of standard tags that have been overridden.", "NNUpdater": "Set Default."}
{"Origin": "Creates this file as a folder.", "Reference": "Creates the given folder.", "NNUpdater": "All users are granted."}
{"Origin": "Format and publish a LogRecord.", "Reference": "Format and publish a .", "NNUpdater": "Log an exception at the 'severe' level."}
{"Origin": "Evaluates an {@link com.oracle.truffle.r.runtime.data.Closure} in {@code frame}.", "Reference": "Evaluates a {@link com.oracle.truffle.r.runtime.data.Closure} in {@code frame}.", "NNUpdater": "Operation fails."}
{"Origin": "If --controller parameter has not been specified, --entity parameter will not be visible", "Reference": "If --all parameter has been specified, --entity parameter will not be visible to prevent conflicts.", "NNUpdater": "If a parameter is already present, than the request parameter in the current request and value atrribute will not override its value."}
{"Origin": "Checks if the given user exists in the current tenant", "Reference": "Checks if the given users and roles exist in the current tenant", "NNUpdater": "Checks if the index for Graylog2 exists"}
{"Origin": "This includes @type, @this, @extends, @implements, @param, @throws, and @return.", "Reference": "This includes @type, @this, @extends, @implements, @param, @throws, @lends, and @return.", "NNUpdater": "Returns an {@link Excerpt} of ``implements/extends {@code type}``."}
{"Origin": "Reset the internal state of the Datastore emulator.", "Reference": "Resets the internal state of the Datastore emulator.", "NNUpdater": "Reset the decoder state."}
{"Origin": "{@codesnippet com.azure.storage.file.share.ShareDirectoryAsyncClient.createSubDirectory#string}", "Reference": "{@codesnippet com.azure.storage.file.share.ShareDirectoryAsyncClient.createSubdirectory#string}", "NNUpdater": "{@codesnippet com.azure.storage.file.shareClient.createDirectoryWithResponse#string-map-Context}"}
{"Origin": "It's therefore good for attributes such as ``id`` or ``wicket:id``, but only if ``wicket:id`` is unique in the specified markup.", "Reference": "It's therefore good for attributes suck as ``id`` or ``wicket:id``, but only if ``wicket:id`` is unique in the specified markup.", "NNUpdater": "id=``wicket-id`` or wicket=``id``."}
{"Origin": "Copies the full-text options from the specified database meta data.", "Reference": "Assigns the full-text options from the specified database meta data.", "NNUpdater": "The meta-data of the Dataframe are updated."}
{"Origin": "Once the session is open, the client will transition to the {@link State#CONNECTED} state and the returned {@link CompletableFuture} will be completed.", "Reference": "Once the session is registered, the client will transition to the {@link State#CONNECTED} state and the returned {@link CompletableFuture} will be completed.", "NNUpdater": "Like {@link #get(Handler)}but returns a {@code CompletionStage} that will be completed once the operation completes."}
{"Origin": "Writes the representation to an appendable sequence of characters.", "Reference": "Appends the representation to an appendable sequence of characters.", "NNUpdater": "Render a node to the given word processing package"}
{"Origin": "Invalidates a session.", "Reference": "Closes a session.", "NNUpdater": "Tests closing an open file invalidates the id."}
{"Origin": "The simplest way to create a {@link BankAccount} token.", "Reference": "Create a {@link BankAccount} token asynchronously.", "NNUpdater": "The simplest way to create a {@link BankAccount} token."}
{"Origin": "IMPORTANT: After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group.", "Reference": "After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group.", "NNUpdater": "Creates a new DB parameter group."}
{"Origin": "Returns the first sync d l object in the ordered set where companyId = ?", "Reference": "Returns the first sync d l object in the ordered set where modifiedTime > ?", "NNUpdater": "Finds the last article in the ordered set where resourcePrimKey = ?"}
{"Origin": "Calculates location of caret and displays the suggestion popup.", "Reference": "Calculates location of caret and displays the suggestion pop-up.", "NNUpdater": "Displays popup for the specified root pane."}
{"Origin": "See {@link FuncotationMap#getFieldNames(String)}, but this returns field names for a single transcripts and a single allele.", "Reference": "See {@link FuncotationMap#getFieldNames(String)}, but this returns field names for a single transcript and a single allele.", "NNUpdater": "The implementations of {@link #getFunctionNames()} and {@link Schema#getFunctions(String)} depend on this map."}
{"Origin": "Calls {@code deallocate()}.", "Reference": "Calls {@code releaseReference()}.", "NNUpdater": "Deallocate a node which is in the failed or parked state."}
{"Origin": "Count the total file size, including id files, of {@link StoreFile}s.", "Reference": "Count the total file size, including id files, of {@link DatabaseStore}s.", "NNUpdater": "Gets the {@link UIFileInfo} object that represents the file id, or the file path if file id is -1."}
{"Origin": "Throw an {@link IllegalStateException} that indicates more than the requested amount was produced.", "Reference": "Log an {@link IllegalStateException} that indicates more than the requested amount was produced.", "NNUpdater": "If not, throw an SketchesArgumentException."}
{"Origin": "Returns a new {@link Service} decorator that tracks request stats using {@link MeterRegistry}.", "Reference": "Returns a new {@link HttpService} decorator that tracks request stats using {@link MeterRegistry}.", "NNUpdater": "Returns a new {@link Service} decorator that tracks request stats using the Dropwizard metrics library."}
{"Origin": "registers a listener to be notified of the contents of the property file", "Reference": "Registers a listener to be notified of the contents of the property file", "NNUpdater": "Returns the contents."}
{"Origin": "The minimum coverage of the sequence alignment between two subunits to be clustered together.", "Reference": "The minimum coverage of the structure alignment between two subunits to be clustered together.", "NNUpdater": "MultipleAlignment of the repeats in order to use the methods to score"}
{"Origin": "get the sla from the dag node config.", "Reference": "get the flow start sla from the dag node config.", "NNUpdater": "This will mark this DAG as a child DAG, the dependencies of nodes in this DAG will be merged with (copied to) the parent DAG"}
{"Origin": "There is no conditonal run based on whether given repository is installed because this test is not supposed to have working Mercurial anyway.", "Reference": "There is no conditional run based on whether given repository is installed because this test is not supposed to have working Mercurial anyway.", "NNUpdater": "There is no conditonal run based on whether given repository is installed because this test is not supposed to have working Mercurial anyway."}
{"Origin": "Aggregates the service, app, and plan policies into a single ordered list.", "Reference": "Aggregates the API, app, and plan policies into a single ordered list.", "NNUpdater": "Delete an App Service plan."}
{"Origin": "To SSLHostConfig info.", "Reference": "To SslHostConfig info.", "NNUpdater": "Return an instance of {@link SSLContext} used for SSL connection."}
{"Origin": "Therefore a client that is pinned this way should be used to only make requests to URLs with passed certificate.", "Reference": "Therefore a builder that is pinned this way should be used to only make requests to URLs with passed certificate.", "NNUpdater": "This method should only be used in {@link ClientContext}."}
{"Origin": "Takes a package and a relative path to a resource and returns an absolute path to the resource.", "Reference": "Takes a package and a path to a resource and returns an absolute path to the resource.", "NNUpdater": "Takes a Class and a relative path to a class and returns any class at that relative path."}
{"Origin": "For example, the period in days between two dates can be calculated using {@code startDate.periodUntil(endDate, DAYS)}.", "Reference": "For example, the period in days between two dates can be calculated using {@code startDate.until(endDate, DAYS)}.", "NNUpdater": "For example, the amount in days between two dates can be calculated using {@code startDate.periodUntil(endDate, DAYS)}."}
{"Origin": "Computes loglikelihood given class values and estimated probablities.", "Reference": "Computes negative loglikelihood given class values and estimated probabilities.", "NNUpdater": "The comparison is based primarily on the {@link #getEstimatedDuration() estimated duration}."}
{"Origin": "Undecorates this {@link Backoff} to find the {@link Backoff} which is an instance of the specified {@code backoffType}.", "Reference": "Undecorates this {@link Backoff} to find the {@link Backoff} which is an instance of the specified {@code type}.", "NNUpdater": "Maximum backoff delay duration is {@value #MAX_BACKOFF_MILLIS}."}
{"Origin": "Calculate Sum of all elements in a column, and return as a Vector", "Reference": "Count non-zero elements in all columns, and return as a Vector.", "NNUpdater": "Sums elements of a SET sum{i | i in set} = SUM"}
{"Origin": "Produce a line of the CoNLL output.", "Reference": "Write a line of the CoNLL output.", "NNUpdater": "Get prefix of given line"}
{"Origin": "Validates that the given directory belongs to a JDK installation.", "Reference": "Validates that the given directory belongs to a valid JDK installation.", "NNUpdater": "Validate the given ."}
{"Origin": "get path to the lwjgl cache directory", "Reference": "Get path to the lwjgl cache directory.", "NNUpdater": "Prints the specified message to the {@link Platform#DEBUG_STREAM} if {@link Platform#DEBUG} is true."}
{"Origin": "Removes all values in 'fields' that are not specified in 'fieldMask'.", "Reference": "Strips all values in 'fields' that are not specified in 'fieldMask'.", "NNUpdater": "Get the mask factory from which new {@link com.sk89q.worldedit.function.mask.Mask}s can be constructed."}
{"Origin": "Defaults to {@link ExecutorServiceBuilder#defaultQueryExecutorServiceBuilder()}.", "Reference": "ExecutorServiceBuilder#defaultQueryExecutorServiceBuilder()}.", "NNUpdater": "Executor"}
{"Origin": "Set the value of default user (login or username).", "Reference": "Sets the value of default user (login or username).", "NNUpdater": "Log the user using the given params after identifying if the login is a 3pid, a username or a phone number"}
{"Origin": "Download or stream an image (media) from an shared album.", "Reference": "Download or stream an image (media) from an shared album HEAD only returns headers, no data", "NNUpdater": "Creates an {@link AlbumPlaylist} from an {@link Album} and sets the current {@link Query} to the {@link Query} at idx."}
{"Origin": "Returns the session instance.", "Reference": "Returns a session instance.", "NNUpdater": "Returns the request version."}
{"Origin": "Returns active {@code HierarchyMapper}", "Reference": "Returns the {@code HierarchyMapper} used by this data communicator.", "NNUpdater": "The {@code ObjectMapper} parameter must be a {@link XmlMapper} instance."}
{"Origin": "Returns the first {@link Player} that matches the given mediaInfo or format.", "Reference": "Returns the first {@link Player} that matches the given {@link DLNAResource}.", "NNUpdater": "Returns all {@link Player}s that match the given resource."}
{"Origin": "Adds a new CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table.", "Reference": "Adds a new CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table.", "NNUpdater": "Get a field constant from the constant pool."}
{"Origin": "Return the template language type name of callable class, as it should be shown in error messages.", "Reference": "Return the template language type name of the value as it should be shown in error messages, considering {@link", "NNUpdater": "NOTE: When all headers are shown, if exists, the header of this item will be shown as well, unless it's already shown, so it won't be shown twice."}
{"Origin": "Sets all the provided settings including secure settings", "Reference": "Sets all the provided settings.", "NNUpdater": "Sets all the provided settings including secure settings"}
{"Origin": "Convert to HTTP {@code http} or scheme URIs.", "Reference": "Convert to HTTP {@code http} or {@code https} scheme URIs.", "NNUpdater": "Sets the {@link PseudoHeaderName#SCHEME} header."}
{"Origin": "Binds the properties to the target object, and removes the property that was bound from properties.", "Reference": "Binds the properties with the given prefix to the target object, and removes the property that was bound from properties.", "NNUpdater": "Get prop property from this user's properties."}
{"Origin": "Get Reconciled.", "Reference": "Get Abgeglichen.", "NNUpdater": "The function takes a PartitionIterator of the results from the replicas which has already been collated and reconciled, along with the command being executed."}
{"Origin": "Build condition.", "Reference": "Build conditions.", "NNUpdater": "Returns the fully qualified class name of the condition represented by this ."}
{"Origin": "Resolve intervals from an {@link IntervalArgumentCollection} and a read-count file.", "Reference": "Resolve intervals from an {@link IntervalArgumentCollection} and a read-count path.", "NNUpdater": "Checks equality of sequence dictionary and intervals against those contained in an {@link AnnotatedIntervalCollection} represented by {@code inputFile}."}
{"Origin": "Get the collation value extracted from the {@link Query} annotation.", "Reference": "Get the collation value extracted from the {@link Query} or {@link Aggregation} annotation.", "NNUpdater": "Returns the string from which this collation key was created."}
{"Origin": "Tests if the given {@link AnalysisMethod} is from language class.", "Reference": "Tests if the given {@link AnalysisMethod} is from system {@link ClassLoader}.", "NNUpdater": "Creates the {@link ILanguageModelFactory} to be used in tests."}
{"Origin": "Returns a value of UTC milliseconds representing today for the device's current timezone.", "Reference": "Returns the UTC milliseconds representing the first moment of today in local timezone.", "NNUpdater": "Returns an instance of VTimeZone corresponding to the specified timezone id."}
{"Origin": "Returned array may be different size than size of provided array, due to {@link #expand(ActionConfig, Class[]) expanding}.", "Reference": "Returned array may be different size than size of provided array, due to {@link #expand(Class[]) expanding}.", "NNUpdater": "The {@link Map#size() size} of the returned {@link Map} is equal to the count of all members."}
{"Origin": "Returns the specified session.", "Reference": "Returns a session instance.", "NNUpdater": "Returns the request version."}
{"Origin": "The value {@link #MEMBER_ENDPOINTSL_DEFAULT} or system property {@link #MEMBER_ENDPOINTS_PROP_NAME} if set.", "Reference": "The value {@link #MEMBER_ENDPOINTS_DEFAULT} or system property {@link #MEMBER_ENDPOINTS_PROP_NAME} if set.", "NNUpdater": "Operation fails."}
{"Origin": "Converts an entity (POJO) to a DBObject.", "Reference": "Converts an entity (POJO) to a Document.", "NNUpdater": "Converts an object to a datastore Entity with the appropriate Key type."}
{"Origin": "Returns child sub-scorers positioned on the current document", "Reference": "Returns child sub-scorers", "NNUpdater": "All scorers routing to this target Restlet are removed from the list of scorers."}
{"Origin": "Returns the method or constructor containing the new expression represented by this object.", "Reference": "Returns the method or constructor containing the expression represented by this object.", "NNUpdater": "Returns the represented by specified int."}
{"Origin": "Creates a new adapter for an object of class '{@link org.bimserver.models.store.PluginBundleUpdateInformation Plugin Bundle Update Information}'.", "Reference": "Creates a new adapter for an object of class '{@link org.bimserver.models.store.PluginBundle Plugin Bundle}'.", "NNUpdater": "Creates a new adapter for an object of class '{@link org.bimserver.models.store.PluginBundleVersion Plugin Bundle Version}'."}
{"Origin": "If no byte is available because the end of the stream has been reached, the value is returned.", "Reference": "If no byte is available because the end of the stream has been reached, the value {@code -1} is returned.", "NNUpdater": "File id or -1 if end of queue is reached (int)"}
{"Origin": "Copy up to len bytes into the byte array, starting at the given offset.", "Reference": "Copy up to len bytes into buf, starting at the given offset.", "NNUpdater": "Reads bytes bytes out of the pool starting at the given offset with the given length into the given byte array at offset off."}
{"Origin": "Tests that Grindstone mills all cards to graveyard while Painter's Servant is in play", "Reference": "Tests that Grindstone mills all cards to graveyard while Painter's", "NNUpdater": "Returns label painter."}
{"Origin": "Same as above with an additional parameter to allow passing in the threshold checker", "Reference": "Same as above with additional parameters to allow passing in the threshold checker and the max score accumulator.", "NNUpdater": "With this method the configured linkage strategy is used."}
{"Origin": "Creation method for ne calender instances.", "Reference": "Creation method for new calender instances.", "NNUpdater": "Used when moving in the calendar with the keyboard."}
{"Origin": "Returns an immutable list containing four elements.", "Reference": "Returns an unmodifiable list containing four elements.", "NNUpdater": "The returned List is immutable."}
{"Origin": "Writes a FooParams subclass for the given template.", "Reference": "Writes a Foo subclass for the given template.", "NNUpdater": "Assert.instanceOf(Foo.class, foo, ``Foo expected``);"}
{"Origin": "read String object from File", "Reference": "read float from File", "NNUpdater": "readZipFile"}
{"Origin": "Set the playback speed.", "Reference": "Sets the playback speed.", "NNUpdater": "Get the current playback rate as a multiple of normal playback."}
{"Origin": "Use the {@linkplain #addPickup(Pickup, TimeWindow)} instead.", "Reference": "Use the {@linkplain #addPickup(PickupJob, TimeWindow)} instead.", "NNUpdater": "Sets pickup-location id."}
{"Origin": "Opens an IndexReader from the DirectoryProvider (not using the IndexWriter)", "Reference": "Opens an IndexReader from the Directory (not using the IndexWriter)", "NNUpdater": "Returns a read/write IndexReader reading the index in the given Directory."}
{"Origin": "Returns the module with the given name in this layer, or if not in this layer, the {@linkplain #parent parent} layer.", "Reference": "Returns the module with the given name in this layer, or if not in this layer, the {@linkplain #parents parents} layers.", "NNUpdater": "Returns the {@code Module} with the given name in this layer, or if not in this layer, the {@linkplain #parent parent} layer."}
{"Origin": "The size of {@code tag} and non-null {@code value} in the wire format.", "Reference": "The size of {@code tag} and {@code value} in the wire format.", "NNUpdater": "Returns the first {@code ``ETag``} header or {@code null} for none."}
{"Origin": "Load the sheet images, if available.", "Reference": "Load the sheet images, if available and not already done.", "NNUpdater": "Set the sheet name."}
{"Origin": "When requesting 2 transactions from the same Session we expect to receive 2 different objects", "Reference": "When requesting 2 transactions from the same SessionImpl we expect to receive 2 different objects", "NNUpdater": "Trading Strategy - we expect the engine to shutdown."}
{"Origin": "Load the profile definitions from a file.", "Reference": "Extracts profile information from a file or from zookeeper", "NNUpdater": "Load object definitions from JSON stream."}
{"Origin": "Obtains an instance from the specified unique name.", "Reference": "Obtains an instance from the specified name.", "NNUpdater": "Obtains the type from a unique name."}
{"Origin": "transfer any namespaces to the rootTag of the current document update all attribute prefixes for namespaces to match those in the rootTag", "Reference": "transfer any namespaces to the specified root update all attribute prefixes for namespaces to match those in the rootTag", "NNUpdater": "The namespace lookup."}
{"Origin": "Get Natural Account.", "Reference": "Get Basiskonto.", "NNUpdater": "Get Konto."}
{"Origin": "Code snippets for {@link BlobClientBase#setHTTPHeadersWithResponse(BlobHttpHeaders, BlobAccessConditions, Duration,", "Reference": "Code snippets for {@link BlobClientBase#setHttpHeadersWithResponse(BlobHttpHeaders, BlobAccessConditions, Duration,", "NNUpdater": "Code snippet for {@link AppendBlobClient#createWithResponse(BlobHTTPHeaders, Metadata, BlobAccessConditions,"}
{"Origin": "Returns the list of not-yet-succeeded run-always steps whose run-always prerequisites have all succeeded.", "Reference": "Returns the list of not-yet-run run-always steps whose run-always prerequisites have all run.", "NNUpdater": "Possible values include: 'Succeeded', 'Updating', 'Deleting', 'Failed'."}
{"Origin": "Set the non-stroking color in the DeviceRGB color space.", "Reference": "Set the non-stroking color in the DeviceCMYK color space.", "NNUpdater": "Set the non stroking color, specified as RGB or Gray."}
{"Origin": "Obtain the concrete type used by an implementation of an interface that uses a generic type.", "Reference": "Obtains the concrete type used by an implementation of an interface that uses a generic type.", "NNUpdater": "If the type is a generic type or contains generic type arguments (i.e."}
{"Origin": "Provides a {@link GoogleCredential} with delegated admin access for a G Suite domain.", "Reference": "Provides a {@link GoogleCredentialsBundle} with delegated admin access for a G Suite domain.", "NNUpdater": "Access: admin."}
{"Origin": "Tests the ability to register, invoke and auto-unregister {@link CacheUtilizationProvider.CleanupListener} instances.", "Reference": "Tests the ability to register, invoke and auto-unregister {@link ThrottleSourceListener} instances.", "NNUpdater": "Operation fails."}
{"Origin": "Stores the specified location that corresponds to the specified key.", "Reference": "Returns a window state by the specified key.", "NNUpdater": "Returns the key with the specified id."}
{"Origin": "Sets the host address associated with this exception.", "Reference": "Sets the host associated with this exception.", "NNUpdater": "Returns the DatastoreError associated with this exception."}
{"Origin": "If {@code thread} is null, the list is immutable.", "Reference": "If {@code mutability} is null, the list is immutable.", "NNUpdater": "The returned List is immutable."}
{"Origin": "This factory converts the arbitrary date-time object to an instance of {@code OffsetDate}.", "Reference": "This factory converts the arbitrary temporal object to an instance of {@code OffsetDate}.", "NNUpdater": "This factory converts the arbitrary date-time object to an instance of {@code OffsetDateTime}."}
{"Origin": "Checks whether the variable is initialized via a cast expression from a method parameter.", "Reference": "Checks whether the variable is initialized from a method parameter.", "NNUpdater": "A bean attribute expression can either be an expression getting an attribute from a variable in the context, or calling a method from a variable."}
{"Origin": "getExternal back a Map of all the rows in the table, the map is keyed on the tables key", "Reference": "getExternal back a Map of all the rows in the table, the map is keyed on the tables value", "NNUpdater": "getExternal back a Map of all the rows in the table, the map is keyed on the tables key"}
{"Origin": "Sets the given span's last access timestamp.", "Reference": "Sets the given span's last touch timestamp.", "NNUpdater": "Sets the given span's last access timestamp."}
{"Origin": "Sets the location.", "Reference": "Set the location.", "NNUpdater": "Sets this entity's location and applies fall damage calculations."}
{"Origin": "Sets the value of this ComboBox.", "Reference": "Sets the value of this CheckBox.", "NNUpdater": "Sets statistics checkboxes enabled state."}
{"Origin": "An alternative to {@link #setMediaTypes} for use in Java code.", "Reference": "An alternative to {@link #setMediaTypes} for programmatic registrations.", "NNUpdater": "Sets the default {@code Content-Type} to be used for writing."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Same as {@link #isPipelineConfigSet(PiPipeconf, ByteBuffer)} but blocks execution.", "Reference": "Same as {@link #isPipelineConfigSet(long, PiPipeconf, ByteBuffer)} but blocks execution.", "NNUpdater": "Operation fails."}
{"Origin": "Test affinity awareness Sql cache size property with semicolon.", "Reference": "Test Partition Awareness Sql cache size property with semicolon.", "NNUpdater": "Get the current awareness as list of cognitions."}
{"Origin": "Get status of given rotation, if any", "Reference": "Get targets of given rotation, if any", "NNUpdater": "Get the status of the given resource."}
{"Origin": "Execute the ALTER CLASS.", "Reference": "Execute the ALTER CLUSTER.", "NNUpdater": "Execute group."}
{"Origin": "Returns whether the rule in the given RuleContext is in a whitelist.", "Reference": "Returns whether the rule in the given RuleContext *was instantiated* in a whitelist.", "NNUpdater": "Set Regel."}
{"Origin": "Returns the number of sync d l objects where companyId = ?", "Reference": "Returns the number of sync d l objects where repositoryId = ?", "NNUpdater": "Returns the number of feeds where userId = ?"}
{"Origin": "Creates and caches a test {@link BaseEvent} instance for the scope of the current test method.", "Reference": "Creates and caches a test {@link CoreEvent} instance for the scope of the current test method.", "NNUpdater": "Test method."}
{"Origin": "Initializes Fresco with the specified config.", "Reference": "Initializes Fresco with the specified config and native code enabled.", "NNUpdater": "Initializes Fresco with the default Drawee config."}
{"Origin": "Return an interval stream of with n number of ticks and buffer the emissions to avoid back pressure failures (e.g.", "Reference": "Return an interval stream of N number of ticks and buffer the emissions to avoid back pressure failures (e.g.", "NNUpdater": "tick types are: [0] user ticks [1] system ticks [2] other ticks (i/o) [3] idle ticks"}
{"Origin": "Do not call this method with setSize less than 2.", "Reference": "Always returns at least setSize + 2.", "NNUpdater": "Is this Duration shorter than the specified one."}
{"Origin": "Entries are evicted from the dynamic table until the size of the table and the new header field is less than the table's capacity.", "Reference": "Entries are evicted from the dynamic table until the size of the table and the new header field is less than the table's maxHeaderTableSize.", "NNUpdater": "Returns the table with the specified logical table name."}
{"Origin": "Format : interface:version:group", "Reference": "Format : interface:version", "NNUpdater": "The format is ``{interface}:[version]:[group]``"}
{"Origin": "{@codesnippet com.azure.storage.queue.QueueAsyncClient.setAccessPolicyWithResponse#List}", "Reference": "{@codesnippet com.azure.storage.queue.QueueAsyncClient.setAccessPolicyWithResponse#Iterable}", "NNUpdater": "{@codesnippet com.azure.storage.queue.queueClient.setAccessPolicyWithResponse#List-Duration-Context}"}
{"Origin": "In case of failure the {@link Flux} will error.", "Reference": "In case of failure the {@link CosmosContinuablePagedFlux} will error.", "NNUpdater": "Get the id of the {@link CosmosContainer}"}
{"Origin": "clear saved activity", "Reference": "clear saved activities", "NNUpdater": "Set Kostenstelle."}
{"Origin": "It means that fields bound after this method call won't be set read-only.", "Reference": "It means that bindings added after this method call won't be set read-only.", "NNUpdater": "If the property is not yet bound to a field, null is returned."}
{"Origin": "Increment the count of triggered lazy state updates (by one).", "Reference": "Increment the count of triggered synchronous state updates in Litho sections (by one).", "NNUpdater": "Increment source count by 1."}
{"Origin": "Relevant are the frameworkUrl, the frameworkName and the Karaf version, since all of those parameters are relevant to decide which wrapper configurations to use.", "Reference": "Relevant are the frameworkURL, the frameworkName and the Karaf version since all of those params are relevant to decide which wrapper configurations to use.", "NNUpdater": "Detect version of the driver"}
{"Origin": "Sets the {@link SharedKeyCredential} used to authorize requests sent to the service.", "Reference": "Sets the {@link StorageSharedKeyCredential} used to authorize requests sent to the service.", "NNUpdater": "Sets the SAS token used to authorize requests sent to the service"}
{"Origin": "Gets the price that was traded, in decimal form.", "Reference": "Gets the price that was traded, together with the trade date, optional.", "NNUpdater": "Gets the future that was traded."}
{"Origin": "Returns the (biased) skew of all the values within a {@link Dataset}", "Reference": "Returns the (biased) estimate of the sample variance of the values within a {@link Dataset}.", "NNUpdater": "Returns a read-only Iterable on the values of the Dataset."}
{"Origin": "Generates a code sample for using {@link FileAsyncClient#startCopyWithResponse(String, Map)}", "Reference": "Generates a code sample for using {@link FileAsyncClient#beginCopy(String, Map, Duration)}", "NNUpdater": "Generates a code sample for using {@link FileClient#startCopyWithResponse(String, Map, Duration, Context)}"}
{"Origin": "Use the supplied truststore for HTTPS requests.", "Reference": "Use the supplied keystore for HTTPS requests.", "NNUpdater": "Set the _trustStoreInputStream."}
{"Origin": "Converts this sensitivity to a monetary value, multiplying by the specified factor.", "Reference": "Returns an instance converted this sensitivity to a monetary value, multiplying by the specified factor.", "NNUpdater": "Calculates the zero rate point sensitivity at the specified date."}
{"Origin": "- (optional bool) when true then additional detailed metrics will be collected.", "Reference": "- (optional bool, default false) when true then additional detailed metrics will be collected.", "NNUpdater": "Required."}
{"Origin": "Sets the given Eclipse target monitor.", "Reference": "Delegates the event to the current Eclipse target monitor.", "NNUpdater": "This method sets the value of the database column m_monitor_item.createdTime"}
{"Origin": "Set the fileContentMD5 property: Sets the file's MD5 hash.", "Reference": "Set the contentMD5 property: Sets the file's MD5 hash.", "NNUpdater": "Returns an MD5 hash."}
{"Origin": "Look for a bar line vertically aligned with the ending side.", "Reference": "Look for a StaffBarline vertically aligned with the ending side.", "NNUpdater": "Report the ending barline."}
{"Origin": "Set the bases of tumorSeqAllele1 in the {@link GencodeFuncotation}.", "Reference": "Set the Version {@link String} in the {@link GencodeFuncotation}.", "NNUpdater": "These extra bases will be returned by calls to {@link #getBases} and {@link #iterator} in addition to the bases spanning our actual interval."}
{"Origin": "Try to postpone the {@code Math.exp} call to preserve numeric range!", "Reference": "Try to postpone the {@code FastMath.exp} call to preserve numeric range!", "NNUpdater": "Sets numeric range."}
{"Origin": "Deletes the entire row of the Sweepable Timestamps table.", "Reference": "Deletes complete rows of the Sweepable Timestamps table.", "NNUpdater": "Removes the entire row from the default table for all column families"}
{"Origin": "Attaches an existing database.", "Reference": "Attaches an udb database to Alluxio catalog.", "NNUpdater": "Attaches a target Filter."}
{"Origin": "Fetches the packlet info stored in the memory for mpacks/{mpack_id} call.", "Reference": "Fetches the mpack info stored in the memory for mpacks/{mpack_id} call.", "NNUpdater": "Change the state from IN_MEMORY to IN_MEMORY_INVALID."}
{"Origin": "Iterate over registered {@link HandlerMethodArgumentResolver}s and invoke the one that supports it.", "Reference": "Iterate over registered {@link HandlerMethodArgumentResolver HandlerMethodArgumentResolvers} and invoke the one that supports it.", "NNUpdater": "Add the given {@link HandlerMethodArgumentResolver}."}
{"Origin": "Get Maximum Level.", "Reference": "Get Maximalmenge.", "NNUpdater": "Get Ebene."}
{"Origin": "BuiltinFunction} instances, calling {@link BuiltinFunction#configure(SkylarkSignature)}.", "Reference": "BaseFunction} instances, calling {@link BaseFunction#configure(SkylarkSignature)}.", "NNUpdater": "Attempts to locate a name for an (assumed) builtin or global function."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Is a value with this type less than the length of the array?", "Reference": "Is a value with this type less than the length of the sequence?", "NNUpdater": "TransferInput, CFStore)} for details."}
{"Origin": "a class type an interface type an array type a parameterized type a type variable the null type", "Reference": "a class type an interface type an array type a parameterized type a type variable the null type a wildcard type", "NNUpdater": "Type: Complex"}
{"Origin": "Creates an update that removes from the array value of the field with the given name all elements that match the given filter.", "Reference": "Creates an update that removes from an array all elements that match the given filter.", "NNUpdater": "Returns all the program elements that match the filter starting from the given rootElement."}
{"Origin": "Sets a spannable text with any highlight color into the provided TextView.", "Reference": "Sets a spannable text with any highlight color for each word provided by the constraint text into the provided TextView.", "NNUpdater": "Sets the name."}
{"Origin": "Gets the value of the 'publicPort' field", "Reference": "Gets the value of the 'publicPorts' field", "NNUpdater": "Gets the value of the 'paramName' field."}
{"Origin": "Indicate to associated {@link ExportGeneration}s to become masters for the given partition id", "Reference": "Indicate to associated {@link ExportGeneration}s to become leaders for the given partition id", "NNUpdater": "Shutdown the BlobStore with given {@link PartitionId} {@code id}."}
{"Origin": "Get an implementation of {@link JobSpecificationService} if one hasn't already been defined.", "Reference": "Get an implementation of {@link JobResolverService} if one hasn't already been defined.", "NNUpdater": "Provide an argument parser bean."}
{"Origin": "Get Account Element.", "Reference": "Get Kontenart.", "NNUpdater": "Get Konto."}
{"Origin": "Returns a new Lint that has the given LintCategory suppressed.", "Reference": "Returns a new Lint that has the given LintCategorys suppressed.", "NNUpdater": "Test the product the plugin is currently executed in."}
{"Origin": "Checks that screen was closed with the given {@code result}.", "Reference": "Checks that screen was closed with the given {@code outcome}.", "NNUpdater": "Throws AlreadyClosedSqlException or QueryCanceledSqlException if this"}
{"Origin": "see URL html", "Reference": "see URL", "NNUpdater": "URL"}
{"Origin": "Converts from {@link CpuProfiler.CpuProfilerConfiguration} to {@link CpuProfilerConfig}", "Reference": "Converts from {@link Cpu.CpuTraceConfiguration.UserOptions} to {@link CpuProfilerConfig}", "NNUpdater": "Receives a {@link Common.Device.Builder} and converts it into a {@link Common.Device}."}
{"Origin": "Register a method observer with the current context (provided).", "Reference": "Registers given method with provided context and event.", "NNUpdater": "Set the {@link ObserverContext} in current {@link ObservableContext}."}
{"Origin": "Sets start margin of text view depending on icon type.", "Reference": "Sets start margin of text views.", "NNUpdater": "Set the padding of the text within the text container."}
{"Origin": "Queries this ContactSourceService for SourceContacts which match a specific query String.", "Reference": "Creates query that searches for SourceContacts which match a specific query String.", "NNUpdater": "Queries this ContactSourceService for SourceContacts which match a specific query Pattern."}
{"Origin": "Returns the Java type corresponding to the given type descriptor.", "Reference": "Returns the {@link Type} corresponding to the given type descriptor.", "NNUpdater": "Returns the {@link Type} corresponding to the given type descriptor."}
{"Origin": "Sets a boolean attribute on the given element.", "Reference": "Sets a boolean property on the given element.", "NNUpdater": "Sets the method parameter name."}
{"Origin": "Delete ticket granting tickets int.", "Reference": "Delete ticket granting tickets.", "NNUpdater": "Put ticket granting ticket in request and flow scopes."}
{"Origin": "Tests the {@link FileSystemMaster#delete(AlluxioURI, DeleteOptions)} method for a directory with un-synced persistent entries without a sync check.", "Reference": "Tests the {@link FileSystemMaster#delete(AlluxioURI, DeleteContext)} method for a directory with un-synced persistent entries without a sync check.", "NNUpdater": "Tests the {@link FileSystemMaster#delete(AlluxioURI, DeleteOptions)} method for a directory."}
{"Origin": "T / 100).", "Reference": "T / 10).", "NNUpdater": "If it is not present then the range 0..1 will be returned."}
{"Origin": "Makes a unique key for the paired reads.", "Reference": "Makes a hash key for the paired reads.", "NNUpdater": "Makes a unique key for the pair."}
{"Origin": "To provide custom values for any of the parameters, you must modify the group after creating it using", "Reference": "To provide custom values for any of the parameters, you must modify the group after creating it using ModifyDBClusterParameterGroup.", "NNUpdater": "Set the hash and range key attributes of the item."}
{"Origin": "Parses the 'ResourceInfo' annotation and builds swagger operation.", "Reference": "Parses the 'ResourceInfo' annotation and builds openApi operation.", "NNUpdater": "Builds all paths of the Swagger model"}
{"Origin": "Get the object being interacted with.", "Reference": "Get the object being interacted.", "NNUpdater": "Get the object being interacted with."}
{"Origin": "Set to true to use the runtimetimer thread for the work, or false to use the current thread.", "Reference": "Set to true to use the runtime timer thread for the work, or false to use the current thread.", "NNUpdater": "Binds value for the given to the current thread."}
{"Origin": "This is necessary because this class only keeps {@link WeakReference}s to the {@link FCPPluginClient} objects.", "Reference": "This is necessary because this class only keeps {@link WeakReference}s to the {@link FCPPluginConnection} objects.", "NNUpdater": "The client message handler is available as the passed {@link FredPluginFCPClient} client."}
{"Origin": "Send full topology to GMC.", "Reference": "Send full topology to Management Console.", "NNUpdater": "Set the base path for the SEP"}
{"Origin": "Returnes a fully expanded and partially evaluated CallNode to be used as a root of a callTree.", "Reference": "Returns a fully expanded and partially evaluated CallNode to be used as a root of a callTree.", "NNUpdater": "Return the root nodes of the tree."}
{"Origin": "Objects of the following type(s) are allowed in the list {@link Element }", "Reference": "Objects of the following type(s) are allowed in the list {@link Object }", "NNUpdater": "Objects of the following type(s) are allowed in the list {@link Link }"}
{"Origin": "This method also sets the {@link #setCreatedSecondaryUnit()}.", "Reference": "This method also sets the {@link #setSecondaryUnitIdOnLoad(long)}.", "NNUpdater": "Operation fails."}
{"Origin": "Verifies that no proxied assertion methods have failed.", "Reference": "Verifies that no soft assertions have failed.", "NNUpdater": "Verifies that no soft assertions have failed."}
{"Origin": "Decorates all {@link Service}s with the specified {@code decorator}.", "Reference": "Decorates all {@link HttpService}s with the specified {@code decorator}.", "NNUpdater": "Invokes the service method with arguments."}
{"Origin": "Gets the list of registrar:set-of-threat-match pairings from the file in GCS.", "Reference": "Gets the entire set of registrar:set-of-threat-match pairings from the most recent report file in GCS.", "NNUpdater": "Identifies entities in the contents of the object at the given GCS {@code path}."}
{"Origin": "Get UPC/EAN.", "Reference": "Get CU-UPC.", "NNUpdater": "Equivalent to uriInfo.getPathParameters().getFirst(name)"}
{"Origin": "Returns the class name remote service.", "Reference": "Returns the journal article remote service.", "NNUpdater": "Returns the document library file entry remote service."}
{"Origin": "Get an iterator to the vector contents.", "Reference": "Get an iterator to the double[] contents.", "NNUpdater": "Adds the contents of a value."}
{"Origin": "Creates a {@code For}-comprehension of 6 Iterables.", "Reference": "Creates a {@code For}-comprehension of 6 Options.", "NNUpdater": "{@code Stream} equivalent: {@link Stream#flatMap} (using a function that produces streams, not iterables)."}
{"Origin": "If the variable was set, a configuration {@link ConfigurationEvent event} will be passed to all registered listeners.", "Reference": "If the variable was set, a CONFIGURATION {@link ConfigurationEvent event} will be passed to all registered listeners.", "NNUpdater": "Is responsible for calling {@link EventSource#onEvent(InboundEvent)} and all registered {@link EventListener} instances."}
{"Origin": "Any sensitivities of the same type will be combined using {@link CurrencyParameterSensitivities#combinedWith(CurrencyParameterSensitivities)}.", "Reference": "Any sensitivities of the same type will be combined as though using {@link CurrencyParameterSensitivities#mergedWith(CurrencyParameterSensitivities)}.", "NNUpdater": "This computes the {@link CurrencyParameterSensitivities} associated with the {@link PointSensitivities}."}
{"Origin": "Gets the ID for the given byte value.", "Reference": "Gets the specified ID.", "NNUpdater": "Gets the classifierId."}
{"Origin": "Gets the type against which the expression is tested.", "Reference": "Gets the wrapped type node.", "NNUpdater": "The instruction that produces the object tested against null."}
{"Origin": "Run an MRTask Job to add up sums in @_sums", "Reference": "Run an MRTask Job to count non-zero elements per column.", "NNUpdater": "Returns the column means for a matrix."}
{"Origin": "Detects whether a java agent is attached.", "Reference": "Detects whether a Java agent is specified in the VM arguments.", "NNUpdater": "Update the given agent."}
{"Origin": "Returns the inetAddress from where the authentication attempt occurs.", "Reference": "Returns the host name or IP string from where the authentication attempt occurs.", "NNUpdater": "Returns all local {@link InetAddress} except the loopback address."}
{"Origin": "Creates an audit entry for the 'service version updated' event.", "Reference": "Creates an audit entry for the 'API version updated' event.", "NNUpdater": "Adds an event."}
{"Origin": "Applications should use the {@code with(WithAdjuster)} method on the date-time object to make the adjustment passing this as the argument.", "Reference": "Applications should use the {@code with(TemporalAdjuster)} method on the date-time object to make the adjustment passing this as the argument.", "NNUpdater": "The adjustment is equivalent to using {@link DateTime#with(DateTimeField, long)} passing {@code YEAR} as the field."}
{"Origin": "Stores XCAP_PASSWORD property.", "Reference": "Stores OPT_CLIST_PASSWORD property.", "NNUpdater": "Sets the contact list password."}
{"Origin": "Accepts only URLs with 'file' protocol.", "Reference": "Accepts only {@link URL}s with 'file' protocol.", "NNUpdater": "Converts input files to file URLs"}
{"Origin": "Construct a trident data source.", "Reference": "Construct a streams data source.", "NNUpdater": "January is 1."}
{"Origin": "Test of setParams method, of class NewAgentConnector.", "Reference": "Test of addMetric method, of class NewAgentConnector.", "NNUpdater": "Test of getDataFile method, of class Settings."}
{"Origin": "Otherwise if the object is from a {@code java} package, returns the result of {@code toString}.", "Reference": "If the object is from a {@code java} package, returns the result of {@code toString}.", "NNUpdater": "5) Otherwise, the result is {@code null}."}
{"Origin": "If the caller's module is this module then update this module to open the given package to the given module.", "Reference": "If this module has opened a package to at least the caller module then update this module to open the package to the given module.", "NNUpdater": "If the caller's module is this module then update this module to read the given module."}
{"Origin": "Obtains an instance from the specified unique name.", "Reference": "Obtains an instance from the specified name.", "NNUpdater": "Obtains the type from a unique name."}
{"Origin": "Code snippets for {@link ConfigurationAsyncClient#addSetting(String, String, String)}", "Reference": "Code snippets for {@link ConfigurationAsyncClient#addConfigurationSetting(String, String, String)}", "NNUpdater": "Code snippets for {@link ConfigurationAsyncClient#addSetting(String, String, String)}"}
{"Origin": "Note: returned indent is not set to be to it's direct parent block", "Reference": "Note: returned indent is not set to be {@code 'relative'} to it's direct parent block", "NNUpdater": "Note: {@code -1} is returned if the number is unknown, so the returned value has to be checked."}
{"Origin": "See Immutable Set Static Factory Methods for details.", "Reference": "See Unmodifiable Sets for details.", "NNUpdater": "VerificationTimes supports multiple static factory methods:"}
{"Origin": "Returns default capabilities of the classifier.", "Reference": "Returns default capabilities of the classifier tree.", "NNUpdater": "returns the display string of the capability"}
{"Origin": "Gets the value of the value property.", "Reference": "Gets the value of the ddl property.", "NNUpdater": "Gets the value of the links property."}
{"Origin": "Uses regular and super source compilation unit type name indexes to determine whether a compilation unit of any kind is present that matches the given type name.", "Reference": "Uses regular and super source compilation unit type source name indexes to determine whether a compilation unit of any kind is present that matches the given type source name.", "NNUpdater": "For each top-level class in the compilation matching the given predicate, determine the path prefix of classes corresponding to that compilation unit."}
{"Origin": "This version avoids any possibility of overflow.", "Reference": "This version avoids certain types of overflow.", "NNUpdater": "This method returns an {@link Overflow} instance with the result of the subtraction and any overflow in days."}
{"Origin": "Code snippets for {@link BlobAsyncClientBase#startCopyFromURL(String)}", "Reference": "Code snippets for {@link BlobAsyncClientBase#beginCopy(String, Duration)}", "NNUpdater": "Code snippets for {@link BlobAsyncClient#startCopyFromURLWithResponse(URL, Map, AccessTier,"}
{"Origin": "Get the Date that this Token was Created", "Reference": "Get the ZonedDateTime that this Token was Created", "NNUpdater": "The range_date_created."}
{"Origin": "Scheduler: {@code onErrorResumeNext} does not operate by default on a particular {@link Scheduler}.", "Reference": "Scheduler: {@code onErrorResumeWith} does not operate by default on a particular {@link Scheduler}.", "NNUpdater": "Scheduler: {@code onErrorReturnItem} does not operate by default on a particular {@link Scheduler}."}
{"Origin": "Returns an immutable list containing one element.", "Reference": "Returns an unmodifiable list containing one element.", "NNUpdater": "The returned List is immutable."}
{"Origin": "See {@link #recordProgramRunning(ProgramId, String, long, String, byte[])}", "Reference": "See {@link #recordProgramRunning(ProgramRunId, long, String, byte[])}", "NNUpdater": "Also {@see #getConfig(String, String)}"}
{"Origin": "Gets the {@link EncryptionScope} used to encrypt this blob's content on the server.", "Reference": "Gets the {@code encryption scope} used to encrypt this blob's content on the server.", "NNUpdater": "Encrypt blob content using perBlobKey if not null 2."}
{"Origin": "'s Slurp Crawler * @param value the value to set.", "Reference": "* @param value the value to set.", "NNUpdater": "Get the param value."}
{"Origin": "Gets the value of the 'InMemory' field", "Reference": "Gets the value of the 'inMemory' field.", "NNUpdater": "Gets the value of the 'paramName' field."}
{"Origin": "Construct a new instance of an {@code Execution} that finished with the provided {@link TestExecutionResult}.", "Reference": "Create a new instance of an {@code Execution} that finished with the provided {@link TestExecutionResult}.", "NNUpdater": "Returns the serialized {@link ExecutionConfig}."}
{"Origin": "Gets the prefix from a full filename, such as or .", "Reference": "Gets the prefix from a full fileName, such as or .", "NNUpdater": "The prefix includes the first slash in the full filename where applicable."}
{"Origin": "For localizing the error message, use {@link #setRequired(SerializableFunction)}.", "Reference": "For localizing the error message, use {@link #asRequired(ErrorMessageProvider)}.", "NNUpdater": "Message, (2.)"}
{"Origin": "Method getLocator retrieves an instance of a SourceLocator object that specifies where an error occured.", "Reference": "Method getLocator retrieves an instance of a SourceLocator object that specifies where an error occurred.", "NNUpdater": "Get Lagerort."}
{"Origin": "append {@link ProgramRunIdFields} and flush to file.", "Reference": "append {@link ProgramRunInfo} and flush to file.", "NNUpdater": "Initialize the upgrade framework, if necessary."}
{"Origin": "Setter for {@link #allowMethods}", "Reference": "Setter for {@link #allowedHeaders}", "NNUpdater": "Set the HTTP methods to allow, e.g."}
{"Origin": "Nullifies readPosition and listeners.", "Reference": "Nullifies readLocator and listeners.", "NNUpdater": "Get default work directory."}
{"Origin": "Convert to primitive types, returning default value if text is null.", "Reference": "Convert to character, returning default value if text is inconvertible.", "NNUpdater": "Convert all types, both reference and primitive, to {@code Object}."}
{"Origin": "If the original qualifier has no array length offsets, then UNKNOWN is returned.", "Reference": "If the original qualifier has no sequence length offsets, then UNKNOWN is returned.", "NNUpdater": "(If there are no non-null elements in the array, the original target is returned.)"}
{"Origin": "Must be called in inside a table lock", "Reference": "Must be called from inside a table lock", "NNUpdater": "Must be called from inside a table lock"}
{"Origin": "Obtains an instance from the specified unique name.", "Reference": "Obtains an instance from the specified name.", "NNUpdater": "Obtains the type from a unique name."}
{"Origin": "Default is", "Reference": "Default is second", "NNUpdater": "Default value is 4."}
{"Origin": "Restore a LockableRandomAccessThing from a DataInputStream.", "Reference": "Restore a LockableRandomAccessBuffer from a DataInputStream.", "NNUpdater": "Copies an input stream to a random access file."}
{"Origin": "If disabled the map is only shown once.", "Reference": "If disabled the map is only shown once for the vertical direction.", "NNUpdater": "Enabled --"}
{"Origin": "Reads a tag, an arrau of four uint8s used to identify a script, language system, feature, or baseline.", "Reference": "Reads a tag, an array of four uint8s used to identify a script, language system, feature, or baseline.", "NNUpdater": "Returns the script for a given Locale."}
{"Origin": "Deletes the entire row of the Sweepable Timestamps table.", "Reference": "Deletes complete rows of the Sweepable Timestamps table.", "NNUpdater": "Removes the entire row from the default table for all column families"}
{"Origin": "Sets the single character used for escaping the quote character inside an already escaped value.", "Reference": "Sets the character used for escaping the quote character inside an already escaped value.", "NNUpdater": "Is the character specified contained in this range."}
{"Origin": "Then the length of Longest Increasing Subsequence can increase by 1.", "Reference": "Increment the length of LIS by 1.", "NNUpdater": "Returns the command option."}
{"Origin": "When an interceptor throws an unexpected exception, asynchronous callers are left hanging.", "Reference": "When an interceptor throws an unexpected exception, asynchronous calls are canceled.", "NNUpdater": "If an UnexpectedExceptionInformation is not found for the status code the default UnexpectedExceptionInformation will be returned."}
{"Origin": "Create the default request used when asking for the upgrade plan on a namespace.", "Reference": "Create a request used when asking for the upgrade plan on a namespace.", "NNUpdater": "The default behavior of this method is to return {@link HttpServletRequest#upgrade(Class)} on the wrapped request object."}
{"Origin": "Creates {@link MinimalHttpAsyncClient} instance that provides essential HTTP/2 transport only.", "Reference": "Creates {@link MinimalHttp2AsyncClient} instance optimized for HTTP/2 multiplexing message transport without advanced HTTP protocol functionality.", "NNUpdater": "Creates {@link CloseableHttpAsyncClient} instance that provides essential HTTP/1.1 and HTTP/2 message transport only."}
{"Origin": "Returns the time when the entry will expire based on the supplied expiration function.", "Reference": "Returns the time when the entry will expire.", "NNUpdater": "Sets the access expiration time."}
{"Origin": "This is done as element returned by the {@link #getDataSeries()}} is expected to be the thread root {@link CaptureNode}.", "Reference": "This is done as element returned by the {@link #getDataSeries()}} is expected to contain the thread root {@link CaptureNode}.", "NNUpdater": "Operation fails."}
{"Origin": "Converts W into a pinhole camera model by inverting W and extracting the non-zero elements", "Reference": "Converts W into a pinhole camera model by finding the cholesky decomposition", "NNUpdater": "Set number of valid indexes"}
{"Origin": "[A5] If the new lookup class is not within the same package member as the old one, private members will not be accessible.", "Reference": "[A7] If the new lookup class is not within the same package member as the old one, private members will not be accessible.", "NNUpdater": "The proxy class is not accessible to any module."}
{"Origin": "Returns the number of output frames that can be read with {@link #getOutput(ShortBuffer)}.", "Reference": "Returns the size of output that can be read with {@link #getOutput(ShortBuffer)}, in bytes.", "NNUpdater": "Returns the number of output frames that can be read with {@link #getOutput(ShortBuffer)}."}
{"Origin": "required parameter format: date: dd/MM/yyyy hour: hh min:mm", "Reference": "required parameter format: date: dd/MM/yyyy hour: H min:m", "NNUpdater": "The output will be in the format 'yyyy-MM-dd (Coptic)'."}
{"Origin": "An alternative to {@link #setMediaTypes} for use in Java code.", "Reference": "An alternative to {@link #setMediaTypes} for programmatic registrations.", "NNUpdater": "Sets the default {@code Content-Type} to be used for writing."}
{"Origin": "Tuple (a simple data structure), this new array becoming the array under test.", "Reference": "Tuple (a simple data structure), this new list becoming the object under test.", "NNUpdater": "Array - the array size"}
{"Origin": "Links a new concept to this shard.", "Reference": "Links a new concept's vertex to this shard.", "NNUpdater": "Set Payroll Concept."}
{"Origin": "Tests that the writable partitions returned by the {@link HelixClusterManager} is the same as the writable partitions in the cluster.", "Reference": "Get the writable partitions returned by the {@link HelixClusterManager} as well as those in helix cluster.", "NNUpdater": "Create a Helix cluster with the cluster name specified using {@link GobblinYarnConfigurationKeys#HELIX_CLUSTER_NAME_KEY} if it does not exist."}
{"Origin": "Get image width setting from the image width site setting string.", "Reference": "Get image max size setting from the image max size setting string.", "NNUpdater": "Sets the width of the object."}
{"Origin": "Also, run verify commands in case some collection was using ``$LATEST`` version of this package and got auto-updated.", "Reference": "Also, run verify commands in case some collection was using {@link PackagePluginHolder#LATEST} version of this package and got auto-updated.", "NNUpdater": "inOrder.verify( mock, calls( 2 )).someMethod( ``some arg`` );"}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Returns the minimum session timeout.", "Reference": "Returns the session timeout.", "NNUpdater": "Returns the minimum session timeout."}
{"Origin": "Helper method to lookup a Dao if it has already been associated with the class.", "Reference": "Helper method to lookup a DAO if it has already been associated with the class.", "NNUpdater": "NOTE: You should maybe use the {@link DatabaseTable#daoClass()} and have the DaoManager construct the DAO if possible."}
{"Origin": "Code installed by Truffle is low grade if it was produced in the low grade compilation mode.", "Reference": "Returns true if this code was produced in the first tier compilation.", "NNUpdater": "Format a grade, e.g."}
{"Origin": "Finds all {@link UnderFileSystemFactory} extensions from the extensions directory and caches.", "Reference": "Finds all {@link UnderFileSystemFactory} from the extensions directory and caches.", "NNUpdater": "Delegate to all configured MediaTypeFileExtensionResolver instances and aggregate the list of all file extensions found."}
{"Origin": "If we have a JAAS entry use GSSAPI otherwise PLAIN.", "Reference": "If we have a username and password use PLAIN otherwise GSSAPI", "NNUpdater": "If we have a JAAS entry use GSSAPI otherwise PLAIN."}
{"Origin": "Sets the class name persistence.", "Reference": "Sets the journal article persistence.", "NNUpdater": "Sets the document library file entry persistence."}
{"Origin": "Create an instance of {@link Response.Fixed.Category }", "Reference": "Create an instance of {@link Response.Fixed.Item }", "NNUpdater": "Create an instance of {@link ConfigurationCategory }"}
{"Origin": "Waits during {@code timeout} until text extracted from specified {@code webElement} by {@link", "Reference": "Waits during {@code timeout} until text extracted from specified {@code element} by {@link", "NNUpdater": "WebElement#getText()} equals to provided {@code expectedText}."}
{"Origin": "No validation is performed on the date-time other than ensuring it is not null.", "Reference": "No validation is performed other than ensuring it is not null.", "NNUpdater": "No validation is performed on the date-time other than ensuring it is not null."}
{"Origin": "Returns true if the given char sequence is a legal Java identifier, otherwise false.", "Reference": "Returns true if the given string is a legal Java identifier, otherwise false.", "NNUpdater": "Returns true if the given CharSequence is null or empty."}
{"Origin": "Converts this template into an {@link ArgumentTypeValidator}.", "Reference": "Converts this template into an {@link ArgumentTypeStrategy}.", "NNUpdater": "Create an empty {@link ValidationOptions}."}
{"Origin": "checn to see if a given node element at a given depth can be rendered", "Reference": "check to see if a given node element at a given depth can be rendered", "NNUpdater": "Can the given event be rendered by this view holder?"}
{"Origin": "Create a {@link PooledConnectionImpl.PStmtKey} for the given arguments.", "Reference": "Creates a {@link PooledConnectionImpl.PStmtKey} for the given arguments.", "NNUpdater": "Return the pooled connection to its pool."}
{"Origin": "Is grand type supported service.", "Reference": "Is grant type supported service.", "NNUpdater": "Checks if the element has a grand parent."}
{"Origin": "If intervals are not specified in the {@link IntervalArgumentCollection}, they are taken from the read-count file.", "Reference": "If intervals are not specified in the {@link IntervalArgumentCollection}, they are taken from the read-count path.", "NNUpdater": "Test that intervals are sorted according to {@link #SEQUENCE_DICTIONARY} and adjacent intervals are not merged."}
{"Origin": "Assign the (right) barline that ends this measure", "Reference": "Assign the (right) PartBarline that ends this measure", "NNUpdater": "Assign origin for score display"}
{"Origin": "Assert that the given object is lenient equals by ignoring null fields value on other object.", "Reference": "Assert that the given object is lenient equals by ignoring null fields value on other object (including inherited fields).", "NNUpdater": "Assert that the given object is lenient equals to other object by comparing given fields value only."}
{"Origin": "Creates a cluster using {@link #repoVersion2110} with ZooKeeper installed.", "Reference": "Creates a cluster using {@link #mpack211} with ZooKeeper installed.", "NNUpdater": "Create a {@link ModuleDeploymentStatus} from a ZooKeeper path and data."}
{"Origin": "Returns the value of the specified option for this configuration or null if the option isn't recognized.", "Reference": "Returns the value of the specified native option for this configuration or null if the option isn't recognized.", "NNUpdater": "Returns the {@link OptionsBase} class the defines the given option, null if the option isn't recognized."}
{"Origin": "Integers 0 ... n.", "Reference": "Integers 0 ... n - 1.", "NNUpdater": "Creates a sequence with the specified items."}
{"Origin": "Report, in the SampleSheet whose ID is provided, all samples assigned the desired shape.", "Reference": "Report, in the SampleSheet whose name is provided, all samples assigned the desired shape.", "NNUpdater": "Report the id of the index/sheet if any"}
{"Origin": "Opens a {@link TitanGraph} database.", "Reference": "Opens a {@link JanusGraph} database.", "NNUpdater": "Delegates to {@link GraphDatabase}"}
{"Origin": "{@codesnippet com.azure.keyvault.keys.keyclient.restoreKey#byte}", "Reference": "{@codesnippet com.azure.keyvault.keys.keyclient.restoreKeyBackup#byte}", "NNUpdater": "{@codesnippet com.azure.keyvault.keys.keyclient.getKey#KeyProperties}"}
{"Origin": "Waits until text extracted from specified {@code webElement} by {@link", "Reference": "Waits until text extracted from specified {@code element} by {@link", "NNUpdater": "Waits visibility of {@link WebElement} with provided {@code elementLocator} and gets text."}
{"Origin": "Equality comparison is performed with this object's {@link #sameKeys} method.", "Reference": "Equality comparison is performed with this object's {@link #equal} method.", "NNUpdater": "A type-safe equivalence comparison"}
{"Origin": "Write binary data to a file and reference the file on disk at the given file node", "Reference": "Write binary data from byte[] to a file and reference the file on disk at the given file node", "NNUpdater": "Create a new file node from the given byte array"}
{"Origin": "Build ghost image based on provided interline value.", "Reference": "Update ghost image based on provided interline value.", "NNUpdater": "Build a new cluster based on the provided initializer."}
{"Origin": "This may be due to an error being propagated from the Flow or fue to a failure sending a success response.", "Reference": "This may be due to an error being propagated from the Flow or due to a failure sending a success response.", "NNUpdater": "The request may also expire due to a timeout or network error."}
{"Origin": "Prints out the created certificate issuer details when a response has been received.", "Reference": "Prints out the updated certificate operation details when a response has been received.", "NNUpdater": "Prints out the returned certificate issuer details when a response has been received."}
{"Origin": "LdapConnection.", "Reference": "LdapNetworkConnection.", "NNUpdater": "This method submits the {@code bind} request over the ldap connection."}
{"Origin": "Set the fileContentEncoding property: Specifies which content encodings have been applied to the file.", "Reference": "Set the contentEncoding property: Specifies which content encodings have been applied to the file.", "NNUpdater": "Reads the contents of a file."}
{"Origin": "Initialise the {@link BundleContext}, which is used for registration and unregistration of OSGi services.", "Reference": "Initialize the {@link BundleContext}, which is used for registration and unregistration of OSGi services.", "NNUpdater": "Initialise the {@link BundleContext}, which is used for registration and unregistration of OSGi services."}
{"Origin": "Note that that MySql and SQL Server instead use alterColumnBaseAttributes()", "Reference": "Note that that MySql, SQL Server, and HANA instead use alterColumnBaseAttributes()", "NNUpdater": "Builds page SQL using keyword."}
{"Origin": "By default, it calls back the registered listener provided by {@link #getListener()}.", "Reference": "By default, it calls back the registered listener provided by {@link #getSelectionListener()}.", "NNUpdater": "Overload of {@link #connect(String, ServerStateListener, ConnectionFailListener)} with only one listener."}
{"Origin": "Override to allow subclasses of Skin to be loaded.", "Reference": "Override to allow subclasses of Skin to be loaded or the skin instance to be configured.", "NNUpdater": "Returns whether a beatmap skin image is currently loaded."}
{"Origin": "Tests resilency when egress device is down.", "Reference": "Tests resiliency when egress device is down.", "NNUpdater": "Tests resiliency when egress device is down."}
{"Origin": "Binds the HTTP context.", "Reference": "Caches an external property.", "NNUpdater": "Binds a naming context to a class loader."}
{"Origin": "Removes the edges beyond lifetime and neurons without emanating edges.", "Reference": "Removes staled neurons and the edges beyond lifetime.", "NNUpdater": "Creates a graph from a DataSet of edges."}
{"Origin": "parses tags while the span is in scope (for logging for example)", "Reference": "Parses socket information and tags while the span is in scope (for logging for example)", "NNUpdater": "Adds logging tags to the provided {@link Span} and closes it when the log is finished."}
{"Origin": "Returns true if the slide is fully hidden", "Reference": "Returns true if the slide is in its smallest stage", "NNUpdater": "Returns master sheet associated with this slide."}
{"Origin": "Create or obtain a {@link CallableStatement} from the pool.", "Reference": "Creates or obtains a {@link CallableStatement} from the pool.", "NNUpdater": "Execute the statement."}
{"Origin": "Gets whether or not the configuration setting is locked.", "Reference": "Gets whether or not the configuration setting is read-only.", "NNUpdater": "Whether toTest file is directory or not"}
{"Origin": "Send a message to a given endpoint.", "Reference": "Send a message to a given node.", "NNUpdater": "Send a mutation message or a Paxos Commit to a given endpoint."}
{"Origin": "Similar to {@link #whenOrElse(boolean, Action, Action)}, except obtains the action instance from the registry by the given type.", "Reference": "Similar to {@link #when(boolean, Action, Action)}, except obtains the action instance from the registry by the given type.", "NNUpdater": "The passed action is the original action, not the one returned by {@link #createSnapshotAction(T, liquibase.Scope)}"}
{"Origin": "The system modules are typically linked into the Java run-time image.", "Reference": "The system modules are the modules in the Java run-time image.", "NNUpdater": "The system modules are typically linked into the Java run-time image."}
{"Origin": "Code snippets for {@link BlobClientBase#startCopyFromURL(String)}", "Reference": "Code snippets for {@link BlobClientBase#beginCopy(String, Duration)}", "NNUpdater": "Code snippets for {@link BlobAsyncClient#startCopyFromURLWithResponse(URL, Map, AccessTier,"}
{"Origin": "In order to apply the rotation transformation to an existing transformation, use {@link #rotate(Quaterniond) rotate()} instead.", "Reference": "In order to apply the rotation transformation to an existing transformation, use {@link #rotate(Quaterniondc) rotate()} instead.", "NNUpdater": "In order to apply the rotation transformation to an existing transformation, use {@link #rotate(Quaternionf) rotate()} instead."}
{"Origin": "For an interface parent (MUST be an interface), returns set of all subinterfaces.", "Reference": "For an interface parent (MUST be an interface), returns set of all subinterfaces including .", "NNUpdater": "Check a class is an interface (throws an IllegalArgumentException if not), and return the name of the interface."}
{"Origin": "Called by FastBatchingCellReader.loadAggregation where the", "Reference": "Called by FastBatchingCellReader.load where the", "NNUpdater": "Otherwise this returns the result of {@link Cell#getCellTypeEnum()}."}
{"Origin": "Force triggering of a job for given application.", "Reference": "Force triggering of a job for given instance.", "NNUpdater": "Trigger a job for an application, if allowed"}
{"Origin": "Registers a callback to be invoked when a view type change is done.", "Reference": "Sets a listener to be called when a view type change is done.", "NNUpdater": "No callback messages should be posted once {@code setCallback(null)} is done."}
{"Origin": "Indexes the text associated with an artifact.", "Reference": "Indexes the text associated withF an artifact.", "NNUpdater": "Indexes the text associated with an artifact."}
{"Origin": "This is the same than the column type, except for collections where it's the 'valueComparator' of the collection.", "Reference": "This is the same than the column type, except for non-frozen collections where it's the 'valueComparator' of the collection.", "NNUpdater": "If a comparator is set the default comparator for the given {@link ValueType} is used."}
{"Origin": "Add a server to the known list of servers.", "Reference": "Remove an existing server from the list of known servers.", "NNUpdater": "Retrieve ``known`` (i.e."}
{"Origin": "This feature collects stack trace in advance, when task is created, so that if the task throws the exception then the parent stack trace is appended to it.", "Reference": "This feature collects stack trace in advance, when task is created, so that if a task throws an exception then the parent stack trace is appended to it.", "NNUpdater": "Prints the stack trace of the to the given"}
{"Origin": "Partial query to filter out CC and Java implicit dependencies.", "Reference": "Partial query to filter out implicit dependencies.", "NNUpdater": "Gets scan query filter."}
{"Origin": "Test of var method, of class KernelDensity.", "Reference": "Test of variance method, of class KernelDensity.", "NNUpdater": "- The kernel ID."}
{"Origin": "Desintalls an artifact from the mule container installation.", "Reference": "Uninstalls an artifact from the Mule container installation.", "NNUpdater": "Returns the list of {@link InstallationJob} representing scheduled installation attempts."}
{"Origin": "Maps the elements of this node stream using the given mapping and collects the result into a list.", "Reference": "Maps the elements of this node stream using the given mapping and collects the results into a list.", "NNUpdater": "Creates a List of the given elements."}
{"Origin": "Registers additional Madvoc components that will be registered after default components.", "Reference": "Registers additional Madvoc components after the registration of default components.", "NNUpdater": "Gets this component's path."}
{"Origin": "Retrieves the metadata for the specified {@link NamespacedEntityId}.", "Reference": "Retrieves the metadata for the specified {@link MetadataEntity}.", "NNUpdater": "Retrieves the metadata for the specified {@link NamespacedEntityId}."}
{"Origin": "Writes a collection of values to a character stream.", "Reference": "Writes a sequence of values to a character stream.", "NNUpdater": "Writes a codepoint in the current encoding."}
{"Origin": "draws the description text in the bottom right corner of the chart", "Reference": "Draws the description text in the bottom right corner of the chart (per default)", "NNUpdater": "Returns the box's bottom end corner radius."}
{"Origin": "Using may cause hazardous behaviours and should be avoided.", "Reference": "Using may cause hazardous behaviors and should be avoided.", "NNUpdater": "- The cause for ( | )."}
{"Origin": "If the cipher is an asymmetric cipher (different keys for encryption and decryption, such as public/private key pairs), you should set your encryption key via one of these methods:", "Reference": "If the CipherService is an asymmetric CipherService (different keys for encryption and decryption, such as public/private key pairs), you should set your encryption key via one of these methods:", "NNUpdater": "Performs cryptographic operations (en/de)cryption using JCE Cipher."}
{"Origin": "Sets the server port.", "Reference": "Sets the DataSource.", "NNUpdater": "Returns the baseRef port."}
{"Origin": "Iterate over all the {@link SecretProperties secret} by page and call {@link SecretClient#getSecret(SecretProperties baseSecret)} .", "Reference": "Iterate over all the {@link SecretProperties secret} by page and call {@link SecretClient#getSecret(String, String)}.", "NNUpdater": "Iterate over all the {@link SecretProperties secret} by each page and call {@link SecretClient#getSecret(SecretProperties)} ."}
{"Origin": "The returned RxDao is a special DAO that let's you interact with Rx Observables.", "Reference": "The returned RxDao is a special DAO that let's you interact with Rx Observables using RX's IO scheduler for subscribeOn.", "NNUpdater": "NOTE: You should maybe use the {@link DatabaseTable#daoClass()} and have the DaoManager construct the DAO if possible."}
{"Origin": "Return all the keys that mapped to {@code value} at {@code timestamp}.", "Reference": "Return all the keys that mapped to the {@code record} at {@code timestamp}.", "NNUpdater": "Return {@code true} if {@code value} exists in the cell mapped from {@code field} at the specified {@code timestamp}."}
{"Origin": "Return a simulated for each block in the Database.", "Reference": "stored on disk) block in the Database.", "NNUpdater": "Get the affected blocks."}
{"Origin": "Cannot return null - maven will complain about unsatisfied dependency during project built.", "Reference": "Cannot return null - maven will complain about unsatisfied dependency during project build.", "NNUpdater": "Determine whether or not a {@link MavenProject}'s packaging is an"}
{"Origin": "lhsPattern := QUESTION?", "Reference": "lhsPattern := xpathPrimary | ( QUESTION?", "NNUpdater": "lhsUnary := ( lhsExists | lhsNot | lhsEval | lhsForall | lhsAccumulate | LEFT_PAREN lhsOr RIGHT_PAREN | lhsPatternBind ) SEMICOLON?"}
{"Origin": "Set the valueType.", "Reference": "Set the newType.", "NNUpdater": "Set the geoMapping value."}
{"Origin": "'s Slurp Crawler * @param value the value to set.", "Reference": "* @param value the value to set.", "NNUpdater": "Get the param value."}
{"Origin": "Helper method that checks if either the deprecated or new SO_KEEPALIVE property is present and enabled on an IIOP listener, giving precedence to the new property if both are present.", "Reference": "Helper method that checks if either the deprecated or new SO_KEEPALIVE property is enabled on an IIOP listener, giving precedence to the new property if both are present.", "NNUpdater": "list-iiop-listeners"}
{"Origin": "Get software version info ### Functional Description: Public software version information.", "Reference": "Get software version information ### Functional Description: Public software version information.", "NNUpdater": "Adds all other containers in the software system to this view."}
{"Origin": "The logAnyFailure parameter indicates whether or not AlluxioExceptions are expected results (for example it would be false for the exists() call).", "Reference": "The failureOk parameter indicates whether or not AlluxioExceptions are expected results (for example it would be false for the exists() call).", "NNUpdater": "Converts throwables to Alluxio status exceptions."}
{"Origin": "Get name of the Cosmos DB SQL storedProcedure.", "Reference": "Get the resource value.", "NNUpdater": "Read a stored procedure by the stored procedure link."}
{"Origin": "Returns the modules specified in the config file.", "Reference": "Returns the available configurations.", "NNUpdater": "Returns a full set of module adapters, including module adapters for child modules."}
{"Origin": "Returns a set of unshifted IP addresses.", "Reference": "Returns an unshifted IP address.", "NNUpdater": "Returns the set of interface IP addresses."}
{"Origin": "Test that updating of baseline autoadjustment settings via control.sh actually influence cluster's baseline.", "Reference": "Test that updating of baseline auto_adjustment settings via control.sh actually influence cluster's baseline.", "NNUpdater": "Returns the value of the {@code measureUsesContext} field."}
{"Origin": "{@code params}, {@code requestType} and {@code options} defaults to {@code null}.", "Reference": "{@code params} and {@code options} defaults to {@code null}.", "NNUpdater": "A {@code null} CharSequence will return {@code -1}."}
{"Origin": "Creates new {@link AggregationExpression} that returns the hour portion of a date as a number between 0 and 23 in the factory timezone (default UTC).", "Reference": "Creates new {@link AggregationExpression} that returns the hour portion of a date as a number between 0 and 23.", "NNUpdater": "Creates new {@link AggregationExpression} that returns the hour portion of a date as a number between 0 and 23 in the factory timezone (default UTC)."}
{"Origin": "Code snippet for {@link BlockBlobAsyncClient#stageBlockFromURL(String, URL, BlobRange)}", "Reference": "Code snippet for {@link BlockBlobAsyncClient#stageBlockFromURL(String, String, BlobRange)}", "NNUpdater": "Code snippet for {@link BlobServiceAsyncClient#createBlobContainer(String)}"}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "If you specify both tag keys and tag values in the same request,", "Reference": "If you specify both tag keys and tag values in the same request, Amazon", "NNUpdater": "Returns a tag or attribute name."}
{"Origin": "Compares this charset with the given charset.", "Reference": "Compares this charset to another.", "NNUpdater": "Returns value of this charset"}
{"Origin": "Returns the last sync d l object in the ordered set where companyId = ?", "Reference": "Returns the last sync d l object in the ordered set where modifiedTime > ?", "NNUpdater": "Finds the gadget where companyId = ?"}
{"Origin": "Returns if this has any mapping for the specified column definition.", "Reference": "Returns if this has any mapping for the specified cell.", "NNUpdater": "Returns if this maps the specified column."}
{"Origin": "IMPORTANT:A TypeAlreadyExists fault is returned if the type already exists in the domain.", "Reference": "A fault is returned if the type already exists in the domain.", "NNUpdater": "If a key with the specified name already exists, Amazon EC2 returns an error."}
{"Origin": "Issues mCaptureRequestConfigs to {@link CameraCaptureSession}.", "Reference": "Issues mCaptureConfigs to {@link CameraCaptureSession}.", "NNUpdater": "Set Capture Sequence."}
{"Origin": "This merges the two objects - {@code this} and the specified date - to form an instance of {@code ZonedDateTime}.", "Reference": "This merges the two objects - {@code this} and the specified date - to form an instance of {@code OffsetDateTime}.", "NNUpdater": "Checks if this date-time is equal to another date-time."}
{"Origin": "Configure a sslConfig for the cluster using the legacy configuration", "Reference": "Configure a SSLConfig.Builder for the cluster using the legacy configuration", "NNUpdater": "Returns the current cluster configuration."}
{"Origin": "Get a color string from a warning index", "Reference": "Get a color from a warning index", "NNUpdater": "Returns color with modified alpha value."}
{"Origin": "Use the PluggableParameters directly...", "Reference": "Use the TrainingParameters directly...", "NNUpdater": "This is for pluggable task executor factories."}
{"Origin": "Sets the value of the spid property.", "Reference": "Sets the value of the pic property.", "NNUpdater": "Sets the value of the bigint property."}
{"Origin": "Sets the top border for a region of cells by manipulating the cell style of the individual cells on the top", "Reference": "Sets the top border style for a region of cells by manipulating the cell style of the individual cells on the top", "NNUpdater": "Sets the left border for a region of cells by manipulating the cell style of the individual cells on the left"}
{"Origin": "Get the iterable of all {@link RankedProvider providers} (custom and default) registered for the given service provider contract in the underlying {@link InstanceManager instance manager} container.", "Reference": "Get the iterable of all {@link RankedProvider providers} (custom and default) registered for the given service provider contract in the underlying {@link InjectionManager injection manager} container.", "NNUpdater": "Get the iterable of all providers (custom and default) registered for the given service provider contract in the underlying {@link ServiceLocator HK2 service locator} container."}
{"Origin": "This method obtains all necessary information about fields from entity and returns a List of FieldMetadata.", "Reference": "This method obtains all necessary information about fields from entity and returns a List of FieldItem.", "NNUpdater": "Returns information on all users."}
{"Origin": "Test of print method, of class IntegerHistogram.", "Reference": "Test of print method, of class IntegerPeakFunction.", "NNUpdater": "Test of dataString method, of class Histogram."}
{"Origin": "Instead displays the videos only, does not map videos to participants and does not display participants who do not have videos.", "Reference": "In such a case displays the videos only, does not map videos to participants and does not display participants who do not have videos.", "NNUpdater": "Get the list of Videos that have been bookmarked."}
{"Origin": "This signature is the one specified in the constructor (see {@link #SignatureReader(String) SignatureReader}).", "Reference": "This signature is the one specified in the constructor (see {@link #SignatureReader}).", "NNUpdater": "- {@link #KEY_SIGNATURE}: value specified by {@link #setCreator(String)}."}
{"Origin": "Second scenario: press button -> two windows appear, press button in the 2nd window -> 3rd window appears on top, press Esc three times -> all windows should be closed", "Reference": "Second scenario: press first button -> two windows appear, press button in the 2nd window -> 3rd window appears on top, press Esc three times -> all windows should be closed", "NNUpdater": "Press action on the screen."}
{"Origin": "For all other attribute types this method throws an", "Reference": "For all other attribute types this method throws an Exception.", "NNUpdater": "Attribute the arguments in a method call, returning the method kind."}
{"Origin": "Public factory method.", "Reference": "public factory method.", "NNUpdater": "Public factory method."}
{"Origin": "Creates a message channel that targets all the online {@link Player}s and the console.", "Reference": "Creates a message channel that targets all the online {@link Player}s and the {@link Server}.", "NNUpdater": "Get the profile of a player."}
{"Origin": "Generates a code sample for using {@link ShareAsyncClient#createFileWithResponse(String, long, FileHTTPHeaders,", "Reference": "Generates a code sample for using {@link ShareAsyncClient#createFileWithResponse(String, long, FileHttpHeaders,", "NNUpdater": "Generates a code sample for using {@link ShareClient#createDirectoryWithResponse(String, Map, Context)}"}
{"Origin": "lhsPattern := QUESTION?", "Reference": "lhsPattern := xpathPrimary | ( QUESTION?", "NNUpdater": "lhsUnary := ( lhsExists | lhsNot | lhsEval | lhsForall | lhsAccumulate | LEFT_PAREN lhsOr RIGHT_PAREN | lhsPatternBind ) SEMICOLON?"}
{"Origin": "Group: common", "Reference": "Group: advanced", "NNUpdater": "Returns the default number of {@linkplain CommonPools#blockingTaskExecutor() blocking task executor} threads."}
{"Origin": "Publishes a {@link PrepareTestInstanceEvent} to the {@code ApplicationContext} for the supplied {@link TestContext}.", "Reference": "Publish a {@link PrepareTestInstanceEvent} to the {@code ApplicationContext} for the supplied {@link TestContext}.", "NNUpdater": "Resolve the given {@link Parameter} for the supplied {@link TestExtensionContext}."}
{"Origin": "If no authority is found a default agency is created and returned.", "Reference": "If no authority is found a dummy agency is created and returned.", "NNUpdater": "If the Bucket does not exist in the underlying store, a new one is created."}
{"Origin": "Obtains an instance of {@code LocalDateTime} from a date-time object.", "Reference": "Obtains an instance of {@code LocalDateTime} from a temporal object.", "NNUpdater": "Obtains an instance of {@code ChronoLocalDateTime} from a date and time."}
{"Origin": "Get Exclude of Total Calculation.", "Reference": "Get Hide Grand Total.", "NNUpdater": "Case A: Exclude from all indexes"}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Returns the Java type corresponding to the given internal name.", "Reference": "Returns the {@link Type} corresponding to the given internal name.", "NNUpdater": "Returns the {@link Type} corresponding to the given internal name."}
{"Origin": "Generate a ChallengeReason from a string.", "Reference": "Generate a ChallengeReasons from a string.", "NNUpdater": "Get the encoded challenge in the last challenge."}
{"Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}", "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveToRangeEnd }{@code >}}", "NNUpdater": "Create an instance of {@link JAXBElement }{@code <}{@link CTStrokeChild }{@code >}}"}
{"Origin": "Get schema of the Cosmos DB Cassandra table.", "Reference": "Get the resource value.", "NNUpdater": "Returns tableName."}
{"Origin": "Query may be randomly wrapped in a BooleanQuery with a term that matches no documents in order to trigger coord logic.", "Reference": "Query may be randomly wrapped in a BooleanQuery with a term that matches no documents.", "NNUpdater": "-D"}
{"Origin": "See the DefaultReaderConfig class in the extractionconfigs package for available settings.", "Reference": "See the StringsConfig class in the extractionconfigs package for available settings.", "NNUpdater": "Gets the package of this class."}
{"Origin": "List Parts operation requires a multipart upload ID since parts are associated with a single upload.", "Reference": "The List Parts operation requires a multipart upload ID since parts are associated with a single upload.", "NNUpdater": "Splits the text parts."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "If there are too many arguments, then the excess arguments are ignored.", "Reference": "If there are too many arguments, then the excess arguments are appended to the message.", "NNUpdater": "Tests that arguments to functions are not mutable through the arguments array, but the arguments array itself is mutable."}
{"Origin": "Returns the object with the settings used for calls to labelAudio.", "Reference": "Returns the object with the settings used for calls to getEvaluation.", "NNUpdater": "Returns the next Data object."}
{"Origin": "Tests the creation of a message authentication code for the sha1 algorithm.", "Reference": "Tests the creation of message authentication codes for the sha1 algorithm.", "NNUpdater": "Test method."}
{"Origin": "The desired repository for every service and component is changed<", "Reference": "The desired mpack for every service group is changed.", "NNUpdater": "Engine."}
{"Origin": "The max party size of the server 0 or less for no size limit", "Reference": "The max party size of the server", "NNUpdater": "Gets the size of the cluster."}
{"Origin": "Returns a copy of this ZonedDateTime changing the zone offset to the later of the two valid offsets at a local time-line overlap.", "Reference": "Returns a copy of this date-time changing the zone offset to the later of the two valid offsets at a local time-line overlap.", "NNUpdater": "Returns a copy of this OffsetDateTime with a different zone offset using the same local date-time."}
{"Origin": "This is the case if we find a non-optional association.", "Reference": "This is the case if we find a optional association.", "NNUpdater": "Required."}
{"Origin": "Sets the bytecode compatibility mode", "Reference": "Sets the bytecode compatibility level.", "NNUpdater": "Set the XStream mode."}
{"Origin": "Queries this ContactSourceService for SourceContacts which match a specific query Pattern.", "Reference": "Creates query that searches for SourceContacts which match a specific query Pattern.", "NNUpdater": "Queries this ContactSourceService for SourceContacts which match a specific query Pattern."}
{"Origin": "Get the allowed users on some resources.", "Reference": "Get the allowed users on a resource.", "NNUpdater": "The users groups is the default user group"}
{"Origin": "Gets the name minus the path from a full filename.", "Reference": "Gets the name minus the path from a full fileName.", "NNUpdater": "Sets the full name."}
{"Origin": "Converts the specified article create/update/latest comment time (long) to date type.", "Reference": "Converts the specified article create/update/latest comment time (long) to date type and format str.", "NNUpdater": "converts create/update/latest comment time (long) to date type generates author thumbnail URL"}
{"Origin": "Returns an immutable map containing seven mappings.", "Reference": "Returns an unmodifiable map containing seven mappings.", "NNUpdater": "Returns an immutable map of named bindings."}
{"Origin": "Returns whether re-ordering of files is needed.", "Reference": "Returns whether dependency management is enabled.", "NNUpdater": "Creates an empty {@code PriorityQueue} instance."}
{"Origin": "The state of playback should be updated to {@link SessionPlayer2#PLAYER_STATE_PAUSED} after the prefetch is done.", "Reference": "The state of playback should be updated to {@link SessionPlayer2#PLAYER_STATE_PAUSED} after the prepare is done.", "NNUpdater": "The state of playback should be updated to {@link SessionPlayer2#PLAYER_STATE_PAUSED} after the prefetch is done."}
{"Origin": "Loads the values of a table stored in a text file as a ResultsTable.", "Reference": "Loads the values of a table stored at a URL as a ResultsTable.", "NNUpdater": "Sets the calculation results."}
{"Origin": "Resolves a collection of root modules, with service binding, to create configuration.", "Reference": "Resolves a collection of root modules to create a configuration.", "NNUpdater": "Resolves the resource configuration."}
{"Origin": "Creates a new unformatted {@link TranslatableText.Builder} with the given {@link Translation} and arguments.", "Reference": "Creates a new unformatted {@link TranslatableText} builder with the given {@link Translation} and arguments.", "NNUpdater": "Creates a new unformatted {@link TextBuilder.Translatable} with the given {@link Translation} and arguments."}
{"Origin": "Checks permission to a cluster action for a given request.", "Reference": "Checks permission to a cluster action for a given request in the context of given authentication.", "NNUpdater": "Find CLUSTER.USER permission."}
{"Origin": "Returns the first registered domain service implementing the requested type.", "Reference": "Returns a domain service implementing the requested type.", "NNUpdater": "Returns the requested function."}
{"Origin": "Creates a default DBScan", "Reference": "Creates a default DBSCAN", "NNUpdater": "Creates a new DB instance from a DB snapshot."}
{"Origin": "description = ``WELD-80``", "Reference": "description = ``Test for passivation of SFSB``", "NNUpdater": "Set Beschreibung."}
{"Origin": "Code snippet for {@link BlockBlobAsyncClient#stageBlockWithResponse(String, Flux, long, String)}", "Reference": "Code snippet for {@link BlockBlobAsyncClient#stageBlockWithResponse(String, Flux, long, byte[], String)}", "NNUpdater": "Code snippet for {@link BlobServiceAsyncClient#deleteBlobContainerWithResponse(String, Context)}"}
{"Origin": "Code snippets for {@link BlobClient#setHTTPHeaders(BlobHTTPHeaders)}", "Reference": "Code snippets for {@link BlobClient#setHTTPHeaders(BlobHttpHeaders)}", "NNUpdater": "Code snippet for {@link AppendBlobClient#createWithResponse(BlobHTTPHeaders, Map, BlobAccessConditions,"}
{"Origin": "This forced the parser to use the same underlying memory structurees because it was the same file.", "Reference": "This forced the parser to use the same underlying memory structures because it was the same file.", "NNUpdater": "If all threads export the same data object concurrently it results in errors because they all write to the same file."}
{"Origin": "If neither continuing or ended will default to {@link ShowTools.Status#UNKNOWN}.", "Reference": "Falls back to {@link ShowTools.Status#UNKNOWN}.", "NNUpdater": "(Default: false)"}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "TODO: Change this into getTrackInfo()", "Reference": "TODO: Change this into getTrackInfo() (b/132928418)", "NNUpdater": "Set this {@link Track}'s disc number"}
{"Origin": "Sets decryption as failed", "Reference": "Sets crypto job as failed", "NNUpdater": "Adds the decryption private key of the recipient."}
{"Origin": "Indicates if the processing loop can continue.", "Reference": "Returns the chunk state.", "NNUpdater": "Should we continue processing the exchange?"}
{"Origin": "The current checkpoint which can be advanced by {@link #markSeqNoAsCompleted(long)}.", "Reference": "The current persisted checkpoint which can be advanced by {@link #markSeqNoAsPersisted(long)}.", "NNUpdater": "The current checkpoint which can be advanced by {@link #markSeqNoAsProcessed(long)}."}
{"Origin": "Obtains an instance from the specified unique name.", "Reference": "Obtains an instance from the specified name.", "NNUpdater": "Obtains the type from a unique name."}
{"Origin": "This property is defined by jdbc as for use with GUI (or other) tools that might deploy the datasource.", "Reference": "This property is defined by JDBC as for use with GUI (or other) tools that might deploy the datasource.", "NNUpdater": "In order to access the native value of the datasource, use getDataSourceValue() instead."}
{"Origin": "Remove a child object this object is tracing.", "Reference": "Removes a child object this object is tracing.", "NNUpdater": "Remove a service from this ."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "and repositoryId = ?.", "Reference": "and parentFolderId = ?.", "NNUpdater": "Engine."}
{"Origin": "Tests if this string starts with any specified prefixes.", "Reference": "Tests if this CharSequence starts with any specified prefixes.", "NNUpdater": "Starts a client."}
{"Origin": "A {@code DateTimeAccessor} represents some form of date and time information.", "Reference": "A {@code TemporalAccessor} represents some form of date and time information.", "NNUpdater": "Checks if the instant of this date-time is after that of the specified date-time."}
{"Origin": "Add a new {@code Taglet}.", "Reference": "Adds a new {@code Taglet}.", "NNUpdater": "Convert the individual ParamTag into Content."}
{"Origin": "Adds a Log4jBridgeHandler instance to JUL's root logger.", "Reference": "Adds a new Log4jBridgeHandler instance to JUL's root logger.", "NNUpdater": "Resets the entire JUL logging system and adds new SLF4JHandler instance to the root logger."}
{"Origin": "Build and setup a new ES settings builder by consulting all Titan config options relevant to TransportClient or Node.", "Reference": "Build and setup a new ES settings builder by consulting all JanusGraph config options relevant to TransportClient or Node.", "NNUpdater": "Returns a new member builder."}
{"Origin": "When the file is being requested on this path, null should returned and no exception should be thrown.", "Reference": "When the file is being requested on this path, an exception should be thrown.", "NNUpdater": "Then nested tags should be returned"}
{"Origin": "Returns the subset of nodes matching the given node type", "Reference": "Returns the subset of nodes matching the given node type(s)", "NNUpdater": "Returns the pre values of all document nodes starting with the specified path."}
{"Origin": "Locking the date-time to a single offset means that any future calculations, such as addition or subtraction, are guaranteed to work without any complex side effects due to time-zone rules.", "Reference": "Setting the date-time to a fixed single offset means that any future calculations, such as addition or subtraction, have no complex edge cases due to time-zone rules.", "NNUpdater": "Gets the time zone rules allowing calculations to be performed, ensuring that the date-time and offset specified is valid for the returned rules."}
{"Origin": "Return (perhaps after creation) the flock based on provided best sample.", "Reference": "Return (perhaps after creation) the tribe based on provided best sample.", "NNUpdater": "Return the creation time of this message (in milliseconds)."}
{"Origin": "Set the connection and socket timeout.", "Reference": "Set both the connection and socket timeouts.", "NNUpdater": "Set the connection and socket timeout."}
{"Origin": "Structural Specification for more details.", "Reference": "The OWL 2 Structural Specification for more details.", "NNUpdater": "Returns the equivalent structural type."}
{"Origin": "The {@link EcKeyCreateOptions#getKeyType() keyType} indicates the type of key to create.", "Reference": "The {@link CreateEcKeyOptions#getKeyType() keyType} indicates the type of key to create.", "NNUpdater": "Get the Type of {@link IN}."}
{"Origin": "Validates whether hash in {@code signatureAlgorithm} is safe to use for digital signature.", "Reference": "Validates whether {@code hash} is safe to use for digital signature.", "NNUpdater": "Get short description."}
{"Origin": "Retrieves a matching Swagger {@link Property} for a provided ballerina type.", "Reference": "Retrieves a matching OpenApi {@link Property} for a provided ballerina type.", "NNUpdater": "Generates {@link BallerinaPackageDoc} objects for each Ballerina package from the given ballerina files."}
{"Origin": "timed invokeAny(empty collection) throws IAE", "Reference": "timed invokeAny(empty collection) throws IllegalArgumentException", "NNUpdater": "timed invokeAll(empty collection) returns empty list"}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Data are saved to temporary storage only and are accessible during this session life only and only from this session instance.", "Reference": "Data is saved to temporary storage only and is accessible during this session life only and only from this session instance.", "NNUpdater": "This should only be called from {@link SyncSession}."}
{"Origin": "See Immutable List Static Factory Methods for details.", "Reference": "See Unmodifiable Lists for details.", "NNUpdater": "The returned List is immutable."}
{"Origin": "Checking individual characters is about 3 times faster on markt's dev PC for typical length file names.", "Reference": "Checking individual characters is about 10 times faster on markt's dev PC for typical length file names.", "NNUpdater": "Get current persistence context."}
{"Origin": "or throws a {@link com.liferay.so.NoSuchMemberRequestException} if it could not be found.", "Reference": "or throws a {@link NoSuchMemberRequestException} if it could not be found.", "NNUpdater": "Operation fails."}
{"Origin": "If --entity parameter has been specified, --interface parameter will be mandatory.", "Reference": "If --entity parameter has been specified and we are working under multimodule project, --interface parameter will be mandatory.", "NNUpdater": "Get parameter header."}
{"Origin": "Returns the first router available.", "Reference": "Returns the next router available.", "NNUpdater": "Creates a new {@link Route.Handlers} that delegate the execution to the given router."}
{"Origin": "Creates a new SchemaInfoLevel builder with settings for maximum schema information.", "Reference": "Creates a new SchemaInfoLevel with settings for maximum schema information.", "NNUpdater": "Schema found for given schemaPath is a root schema."}
{"Origin": "Determines whether or not the delete data source action should be enabled", "Reference": "Determines whether or not the delete data source action can be enabled.", "NNUpdater": "Determines whether the GWT Maven plugin exists in the pom."}
{"Origin": "Returns the object with the settings used for calls to labelAudio.", "Reference": "Returns the object with the settings used for calls to listEvaluationJobs.", "NNUpdater": "Returns the next Data object."}
{"Origin": "Returns the schema version of the given {@link SharedRealm}.", "Reference": "Returns the schema version of the given {@link OsSharedRealm}.", "NNUpdater": "Set the schema version of the Realm."}
{"Origin": "However, this can be modified by calling {@link #setReaderFactory(ConfigurationReaderFactory) setReaderFactory}.", "Reference": "This can be modified by calling {@link #setReaderFactory(ConfigurationReaderFactory) setReaderFactory}.", "NNUpdater": "However, this can be modified by calling {@link #setReaderFactory(ConfigurationReaderFactory) setReaderFactory}."}
{"Origin": "Unsafe version of: {@link #shaderc_spvc_result_get_messages result_get_messages}", "Reference": "Unsafe version of: {@link #shaderc_spvc_get_workgroup_size get_workgroup_size}", "NNUpdater": "Operation fails."}
{"Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}", "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveFromRangeEnd }{@code >}}", "NNUpdater": "Create an instance of {@link JAXBElement }{@code <}{@link CTStrokeChild }{@code >}}"}
{"Origin": "Perform basica validation, and pass on.", "Reference": "Perform basic validation, and pass on.", "NNUpdater": "Throw RuntimeException if query does not pass validation."}
{"Origin": "Load a JavaClass object for the given class name using the CLASSPATH environment variable.", "Reference": "Finds a JavaClass object by name.", "NNUpdater": "Load the class."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "``type`` and ``name`` and a validation logic for the given full key.", "Reference": "``data-type`` and ``name`` and a validation logic for the given full key.", "NNUpdater": "Sets the full name."}
{"Origin": "Once this method returns, the combined use case configuration can be retrieved with {@link #getUseCaseConfiguration()}.", "Reference": "Once this method returns, the combined use case configuration can be retrieved with {@link #getUseCaseConfig()}.", "NNUpdater": "In case you need the full type name, use {@link #getName()}."}
{"Origin": "Start building a new factory class-based service binding.", "Reference": "Start building a new supplier class-based service binding.", "NNUpdater": "Start building a new DELETE query that deletes the provided names."}
{"Origin": "Note that this rule will be inserted in VNI table (table 0).", "Reference": "Note that this rule will be inserted in vTag table.", "NNUpdater": "Returns the table with the specified logical table name."}
{"Origin": "Starts BookKeeper and sets up RocksDB.", "Reference": "Starts BookKeeper.", "NNUpdater": "Starts up all the components required."}
{"Origin": "Set this {@link AxisAngle4d} to be equivalent to the rotational component of the given {@link Matrix4f}.", "Reference": "Set this {@link AxisAngle4d} to be equivalent to the rotational component of the given {@link Matrix4fc}.", "NNUpdater": "Set this {@link AxisAngle4d} to be equivalent to the rotational component of the given {@link Matrix4fr}."}
{"Origin": "Runs the logic to dispatch any responses to the current listeners until {@link #_isRunning} is false.", "Reference": "Runs the logic to dispatch any responses to the current listeners until {@link #isRunning} is false.", "NNUpdater": "If there are none pending/running, call {@link #dispatchAnimationsFinished()} to notify any listeners."}
{"Origin": "Removes the {@link PacketHandler} for a particular {@code conderenceId}", "Reference": "Removes the {@link PacketHandler} for a particular {@code conferenceId}", "NNUpdater": "Removes the {@link Download} with the given {@code id}."}
{"Origin": "Consider calling AarResourceRepositoryCache.getSourceRepository instead of this method.", "Reference": "AarResourceRepositoryCache.getSourceRepository instead of this method.", "NNUpdater": "Consider calling {@link AarResourceRepositoryCache#getSourceRepository} instead of this method."}
{"Origin": "Returns the sync d l objects before and after the current sync d l object in the ordered set where companyId = ?", "Reference": "Returns the sync d l objects before and after the current sync d l object in the ordered set where repositoryId = ?", "NNUpdater": "Returns the sync d l object ID of this sync d l object."}
{"Origin": "Does not consume anything.", "Reference": "The default implementation does not consume anything.", "NNUpdater": "It does not delete anything."}
{"Origin": "Finds a rule instance for the given rule class name", "Reference": "Finds a rule instance for the given rule class name, name and target language", "NNUpdater": "Set Regel."}
{"Origin": "This will return the {@link Secret secrets} with values included of the specified versions.", "Reference": "This will return the {@link KeyVaultSecret secrets} with values included of the specified versions.", "NNUpdater": "List {@link Secret secrets} in the key vault."}
{"Origin": "Checks is s1 starts with s2 (compares ascii tolerant)", "Reference": "Checks if s1 starts with s2 ignoring diacritics symbols.", "NNUpdater": "This method is the main login method for Payara."}
{"Origin": "The field in the key determines whether a PoolablePreparedStatement or PoolableCallableStatement is created.", "Reference": "PoolablePreparedStatement or PoolableCallableStatement is created.", "NNUpdater": "Execute a SQL statement using the given parameters."}
{"Origin": "Sets the {@link ReorderMode} of this EditSession.", "Reference": "Sets the {@link ReorderMode} of this EditSession, and flushes the session.", "NNUpdater": "Convenience method returning the {@link IsisSessionFactory} of the current {@link #getCurrentSession() session}."}
{"Origin": "This code should be expanded to deal with any other context sensitve isses data stores tend to have.", "Reference": "This code should be expanded to deal with any other context sensitive issues data stores tend to have.", "NNUpdater": "This code should be expanded to deal with any other context sensitve isses data stores tend to have."}
{"Origin": "Try to load Norms data from the provided input stream.", "Reference": "Try to load Norms data from the provided input file.", "NNUpdater": "Load the additional properties from an input stream"}
{"Origin": "Add a duration with the given time unit.", "Reference": "Add a amount with the given time unit.", "NNUpdater": "Obtains an instance of {@code Duration} from a duration in a specified unit."}
{"Origin": "Name of schedule", "Reference": "Name of task", "NNUpdater": "Suspend a schedule."}
{"Origin": "Get Tree.", "Reference": "Get Baum.", "NNUpdater": "Initializes the main tree."}
{"Origin": "Whether this codec is capable of processing the given Java type.", "Reference": "Whether this codec is capable of processing the given Java class.", "NNUpdater": "The Java type of this column."}
{"Origin": "Tells if the avatar / display name events must be hidden in the messages list.", "Reference": "Tells if the avatar and display name events should be shown in the messages list.", "NNUpdater": "Get image for user"}
{"Origin": "* {@code instructorGoogleId} already has instructor privileges.", "Reference": "* {@code instructorGoogleId} already has an account and instructor privileges.", "NNUpdater": "Checks if there exists a INSTRUCTOR with this googleId"}
{"Origin": "Configure the name of a selector header that a subscription message can have in order to filter messages based on their headers.", "Reference": "Configure the name of a header that a subscription message can have for the purpose of filtering messages matched to the subscription.", "NNUpdater": "Removes the headers on the message"}
{"Origin": "Constuct a trace log event.", "Reference": "Constuct a warning log event.", "NNUpdater": "Always log an event."}
{"Origin": "Calculate the result code of the disablement of one plugin based in what went on during the process of this one and its dependant plugins.", "Reference": "Calculate the result code of the disablement of one plugin based in what went on during the process of this one and its dependent plugins.", "NNUpdater": "Gets the value of the dropCheckConstraint property."}
{"Origin": "Sets a {@link MediaSource} to be used by the test runner.", "Reference": "Sets the {@link MediaSource}s to be used by the test runner.", "NNUpdater": "Sets a {@link DefaultTrackSelector} to be used by the test runner."}
{"Origin": "If the package is not in the module then the resource is not encapsulated.", "Reference": "If the resource is not in a package in the module then the resource is not encapsulated.", "NNUpdater": "If the other module is {@code EVERYONE_MODULE} then this method tests if the package is exported unconditionally."}
{"Origin": "Object chooser, this becomes the selected item (and added to the chooser if necessary).", "Reference": "If the Object is in the Object chooser, this becomes the selected item (and added to the chooser if necessary).", "NNUpdater": "Start a chooser activity for the current share intent."}
{"Origin": "Determines if an DRACOON account is automatically created for a new user who successfully logs on with his / her AD account.", "Reference": "Determines if a DRACOON account is automatically created for a new user who successfully logs on with his / her AD / IDP account.", "NNUpdater": "The target is an authorized {@link Facebook} instance if the current user has connected his or her account with a Facebook account."}
{"Origin": "Divide this Vector3d component-wise by another Vector3f.", "Reference": "Divide this Vector3d component-wise by another Vector3fc.", "NNUpdater": "Divide this Vector3f component-wise by another Vector3fr."}
{"Origin": "Gets the update strategy..", "Reference": "Get the update strategy..", "NNUpdater": "Gets the update."}
{"Origin": "Get the estimator type", "Reference": "Get the estimator", "NNUpdater": "This is the estimator for the Coupon List mode and Coupon Hash Set mode."}
{"Origin": "Returns The The Factor Type of this Challenge.", "Reference": "Returns The The Type of this Challenge.", "NNUpdater": "Get the encoded challenge in the last challenge."}
{"Origin": "Attach list of hints to this relational expression, should be overridden by every logical node that supports hint.", "Reference": "Attaches list of hints to this relational expression, should be overridden by every logical node that supports hint.", "NNUpdater": "This should be overridden in each subclass."}
{"Origin": "Specifies the button's background color as an alpha-red-green-blue integer.", "Reference": "Specifies the background color of the %type% as an alpha-red-green-blue integer.", "NNUpdater": "Standard Red Green Blue ctColor value (RGB)."}
{"Origin": "We will also set the longestPhaseSpawnRunnerName to the longest running spawn runner name across all phases.", "Reference": "We will also set the longestPhaseSpawnRunnerName to the longest running spawn runner name across all phases if it exists.", "NNUpdater": "Run benchmarks."}
{"Origin": "The generated HotStream is not pausable, for a pausable HotStream @see {@link ReactiveSeq#primedPausableHotStream(Executor)}.", "Reference": "The generated Connectable is not pausable, for a pausable Connectable @see {@link ReactiveSeq#primedPausableHotStream(Executor)}.", "NNUpdater": "Get the number of hot entries in the cache."}
{"Origin": "Calculates all distances of atoms between this cell and the given cell returning those that are within the given cutoff as a list of AtomContacts", "Reference": "Calculates all distances of atoms between this cell and the given cell returning those that are within the given cutoff as a list of Contacts containing the indices of the pair and the calculated distance.", "NNUpdater": "Make sure that cell.setCellType(CellType.BLANK) preserves the cell style"}
{"Origin": "The destination would be what would distinguish an ``FileAppender`` from a ``NetworkAppender``.", "Reference": "The connection would be what would distinguish an ``FileAppender`` from a ``NetworkAppender``.", "NNUpdater": "Creates a Servlet Appender."}
{"Origin": "A Requirement is considered complete if it has associated tests and all of the tests are successfull.", "Reference": "A Requirement is considered complete if it has associated tests to all of the tests are successful.", "NNUpdater": "The current log file (if it exists) will be closed and marked as complete."}
{"Origin": "Edits existing notification schema.", "Reference": "Edits existing log schema.", "NNUpdater": "Get existing log schema."}
{"Origin": "Adds an value to values.", "Reference": "Adds an values to values.", "NNUpdater": "Adds an value to values."}
{"Origin": "The {@link KeyCreateOptions#getKeyType() keyType} indicates the type of key to create.", "Reference": "The {@link CreateKeyOptions#getKeyType() keyType} indicates the type of key to create.", "NNUpdater": "Get the Type of {@link IN}."}
{"Origin": "This method is called when put is already happened.", "Reference": "This is called when an entry is removed.", "NNUpdater": "A statement is put into the cache."}
{"Origin": "Helper method that allows for registration of a regexp to the {@link ClassWhiteList}.", "Reference": "Helper method that allows for registration of regexps to the {@link ClassWhiteList}.", "NNUpdater": "Gets the white list."}
{"Origin": "Returns all ids that have records in the provided {@code segment}.", "Reference": "Returns all ids that have PUT records in the provided {@code segment}.", "NNUpdater": "Returns a {@link List} of this {@code Cell}'s {@link DistalDendrite}s"}
{"Origin": "Get service locator {@link DynamicConfiguration dynamic configuration}.", "Reference": "Create a {@link InstanceManager}.", "NNUpdater": "NopDynamicConfiguration will be used."}
{"Origin": "Sets the journal serializer, returning the builder for method chaining.", "Reference": "Sets the log serialization namespace, returning the builder for method chaining.", "NNUpdater": "Sets the default resource entry serializer, returning the configuration for method chaining."}
{"Origin": "If the old password is supplied, the update will be made by rebinding as the user, thus modifying the password using the user's permissions.", "Reference": "By default, though, if the old password is supplied, the update will be made by rebinding as the user, thus modifying the password using the user's permissions.", "NNUpdater": "Resets the password for a specified user."}
{"Origin": "Removes a key from the map if the corresponding map is empty.", "Reference": "Removes a key from the map.", "NNUpdater": "Checks whether the map is currently empty."}
{"Origin": "Converts this to a {@link Validation}.", "Reference": "Converts this to an {@link Validation}.", "NNUpdater": "If there is no TranslationProvider available then this operation will return the default validation messages by using {@link ConfigValidationException#getValidationMessages()}."}
{"Origin": "Returns the Lucene document with the given root path from the index.", "Reference": "Returns the Lucene document with the given structure id from the index.", "NNUpdater": "Returns a A_CmsIndexResource for a specified Lucene search result document."}
{"Origin": "Notify this object that it has been registered as a listener with a source for receiving events described by the named event", "Reference": "Notify this object that it has been registered as a listener with a source for receiving events described by the named event This object is responsible for recording this fact.", "NNUpdater": "Notify this object that it has been registered as a listener with a source for receiving events described by the named event This object is responsible for recording this fact."}
{"Origin": "The {@link KeyCreateOptions#getKeyType() keyType} indicates the type of key to create.", "Reference": "The {@link CreateKeyOptions#getKeyType() keyType} indicates the type of key to create.", "NNUpdater": "Get the Type of {@link IN}."}
{"Origin": "Deletes the specified resources.", "Reference": "Deletes the specified binaries.", "NNUpdater": "Deletes the element at the specified position."}
{"Origin": "Get the administrators of the isssuer.", "Reference": "Get the administrators of the issuer.", "NNUpdater": "Returns a Collection with all the group users."}
{"Origin": "Since this is the same for every shard it picks {@link JDA#getApplicationInfo()} from any shard.", "Reference": "Since this is the same for every shard it picks {@link JDA#retrieveApplicationInfo()} from any shard.", "NNUpdater": "Sets the shard info for this factory and apply SSL settings."}
{"Origin": "At the moment this method returns only under Mac OS X VERSION (and up) and with Java VERSION (and up).", "Reference": "At the moment this method returns only under Mac OS X VERSION (and up).", "NNUpdater": "At the moment this method returns only under Mac OS X VERSION (and up) and with Java VERSION (and up)."}
{"Origin": "Set the Fragment associated with this destination", "Reference": "Set the Fragment class name associated with this destination", "NNUpdater": "Set the channel field"}
{"Origin": "Otherwise this returns the result of {@link Cell#getCellTypeEnum()}.", "Reference": "Otherwise this returns the result of {@link Cell#getCellType()}.", "NNUpdater": "Otherwise this returns the result of {@link Cell#getCellTypeEnum()}."}
{"Origin": "Get assisted query column.", "Reference": "Find assisted query column.", "NNUpdater": "Get sharding encryptor."}
{"Origin": "See Immutable Map Static Factory Methods for details.", "Reference": "See Unmodifiable Maps for details.", "NNUpdater": "VerificationTimes supports multiple static factory methods:"}
{"Origin": "Removes recursively all empty parent directories up to and excluding the output directory.", "Reference": "Removes recursively all empty parent directories up to and excluding the storage directory.", "NNUpdater": "Recursively collects all the songs for the given directory and all of its sub-directories."}
{"Origin": "Return the configured {@link #setProxyPing(boolean)}", "Reference": "Return the configured {@link #setHandlePing(boolean)}.", "NNUpdater": "Return the same value as {@link Boolean#hashCode(boolean)}}."}
{"Origin": "Returns a map for short time zone ids in BCP47 Unicode extension and the long time zone ids.", "Reference": "Returns a map for time zone ids to their canonical ids.", "NNUpdater": "Sets the time zone offset."}
{"Origin": "Use {@link #setDate(Date)} to change the current date.", "Reference": "Use {@link #setDate(VaadinDateTime)} to change the current date.", "NNUpdater": "Set Datum."}
{"Origin": "Provides a list of all connection wrappers corresponding to a current environment.", "Reference": "Provides a list of all connection configs corresponding to a current environment.", "NNUpdater": "Provides the legacy environment's major version number."}
{"Origin": "or throws a {@link com.liferay.calendar.NoSuchBookingException} if it could not be found.", "Reference": "or throws a {@link NoSuchBookingException} if it could not be found.", "NNUpdater": "Operation fails."}
{"Origin": "The {@code name} is a {@code '/'}-separated path name that identifies the resource.", "Reference": "The {@code name} parameter is a {@code '/'}-separated path name that identifies the resource.", "NNUpdater": "The {@code name} parameter is a {@code '/'}-separated path name that identifies the resource."}
{"Origin": "Creates all content types.", "Reference": "Creates all base types.", "NNUpdater": "Returns all accepted media types."}
{"Origin": "This method must only be used for type references whose sort is {@link #METHOD_FORMAL_PARAMETER METHOD_FORMAL_PARAMETER}.", "Reference": "This method must only be used for type references whose sort is {@link #METHOD_FORMAL_PARAMETER}.", "NNUpdater": "(The method {@link Population#populationSort()} is called by this method.)"}
{"Origin": "Set the number of expected records for this task.", "Reference": "Set the number of expected records for this connector.", "NNUpdater": "Sets the parameter map for this connection."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Returns true if there is at least one workspace running(it's status is different from {@link", "Reference": "Returns true if there is at least one workspace active(it's status is different from {@link", "NNUpdater": "(it's status is {@link WorkspaceStatus#STARTING} or {@link WorkspaceStatus#STOPPING})"}
{"Origin": "or throws a {@link com.liferay.sync.NoSuchDLFileVersionDiffException} if it could not be found.", "Reference": "or throws a {@link NoSuchDLFileVersionDiffException} if it could not be found.", "NNUpdater": "Returns the sync d l file version diff where fileEntryId = ?"}
{"Origin": "Once the GeneratedRootGlideModule is written, we expect to be finished.", "Reference": "Once the GeneratedAppGlideModule is written, we expect to be finished.", "NNUpdater": "Writes the string to The stream will Not be closed once the operation is finished."}
{"Origin": "Provides a function that updates the payload value of an {@link BaseEvent} by replacing it with a {@link CursorProvider}.", "Reference": "Provides a function that updates the payload value of an {@link CoreEvent} by replacing it with a {@link CursorProvider}.", "NNUpdater": "Gets a cursor from the {@link #delegate} and registers it through {@link CursorManager#onOpen(Cursor, CursorContext)}."}
{"Origin": "Build a DataAccessPoint, including DataService at Resource svc", "Reference": "Build a DataAccessPoint, including DataService, from the description at Resource svc", "NNUpdater": "Build appender data."}
{"Origin": "Returns 'true' if the stream is empty.", "Reference": "Returns 'true' if the stream has no elements.", "NNUpdater": "If stream is empty, throws {@code NoSuchElementException}."}
{"Origin": "Returns the state variables from template header.", "Reference": "Returns the prop variables from template header.", "NNUpdater": "Return the names of the variables in the template, in order."}
{"Origin": "For the given input shape/type for the (perhaps partially constructed) network configuration, return a map of activation sizes for each layer and vertex in the graph.", "Reference": "For the given input shape/type for the network, return a map of activation sizes for each layer and vertex in the graph.", "NNUpdater": "This is the probability of retaining each input activation value for a layer."}
{"Origin": "Hide toggle button ``add self hosted / sign in with WordPress.com`` and show self hosted URL edit box", "Reference": "Hide toggle button ``add self hosted / log in with WordPress.com`` and show self hosted URL edit box", "NNUpdater": "Returns a {@link RoleDefinition#hostedOperator} for the current system."}
{"Origin": "Convert a date string and time string into a Date object.", "Reference": "Convert a date string and time string of only the hour into a Date object.", "NNUpdater": "Converts and formats an instant into a string of date and time with the specified pattern."}
{"Origin": "Build a normalized ``toString`` text for an object.", "Reference": "Build a ``nice toString`` for an object.", "NNUpdater": "Build a proxy for a class."}
{"Origin": "Call {@link AndroidCommonUtils#getResourceName(String, String)} with {@link ResourceType#LAYOUT}.", "Reference": "Call {@link AndroidBuildCommonUtils#getResourceName(String, String)} with {@link ResourceType#LAYOUT}.", "NNUpdater": "Tests the {@link CommonUtils#listToString(List)} method."}
{"Origin": "If you're asking what is to be used in a production environment, simply use the code inside the statement, but handle the Exceptions appropriately.", "Reference": "If you're asking what is to be used in a production environment, simply use the code inside the {@code try{}} statement, but handle the Exceptions appropriately.", "NNUpdater": "Throw if the node count is 1 for container and content clusters and we're in a production zone"}
{"Origin": "Launch a JNLP slave created by {@link #createJnlpSlave(String)}", "Reference": "Launch a JNLP agent created by {@link #createJnlpSlave(String)}", "NNUpdater": "This method is a convenience for {@link SlaveService#add(MediaSlaveType, String, boolean)}."}
{"Origin": "Given a DatasetGraph and a query, form a DatasetGraph that is the dynamic dataset from the collection of graphs from the dataset that go to make up the default graph (union) and named graphs.", "Reference": "Given a DatasetGraph and a query, form a DatasetGraph that is the dynamic dataset from the collection of graphs from the dataset that go to make up the default graph and named graphs.", "NNUpdater": "Wrap a {@link DatasetGraph} to make a dataset"}
{"Origin": "If false, the built-in (non-CuDNN) implementation for BatchNormalization will be used", "Reference": "If true, the built-in (non-CuDNN) implementation for BatchNormalization will be used", "NNUpdater": "Specifies character based content of {@link #build() to-be-built} {@link Source}."}
{"Origin": "we don't know priority for these, other than definition/model order, which appears to be what Excel uses.", "Reference": "For older ones, we don't know priority for these, other than definition/model order, which appears to be what Excel uses.", "NNUpdater": "An empty set means that we don't know what kind of bug patterns might be reported."}
{"Origin": "Returns a Reader containing the Content text.", "Reference": "Returns a Reader containing the Content strings.", "NNUpdater": "Reads content using ClassFileReader."}
{"Origin": "Clears the value of the 'ValueType' field", "Reference": "Clears the value of the 'valueType' field.", "NNUpdater": "Clears the value of the 'paramName' field"}
{"Origin": "Sets the value of the algIdExtSource property.", "Reference": "Sets the value of the spinValue property.", "NNUpdater": "Sets the value of the extLst property."}
{"Origin": "If {@code keys = ``abc1234``}, settings with a key equal to ``abc1234`` are returned.", "Reference": "If {@code keyFilter = ``abc1234``}, settings with a key equal to ``abc1234`` are returned.", "NNUpdater": "If {@code keys = ``abc1234``}, settings with a key equal to ``abc1234`` are returned."}
{"Origin": "Get Application Registration.", "Reference": "Get File Handler.", "NNUpdater": "Retrieves application level attributes."}
{"Origin": "Get name of the Cosmos DB Gremlin database.", "Reference": "Get the resource value.", "NNUpdater": "Gets the cosmos database properties"}
{"Origin": "Explicitly does not clone the deep structure of the request object.", "Reference": "Explicitly does not clone the deep structure of the other fields in the message.", "NNUpdater": "Set the body of this HTTP request."}
{"Origin": "The doclet/taglet tests are performed in the begin method, further on, this is to minimize argument processing and most importantly the impact of class loader creation, needed to detect the doclet/taglet class variants.", "Reference": "The doclet tests are performed in the begin method, further on, this is to minimize argument processing and most importantly the impact of class loader creation, needed to detect the doclet class variants.", "NNUpdater": "Convert the individual ParamTag into Content."}
{"Origin": "The addition of a duration is always absolute and zone-resolvers are not required.", "Reference": "The addition of a duration is always absolute - there are no special cases.", "NNUpdater": "The query is absolute 3."}
{"Origin": "The {@link #getProductType() product type} must be {@link EtdProductType#FUTURE} otherwise an exception will be thrown.", "Reference": "The {@link #getType() type} must be {@link EtdType#FUTURE} otherwise an exception will be thrown.", "NNUpdater": "Get Produkt."}
{"Origin": "Set the fileContentDisposition property: Sets the file's", "Reference": "Set the contentDisposition property: Sets the file's", "NNUpdater": "Formats {@code fileName} as a Content-Disposition header value."}
{"Origin": "KafkaMetrics of sensors which use SampledStat should be synchronized on the Sensor object to allow concurrent reads and updates.", "Reference": "KafkaMetrics of sensors which use SampledStat should be synchronized on the same lock for sensor record and metric value read to allow concurrent reads and updates.", "NNUpdater": "Get or create a sensor with the given unique name and zero or more parent sensors."}
{"Origin": "Renders this vertex into the given {@link BufferBuilder}, assuming that the {@link VertexFormat} is {@link DefaultVertexFormats#BLOCK}.", "Reference": "Renders this vertex into the given {@link VertexBuffer}, assuming that the {@link VertexFormat} is {@link DefaultVertexFormats#BLOCK}.", "NNUpdater": "If it is an {@code instanceof Vertex}, then replace it in the map with {@link Vertex#id()}."}
{"Origin": "Picks a suitable configuration to use for resource resolution", "Reference": "Picks a suitable configuration to use for resource resolution within a given file.", "NNUpdater": "Picks the ``best`` connection to use for the next transaction based on the BalanceStrategy in use."}
{"Origin": "Returns Query classes whose equals() and hashCode() methods can be validated by EqualsVerifier.", "Reference": "Returns Query classes whose equals() and hashCode() methods can be validated by EqualsVerifier in a uniform way.", "NNUpdater": "Suppresses warnings given by {@code EqualsVerifier}."}
{"Origin": "Verify descriptor in the catalog according to recordingId, checking recording files availability and contents.", "Reference": "Verify descriptors in the catalog, checking recording files availability and contents.", "NNUpdater": "Get the active recording id for a given counter id."}
{"Origin": "Close all pools associated with this class.", "Reference": "Closes all pools associated with this class.", "NNUpdater": "Deallocate NIO memory pools, and close server socket."}
{"Origin": "Encrypts the byte array by using the configured {@link #getCipher() cipher}.", "Reference": "Encrypts the byte array by using the configured {@link #getCipherService() cipherService}.", "NNUpdater": "Gets the Java Cryptography Architecture transformation corresponding to the suite's underlying cipher algorithm."}
{"Origin": "initialize the schema manager and add the schema partition to diectory service", "Reference": "initialize the schema manager and add the schema partition to directory service", "NNUpdater": "Append the provided schema to this schema and return the result as a new schema."}
{"Origin": "Resets the analytics collector for a new playlist.", "Reference": "Resets the analytics collector for a new media source.", "NNUpdater": "Sets the ID associated with the current playlist."}
{"Origin": "Returns the descriptor corresponding to this Java type.", "Reference": "Returns the descriptor corresponding to this type.", "NNUpdater": "Returns the descriptor corresponding to this type."}
{"Origin": "Called when a track info is selected.", "Reference": "Called when a track is selected.", "NNUpdater": "Called when the nowPlayingInfo is clicked"}
{"Origin": "Sttc counter.", "Reference": "Sttc.", "NNUpdater": "Free the counter identified by counterId."}
{"Origin": "Gets the site selector options.", "Reference": "Gets the sitemap site selector options.", "NNUpdater": "Returns the IO controller."}
{"Origin": "Returns the akismet data with the primary key or throws a {@link com.liferay.akismet.NoSuchDataException} if it could not be found.", "Reference": "Returns the akismet data with the primary key or throws a {@link NoSuchDataException} if it could not be found.", "NNUpdater": "Returns the akismet data where classNameId = ?"}
{"Origin": "The {@link Secret} is required.", "Reference": "The {@link KeyVaultSecret} is required.", "NNUpdater": "The {@code secret} is required and its fields secret.name and secret.value cannot be null."}
{"Origin": "Same as {@link #isPipelineConfigSet(long, PiPipeconf, ByteBuffer)} but blocks execution.", "Reference": "Same as {@link #isPipelineConfigSet(long, PiPipeconf)} but blocks execution.", "NNUpdater": "Operation fails."}
{"Origin": "Wraps the given buffer with surrounding script tags.", "Reference": "Wraps the given string with surrounding script tags.", "NNUpdater": "Script-tags will be removed."}
{"Origin": "Get the abstract files for the selected group", "Reference": "Get the result files for the selected group", "NNUpdater": "Get Order Compensation Group."}
{"Origin": "The default cluster load balancer if all others fail.", "Reference": "The default cluster selector if all others fail.", "NNUpdater": "Deletes the specified load balancer."}
{"Origin": "Notify the manager that some local partitions have been demoted from leader.", "Reference": "Notify the manager that a local partition has been demoted from leader.", "NNUpdater": "The nodeId of leader for this topic."}
{"Origin": "Test always uses the zone default flavor", "Reference": "Test always uses the zone default resources", "NNUpdater": "Returns a node with the flavor assigned to the given value"}
{"Origin": "Saves all dictionary entries that appeared > threshold times Note: feature indices are changed to contiguous values starting at 0.", "Reference": "Saves all dictionary entries that appeared {@literal >} threshold times Note: feature indices are changed to contiguous values starting at 0.", "NNUpdater": "4) Otherwise, if there are features and the feature data source has only one dictionary, then that one is the best dictionary."}
{"Origin": "If keys = ``*``, settings with any key are returned.", "Reference": "If {@code keyFilter = ``*``}, settings with any key are returned.", "NNUpdater": "If keys = ``*``, settings with any key are returned."}
{"Origin": "Allows to capture and then assert on a {@link Throwable}.", "Reference": "Allows to capture and then assert on a {@link Throwable} (easier done with lambdas).", "NNUpdater": "Gets the Throwable that was passed to {@link #onResponseComplete(Exception)}, if any."}
{"Origin": "However, since we inject the ConstantAnnotationMarker the Annotation proxy types for ahead-of-time allocated annotations implement two interfaces.", "Reference": "However, since we inject the constant-annotation-marker interface the Annotation proxy types for ahead-of-time allocated annotations implement two interfaces.", "NNUpdater": "annotation* SEMICOLON"}
{"Origin": "Adds a single sensitivity to the builder using a date.", "Reference": "Adds a sensitivity to the builder.", "NNUpdater": "Obtains an instance from a multiple sensitivity entries."}
{"Origin": "Adds multiple Certificates out of a Collection of X509CertificateHolder into certificatesMap.", "Reference": "Adds multiple Certificates out of a Collection of X509CertificateHolder into certificateSet.", "NNUpdater": "Create x509 certificate path from array certificates chain."}
{"Origin": "use_credentials: Cross-origin CORS requests for the element will have the credentials flag set.", "Reference": "USER_CREDENTIALS: Cross-origin CORS requests for the element will have the credentials flag set.", "NNUpdater": "Returns the raw credentials."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Use the {@linkplain #addDelivery(Shipment, TimeWindow)} instead.", "Reference": "Use the {@linkplain #addDelivery(ShipmentJob, TimeWindow)} instead.", "NNUpdater": "Operation fails."}
{"Origin": "Returns true if the given KeyStroke is one of this action's accelerators.", "Reference": "Returns if the given KeyStroke is one of this action's accelerators.", "NNUpdater": "Convert {@link KeyCombination} to {@link KeyStroke}."}
{"Origin": "There must be exactly one {@link BD#SEARCH} predicate.", "Reference": "There must be exactly one {@link FTS#SEARCH} predicate.", "NNUpdater": "Exactly one of stringValue(), readerValue(), and binaryValue() must be set."}
{"Origin": "Default is {@code false}.", "Reference": "Default is {@code true}.", "NNUpdater": "By default this is set to {@code false}."}
{"Origin": "Injector used in {@link FluentObjectFactory} for creating instances", "Reference": "Injector used in FluentObjectFactory for creating instances", "NNUpdater": "Specifies {@link jodd.madvoc.injector.RequestScopeInjector request scope injector} configuration."}
{"Origin": "Embeds a rel whose value comes from a {@LinkRestRepository}.", "Reference": "Embeds a rel whose value comes from a {@link LinkRestRepository}.", "NNUpdater": "Returns a {@link RootResourceInformation} for the given domain type."}
{"Origin": "A {@link com.sun.source.tree.Tree} that determines the appropriate scope for defaults.", "Reference": "A {@link com.sun.source.tree.Tree} determines the appropriate scope for defaults.", "NNUpdater": "Helper method for {@link #getNodes(com.addthis.hydra.data.tree.ReadNode, String)}"}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "This method is invoked by virtue of the OnStart annotation on the OnStart class class", "Reference": "It is invoked at application start up by virtue of the OnStart annotation on the OnStart class in this package.", "NNUpdater": "This method is invoked by virtue of the {@link OnStart} annotation on the {@link ImageAnalyzerModule} class"}
{"Origin": "Asserts that the error message, root bean class and invalid value of the given violation are equal to the expected message, root bean class and invalid value.", "Reference": "Asserts that the error message, root bean class, invalid value and property path of the given violation are equal to the expected message, root bean class, invalid value and propertyPath.", "NNUpdater": "Returns the value of the property of the MBean"}
{"Origin": "Method handles the case where there are downstream operators awaiting last pass evaluation is not re-triggered by the last {@link IChunkMessage} output from an upstream operator.", "Reference": "Method handles the case where there are downstream operators awaiting last pass evaluation or at-once evaluation is not re-triggered by the last {@link IChunkMessage} output from an upstream operator.", "NNUpdater": "The last completed future is the same as retrieved with {@link #last()}."}
{"Origin": "Tests if the nbt list matches with the supplied predicate tester", "Reference": "Tests if the map matches with the supplied predicate tester", "NNUpdater": "1."}
{"Origin": "Check and verify return RegistrationResponse.Decline when failed to start a job master Leader retrieval listener", "Reference": "Check and verify return RegistrationResponse.", "NNUpdater": "Test receive registration with unmatched leadershipId from task executor"}
{"Origin": "Adds default interactions to the specified component.", "Reference": "Adds default listeners to the specified component.", "NNUpdater": "Registers a component with this manager."}
{"Origin": "{@code throwable} will be non-null in the case of a failed attempt to execute the call.", "Reference": "{@code ioe} will be non-null in the case of a failed attempt to execute the call.", "NNUpdater": "If this property is non-null, then {@code rate} must be null and {@code index} must be non-null."}
{"Origin": "Redoes the next command associated with the given object (if one exists).", "Reference": "Redoes the next command associated with the given display.", "NNUpdater": "The command returns ``1`` if the key exists, otherwise ``1`` is returned."}
{"Origin": "Returns a formatted string: ``Artist - Title [Version]``", "Reference": "Returns a formatted string: ``Source (Artist) - Title [Version]``", "NNUpdater": "If not a stream, this sets up the mArtistName based on artist and album information."}
{"Origin": "Finds the source file with the smallest coverage percentage for a given metric.", "Reference": "Finds the source file with the smallest coverage percentage.", "NNUpdater": "Returns {@link Coverage} only for the given CC source filenames, filtering out every other CC sources of the given coverage."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Adds the given word into the given string buffer with the start and end times from the given features.", "Reference": "Adds the given word into the given string builder with the start and end times from the given features.", "NNUpdater": "Appends the descriptor of the given class to the given string builder."}
{"Origin": "Get the iterable of all {@link RankedProvider providers} (custom and default) registered for the given service provider contract in the underlying {@link ServiceLocator HK2 service locator} container.", "Reference": "Get the iterable of all {@link RankedProvider providers} (custom and default) registered for the given service provider contract in the underlying {@link InstanceManager instance manager} container.", "NNUpdater": "Get the iterable of all providers (custom and default) registered for the given service provider contract in the underlying {@link ServiceLocator HK2 service locator} container."}
{"Origin": "Is matching by file name and Check name.", "Reference": "Is matching by file name, module id, and Check name.", "NNUpdater": "Returns a file attribute."}
{"Origin": "Convert the attributes if necessary and add them to the profile.", "Reference": "Convert the profile and authentication attributes, if necessary, and add them to the profile.", "NNUpdater": "Set the identifier."}
{"Origin": "Returns an immutable map containing two mappings.", "Reference": "Returns an unmodifiable map containing two mappings.", "NNUpdater": "Returns an immutable map of named bindings."}
{"Origin": "Add the argument to the value of this long.", "Reference": "Add the argument to the value of this integer.", "NNUpdater": "Get the type of the Argument"}
{"Origin": "OutputStream output, int dpi, float quality)} for more details.", "Reference": "OutputStream output, int dpi, float compressionQuality)} for more details.", "NNUpdater": "Implements {@link OutputDataStream#write(byte[], int, int)}."}
{"Origin": "### \u24d8 Further Information: Nodes must be in same parent.", "Reference": "### \u24d8 Further Information: Nodes **MUST** be in same parent.", "NNUpdater": "The values may be of different type."}
{"Origin": "Parses the {@code Vector3} represented by the given string according to the format of {@link #toString()}.", "Reference": "Sets this {@code Vector3} to the value represented by the specified string according to the format of {@link #toString()}.", "NNUpdater": "Implements the {@link #set(String, String)} method."}
{"Origin": "Retrieve list of all jobs by connector", "Reference": "Retrieve list of all jobs by connector id", "NNUpdater": "Sqoop code."}
{"Origin": "Additional tests on key-sig, which may get adjusted.", "Reference": "Additional tests on key signature, which may get adjusted.", "NNUpdater": "Gets the key."}
{"Origin": "Create an immutable view of this {@link Vector3f}.", "Reference": "Create a new immutable view of this {@link Vector3f}.", "NNUpdater": "Create an immutable view of {@link Matrix4f}."}
{"Origin": "What we do in this method is look for temporary dependencies of the type ``rel``.", "Reference": "What we do in this method is look for temporary dependencies of the type ``rel`` and ``prep``.", "NNUpdater": "Unit test for {@link org.apache.calcite.rel.externalize.RelJsonReader}."}
{"Origin": "Creates a {@link DynamicRealm} instance with a given {@link SharedRealm} instance without owning it.", "Reference": "Creates a {@link DynamicRealm} instance with a given {@link OsSharedRealm} instance without owning it.", "NNUpdater": "Sort existing @{link io.realm.RealmList}."}
{"Origin": "Computes the median for each pixel across all bands in the {@link Planar} image.", "Reference": "Computes the median for each pixel across selected bands in the {@link Planar} image.", "NNUpdater": "Computes the average for each pixel across all bands in the {@link Planar} image."}
{"Origin": "Tests creating a distributed subregion of a local scope region, which should fail.", "Reference": "Tests creating a distributed sub-region of a local scope region, which should fail.", "NNUpdater": "Sets up subregion variables to default values."}
{"Origin": "Scenario: - CA is only in service trust store, missing from gateway trust store - Gateway does not trust service, as it does not trust CA - Service trusts gateway via CA", "Reference": "Scenario: - CA is only in API trust store, missing from gateway trust store - Gateway does not trust API, as it does not trust CA - API trusts gateway via CA", "NNUpdater": "[BC]}"}
{"Origin": "The min occurs of a web result is 0.", "Reference": "The min occurs of a web result.", "NNUpdater": "Set Konst."}
{"Origin": "Prepare to shutdown the global {@link TcpResources} without resetting them, effectively cleaning up associated resources without creating new ones.", "Reference": "Prepare to shutdown the global {@link HttpResources} without resetting them, effectively cleaning up associated resources without creating new ones.", "NNUpdater": "Shutdown one or all TCP server."}
{"Origin": "Delete an object from array if it exists", "Reference": "Delete an object if it exists", "NNUpdater": "If one is found, it is returned."}
{"Origin": "lhsUnary := ( lhsExists | lhsNot | lhsEval | lhsForall | lhsAccumulate | LEFT_PAREN lhsOr RIGHT_PAREN | lhsPatternBind ) SEMICOLON?", "Reference": "lhsUnary := ( lhsExists | lhsNot | lhsEval | lhsForall | lhsAccumulate | LEFT_PAREN lhsOr RIGHT_PAREN namedConsequence?", "NNUpdater": "lhsUnary := ( lhsExists | lhsNot | lhsEval | lhsForall | lhsAccumulate | LEFT_PAREN lhsOr RIGHT_PAREN | lhsPatternBind ) SEMICOLON?"}
{"Origin": "WorkflowExecutionTerminated event is recorded in the history of the current open workflow with the matching workflowId in the domain.", "Reference": "If a runId is not specified, then the event is recorded in the history of the current open workflow with the matching workflowId in the domain.", "NNUpdater": "Get gets the reference to workflow version."}
{"Origin": "Returns null.", "Reference": "Returns empty string.", "NNUpdater": "IsNullOrEmpty {is null or empty}."}
{"Origin": "Returns the {@link UUID} of the {@link Request}.", "Reference": "Returns the {@link RequestId}.", "NNUpdater": "Returns a {@link SchemaBuilder} for a Point field."}
{"Origin": "Customer lock status: * `false` - unlocked * `true` - locked All users of this customer will be blocked and can not login anymore.", "Reference": "Customer is locked: * `false` - unlocked * `true` - locked All users of this customer will be blocked and can not login anymore.", "NNUpdater": "Creates a new customer object."}
{"Origin": "Calls {@link AmbryRequests#handleRequests(Request)} with {@code request} and returns the {@link Response} received.", "Reference": "Calls {@link AmbryRequests#handleRequests(NetworkRequest)} with {@code request} and returns the {@link Response} received.", "NNUpdater": "Operation fails."}
{"Origin": "Get the number of listeners of this map", "Reference": "Get the number of property SwitchPoints of this map", "NNUpdater": "Sets the flow definition."}
{"Origin": "NOTE: This operation is eventually consistent.", "Reference": "This operation is eventually consistent.", "NNUpdater": "Sets the request action."}
{"Origin": "{@codesnippet com.azure.data.applicationconfig.configurationclient.deleteSetting#string-string}", "Reference": "{@codesnippet com.azure.data.applicationconfig.configurationclient.deleteConfigurationSetting#string-string}", "NNUpdater": "{@codesnippet com.azure.data.applicationconfig.configurationclient.deleteSetting#string-string}"}
{"Origin": "Returns a collection of proxies for the given ID.", "Reference": "Returns a map of all partitions for the given primitive.", "NNUpdater": "Remove the proxy from our list of proxies by id."}
{"Origin": "Test the behavior getObject for inet columns.", "Reference": "Test the behavior getObject for ipv6 inet columns.", "NNUpdater": "Get number parameters."}
{"Origin": "Returns a new {@link AttributeTransitionData} instance.", "Reference": "Returns a new {@link Builder} for {@link AttributeTransitionData}.", "NNUpdater": "Returns the transition associated with the rule."}
{"Origin": "Handles the every day key press event.", "Reference": "Handles the every day change event.", "NNUpdater": "Press action on the screen."}
{"Origin": "Scenario: - no CA inherited trust - gateway trusts service certificate directly - service trusts gateway certificate directly", "Reference": "Scenario: - no CA inherited trust - gateway trusts API certificate directly - API trusts gateway certificate directly", "NNUpdater": "Returns the type of the transport."}
{"Origin": "Sort a subset of an array of number primitives.", "Reference": "Sort a subset of an array of primitives of integral type.", "NNUpdater": "a primitive or an array"}
{"Origin": "Sets {@link ValidationType} for commit context.", "Reference": "Sets {@link ValidationMode} for commit context.", "NNUpdater": "IndexWriter#commit(Map)} for this commit."}
{"Origin": "You must add a minimum of 10 minutes and a maximum of 100 hours of audio that includes speech, not just silence, to a custom acoustic model before you can train it.", "Reference": "You must add a minimum of 10 minutes and a maximum of 200 hours of audio that includes speech, not just silence, to a custom acoustic model before you can train it.", "NNUpdater": "Gets the baseModelName."}
{"Origin": "Sets a new header value.", "Reference": "Sets header value.", "NNUpdater": "Sets a response date header value."}
{"Origin": "Unbalanced openers and closers can be escaped (with \\).", "Reference": "Unbalanced openers and closers can quoted (with ' or ``) or escaped (with \\).", "NNUpdater": "The text must be valid html."}
{"Origin": "Proactively abandon any maintenance holds (READ or WRITE) before closing connection.", "Reference": "Proactively abandon leadership before closing connection.", "NNUpdater": "Set Manual."}
{"Origin": "Integers 0 ... n.", "Reference": "Integers 0 ... n - 1.", "NNUpdater": "Creates a sequence with the specified items."}
{"Origin": "Reads a new packet from the channel if all of the current packet is read.", "Reference": "Reads a new chunk from the channel if all of the current chunk is read.", "NNUpdater": "Get head packet."}
{"Origin": "Converts an array of character bytes representing hexidecimal values into an array of bytes of those same values.", "Reference": "Converts an array of character bytes representing hexadecimal values into an array of bytes of those same values.", "NNUpdater": "An array of the (formatted) sort values used."}
{"Origin": "Gets the splash URL of the guild, if present and in a supported format.", "Reference": "Gets the splash URL of the guild, if present.", "NNUpdater": "Gets the splash URL of the guild, if present and in a supported format."}
{"Origin": "The meta-property for the {@code holidays} property.", "Reference": "The meta-property for the {@code weekends} property.", "NNUpdater": "The meta-property for the {@code curveGroupName} property."}
{"Origin": "Returns the map of managed transactions.", "Reference": "Returns the map of managed transactions represented by their initial request.", "NNUpdater": "Returns all pending transaction identifiers."}
{"Origin": "Add a citation to the citations map.", "Reference": "Add a citation to the citations multimap.", "NNUpdater": "Convenience method for checking whether citation markers should be italicized."}
{"Origin": "Can this user see the given patchset?", "Reference": "Can the user see this change?", "NNUpdater": "Fill the given User with the given HatchetUserInfo"}
{"Origin": "Use this when you need customizations such as log integration via {@linkplain Builder#addScopeDecorator(ScopeDecorator)}.", "Reference": "Use this when you need customizations such as log integration via {@linkplain RequestContextCurrentTraceContextBuilder#addScopeDecorator(ScopeDecorator)}.", "NNUpdater": "ContainerBuilder#bindScope(Class, Scope)}."}
{"Origin": "For simplicity, all sensors are synchronized on Sensor.", "Reference": "For simplicity, all sensors are synchronized on this object.", "NNUpdater": "Get or create a sensor with the given unique name and zero or more parent sensors."}
{"Origin": "Returns the expiration {@link Date} of the cookie, or null if none exists.", "Reference": "Returns the expiration {@link Date} of the cookie, or {@code null} if none exists.", "NNUpdater": "Returns the first {@code ``Cookie``} header or {@code null} for none."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Skip all elements until specified time period has passed", "Reference": "Return all elements until specified time period has elapsed", "NNUpdater": "Skip the current specified object."}
{"Origin": "Like {@link #defaultFormatNodeFileHeader(Supplier)} with UTC as the default time zone.", "Reference": "Like {@link #defaultFormatNodeFileHeader(boolean)}} with no normalization.", "NNUpdater": "(Default: false)"}
{"Origin": "Checks to see if the AST is annotated with the passed in annotation and return the AST representing that annotation.", "Reference": "Checks if the AST is annotated with the passed in annotation and returns the AST representing that annotation.", "NNUpdater": "Determine if the supplied {@link AnnotatedElement} is annotated with a composed annotation that is meta-annotated with an annotation of the specified {@code annotationName}."}
{"Origin": "Calculates the minimum of this elements according to their natural order.", "Reference": "Calculates the minimum of this elements according to their natural order in O(n).", "NNUpdater": "Calculates the minimum of this elements according to their natural order."}
{"Origin": "Set the autoincrement flag and related properties of this column.", "Reference": "Set the autoincrement flag and related options of this column.", "NNUpdater": "Set Spalte."}
{"Origin": "Creates query for the given searchPattern.", "Reference": "Queries this search source for the given searchPattern.", "NNUpdater": "2014-09-09-Holiday"}
{"Origin": "Returns the default charset used for string decoding and encoding.", "Reference": "Gets the default charset name used for string decoding and encoding.", "NNUpdater": "Returns the content of an {@link HttpServletRequest} by decoding it using , or if is null."}
{"Origin": "Argument takes precedence from pid stored in the {@link CommandSession}.", "Reference": "Argument takes precedence from pid stored in the {@link Session}.", "NNUpdater": "instance.name and factory.name are injected too."}
{"Origin": "Returns a Path to access to the given resource.", "Reference": "Returns a Path to access the given resource.", "NNUpdater": "Returns if is the workspace root."}
{"Origin": "Especially notice that a {@link FCPPluginClient} is safe and intended to be used for multiple messages, you should not obtain a fresh one for every message you send.", "Reference": "Especially notice that a {@link FCPPluginConnection} is safe and intended to be used for multiple messages, you should not obtain a fresh one for every message you send.", "NNUpdater": "The client message handler is available as the passed {@link FredPluginFCPClient} client."}
{"Origin": "Basically, this method runs the following instructions:", "Reference": "This method run the following instructions:", "NNUpdater": "This will write the processing instructions to the given Writer."}
{"Origin": "The generated HotStream is pausable, for a unpausable HotStream (slightly faster execution) @see {@link ReactiveSeq#hotStream(Executor)}.", "Reference": "The generated Connectable is pausable, for a unpausable Connectable (slightly faster execution) @see {@link ReactiveSeq#hotStream(Executor)}.", "NNUpdater": "Get the number of hot entries in the cache."}
{"Origin": "Computes the maximum for each pixel across all bands in the {@link Planar} image.", "Reference": "Computes the maximum for each pixel across selected bands in the {@link Planar} image.", "NNUpdater": "Computes the average for each pixel across all bands in the {@link Planar} image."}
{"Origin": "Get all segments which may include any data in the interval and are flagged as used.", "Reference": "Get all published segments which may include any data in the interval and are marked as used.", "NNUpdater": "That is, the found segments are removed from the timeline of the given dataSource."}
{"Origin": "Retrive the content of this attachment as a byte array.", "Reference": "Retrieve the content of this attachment as a byte array.", "NNUpdater": "Generate attachment name."}
{"Origin": "Expected format: {@code appList: app (| app)*} A stream may end in an app (if it is a sink) or be followed by a sink destination.", "Reference": "Expected formats: {@code appList: app (| app)*} A stream may end in an app (if it is a sink) or be followed by a sink destination.", "NNUpdater": "Returns the {@link App app}'s {@link JobManager}"}
{"Origin": "Return all locally cross-referenced primary keys for the given persister.", "Reference": "Return all locally cross-referenced primary keys for the given descriptor.", "NNUpdater": "Set the configuration persister factory to use."}
{"Origin": "Inspects the value of a K entry and stores all MCIDs that are encountered.", "Reference": "Inspects the value of a K entry and stores all MCIDs or object references that are encountered.", "NNUpdater": "Inspects and builds plugin and application information for the given artifact."}
{"Origin": "Returns the default service endpoint.", "Reference": "Gets the underlying RPC settings.", "NNUpdater": "Returns the endpoint of given cluster"}
{"Origin": "Sets the selectionPolicy.", "Reference": "Set the selectionPolicy.", "NNUpdater": "Returns the paths in the selection."}
{"Origin": "{@codesnippet com.azure.storage.file.share.ShareDirectoryAsyncClient.deleteSubDirectory#string}", "Reference": "{@codesnippet com.azure.storage.file.share.ShareDirectoryAsyncClient.deleteSubdirectory#string}", "NNUpdater": "{@codesnippet com.azure.storage.file.shareClient.deleteDirectoryWithResponse#string-duration-context}"}
{"Origin": "This call prevents automatic {@link RequestScope.Instance#release() release} of the scope instance once the task that runs in the scope has finished.", "Reference": "This call prevents automatic {@link RequestContext#release() release} of the scope context once the task that runs in the scope has finished.", "NNUpdater": "Maps a {@link Scope} instance to a given annotation."}
{"Origin": "Get Account Type.", "Reference": "Get Kontenart.", "NNUpdater": "Get the sku value."}
{"Origin": "Loop over the {@link SecretProperties secret} and call {@link SecretClient#getSecret(SecretProperties baseSecret)} .", "Reference": "Loop over the {@link SecretProperties secret} and call {@link SecretClient#getSecret(String, String)}.", "NNUpdater": "Loop over the {@link SecretProperties secret} and call {@link SecretClient#getSecret(SecretProperties baseSecret)} ."}
{"Origin": "A condition is a {@link mondrian.olap.Util.Functor1} whose return type is boolean.", "Reference": "A condition is a {@link mondrian.olap.Util.Function1} whose return type is boolean.", "NNUpdater": "Values are the same as those returned by {@link mondrian.olap.Exp#getCategory()}."}
{"Origin": "Sets the transformation of this entity using a safe location from {@link TeleportHelper#getSafeLocation(Location)}.", "Reference": "Sets the {@link Transform}using a safe location from {@link TeleportHelper#getSafeLocation(Location)}.", "NNUpdater": "Sets this entity's location and applies fall damage calculations."}
{"Origin": "This operation requires the certificates/setissuers permission.", "Reference": "This operation requires the {@code certificates/update} permission.", "NNUpdater": "This operation requires the {@code certificates/managecontacts} permission."}
{"Origin": "Tells whether or not this site has any parameters (cookies, query or form parameters).", "Reference": "Tells whether or not this site has any parameters (cookies, query, form parameters, or response header fields).", "NNUpdater": "Returns:"}
{"Origin": "Returns an immutable {@link Entry} containing the given key and value.", "Reference": "Returns an unmodifiable {@link Entry} containing the given key and value.", "NNUpdater": "Assert that the given {@link ImmutableMapIterable} contains an entry with the given key and value."}
{"Origin": "In order to set the matrix to a rotation transformation without post-multiplying, use {@link #rotation(Quaterniond)}.", "Reference": "In order to set the matrix to a rotation transformation without post-multiplying, use {@link #rotation(Quaterniondc)}.", "NNUpdater": "In order to set the matrix to a rotation transformation without post-multiplying, use {@link #rotation(Quaternionf)}."}
{"Origin": "This is provided for all event kinds except for: - VMUpdate", "Reference": "This is provided for all event kinds except for: - VMUpdate, VMFlagUpdate", "NNUpdater": "Returns all LiteralKinds except for ALL and PRIMITIVE"}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Type strategy that maps an {@link InputTypeValidator} to a {@link TypeStrategy} if the validator matches.", "Reference": "Type strategy that maps an {@link InputTypeStrategy} to a {@link TypeStrategy} if the input strategy infers identical types.", "NNUpdater": "Create an empty {@link ValidationOptions}."}
{"Origin": "Request the close of this {@link ClientSession} by sending the request to the consensus module.", "Reference": "Close of this {@link ClientSession} by sending the request to the consensus module.", "NNUpdater": "Set the counter for representing the current {@link Cluster.Role} of the cluster node."}
{"Origin": "Convert the attributes if necessary and add them to the profile.", "Reference": "Convert the profile attributes, if necessary, and add them to the profile.", "NNUpdater": "Set the identifier."}
{"Origin": "This gives the time elapsed, in seconds, since the last time this event was sent to the given {@link EntityRef}.", "Reference": "This gives the time elapsed, in ms, since the last time this event was sent to the given {@link EntityRef}.", "NNUpdater": "Check and maybe get the time elapsed since startTime."}
{"Origin": "It is sometimes more convenient to use {@link #promise(ObservableOnSubscribe)} over this method.", "Reference": "It is sometimes more convenient to use {@link #promiseAll(ObservableOnSubscribe)} over this method.", "NNUpdater": "This is similar to {@link Observable#subscribe(Subscriber)}, but it blocks."}
{"Origin": "Returns the 4 byte header for BIP32 (HD) wallet - private key part.", "Reference": "Returns the 4 byte header for BIP32 wallet P2PKH - private key part.", "NNUpdater": "Returns the same key with the private bytes removed."}
{"Origin": "Divide this Vector3d component-wise by another Vector3d.", "Reference": "Divide this Vector3d component-wise by another Vector3dc.", "NNUpdater": "In order to store the result in another vector, use {@link #transformPoint(Vector3d, Vector3d)}."}
{"Origin": "Set the IterationListeners for the ComputationGraph (and all layers in the network)", "Reference": "Set the trainingListeners for the ComputationGraph (and all layers in the network)", "NNUpdater": "Load a computation graph from a InputStream"}
{"Origin": "Shortcut to add a line of generated code", "Reference": "Shortcut to append a line of generated code", "NNUpdater": "Effectively a shortcut for:"}
{"Origin": "computes factor for given value; returns this rule's factor if matches, or VERSION if not", "Reference": "returns this rule's factor if test passes, or VERSION if not", "NNUpdater": "Returns a factor that applies a lambda on given factors."}
{"Origin": "Returns the border size that defines the attack range for a {@link robocode.BorderSentryRobot SentryRobot}.", "Reference": "Returns the sentry border size for a {@link robocode.BorderSentry BorderSentry}.", "NNUpdater": "Builds and sends an {@link Event} to the Sentry server using the statically stored {@link SentryClient} instance."}
{"Origin": "Indicates that this is a boot disk.", "Reference": "True if this is a boot disk.", "NNUpdater": "Detects if this is a Spring-Boot test and throws an exception, as these base classes is not intended for testing Camel on Spring Boot."}
{"Origin": "* @param value the value to set.", "Reference": "'s Slurp Crawler * @param value the value to set.", "NNUpdater": "Get the param value."}
{"Origin": "NOTE:The DBSnapshot must be in the available state to be deleted.", "Reference": "The DBSnapshot must be in the state to be deleted.", "NNUpdater": "Manual DB snapshots of the DB instance to be deleted are not deleted."}
{"Origin": "Invokes Builder.uses(Set uses)", "Reference": "Invoke Builder.uses(Set uses)", "NNUpdater": "This method uses {@link String#indexOf(int)} if possible."}
{"Origin": "Methods from interfaces visited early will be overwritten by later ones.", "Reference": "Methods from interfaces visited early take precedence over later ones.", "NNUpdater": "If the destination file exists, then this method will overwrite it."}
{"Origin": "Write {@code tag} and non-null {@code value} to {@code writer}.", "Reference": "Write {@code tag} and {@code value} to {@code writer}.", "NNUpdater": "Returns the first {@code ``ETag``} header or {@code null} for none."}
{"Origin": "Returns true if field persistedFileStatuses is set (has been assigned a value) and false otherwise", "Reference": "Returns true if field persistedFileFingerprints is set (has been assigned a value) and false otherwise", "NNUpdater": "Returns true if field persisted is set (has been assigned a value) and false otherwise"}
{"Origin": "This adds the specified price index values to the provider.", "Reference": "This adds the specified forward curve and time-series to the provider.", "NNUpdater": "Add index."}
{"Origin": "Execute tests via an {@link EngineDiscoveryRequest} using the provided {@link TestEngine}.", "Reference": "Execute tests for a given {@link EngineDiscoveryRequest} using the provided {@link TestEngine}.", "NNUpdater": "Execute tests via a {@link EngineDiscoveryRequest} using the provided {@link TestEngine}, then return the recorded {@link ExecutionResults} to the caller."}
{"Origin": "We select the note head which is closest to slur target end.", "Reference": "We select the compatible note head which is closest to slur target end.", "NNUpdater": "Check whether the provided points can represent a slur (or a portion of a slur)."}
{"Origin": "Creates a CaptureRequestConfiguration.Builder contains shared options.", "Reference": "Creates a CaptureRequestConfig.Builder contains shared options.", "NNUpdater": "Creates a builder for a {@link RequestType#API} options item"}
{"Origin": "This method is slow, cancelling existing and adding a new timer yield better performance.", "Reference": "This method is slow, canceling existing and adding a new timer yield better performance.", "NNUpdater": "NOTE: this is slow!"}
{"Origin": "Check whether a file with given name and checksum already exists", "Reference": "Check whether a file with given path and checksum already exists", "NNUpdater": "Check whether a file with given name and checksum already exists"}
{"Origin": "If the etag's value is equal to the wildcard character ({@code ``*``}), the setting will always be updated.", "Reference": "If the ETag's value is equal to the wildcard character ({@code ``*``}), the setting will always be updated.", "NNUpdater": "If {@link ConfigurationSetting#getETag() etag} is specified, the configuration value is updated if the current setting's etag matches."}
{"Origin": "Create parameters necessary for creating an iDEAL source.", "Reference": "Create iDEAL Source params.", "NNUpdater": "Resolve a source file, creating its package structure if necessary."}
{"Origin": "No reply will be send when the queue has been exhausted.", "Reference": "No response will be send when the queue has been exhausted.", "NNUpdater": "Returns 0 when when this stream has exhausted its input; and 1 otherwise."}
{"Origin": "Look for and set context declarations.", "Reference": "Look for and merge in context declarations.", "NNUpdater": "Close a lexical block (and lose all declarations it contained)."}
{"Origin": "Creates an {@link Array} containing the elements of this builder.", "Reference": "Creates an {@link XQArray} containing the elements of this builder.", "NNUpdater": "Creates an array containing all items of this value."}
{"Origin": "Converts a String or an array of bytes into an array of characters representing the hexidecimal values of each byte in order.", "Reference": "Converts a String or an array of bytes into an array of characters representing the hexadecimal values of each byte in order.", "NNUpdater": "Converts a big-endian byte array into an array of doubles."}
{"Origin": "Get the iterable of all providers (custom and default) registered for the given service provider contract in the underlying {@link InstanceManager instance manager} container.", "Reference": "Get the iterable of all providers (custom and default) registered for the given service provider contract in the underlying {@link InjectionManager injection manager} container.", "NNUpdater": "Get the iterable of all providers (custom and default) registered for the given service provider contract in the underlying {@link ServiceLocator HK2 service locator} container."}
{"Origin": "The default value is 2000.", "Reference": "The default is 500 millis.", "NNUpdater": "Default value is 4."}
{"Origin": "Constuct a trace log event.", "Reference": "Constuct an error log event.", "NNUpdater": "Always log an event."}
{"Origin": "Report the higher bound constant", "Reference": "Report the higher bound value", "NNUpdater": "Get a field constant from the constant pool."}
{"Origin": "Wait for and receive a response.", "Reference": "Waits for and receives a response.", "NNUpdater": "Change the status code for this response."}
{"Origin": "Tests the {@link FileSystemMaster#delete(AlluxioURI, DeleteOptions)} method for a directory with un-synced persistent entries with a sync check.", "Reference": "Tests the {@link FileSystemMaster#delete(AlluxioURI, DeleteContext)} method for a directory with un-synced persistent entries with a sync check.", "NNUpdater": "Tests the {@link FileSystemMaster#delete(AlluxioURI, DeleteOptions)} method for a directory."}
{"Origin": "Returns a list of packages available for the current project.", "Reference": "Returns a list of modules available for the current project.", "NNUpdater": "Returns the list of packages to ignore (filter out)."}
{"Origin": "Obtains an instance based on the index, specifying the sensitivity currency.", "Reference": "Obtains an instance.", "NNUpdater": "Obtains an instance from the observation and sensitivity value, specifying the currency of the value."}
{"Origin": "Compares that two secrets are equal.", "Reference": "Compares that two secrets are equal and not null.", "NNUpdater": "Compares two CharSequences, returning if they are equal."}
{"Origin": "Set number of partitions need processed for finished indexes create or rebuilding.", "Reference": "Add number of partitions need processed for finished indexes create or rebuilding.", "NNUpdater": "Set Verarbeitet."}
{"Origin": "Set this matrix to the rotation transformation of the given {@link Quaterniond}.", "Reference": "Set this matrix to the rotation transformation of the given {@link Quaterniondc}.", "NNUpdater": "Set this matrix to the rotation transformation of the given {@link Quaternionf}."}
{"Origin": "Gets the valueType.", "Reference": "Gets the newType.", "NNUpdater": "Gets the fieldType."}
{"Origin": "Returns the path of the specified client.", "Reference": "Returns the client with the specified id.", "NNUpdater": "Returns the absolute file path."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Defaults to {@code false}.", "Reference": "Defaults to {@code true}.", "NNUpdater": "Useful for debugging."}
{"Origin": "`DEPRECATED`: Node IDs; use `items` attribute", "Reference": "`DEPRECATED`: Node IDs Please use `items` instead.", "NNUpdater": "Size of the environment."}
{"Origin": "Create a copy of TopologyMetaData with only endpointToHostIdMap.", "Reference": "Create a copy of TopologyMetaData with only nodeToHostIdMap.", "NNUpdater": "Create a copy of TopologyMetaData with only endpointToHostIdMap."}
{"Origin": "Filter a list of {@link MetadataSearchResultRecord} that ensures the logged-in user has a privilege on", "Reference": "Filter a list of {@link MetadataRecord}s that ensures the logged-in user has a privilege on", "NNUpdater": "Returns the last user that has logged in that are still valid."}
{"Origin": "See Immutable List Static Factory Methods for details.", "Reference": "See Unmodifiable Lists for details.", "NNUpdater": "The returned List is immutable."}
{"Origin": "Removes the specified keys from the metadata of the specified {@link NamespacedEntityId}.", "Reference": "Removes the specified keys from the metadata of the specified {@link MetadataEntity}.", "NNUpdater": "Removes the specified keys from the metadata of the specified {@link NamespacedEntityId}."}
{"Origin": "Return the names of any classes referenced in the annotations in this list or their parameters.", "Reference": "Find the names of any classes referenced in the annotations in this list or their parameters.", "NNUpdater": "Get all superinterfaces of the named interface."}
{"Origin": "Configure the maximum number of parts allowed in a single multipart request.", "Reference": "Configure the maximum amount of memory that is allowed to use per part.", "NNUpdater": "Splits the text parts."}
{"Origin": "Computes the average for each pixel across all bands in the {@link Planar} image.", "Reference": "Computes the average for each pixel across selected bands in the {@link Planar} image.", "NNUpdater": "Computes the average for each pixel across all bands in the {@link Planar} image."}
{"Origin": "Build an HTTP Ok without any content.", "Reference": "Build an HTTP No content.", "NNUpdater": "Build an HTTP Ok without any content."}
{"Origin": "Gets the value of the 'KeepDeletedCells' field.", "Reference": "Gets the value of the 'keepDeletedCells' field.", "NNUpdater": "Gets the value of the 'paramName' field."}
{"Origin": "Create optimize engine instance.", "Reference": "Create sharding optimize engine instance.", "NNUpdater": "Create an instance of {@link EngineType }"}
{"Origin": "Create a {@link InstanceManager}.", "Reference": "Create a {@link InjectionManager}.", "NNUpdater": "Creates a FileManager."}
{"Origin": "Returns the key this event concerns.", "Reference": "Returns the key.", "NNUpdater": "Create the public {@link Id.NotificationFeed}s that concerns the stream with configuration {@code config}."}
{"Origin": "NOTE: this method i meant to render fresh component instances that are disposed after the html has been generate.", "Reference": "NOTE: this method is meant to render fresh component instances that are disposed after the html has been generate.", "NNUpdater": "Generate the FOAF representation of this resource."}
{"Origin": "Tests resilency when L2 link is down.", "Reference": "Tests resiliency when L2 link is down.", "NNUpdater": "Tests resiliency when L2 link is down."}
{"Origin": "Sets the identifier of the action profile.", "Reference": "Sets the ID of the action profile.", "NNUpdater": "Sets the label"}
{"Origin": "Sets the groups used to find a repo curve.", "Reference": "Sets the groups used to find a repo curve by legal entity.", "NNUpdater": "Get base."}
{"Origin": "If the key already exists, the sensitivity value will be merged.", "Reference": "Values with the same market data name and currency will be merged.", "NNUpdater": "If a key with the specified name already exists, Amazon EC2 returns an error."}
{"Origin": "This method returns all defined methods in service interface", "Reference": "This method returns all defined methods in service interface that aren transactional", "NNUpdater": "Create an implementation of the API defined by the {@code service} interface."}
{"Origin": "Creates query for the given searchPattern.", "Reference": "Queries this search source for the given queryString.", "NNUpdater": "2014-09-09-Holiday"}
{"Origin": "This operation requires the certificates/manageissuers/getissuers permission.", "Reference": "This operation requires the {@code certificates/manageissuers/getissuers} permission.", "NNUpdater": "This operation requires the {@code certificates/manageissuers/deleteissuers permission}."}
{"Origin": "The default charset used for string decoding and encoding.", "Reference": "Gets the default charset name used for string decoding and encoding.", "NNUpdater": "Serialize the Thrift object into a Java string, using the UTF8 charset encoding."}
{"Origin": "This sets up a PoolingDataSource.", "Reference": "This sets up a PoolingDataSourceWrapper.", "NNUpdater": "This sets up a PoolingDataSource."}
{"Origin": "Set the etag property: The etag property.", "Reference": "Set the eTag property: The eTag property.", "NNUpdater": "Set the routeFilter value."}
{"Origin": "If include_properties is set, the properties for each protocol will also be printed.", "Reference": "If include_props is set, the attrs of each protocol are also printed", "NNUpdater": "Set the suffix value."}
{"Origin": "Expected 4 barriers for the Serial GC and 8 for G1 (4 pre + 4 post).", "Reference": "Expected 4 barriers for the card mark GCs and 8 for G1 (4 pre + 4 post).", "NNUpdater": "Create New GPIO Controller instance"}
{"Origin": "Get locks.", "Reference": "Delete lock.", "NNUpdater": "Locks a resource."}
{"Origin": "Returns a function.", "Reference": "Returns a function call.", "NNUpdater": "function."}
{"Origin": "The offset is not part of the calculation and will be unchanged in the result.", "Reference": "In this case, the offset is not part of the calculation and will be unchanged.", "NNUpdater": "Build the part-list as the sequence of Result/LogicalPart instances, and map each of them to a Part."}
{"Origin": "This method ADDS additional IterationListener to existing listeners", "Reference": "This method ADDS additional TrainingListener to existing listeners", "NNUpdater": "Adds the specified object to the list of registered configuration listeners."}
{"Origin": "KeyImportOptions#getKeyMaterial() key material} cannot be null.", "Reference": "ImportKeyOptions#getKey() key material} cannot be null.", "NNUpdater": "KeyImportOptions#getKeyMaterial() key material} cannot be null."}
{"Origin": "Implements Operator.MINUS.", "Reference": "Implements 'x - y'.", "NNUpdater": "The goal is to match the code for {@code minusYears().minusMonths().minusDays()} in most cases."}
{"Origin": "Returns true if passed pubspec declares a flutter dependency.", "Reference": "Returns true if passed pubspec declares a flutter or flutter_web dependency.", "NNUpdater": "Set the passed module to the module type used by Flutter, defined by {@link #getModuleTypeIDForFlutter()}."}
{"Origin": "Read a string that was encoded as a IA5tring DER value.", "Reference": "Read a string that was encoded as a IA5String DER value.", "NNUpdater": "In BER/DER encoding, length can be encoded in 2 forms, Short form."}
{"Origin": "If the given language code is {@code null}, uses {@link DisplaySettings#getContentLanguage(Context)}.", "Reference": "If the given language code is {@code null}, uses {@link DisplaySettings#getShowsLanguage(Context)}.", "NNUpdater": "Operation fails."}
{"Origin": "Set Minimum Level.", "Reference": "Set Mindestmenge.", "NNUpdater": "Set Ebene."}
{"Origin": "The classpath.", "Reference": "The build classpath.", "NNUpdater": "Add the Mule libraries to the project classpath."}
{"Origin": "This helps yield savings in round trips and latencies, enabling", "Reference": "This helps yield savings in round trips and latencies, enabling Amazon", "NNUpdater": "Sets the CacheManager to be used for data caching to reduce EIS round trips."}
{"Origin": "This will add a given service class to the running instnace with given base path.", "Reference": "This will add a given service class to the running instance with given base path.", "NNUpdater": "Reset the client instance"}
{"Origin": "Obtains an instance from the specified unique name.", "Reference": "Obtains an instance from the specified name.", "NNUpdater": "Obtains the type from a unique name."}
{"Origin": "Shuts down BookKeeper and RocksDB and cleans up file system directory.", "Reference": "Shuts down BookKeeper and cleans up file system directory.", "NNUpdater": "Shuts down the client."}
{"Origin": "Intervals are inclusive of the start instant and exclusive of the end.", "Reference": "Non-zero duration intervals are inclusive of the start instant and exclusive of the end.", "NNUpdater": "Gets the start of this time interval, which is inclusive, as a DateTime."}
{"Origin": "Appends a string representation of the given access modifiers to {@link #buf buf}.", "Reference": "Appends a string representation of the given access flags to {@link #stringBuilder}.", "NNUpdater": "Writes rec file position to given {@code buf}."}
{"Origin": "Returns a new Task that, when this task completes normally, is executed using the supplied Scheduler, with this task's result as the argument to the supplied action.", "Reference": "Returns a new Task that, when this task completes normally, is executed using the supplied Executor, with this task's result as the argument to the supplied action.", "NNUpdater": "Returns a new Task that, when this task completes normally, is executed using the default Scheduler."}
{"Origin": "Add an {@link AsyncIOInterceptor} that will be invoked in the reverse order it was added.", "Reference": "Add an {@link AsyncIOInterceptor} that will be invoked in the order it was added.", "NNUpdater": "Add an {@link PostExecutionRequestTraceReporterInterceptor} to the interceptor list"}
{"Origin": "Configuring Analysis Schemes in the Amazon CloudSearch Developer Guide .", "Reference": "CloudSearch Developer Guide.", "NNUpdater": "For more information, see Sorting Results in the Amazon CloudSearch Developer Guide."}
{"Origin": "Standard setter for the rightwardLabel String in this Relationship", "Reference": "Standard setter for the rightwardValue String in this Relationship", "NNUpdater": "Sets the value(s) for identifier (An identifier for the person as this patient)"}
{"Origin": "Gets the field name to use when converting from a DBObject", "Reference": "Gets the field name to use when converting from a Document", "NNUpdater": "Specify the default charset name to use when converting multipart file content into Strings if the multipart itself does not provide a charset."}
{"Origin": "Selects tracks for the period and returns the new result if the selection changed.", "Reference": "Selects tracks for the period.", "NNUpdater": "Selects tracks for use."}
{"Origin": "The input file must be a list of whitespace-separated verb-lemma-POS triples, one verb form per line.", "Reference": "The input file must be a list of tab-separated verb-POS pairs, one verb per line.", "NNUpdater": "Get method's http verbs."}
{"Origin": "Returns the set of the fully qualified class names of the providers.", "Reference": "Returns the list of the fully qualified class names of the providers or provider factories.", "NNUpdater": "If it is null, returns the class name from a fully-qualified class name."}
{"Origin": "Compute an XWiki WebJAR URL (of the form {@code URL(resource name)}.", "Reference": "Compute an XWiki WebJar URL of the form {@code URL(resource name)}.", "NNUpdater": "See URL()"}
{"Origin": "This merges the two objects - {@code this} and the specified offset - to form an instance of {@code OffsetTime}.", "Reference": "This merges the two objects - {@code this} and the specified date - to form an instance of {@code LocalDateTime}.", "NNUpdater": "Combines this date with an offset time to create an {@code OffsetDateTime}."}
{"Origin": "Sets the humanAgentAssist.", "Reference": "Set the humanAgentAssist.", "NNUpdater": "Return a new builder to assist in creating a new SmallTagMap using the default tag size (8)."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Sets the quorum name for operations.", "Reference": "Sets the split brain protection name for operations.", "NNUpdater": "Sets the cluster read quorum strategy."}
{"Origin": "This usally is the result of a disconnected graph.", "Reference": "This usually is the result of a disconnected graph.", "NNUpdater": "DataSource as disconnected and notifies the AudioMixer that one of its output PushBufferDataSources has been disconnected."}
{"Origin": "I need to know chart dimension to remove extra empty spaces, that bad because viewport depends a little on contentRectMinusAllMargins.", "Reference": "I need to know chart dimension to remove extra empty spaces, that bad because viewport depends a little on contentRect.", "NNUpdater": "I need to know chart dimension to remove extra empty spaces, that bad because viewport depends a little on contentRectMinusAllMargins."}
{"Origin": "Create a temporary local variable in {@code methodBody}.", "Reference": "Gets a new temporary local variable name in {@code methodBody}.", "NNUpdater": "Sets the directory to be used for the temporary files created by the {@link #createTempFile()} method."}
{"Origin": "A {@code DateTimeAccessor} represents some form of date and time information.", "Reference": "A {@code TemporalAccessor} represents some form of date and time information.", "NNUpdater": "Checks if the instant of this date-time is after that of the specified date-time."}
{"Origin": "Returns the generator function for customizing drag data.", "Reference": "Returns the drag data generator function for the given type.", "NNUpdater": "Returns the original id while dragging."}
{"Origin": "Sets the value of the any property.", "Reference": "Sets the value of the schemaLanguage property.", "NNUpdater": "Gets the value of the fill property."}
{"Origin": "Save cluster.", "Reference": "Save cluster advanced configuration.", "NNUpdater": "testExport"}
{"Origin": "The array length access has been removed from the offset.", "Reference": "The sequence length access has been removed from the offset.", "NNUpdater": "Indicates that a MetaContactGroup has been removed from the MetaContact list."}
{"Origin": "insert an async processor (with dedicated thread, multiple subscribers)", "Reference": "insert an async processor (with dedicated queue, multiple subscribers)", "NNUpdater": "insert an async processor (with dedicated thread, multiple subscribers)"}
{"Origin": "Fails silently if no such student.", "Reference": "Fails silently if there is no such student.", "NNUpdater": "Creates a Student object."}
{"Origin": "Get a string from the underlying resource bundle or return null if the String is not found.", "Reference": "Get a string from the underlying resource bundle or return null if the", "NNUpdater": "Returns a string from the value."}
{"Origin": "Creates a new DataLakeDirectoryAsyncClient object by concatenating subDirectoryName to the end of", "Reference": "Creates a new DataLakeDirectoryAsyncClient object by concatenating subdirectoryName to the end of", "NNUpdater": "Creates a new BlobAsyncClient object by concatenating blobName to the end of ContainerAsyncClient's URL."}
{"Origin": "Initialize the timeout length by getting the CRL timeout system property.", "Reference": "Initialize the timeout length by getting the specified CRL timeout system property.", "NNUpdater": "Returns the socket connection timeout."}
{"Origin": "Returns the container with the keys for the currently set locale.", "Reference": "Returns the container filled according to the current locale.", "NNUpdater": "Set the locale for this session."}
{"Origin": "Adds metadata to this provider or overrides it if already available.", "Reference": "Adds metadata to this provider", "NNUpdater": "Adds a control metadata."}
{"Origin": "Creates an invalid service status exception.", "Reference": "Creates an invalid API status exception.", "NNUpdater": "Throws a type exception."}
{"Origin": "Creates a new {@link FileIOChannel.Enumerator}, spreading the channels in a round-robin fashion across the temporary file directories.", "Reference": "Creates a new {@link Enumerator}, spreading the channels in a round-robin fashion across the temporary file directories.", "NNUpdater": "Creates a new {@link FileIOChannel.Enumerator}, spreading the channels in a round-robin fashion across the temporary file directories."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "The hash code is based upon the package name, and for a qualified export, the set of modules names to which the package is exported.", "Reference": "The hash code is based upon the modifiers, the package name, and for a qualified opens, the set of modules names to which the package is opened.", "NNUpdater": "The hash code is based upon the modifiers, the package name, and for a qualified export, the set of modules names to which the package is exported."}
{"Origin": "Setter accessor for attribute 'description'.", "Reference": "Setter accessor for attribute 'evaluationStrategy'.", "NNUpdater": "Setter accessor for attribute 'weight'."}
{"Origin": "returns the Uri of the photo in the adapter at the passed position", "Reference": "returns the photo item in the adapter at the passed position", "NNUpdater": "blocks the blog associated with the passed post and removes all posts in that blog from the adapter"}
{"Origin": "Ensure that the zookeeper socket is available by polling it for up to 2 seconds", "Reference": "Ensure that the zookeeper socket is available by polling it for up to 2 seconds and creates the topic required by this source.", "NNUpdater": "Ensure that the each Rabbit broker socket is available by polling it for up to 2 seconds"}
{"Origin": "The generated HotStream is pausable, for a unpausable HotStream @see {@link ReactiveSeq#primedHotStream(Executor)}.", "Reference": "The generated Connectable is pausable, for a unpausable Connectable @see {@link ReactiveSeq#primedHotStream(Executor)}.", "NNUpdater": "Get the number of hot entries in the cache."}
{"Origin": "This method logs a warning if the class cannot be registered.", "Reference": "This method LOGs a warning if the class cannot be registered.", "NNUpdater": "This method returns {@code null} if the class cannot be found or not defined in the specified module."}
{"Origin": "Returns a value with the type of the given expression.", "Reference": "Returns a value with the type of the given expression and invalidates the internal array.", "NNUpdater": "Returns expression string."}
{"Origin": "Builds a path operation.", "Reference": "Builds a path operation depending on generation mode.", "NNUpdater": "Builds an operation."}
{"Origin": "Tests resilency when L2 and L4 link is down.", "Reference": "Tests resiliency when L2 and L4 link is down.", "NNUpdater": "Tests resiliency when L2 and L4 link is down."}
{"Origin": "Invoke the Method Handler as a Callable.", "Reference": "Invoke the Method Handler as a Publisher.", "NNUpdater": "Invoke the handler method with the given argument values."}
{"Origin": "The alias is an optional string value located under the {@link #ALIAS} key.", "Reference": "The alias is an optional string value located under the {@link HasAliasUtil#ALIAS} key.", "NNUpdater": "Returns path alias."}
{"Origin": "Obtains an instance from the specified unique name.", "Reference": "Obtains an instance from the specified name.", "NNUpdater": "Obtains the type from a unique name."}
{"Origin": "Update the keys whose fd's have been selected by the devpoll driver.", "Reference": "Update the keys whose fd's have been selected by the /dev/poll.", "NNUpdater": "Update the keys whose fd's have been selected by kqueue."}
{"Origin": "Convert to primitive types, returning default value if text is null.", "Reference": "Convert to time, returning default value if text is inconvertible.", "NNUpdater": "Convert all types, both reference and primitive, to {@code Object}."}
{"Origin": "Find and load all pull files under a base {@link Path} recursively.", "Reference": "Find and load all pull files under a base {@link Path} recursively in an order sorted by last modified date.", "NNUpdater": "Creates a {@link FileHelper} that will by default match all files and all directories under the given basePath."}
{"Origin": "Creates builder for {@link PreparedDeleteObjects}.", "Reference": "Creates builder for {@link PreparedDeleteCollectionOfObjects}.", "NNUpdater": "Builds new instance of {@link PreparedDeleteObject}"}
{"Origin": "Value for 'LIMIT' for selection query <= configured value", "Reference": "Value for 'LIMIT' for selection/distinct query <= configured value", "NNUpdater": "Data in this, e.g."}
{"Origin": "Returns whether the inodeFile is fully in memory or not.", "Reference": "Returns whether the inodeFile is fully in Alluxio or not.", "NNUpdater": "Return whether the inodeFile is fully in memory or not."}
{"Origin": "Create a new {@link MappingMongoConverter} using the given {@link MongoDbFactory} when loading {@link DBRef}.", "Reference": "Create a new {@link MappingMongoConverter} using the given {@link MongoDatabaseFactory} when loading {@link DBRef}.", "NNUpdater": "Will use the {@link MongoClient} instance configured in {@link #mongo()}."}
{"Origin": "Return the BeanProperty that make up the unique id.", "Reference": "Return the BeanProperty that is the Id.", "NNUpdater": "Return the BeanDescriptor using its class name."}
{"Origin": "Until you enable full-control mode, you have access only to shared billing, and you can't use any of the advanced account administration features that AWS Organizations supports.", "Reference": "Until you enable all features, you have access only to consolidated billing, and you can't use any of the advanced account administration features that AWS", "NNUpdater": "To complete a successful transaction, send a commit request."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Executes specified {@code callables} on the sequential executor in sequence, one by one.", "Reference": "The single task itself executes specified {@code callables} in sequence, one by one.", "NNUpdater": "Gets the value of the dropCheckConstraint property."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "set consumers to this Carrier.", "Reference": "set consumeDriver to this Carrier.", "NNUpdater": "consumer begin to run when {@link DataCarrier#produce(T)} begin to work with 20 millis consume cycle."}
{"Origin": "Extract class names from {@link Bindable#inherit()} attribute.", "Reference": "Extract a list of type mirrors from the {@link Bindable#inherit()}.", "NNUpdater": "{@inheritDoc #handleException(Throwable)}"}
{"Origin": "delete a path from the trie", "Reference": "Delete a path from the trie.", "NNUpdater": "deserialize returns a NewTrieImpl, from its serialized bytes"}
{"Origin": "Trackes timeouts periodically if timeout tracking is enabled.", "Reference": "Tracks timeouts periodically if timeout tracking is enabled.", "NNUpdater": "Returns the iterator fields"}
{"Origin": "By default, this method will return an instance of {@link XmlConfigurationReaderFactory}.", "Reference": "By default, this method will return an {@link XmlConfigurationReader XML reader} factory.", "NNUpdater": "However, this can be modified by calling {@link #setReaderFactory(ConfigurationReaderFactory) setReaderFactory}."}
{"Origin": "Therefore any task should be cancellable.", "Reference": "Therefore any task should be cancelable.", "NNUpdater": "This query may therefore be expensive."}
{"Origin": "Total runtime size is 3904 bytes", "Reference": "Total runtime size is 3216 bytes", "NNUpdater": "Total runtime size is 13952 bytes"}
{"Origin": "The negative of {@code endsWith} is {@link #endsNotWith}.", "Reference": "The negative of {@code endsWith} is {@link #notEndingWith}.", "NNUpdater": "Ends the session."}
{"Origin": "Converts a String or an array of character bytes representing hexidecimal values into an array of bytes of those same values.", "Reference": "Converts a String or an array of character bytes representing hexadecimal values into an array of bytes of those same values.", "NNUpdater": "An array of the (formatted) sort values used."}
{"Origin": "Tests for the {@link BaseFileSystem#free(AlluxioURI, FreeOptions)} method.", "Reference": "Tests for the {@link BaseFileSystem#free(AlluxioURI, FreePOptions)} method.", "NNUpdater": "Tests for the {@link BaseFileSystem#free(AlluxioURI, FreeOptions)} method."}
{"Origin": "Bind all providers contained in {@code providerBag} (classes and instances) using instance manager.", "Reference": "Bind all providers contained in {@code providerBag} (classes and instances) using injection manager.", "NNUpdater": "Creates a new manager for a provider, based on key look up from {@link #providers()}."}
{"Origin": "Main method to invoke this demo about how to recognize linked entities of a text input.", "Reference": "Main method to invoke this demo about how to recognize the linked entities of an input text.", "NNUpdater": "Test list all the classifiers."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Initializes the RESTXQ module cache.", "Reference": "Initializes the web module cache.", "NNUpdater": "Initializes the file cache."}
{"Origin": "Takes the detected squares and turns it into a list of {@link PositionSquare}.", "Reference": "Takes the detected squares and turns it into a list of {@link PositionPatternNode}.", "NNUpdater": "ID (LEFT_SQUARE RIGHT_SQUARE)*"}
{"Origin": "The {@link EcKeyCreateOptions#getKeyType() keyType} indicates the type of key to create.", "Reference": "The {@link CreateEcKeyOptions#getKeyType() keyType} indicates the type of key to create.", "NNUpdater": "Get the Type of {@link IN}."}
{"Origin": "Returns the segment size.", "Reference": "Maps the log segment into memory.", "NNUpdater": "The persisted entry size of this segment"}
{"Origin": "Get Reconciled.", "Reference": "Get Abgeglichen.", "NNUpdater": "The function takes a PartitionIterator of the results from the replicas which has already been collated and reconciled, along with the command being executed."}
{"Origin": "Adds a new path selection handler.", "Reference": "Adds a resource selection handler.", "NNUpdater": "Adds a path prefix and a handler for that path."}
{"Origin": "Opens the given snapshot reader.", "Reference": "Opens the given snapshot input stream.", "NNUpdater": "Opens the underlying proxy client."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Main method to invoke this demo about how to analyze sentiment of a text input.", "Reference": "Main method to invoke this demo about how to recognize the PII entities of an input text.", "NNUpdater": "Add the sentiment."}
{"Origin": "Set the subject value.", "Reference": "Set the subject Name.", "NNUpdater": "Sets subject."}
{"Origin": "Classpath/url-based asset source.", "Reference": "Classpath asset source.", "NNUpdater": "Adds {@link URL} to the given list based on the system classpath."}
{"Origin": "Creates a histogram of the given arguments", "Reference": "Creates a count of the given arguments", "NNUpdater": "The histogram array of the returned {@link Histogram} will look like this:"}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "To achieve that, use {@link #bind(BEAN)}.", "Reference": "To achieve that, use {@link #setBean(BEAN)}.", "NNUpdater": "To achieve that, use {@link #bind(BEAN)}."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Computes a hash code for this module export.", "Reference": "Computes a hash code for this module opens.", "NNUpdater": "If the caller's module is this module then update this module to export package {@code pn} to the given module."}
{"Origin": "Expected 4 barriers for the Serial GC and 8 for G1 (4 pre + 4 post).", "Reference": "Expected 4 barriers for the card mark GCs and 8 for G1 (4 pre + 4 post).", "NNUpdater": "Create New GPIO Controller instance"}
{"Origin": "Sets the search roots.", "Reference": "Sets the searchRoots.", "NNUpdater": "Get git roots for the selected paths"}
{"Origin": "This utility is needed for supporting Producers + some Apps Framework utility classes.", "Reference": "This utility is needed for supporting Producers + some Apps", "NNUpdater": "Utility method to extract the {@link ConnectionManager} from QueryOptions."}
{"Origin": "Changes the default factory.", "Reference": "Set the default factory.", "NNUpdater": "By default it is configured as an instance of {@link BindParameterCustomizerFactory}."}
{"Origin": "Detector for chessboard targets.", "Reference": "Not recommended for fisheye images.", "NNUpdater": "Add the targets."}
{"Origin": "Adds a single sensitivity to the builder using a date.", "Reference": "Adds a sensitivity to the builder.", "NNUpdater": "Obtains an instance from a multiple sensitivity entries."}
{"Origin": "Checks if a a fragment of a NAL unit from a specific FU-A RTP packet payload is keyframe or not", "Reference": "Checks if a fragment of a NAL unit from a specific FU-A RTP packet payload is keyframe or not.", "NNUpdater": "Gets the RTP payload type corresponding to a specific JMF encoding and clock rate."}
{"Origin": "Updates IJ1 settings and preferences to reflect values set in IJ2 dialogs.", "Reference": "Updates legacy ImageJ settings and preferences to reflect values set in modern ImageJ dialogs.", "NNUpdater": "Updates user profiles."}
{"Origin": "Set the elements of this matrix to the upper left 3x3 of the given {@link Matrix4f}.", "Reference": "Set the elements of this matrix to the upper left 3x3 of the given {@link Matrix4fc}.", "NNUpdater": "Set the upper left 3x3 submatrix of this {@link Matrix4f} to that of the given {@link Matrix4f} and don't change the other elements."}
{"Origin": "Resolves a {@link NameableClusterPrivilege} from a given name if it exists.", "Reference": "Resolves a {@link NamedClusterPrivilege} from a given name if it exists.", "NNUpdater": "Returns a new QName."}
{"Origin": "It is recommended to bind the service to a server using {@linkplain ServerBuilder#service(ServiceWithRoutes, Function[])", "Reference": "It is recommended to bind the service to a server using {@linkplain ServerBuilder#service(HttpServiceWithRoutes, Function[])", "NNUpdater": "Invokes {@link Service#serviceAdded(ServiceConfig)}."}
{"Origin": "Use reflection to discover and report on the bigdata build information.", "Reference": "Method used to discover and report on the bigdata build information.", "NNUpdater": "A {@link BigdataValueFactoryImpl}"}
{"Origin": "Returns the Google accounts (see {@link #isGoogleAccountType) for this ContactListFilter.", "Reference": "Returns the Google accounts (see {@link #isWritableGoogleTypeFilter ) for this ContactListFilter.", "NNUpdater": "If {@link #type()} is {@link Type#FROM_URI} the method returns a Google Cloud Storage URI (e.g."}
{"Origin": "Creates a mock {@link DocumentModelBridge} that has the specified reference, author and programming rights.", "Reference": "Creates a mock {@link DocumentModelBridge} that has the specified reference.", "NNUpdater": "The {@link ProgrammingModel} in force, either defaulted or specified {@link #setProgrammingModelFacets(ProgrammingModel) explicitly}."}
{"Origin": "Returns a string representation of the specified value.", "Reference": "Returns a chopped token representation of the specified value.", "NNUpdater": "Builds a string representation of the specified value."}
{"Origin": "Creates a StackdriverStatsExporter for an explicit project ID and using explicit credentials.", "Reference": "Creates a StackdriverStatsExporter for an explicit project ID and using explicit credentials, with default Monitored Resource.", "NNUpdater": "Only one Stackdriver exporter can be registered at any point."}
{"Origin": "Returns the number of sync d l objects where parentFolderId = ?.", "Reference": "Returns the number of sync d l objects where modifiedTime > ?", "NNUpdater": "Returns the number of sync d l objects where type = ?"}
{"Origin": "Set Account Sign.", "Reference": "Set Kontovorzeichen.", "NNUpdater": "Set Konto."}
{"Origin": "This method returns the original edge via its traversal key.", "Reference": "This method returns the original edge via its key.", "NNUpdater": "This method should execute the traversal via {@link TraversalVertexProgram}."}
{"Origin": "Gets the X509Certificate out of the X509CertificateHolder and add it to certificatesMap.", "Reference": "Gets the X509Certificate out of the X509CertificateHolder.", "NNUpdater": "Create x509 certificate path from array certificates chain."}
{"Origin": "Test of npara method, of class ShiftedGeometricDistribution.", "Reference": "Test of length method, of class ShiftedGeometricDistribution.", "NNUpdater": "Test of geometric method, of class DiscreteDistributions."}
{"Origin": "A member should only expose a JsName when a JsName has been assigned and the compilation has been configured to honor those names.", "Reference": "A member should only require a JsName when a JsName has been assigned and the compilation has been configured to honor those names.", "NNUpdater": "Invokes a JS function."}
{"Origin": "Gets the X509Certificate out of the X509CertificateHolder and add it to certificatesMap.", "Reference": "Gets the X509Certificate out of the X509CertificateHolder.", "NNUpdater": "Create x509 certificate path from array certificates chain."}
{"Origin": "Transform a nullable return value into an observable with 0 or 1 element.", "Reference": "Transform a nullable return value into a Maybe", "NNUpdater": "Ensures that if the current request isn't nullable, then each contribution is also not nullable."}
{"Origin": "Returns the session state machine type.", "Reference": "Returns the session state machine type name.", "NNUpdater": "Sets the state machine type name."}
{"Origin": "Creates query for the given queryString.", "Reference": "Queries this search source for the given queryString.", "NNUpdater": "-D"}
{"Origin": "Configuring Scaling Options in the Amazon CloudSearch Developer Guide .", "Reference": "CloudSearch Developer Guide.", "NNUpdater": "For more information, see Sorting Results in the Amazon CloudSearch Developer Guide."}
{"Origin": "Return a list of expanded labels in the current tree.", "Reference": "Return a list of expanded clusters in the current tree.", "NNUpdater": "Get id of expandable `rule` object."}
{"Origin": "Creates an empty payload buffer of the given size and transaction status.", "Reference": "Creates an empty payload buffer of the given size and returns it for writing.", "NNUpdater": "Creates the raw data view of given {@link Payload}."}
{"Origin": "Returns a rule that restricts access according to the {@link Role} of the current authenticated {@link User}.", "Reference": "Adds a rule that restricts access according to the {@link Role} of the current authenticated {@link User}.", "NNUpdater": "Add a notification to a user."}
{"Origin": "If database is corrupted (table USER_TOKENS badly purged for instance), then the login may not relate to a valid user.", "Reference": "If database is corrupted (table USER_TOKENS badly purged for instance), then the uuid may not relate to a valid user.", "NNUpdater": "If the user is logged in and the userPrefLoginId specified in the context Map matches the user's userLoginId, then the method returns true."}
{"Origin": "Produces an Uncollapsed SemanticGraph with optional extras.", "Reference": "Produces an Uncollapsed (basic) SemanticGraph.", "NNUpdater": "Set the semanticRoles."}
{"Origin": "This creates a child from identifiers extracted from the message message, or a new span if one couldn't be extracted.", "Reference": "This creates a child from identifiers extracted from the message properties, or a new span if one couldn't be extracted.", "NNUpdater": "Sends a AbstractFileChunk to Solr and its extracted content stream to be added to the index."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Generates an in-memory key for an service, used to index the app for later quick retrieval.", "Reference": "Generates an in-memory key for an api, used to index the app for later quick retrieval.", "NNUpdater": "This allows for retrieval of application definitions in the stream by index."}
{"Origin": "Adds multiple Certificates out of a Collection of X509CertificateHolder into certificatesMap.", "Reference": "Adds multiple Certificates out of a Collection of X509CertificateHolder into certificateSet.", "NNUpdater": "Create x509 certificate path from array certificates chain."}
{"Origin": "Tests the engine starts up, executes 1 trade cycle successfully, but then receives unexpected Exception from", "Reference": "Tests the engine starts up, executes 1 trade cycle successfully, but then receives unexpected", "NNUpdater": "If an UnexpectedExceptionInformation is not found for the status code the default UnexpectedExceptionInformation will be returned."}
{"Origin": "Returns true if field jvmVersion is set (has been assigned a value) and false otherwise", "Reference": "Returns true if field version is set (has been assigned a value) and false otherwise", "NNUpdater": "Returns true if field mIsSubDataset is set (has been assigned a value) and false otherwise"}
{"Origin": "If there are incomplete reads, retry.", "Reference": "If there are errors retries.", "NNUpdater": "If there are e.g."}
{"Origin": "{@codesnippet com.azure.storage.file.datalake.DataLakeDirectoryClient.deleteSubDirectory#String}", "Reference": "{@codesnippet com.azure.storage.file.datalake.DataLakeDirectoryClient.deleteSubdirectory#String}", "NNUpdater": "{@codesnippet com.azure.storage.file.directoryClient.deleteSubDirectoryWithResponse#string-duration-context}"}
{"Origin": "or throws a {@link com.liferay.chat.NoSuchStatusException} if it could not be found.", "Reference": "or throws a {@link NoSuchStatusException} if it could not be found.", "NNUpdater": "Operation fails."}
{"Origin": "Load the profile definitions from a file.", "Reference": "Extracts profile information from a file or from zookeeper", "NNUpdater": "Load object definitions from JSON stream."}
{"Origin": "The notification sent to the SNS topic is the same output as returned from DescribeJob.", "Reference": "The notification sent to the SNS topic is the same output as returned from", "NNUpdater": "Adds a sent notification to the buffer, potentially discarding a previously-existing sent notification."}
{"Origin": "If a default category is set, it is assumed that it was parsed from the request predicate (if availabe).", "Reference": "If a default category is set, it is assumed that it was parsed from the request predicate (if available).", "NNUpdater": "If {@code pos} is negative, it is the same as if it was 0."}
{"Origin": "Returns a QualifiedType that has the same type as this instance, but with the given qualifiers.", "Reference": "Returns a QualifiedType that has the same type as this instance, but with only the given qualifiers.", "NNUpdater": "Returns the least upper bound of two types."}
{"Origin": "The supplied function is invoked for each market data name in this sensitivities.", "Reference": "The supplied function is invoked for each parameter metadata in this sensitivities.", "NNUpdater": "Adds market data wrapped in a box."}
{"Origin": "Hardware Security Modules in the Amazon Redshift Cluster Management Guide.", "Reference": "Hardware Security Modules in the Amazon Redshift Cluster Management", "NNUpdater": "Describes the SQL Query to execute on an Amazon Redshift database for an"}
{"Origin": "The state of playback should be updated to {@link SessionPlayer2#PLAYER_STATE_PAUSED} after the prefetch is done.", "Reference": "The state of playback should be updated to {@link SessionPlayer2#PLAYER_STATE_PAUSED} after the prepare is done.", "NNUpdater": "The state of playback should be updated to {@link SessionPlayer2#PLAYER_STATE_PAUSED} after the prefetch is done."}
{"Origin": "Returns this {@code Try} in the case of a {@code Success}, otherwise {@code other.get()}.", "Reference": "Returns this {@code Try} in the case of a {@code Success}, otherwise {@code other.call()}.", "NNUpdater": "Return the actual {@link Exception} thrown."}
{"Origin": "Otherwise, the segment is only freed and made eligible for reclamation by the GC.", "Reference": "The segment is only freed and made eligible for reclamation by the GC.", "NNUpdater": "Checks whether this memory segment has already been freed."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Use to update your endpoints.", "Reference": "Use to update a batch of endpoints.", "NNUpdater": "Set the properties value."}
{"Origin": "For selection order-by queries, order-by expressions will be put at the front.", "Reference": "Order-by expressions will be put at the front.", "NNUpdater": "Returns a new {@link Order} with the given {@link Direction}."}
{"Origin": "Get S3 Storage Configuration ### Functional Description: Retrieve S3 configuration.", "Reference": "Get S3 storage configuration ### \ud83d\ude80 Since version VERSION ### Functional Description: Retrieve S3 configuration.", "NNUpdater": "Method that returns the corresponding {@link AmazonS3} client based on the {@link Region}."}
{"Origin": "***** Property JHOME *****", "Reference": "***** Property JAVAHOME *****", "NNUpdater": "Operation fails."}
{"Origin": "Return null to speed up exception (stack trace is not needed for this exception).", "Reference": "Speed up exception (stack trace is not needed for this exception).", "NNUpdater": "Returns the stack trace of the specified {@code exception} as a {@link String} instead."}
{"Origin": "Tests {@link Array#tail()}.", "Reference": "Tests {@link XQArray#tail()}.", "NNUpdater": "Operation fails."}
{"Origin": "Compiles classes in {@code paths}", "Reference": "Compiles classes in {@code targets}", "NNUpdater": "Compiles the classes for the described action."}
{"Origin": "Currently, protocol versions 3 (7.4+) and 2 (pre-VERSION) are supported.", "Reference": "Currently, protocol versions 3 (7.4+) is supported.", "NNUpdater": "Operation fails."}
{"Origin": "Record an {@link ExecutionEvent} for a published {@link ReportEntry}.", "Reference": "Record an {@link Event} for a published {@link ReportEntry}.", "NNUpdater": "Set the {@link ReportProxy} to show."}
{"Origin": "Draws the notification.", "Reference": "Draws the bubble notification.", "NNUpdater": "Adds a string."}
{"Origin": "API allowing to search for documents allowing to have mutliple entries per language", "Reference": "API allowing to search for documents allowing to have mutliple entries per locale", "NNUpdater": "Privileged API allowing to access the underlying main XWiki Object"}
{"Origin": "Converts this to a {@link Validation}.", "Reference": "Converts this to an {@link Validation}.", "NNUpdater": "If there is no TranslationProvider available then this operation will return the default validation messages by using {@link ConfigValidationException#getValidationMessages()}."}
{"Origin": "Returns The The Form Type of this Form.", "Reference": "Returns The The Type of this Form.", "NNUpdater": "Adds a form field to the form and sets its initial value."}
{"Origin": "NOTE: If the total hit count of the top docs is less than {@code totalHitsThreshold} then this value is accurate.", "Reference": "NOTE: If the total hit count of the top docs is less than or exactly {@code totalHitsThreshold} then this value is accurate.", "NNUpdater": "Get the timestamp value."}
{"Origin": "Removes all of the instructions of this list.", "Reference": "Removes all the instructions of this list.", "NNUpdater": "The list of instructions that produce input for this instruction."}
{"Origin": "Plays a sound with a random pitch, but excludes one player from hearing it.", "Reference": "Plays a sound with a random pitch, but excludes specified players from hearing it.", "NNUpdater": "Plays the given sound or video and sets playAllListener if available on media player to start next media"}
{"Origin": "Applies this migration to the database.", "Reference": "Undoes these migration from the database.", "NNUpdater": "Invokes the {@link MigrationOperation} on the migration destination."}
{"Origin": "Creates query for the given searchPattern.", "Reference": "Queries this search source for the given queryString.", "NNUpdater": "2014-09-09-Holiday"}
{"Origin": "Applications should use the {@code with(WithAdjuster)} method on the date-time object to make the adjustment passing this as the argument.", "Reference": "Applications should use the {@code with(TemporalAdjuster)} method on the date-time object to make the adjustment passing this as the argument.", "NNUpdater": "The adjustment is equivalent to using {@link DateTime#with(DateTimeField, long)} passing {@code YEAR} as the field."}
{"Origin": "Retrieves the value in Queue without removing it.", "Reference": "Retrieves the value in queue without removing it.", "NNUpdater": "Returns the top item off of this stack without removing it."}
{"Origin": "Scheduler class, fixed delay or cron expression to be used", "Reference": "Scheduler class, fixed delay, every or cron expression to be used", "NNUpdater": "Determine whether the specified expression represents a valid cron pattern."}
{"Origin": "Converts a {@link Promise} into a {@link Completable}.", "Reference": "Converts a {@link Operation} into a {@link Completable}.", "NNUpdater": "Converts a Scala {@link Future} to a {@link CompletableFuture}."}
{"Origin": "During the prefetch, a session should not hold audio focus in order to allow other sessions play seamlessly.", "Reference": "During the prepare, a session should not hold audio focus in order to allow other sessions play seamlessly.", "NNUpdater": "During the prefetch, a session should not hold audio focus in order to allow other sessions play seamlessly."}
{"Origin": "Match statement against pattern for alter schedule", "Reference": "Match statement against pattern for alter task", "NNUpdater": "Create statement."}
{"Origin": "Partitions all elements from inputCollection into an output and rejected collection, based on the evaluation of the given predicate.", "Reference": "Selects all elements from inputCollection into an output and rejected collection, based on the evaluation of the given predicate.", "NNUpdater": "For each predicate, the result will contain a list holding all elements of the input collection matching the predicate."}
{"Origin": "What we need to do here is to release this PooledConnection from our pool...", "Reference": "PooledConnection from our pool...", "NNUpdater": "Return the pooled connection to its pool."}
{"Origin": "Tests {@code globalRecommend(Set, int)}.", "Reference": "Tests {@code recommendRelatedItems()(Set, int)}.", "NNUpdater": "Delegate to {@link #globalRecommend(LongSet, int, LongSet, LongSet)}."}
{"Origin": "Converts an object that represents user flags and can be either SkylarkNestedSet , SkylarkList, or None into Iterable.", "Reference": "Converts an object that represents user flags as either SkylarkList or None into Iterable.", "NNUpdater": "Like {@link #convert(Object, String, Object)}, but converts skylark {@code None} to java {@code null}."}
{"Origin": "Produces a CCProcessed SemanticGraph with no extras.", "Reference": "Produces a CCProcessed SemanticGraph.", "NNUpdater": "Set the semanticRoles."}
{"Origin": "If the key already exists, the sensitivity value will be merged.", "Reference": "Values with the same market data name and currency will be merged.", "NNUpdater": "If a key with the specified name already exists, Amazon EC2 returns an error."}
{"Origin": "Convert to SQL.", "Reference": "Build SQL.", "NNUpdater": "Convert to SQL unit."}
{"Origin": "Generate an info message string relating to given entity persister.", "Reference": "Generate an info message string relating to given entity descriptor.", "NNUpdater": "Set the configuration persister factory to use."}
{"Origin": "timed invokeAny(,,null) throws NPE", "Reference": "timed invokeAny(,,null) throws NullPointerException", "NNUpdater": "timed invokeAll(empty collection) returns empty list"}
{"Origin": "This method choses an interface in order of preference: 1. neither loopback nor point to point 2. point to point 3. loopback", "Reference": "This method chooses an interface in order of preference: 1. neither loopback nor point to point ( prefer interfaces with dual IP support ) 2. point to point 3. loopback", "NNUpdater": "( Dynamic Point A - Dynamic Point B )"}
{"Origin": "Returns a new BaseTimeSeries that is a subset of this BaseTimeSeries.", "Reference": "Returns a new BaseBarSeries that is a subset of this BaseBarSeries.", "NNUpdater": "Gets the time-series of fixings, defaulted to an empty time-series."}
{"Origin": "Decorates and binds the specified {@link ServiceWithRoutes} at multiple {@link Route}s of the default {@link VirtualHost}.", "Reference": "Decorates and binds the specified {@link HttpServiceWithRoutes} at multiple {@link Route}s of the default {@link VirtualHost}.", "NNUpdater": "Decorates and binds the specified {@link ServiceWithRoutes} at multiple {@link Route}s of the default {@link VirtualHost}."}
{"Origin": "Get all non-null values with the given ids for default COLUMN", "Reference": "Get all non-null values of type T with the given ids for default COLUMN in a map", "NNUpdater": "Should default initialization of field values be overridden?"}
{"Origin": "Defaults to 0.", "Reference": "Defaults to 60000.", "NNUpdater": "Defaults to ``AUTO``."}
{"Origin": "Sets the input.", "Reference": "Set the input.", "NNUpdater": "Returns Lagarto lexer."}
{"Origin": "List the roles of the {@param user}.", "Reference": "List the roles of the {@param principal}.", "NNUpdater": "Sets the modifiable list of roles."}
{"Origin": "If the offsets list is not empty, then it must be the same size as array.", "Reference": "If the offsets list is not empty, then it must be the same size as sequence.", "NNUpdater": "If the key does not exist or its value is not an int array tag, then an empty array will be returned."}
{"Origin": "Registers the listener for events matching the service name, topic and filter.", "Reference": "Registers the listener for events matching the service name, topic and filter on local member.", "NNUpdater": "Sets the topic names."}
{"Origin": "Judge contains column from table meta data or not.", "Reference": "Judge whether contains column name.", "NNUpdater": "Judge contains column from table meta data or not."}
{"Origin": "To destroy a half-contructed message.", "Reference": "To destroy a half-constructed message.", "NNUpdater": "Sends {@link RemoteDestroyAdmin#destroy()} request to the service."}
{"Origin": "Asks the {@link CheckAdapter} to verify the ``total`` data items against the calculated values for a single frame.", "Reference": "Asks the {@link DiffCheckAdapter} to verify the ``self`` data items against the calculated values for a single frame.", "NNUpdater": "Checks a representation of an aggregation based on a {@link Tree} using the provided {@link CheckAdapter} against the numbers calculated internally by the scenario."}
{"Origin": "Return a forward-order iterator of this node's children.", "Reference": "Return a forward-order stream of this node's children.", "NNUpdater": "Gets a forward-order list of this node's children."}
{"Origin": "- Will fail, as defaults are relatively safe, and service certificate will not be recognised.", "Reference": "- Will fail, as defaults are relatively safe, and API certificate will not be recognised.", "NNUpdater": "Safety --"}
{"Origin": "Matching is performed using the matching rules specified by [RFC2459].", "Reference": "Matching is performed using the matching rules specified by [RFC5280].", "NNUpdater": "Matching is done by the file extension (e.g."}
{"Origin": "Computes the average for each pixel across all bands in the {@link Planar} image.", "Reference": "Computes the maximum for each pixel across all bands in the {@link Planar} image.", "NNUpdater": "Computes the average for each pixel across all bands in the {@link Planar} image."}
{"Origin": "Does a full, blocking rebuild of the indexes specified by columns from the sstables.", "Reference": "Does a blocking full rebuild of the specifed indexes from all the sstables in the base table.", "NNUpdater": "Does a full, blocking rebuild of the indexes specified by columns from the sstables."}
{"Origin": "Adds a single sensitivity to the builder using metadata.", "Reference": "Adds a single sensitivity to the builder.", "NNUpdater": "Adds a control metadata."}
{"Origin": "Tests that rule-specific licenses are still used by config_setting.", "Reference": "Tests that rule-specific licenses are ignored by config_setting.", "NNUpdater": "Parses licenses from json format to an instance of {@link org.elasticsearch.license.core.Licenses}"}
{"Origin": "Note: text is always trimmed and to lowercase.", "Reference": "Note: Text is always trimmed and lowercase.", "NNUpdater": "Name of the element, e.g."}
{"Origin": "Get Allocated.", "Reference": "Get Zugeordnet.", "NNUpdater": "Gets the free count."}
{"Origin": "Chosen bits are [12, 7, 2]", "Reference": "Chosen bits are [13, 6, 2]", "NNUpdater": "Chosen bits are [13, 6, 2]"}
{"Origin": "(Try to) connect this fermata with a suitable barline.", "Reference": "(Try to) connect this fermata with a suitable StaffBarline.", "NNUpdater": "Equivalent to {@code transform(``transform``, func)}."}
{"Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}", "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveFromRangeEnd }{@code >}}", "NNUpdater": "Create an instance of {@link JAXBElement }{@code <}{@link CTStrokeChild }{@code >}}"}
{"Origin": "Set velocity (angle in deg) at which the entity will rotate per tick.", "Reference": "Set velocity (angle in deg) at which the entity will rotate per second.", "NNUpdater": "The entity will be added to update list in the next tick."}
{"Origin": "This will clear and cancel all other pending letters.", "Reference": "This will clear and cancel all other pending mails.", "NNUpdater": "Cancel Test"}
{"Origin": "If the package is not in the module then the resource is not encapsulated.", "Reference": "If the resource is not in a package in the module then the resource is not encapsulated.", "NNUpdater": "If the other module is {@code EVERYONE_MODULE} then this method tests if the package is exported unconditionally."}
{"Origin": "Glacier can notify the topic after it completes the job.", "Reference": "Glacier completes the job.", "NNUpdater": "Working with Archives in Amazon Glacier in the Amazon Glacier Developer Guide ."}
{"Origin": "If there is a transaction open, close it before closing the graph.", "Reference": "This closes local transaction before closing the graph.", "NNUpdater": "Upon closing the CommitManager, the open transaction is committed and the graph is put back into its original transaction mode."}
{"Origin": "Chaining computations means to begin at a base computation that transforms K1 to R1, and then using the this method chain a second computation K2 to R2 to create one composed computation of K1 to R2.", "Reference": "Chaining computations means to begin at a base computation that transforms K1 to R1, and then using the this method chain a second computation K2 to R2 to create one composed computation of K1 to Composed[R2].", "NNUpdater": "Executes the computation without setting its result, and then resets this future to initial state, failing to do so if the computation encounters an exception or is cancelled."}
{"Origin": "This method should be overridden by file protocols that do not offer a {@link #getOutputStream(boolean)} implementation, but that can take an and use it to write the file.", "Reference": "This method should be overridden by filesystems that do not offer a {@link #getOutputStream()} implementation, but that can take an and use it to write the file.", "NNUpdater": "This method is called by {@link #begin(Writer)} and {@link #writeAll(Graph, Writer)}."}
{"Origin": "For variants which are underspecified on the left we must explicitly resolve each possible combination of actual left-side values.", "Reference": "For variants which are underspecified we must explicitly resolve each possible combination of actual left-side values.", "NNUpdater": "Returns the left side bearing of the first character of string."}
{"Origin": "Returns the number of editable columns.", "Reference": "Returns the editable columns.", "NNUpdater": "Sets the editable mode."}
{"Origin": "Incoming connections will query the internal registry to invoke the matching handlers.", "Reference": "Incoming connections will query the internal registry to invoke the matching handler.", "NNUpdater": "The tcpHelper will maintain up to {@code maxConnections} HTTP connections in an internal pool"}
{"Origin": "Find out if a given class has is explicitly bound to a scope.", "Reference": "Find out if a given class is explicitly bound to a scope.", "NNUpdater": "Use this to find out if this file is a folder."}
{"Origin": "Create or obtain a {@link PreparedStatement} from the pool.", "Reference": "Creates or obtains a {@link PreparedStatement} from the pool.", "NNUpdater": "Execute a SQL statement using the given parameters."}
{"Origin": "Finds all implemtaions of DataStoreFactory which have registered using the services mechanism, and that have the appropriate libraries on the classpath.", "Reference": "Finds all implementations of DataStoreFactory which have registered using the services mechanism, and that have the appropriate libraries on the classpath.", "NNUpdater": "Returns the names of classes on the classpath that have the specified annotation."}
{"Origin": "If {@code replaceWithByteArrayCoder} is set, then replace that unknown coder with a {@link", "Reference": "If {@code replaceWithByteArrayCoder} is set, then replaces that unknown coder with a {@link", "NNUpdater": "Returns a {@link CoderProvider} which uses the {@link ProtoCoder} for {@link Message proto messages}."}
{"Origin": "have been added with {@link #activateIndex(IndexDescriptor2)}.", "Reference": "have been added with {@link #activateIndex(IndexDescriptor)}.", "NNUpdater": "E.g setZIndex() becomes ``zIndex``."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Returns unmodifiable map of module name to hash string.", "Reference": "Returns unmodifiable map of module name to hash", "NNUpdater": "Returns map of machine attributes."}
{"Origin": "BXSE0003: servlet context required.", "Reference": "BXSE0003: HTTP connection required.", "NNUpdater": "StandardServletEnvironment#SERVLET_CONTEXT_PROPERTY_SOURCE_NAME ``servletContextInitParams``} and so on."}
{"Origin": "You are running on JDK6 which comes with JAX-WS {0} API, but this tool requires JAX-WS {1} API.", "Reference": "You are running on JDK6 or newer which comes with JAX-WS {0} API, but this tool requires JAX-WS {1} or newer API.", "NNUpdater": "Add custom JAX-RS provider to the list of providers"}
{"Origin": "Print it into output stream.", "Reference": "Print it into output stream in UTF8.", "NNUpdater": "This will print the to the given Writer."}
{"Origin": "to work in test classes without errors being displayed to stderr.", "Reference": "to work (and persist) in test classes without errors being displayed to stderr.", "NNUpdater": "Returns the PagedList currently being displayed by the Adapter."}
{"Origin": "Imports nodes w/ their properties and labels from {@link Input#nodes()}.", "Reference": "Imports nodes w/ their properties and labels from {@link Input#nodes(Collector)}.", "NNUpdater": "Gets the list of nodes that use this node (i.e., as an input)."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Returns the member's term.", "Reference": "Returns the member's incarnation number.", "NNUpdater": "Returns the member configuration."}
{"Origin": "Read one constant from the given file, the type depends on a tag byte.", "Reference": "Read one constant from the given input, the type depends on a tag byte.", "NNUpdater": "The constant value of the type if specified"}
{"Origin": "Provider-Person-Names(that are not voided)", "Reference": "Creates or that matches the input name with Provider-Person-Names (not voided)", "NNUpdater": "Updates an existing person."}
{"Origin": "Test ModuleModule with a JAR file containing a .class file in the top level directory.", "Reference": "Test ModuleFinder with a JAR file containing a .class file in the top level directory.", "NNUpdater": "Returns a {@code ModuleReference} to represent a modular JAR on the file system."}
{"Origin": "The delay is to prevent a race condition between when a blobstore is created and when the topology is submitted.", "Reference": "The delay is to prevent a race conditions such as when a blobstore is created and when the topology is submitted.", "NNUpdater": "Set to null when this model is created, it is lazily created (if needed) when a resolution is asked."}
{"Origin": "Integers 0 ... n.", "Reference": "Integers 0 ... n - 1.", "NNUpdater": "Creates a sequence with the specified items."}
{"Origin": "Access (and modify) a request scoped bean within the stages, but not before.", "Reference": "Access (and modify) a request scoped bean within the stage, but not before the context snapshot is taken.", "NNUpdater": "Set the request scoped {@link UriRoutingContext} instance."}
{"Origin": "Try to detect a relation between this Alter instance and a head nearby (perhaps with its mirror).", "Reference": "Try to detect relation with heads nearby (perhaps with their mirror).", "NNUpdater": "Equivalent to {@code transform(``transform``, func)}."}
{"Origin": "Obtains an instance from the specified unique name.", "Reference": "Obtains an instance from the specified name.", "NNUpdater": "Obtains the type from a unique name."}
{"Origin": "Output a description of the current annotation configuration.", "Reference": "Output a description of the current annotation configuration to standard error.", "NNUpdater": "Get the current out."}
{"Origin": "For example, if shutting down, the storage layer would also invoke {@link LimiterReleasingCallback#onError(Throwable)}.", "Reference": "For example, if shutting down, the storage layer would also invoke {@link #onError(Throwable)}.", "NNUpdater": "Operation fails."}
{"Origin": "Get all roles and to the role assignment rights ### Functional Description: Retrieve a list of all Roles and the role assignment rights.", "Reference": "Get all roles with assigned rights ### Functional Description: Retrieve a list of all roles with assigned rights.", "NNUpdater": "Sets the modifiable list of roles."}
{"Origin": "Scenario: - no CA inherited trust - gateway does not trust the service - service trusts gateway certificate", "Reference": "Scenario: - no CA inherited trust - gateway does not trust the API - API trusts gateway certificate", "NNUpdater": "Set the tls configuration with the certificate to trust"}
{"Origin": "For Development Mode, it should match the module's timestamp.", "Reference": "For both Development Mode and ProductionMode it should match the module's timestamp.", "NNUpdater": "If the parameter is ``development`` (which is default), settings appropriate for development are set."}
{"Origin": "Returns the corresponding ShapeRenderer for a given ScatterShape.", "Reference": "Returns the corresponding IShapeRenderer for a given ScatterShape.", "NNUpdater": "Returns the default shape."}
{"Origin": "{@codesnippet com.azure.storage.file.share.ShareDirectoryClient.deleteSubDirectory#string}", "Reference": "{@codesnippet com.azure.storage.file.share.ShareDirectoryClient.deleteSubdirectory#string}", "NNUpdater": "{@codesnippet com.azure.storage.file.shareClient.deleteDirectoryWithResponse#string-duration-context}"}
{"Origin": "Group: consumer", "Reference": "Group: producer", "NNUpdater": "Guide."}
{"Origin": "If the chronology cannot be obtained then an exception will be thrown.", "Reference": "If the chronology cannot be obtained then an exception is thrown unless the section of the formatter is optional.", "NNUpdater": "If this fails too then an LWJGLErrorException will be thrown."}
{"Origin": "Extracts a {@code FunctionSignature.WithValues} from a {@link SkylarkCallable}-annotated method.", "Reference": "Extracts a {@code FunctionSignature.WithValues} from a {@link", "NNUpdater": "- {@link #KEY_SIGNATURE}: value specified by {@link #setCreator(String)}."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Indicate to all associated {@link ExportDataSource} to assume mastership role for the given partition id", "Reference": "Indicate to all associated {@link ExportDataSource} to assume leadership role for the given partition id", "NNUpdater": "Finds the role associated to the given name."}
{"Origin": "Returns the distanceFunction.", "Reference": "Returns the distance.", "NNUpdater": "If the specified distance function is an instance of a {@link SpatialPrimitiveDistanceFunction} the range query is delegated to the underlying index."}
{"Origin": "Returns an RxJava Observable that monitors changes to this RealmObject.", "Reference": "Returns an RxJava Flowable that monitors changes to this RealmObject.", "NNUpdater": "Returns an Rx Observable that monitors changes to this RealmObject."}
{"Origin": "Creates a new instance of {@link BlockMasterInfo} from a thrift representation.", "Reference": "Creates a new instance of {@link BlockMasterInfo} from a proto representation.", "NNUpdater": "Creates a new instance of from the given {@link BaseStream}."}
{"Origin": "Locks existing inodes on the specified path, in the specified {@link LockMode}.", "Reference": "Locks existing inodes on the specified path, in the specified {@link LockPattern}.", "NNUpdater": "Note: We are using nested locks (a global {@link ZLock} and a local {@link #lock})."}
{"Origin": "Set the agg star list to empty.", "Reference": "Clears the list of agg stars.", "NNUpdater": "Returns this RolapStar's aggregate table AggStars, ordered in ascending order of size."}
{"Origin": "Updates a module m to export a package to all modules.", "Reference": "Update module m to open a package to all modules.", "NNUpdater": "If the caller's module is this module then update this module to export the given package to the given module."}
{"Origin": "Inject fields to the provided injectee using the primary injector.", "Reference": "Inject fields to the provided injector using the primary injector.", "NNUpdater": "Reset fields annotated with {@link FindView @FindView} and {@link FindViews @FindViews} to {@code null}."}
{"Origin": "JoinGroup and SyncGroup, delegating to {@link #performAssignment(String, String, Map)} if elected leader by the coordinator.", "Reference": "JoinGroup and SyncGroup, delegating to {@link #performAssignment(String, String, List)} if elected leader by the coordinator.", "NNUpdater": "Test method for {@link org.apache.activemq.group.Group#get(java.lang.Object)}."}
{"Origin": "Sets {@link MediaItem2} object to render using VideoView2.", "Reference": "Sets {@link MediaItem} object to render using VideoView2.", "NNUpdater": "Sets {@link DataSourceDesc2} object to render using VideoView2."}
{"Origin": "return RxRatpack.promiseSingle(", "Reference": "return RxRatpack.promise(", "NNUpdater": "import static ratpack.rx.RxRatpack.asPromise;"}
{"Origin": "Set the max minutes per log file.", "Reference": "Set the current log file name", "NNUpdater": "Default: no timeout."}
{"Origin": "returns the signature of the function with the given name and arity.", "Reference": "Returns the signature of the function with the given name and arity.", "NNUpdater": "Create a curried function with arity of 2"}
{"Origin": "In order to set the matrix to a rotation transformation without post-multiplying, use {@link #rotation(Quaterniond)}.", "Reference": "In order to set the matrix to a rotation transformation without post-multiplying, use {@link #rotation(Quaterniondc)}.", "NNUpdater": "In order to set the matrix to a rotation transformation without post-multiplying, use {@link #rotation(Quaternionf)}."}
{"Origin": "Executes the command within a transaction, and with respect to the specified {@link SudoPolicy} specified in the constructor.", "Reference": "Executes the command within a transaction, and with respect to the {@link CommandExecutorService.SudoPolicy} specified in the constructor.", "NNUpdater": "Returns the complete result."}
{"Origin": "Checks if the given JSON string is correct and produces the given output with unescaping deactivated.", "Reference": "Checks if the given JSON string is correct and produces the given output with escaping activated.", "NNUpdater": "Checks if the given JSON string is correct and produces the given output."}
{"Origin": "Configure {@link AutoDiscoverable auto-discoverables} in the HK2 service locator.", "Reference": "Configure {@link AutoDiscoverable auto-discoverables} in the instance manager.", "NNUpdater": "Get the iterable of all providers (custom and default) registered for the given service provider contract in the underlying {@link ServiceLocator HK2 service locator} container."}
{"Origin": "**See also:** [Specifying a voice](URL).", "Reference": "**See also:** [Listing a specific voice](URL).", "NNUpdater": "Operation fails."}
{"Origin": "Returns a {@link RootProviderRegistry} that only supports the {@link Impulse} primitive.", "Reference": "Returns a {@link RootProviderRegistry} that supports the {@link Impulse} and {@link Flatten} primitives.", "NNUpdater": "A handler that simply calls {@link Context#next(Registry)} with the given registry."}
{"Origin": "This method will return if this repository is disabled for object passed as parameter and otherwise.", "Reference": "This method will return if this repository is disabled for value passed as parameter and otherwise.", "NNUpdater": "This method will return if this repository is disabled for object passed as parameter and otherwise."}
{"Origin": "Return the names of any classes referenced in the fields in this list.", "Reference": "Find the names of any classes referenced in the fields in this list.", "NNUpdater": "Render a list of names of the contained in this list."}
{"Origin": "Converts the given view data into datapoints that can be sent to SignalFx.", "Reference": "Converts the given Metric into datapoints that can be sent to SignalFx.", "NNUpdater": "Expands this FX forward into an {@code ExpandedFx}."}
{"Origin": "Removes a bundle from the watch list.", "Reference": "Removes a bundle URLs from the watch list.", "NNUpdater": "Removes all occurrences of the specified element from the list."}
{"Origin": "This method obtains the extension as the textual part of the filename after the last dot.", "Reference": "This method obtains the extension as the textual part of the fileName after the last dot.", "NNUpdater": "The extension of a file is the part of the name after the last dot, including the dot."}
{"Origin": "Delete the blob metadata document in the CosmosDB collection, retrying as necessary.", "Reference": "Delete the blob metadata document in the CosmosDB collection.", "NNUpdater": "Delete a cosmos user"}
{"Origin": "Use two integers, min and max, to track the range of levels.", "Reference": "Use two integers, min and max, to track the range of columns.", "NNUpdater": "Returns a random integer between min and max"}
{"Origin": "Helper method that checks if either the deprecated or new SO_KEEPALIVE property is present and enabled on an IIOP listener, giving precedence to the new property if both are present.", "Reference": "Helper method that checks if either the deprecated or new SO_KEEPALIVE property is enabled on an IIOP listener, giving precedence to the new property if both are present.", "NNUpdater": "list-iiop-listeners"}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Run ERiC with fixed parameters and compare the result to a golden standard.", "Reference": "Run 4C with fixed parameters and compare the result to a golden standard.", "NNUpdater": "Run 4F with fixed parameters and compare the result to a golden standard."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Test method for 'org.kie.common.asm.ClassBuilder.buildClass(ClassDefinition)'", "Reference": "Test method for 'org.drools.common.asm.ClassBuilder.buildClass(ClassDefinition)'", "NNUpdater": "An example of an ontology list is: Class: A SubClassOf [in X, Y, Z] B."}
{"Origin": "Transitive reduction of requires public edge and requires edge have to be applied separately to prevent the requires public edges (e.g.", "Reference": "Transitive reduction of requires transitive edge and requires edge have to be applied separately to prevent the requires transitive edges (e.g.", "NNUpdater": "Transitive reduction of requires transitive edge and requires edge have to be applied separately to prevent the requires transitive edges (e.g."}
{"Origin": "Setter for {@link #allowHeaders}", "Reference": "Setter for {@link #allowedHeaders}", "NNUpdater": "Specifies the headers that should be returned in the CORS {@code ``Access-Control-Allow-Headers``} response header."}
{"Origin": "Obtains an instance from the specified unique name.", "Reference": "Obtains an instance from the specified name.", "NNUpdater": "Obtains the type from a unique name."}
{"Origin": "Creates query that searches for SourceContacts which match a specific query Pattern.", "Reference": "Queries this ContactSourceService for SourceContacts which match a specific query Pattern.", "NNUpdater": "Queries this ContactSourceService for SourceContacts which match a specific query Pattern."}
{"Origin": "Gets the bond group.", "Reference": "Gets the repo group.", "NNUpdater": "This is the price index value at the start of the bond."}
{"Origin": "The {@code Chronology} represents the calendar system in use.", "Reference": "The {@code Chrono} represents the calendar system in use.", "NNUpdater": "The {@code Chronology} represents the calendar system in use."}
{"Origin": "Setting raw updates handler provider", "Reference": "Setting raw updates handler", "NNUpdater": "Updates the status for this protocol provider in the corresponding status selector box."}
{"Origin": "Sets the {@link SslContext} of the default {@link VirtualHost}.", "Reference": "Sets the {@link SslContext} of the {@link Server}.", "NNUpdater": "Returns the local virtual host."}
{"Origin": "Verifies that the port to the broker is available.", "Reference": "Verifies that the port to the broker is listening.", "NNUpdater": "Adds a broker connection to the service."}
{"Origin": "Computing Checksums .", "Reference": "Guide.", "NNUpdater": "Note: Checksums are calculated nevertheless since lucene does it by default since version VERSION."}
{"Origin": "Creates a new label name if the given label does not yet have one.", "Reference": "Constructs a new label name if the given label does not yet have one.", "NNUpdater": "label1 and label2 in X.Y.Z-label1-lable2."}
{"Origin": "Queries this search source for the given queryString.", "Reference": "Creates query for the given searchPattern.", "NNUpdater": "Queries this ContactSourceService for SourceContacts which match a specific query Pattern."}
{"Origin": "If the database is switched to load some piece of data, this will remember what it should be switched back to.", "Reference": "If the wiki is switched to load some piece of data, this will remember what it should be switched back to.", "NNUpdater": "Specifies if the query should return only switched-off violations."}
{"Origin": "If the property value starts with the arbitrary prefix , then a system property is returned instead.", "Reference": "If the format is we read only a system property.", "NNUpdater": "Returns property field prefixes."}
{"Origin": "The class must be bookmarkable and must extend Page.", "Reference": "The class must be bookmarkable and must extend {@link Page}.", "NNUpdater": "The class must be bookmarkable and must extend"}
{"Origin": "Returns true if the Embedded Social app key is non-empty", "Reference": "Returns true if the Embedded Social api key is non-empty", "NNUpdater": "Returns true if the song is filled"}
{"Origin": "Returns the primary conversion type.", "Reference": "Returns the primary reference type.", "NNUpdater": "Returns an empty string if the conversion failed."}
{"Origin": "Construct a {@link AgentManifestMessage} from the given {@link JobDirectoryManifest}.", "Reference": "Construct a {@link AgentManifestMessage} from the given {@link DirectoryManifest}.", "NNUpdater": "Gets the manifest as a JSON template."}
{"Origin": "If the item does not have any children, does nothing.", "Reference": "If an item does not have any children, does nothing.", "NNUpdater": "This method does nothing if the project does not have a {@link BuildMode}."}
{"Origin": "Test for {@link Array#members()}.", "Reference": "Test for {@link XQArray#members()}.", "NNUpdater": "Operation fails."}
{"Origin": "Check partiiton state on all nodes by all caches.", "Reference": "Checks partitions state on all nodes by all caches.", "NNUpdater": "Assert index state on all affinity nodes."}
{"Origin": "If there is currently not ResourceManager connected, then the request is stashed and send once a new", "Reference": "If there is currently not ResourceManager connected, then the request is stashed and send once a new ResourceManager is connected.", "NNUpdater": "If the resource has not been modified, the ``304 - not modified`` header is send to the client and is returned, otherwise nothing is send and is returned."}
{"Origin": "It creates a topic using KafkaProducer.", "Reference": "It creates a topic using Producer.", "NNUpdater": "Will close the underlying {@link KafkaProducer}"}
{"Origin": "Checks that collection {@param col} doesn't contains string {@param str}.", "Reference": "Checks that collection {@param col} doesn't contains element {@param str}.", "NNUpdater": "Get the param value."}
{"Origin": "This is not applicable for in-place updates; use {@link #write(AddUpdateCommand, long, int)}.", "Reference": "This is not applicable for in-place updates; use {@link #write(AddUpdateCommand, long)}.", "NNUpdater": "Operation fails."}
{"Origin": "Returns class methods ordered with non bridge methods appearing higher.", "Reference": "Return class methods ordered with non bridge methods appearing higher.", "NNUpdater": "This method is used to add ``bridge`` methods for private methods of an inner/outer class, so that the outer class is capable of calling them."}
{"Origin": "The returned era will be a singleton capable of being compared with the constants in {@link ISOChrono} using the {@code ==} operator.", "Reference": "The returned era will be a singleton capable of being compared with the constants in {@link ISOChronology} using the {@code ==} operator.", "NNUpdater": "The returned era will be a singleton capable of being compared with the constants in {@link IsoChronology} using the {@code ==} operator."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "This method sets the value of the database column m_prj_project.projectStatus", "Reference": "This method sets the value of the database column m_prj_project.status", "NNUpdater": "This method sets the value of the database column m_prj_project.accountId"}
{"Origin": "Return a {@link InetSocketAddress} for the local socket.", "Reference": "Return a {@link java.net.SocketAddress} for the local socket.", "NNUpdater": "Gets the source/destination IP address and port."}
{"Origin": "add a path to the path trie", "Reference": "Add a path to the path trie.", "NNUpdater": "Prefix the given path with the application path."}
{"Origin": "Removes all metadata (including properties and tags) for the specified {@link MetadataEntity}.", "Reference": "Removes all metadata (including properties and tags) for the specified {@link MetadataEntity} and it's custom sub entity", "NNUpdater": "Removes all metadata (including properties and tags) for the specified {@link NamespacedEntityId}."}
{"Origin": "Overrides the name of the character encoding used in the body of the response.", "Reference": "Overrides the character encoding used in the body of the response.", "NNUpdater": "Get the content of the request body as a {@code String}, using the configured {@linkplain #getCharacterEncoding character encoding}."}
{"Origin": "Decorates {@link Service}s under the specified directory.", "Reference": "Decorates {@link HttpService}s under the specified directory.", "NNUpdater": "Creates a new {@link CompositeServiceEntry} whose {@link Service} is bound at the specified path pattern."}
{"Origin": "TransactionToApply} given.", "Reference": "CommandsToApply} given.", "NNUpdater": "Set Transaktion."}
{"Origin": "Returns a rule that restricts access by period of time according to the IP address of the request's client.", "Reference": "Adds a rule that restricts access by period of time according to the IP address of the request's client.", "NNUpdater": "Returns the host name."}
{"Origin": "Executes {@link Pems#x509Certificate(InputSupplier, CertificateFactory)} on the string which contains an X.509 certificate in PEM format.", "Reference": "Executes {@link Pems#x509Certificate(ByteSource, CertificateFactory)} on the string which contains an X.509 certificate in PEM format.", "NNUpdater": "Loop over the {@link CertificateProperties} and call {@link CertificateClient#getCertificate(CertificateProperties)}."}
{"Origin": "Equivalent to: {@code .weightInit(WeightInit.DISTRIBUTION).dist(distribution)}", "Reference": "Equivalent to: {@code .weightInit(new WeightInitDistribution(distribution))}", "NNUpdater": "Use {@link #initWeights(int[], WeightInit, Distribution, char, INDArray)} to control this"}
{"Origin": "Append to a string buffer.", "Reference": "Append items and support to a string buffer.", "NNUpdater": "StringBuilder is not null, append the result to the StringBuilder."}
{"Origin": "Get all Pinot table names (server resources).", "Reference": "Get all table names (with type suffix).", "NNUpdater": "Returns all tables, remove brokerResource."}
{"Origin": "In order to set the matrix to a rotation transformation without pre-multiplying, use {@link #rotation(Quaterniond)}.", "Reference": "In order to set the matrix to a rotation transformation without pre-multiplying, use {@link #rotation(Quaterniondc)}.", "NNUpdater": "In order to set the matrix to a rotation transformation without pre-multiplying, use {@link #rotation(Quaternionfc)}."}
{"Origin": "Determines whether the specified charset is supported by this runtime.", "Reference": "Tells whether the named charset is supported.", "NNUpdater": "This is similar to java.nio.charset.Charset.isSupported(String) but handles more formats"}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "A2DP Bluetooth device(s) are available, but current device speaker is activated", "Reference": "A2DP Bluetooth device(s) are connectable, but no device is set as activated", "NNUpdater": "One Hands Free Profile Bluetooth device is available and activated"}
{"Origin": "Adds glyphs for the the specified text.", "Reference": "Adds glyphs for the specified text.", "NNUpdater": "Process the provided set of parts."}
{"Origin": "Returns the Jaas Realm named as realmName.", "Reference": "Returns the JAAS Realm named as realmName.", "NNUpdater": "Returns a Map of realm-id to realm-settings."}
{"Origin": "Provide supported thing type uid's", "Reference": "Provide supported ThingTypeUIDs", "NNUpdater": "Will use the thing UID to infer the unique channel UID from the given ID."}
{"Origin": "It counts length of all frame buffers.", "Reference": "It counts possible length of all frame buffers.", "NNUpdater": "Get the length of a frame from the header as a volatile read."}
{"Origin": "This method will test given class by checking if it is available in {@link ServiceLocator} that has been injected from the Jersey context.", "Reference": "This method will test given class by checking if it is available in {@link InjectionManager} that has been injected from the Jersey context.", "NNUpdater": "Adds the given class as a Jersey component."}
{"Origin": "Returns the quorum name for queue operations.", "Reference": "Returns the split brain protection name for queue operations.", "NNUpdater": "Returns the cluster read quorum strategy."}
{"Origin": "Returns whether this deployment spec specifies the given zone, either implicitly or explicitly", "Reference": "Returns whether this instance deploys to the given zone, either implicitly or explicitly", "NNUpdater": "Returns the version a new deployment to this zone should use for this application"}
{"Origin": "Enable Memory RandomAccessFile access.", "Reference": "Enable FileChannel access.", "NNUpdater": "Closes this file."}
{"Origin": "Gets the msg.", "Reference": "New builder.", "NNUpdater": "Get the challenge sent by the RADIUS server."}
{"Origin": "Sets the messageToHumanAgent.", "Reference": "Set the messageToHumanAgent.", "NNUpdater": "Creates a new instance of {@link org.spongepowered.api.event.entity.living.human.ChangeLevelEvent}."}
{"Origin": "Assert that the named response header does exist.", "Reference": "Assert that the named response header exists.", "NNUpdater": "Assert the primary value of the response header as a String value."}
{"Origin": "Returns the chain of client certificates, if available and accessible.", "Reference": "Returns the chain of client SSL certificates, if available and accessible.", "NNUpdater": "Returns the chain of client certificates, if available and accessible."}
{"Origin": "The {@link EcKeyCreateOptions#isEnabled() enabled} field is set to true by Azure Key Vault, if not specified.", "Reference": "The {@link CreateEcKeyOptions#isEnabled() enabled} field is set to true by Azure Key Vault, if not specified.", "NNUpdater": "The {@link Secret#isEnabled() enabled} field is set to true by key vault, if not specified."}
{"Origin": "Sets the {@link SharedKeyCredential} used to authorize requests sent to the service.", "Reference": "Sets the {@link StorageSharedKeyCredential} used to authorize requests sent to the service.", "NNUpdater": "Sets the SAS token used to authorize requests sent to the service"}
{"Origin": "Run the {@code transfer} dataflow analysis to compute the abstract value of the expression which is the leaf of {@code exprPath}.", "Reference": "Runs the {@code transfer} dataflow analysis to compute the abstract value of the expression which is the leaf of {@code exprPath}.", "NNUpdater": "Run the {@code transfer} dataflow analysis over the method or lambda which is the leaf of the {@code methodPath}."}
{"Origin": "This determines the behaviour of tasks if there is an error in their local checkpointing.", "Reference": "This determines the behaviour when meeting checkpoint errors.", "NNUpdater": "If checkpointing, always checkpoint the first user superstep."}
{"Origin": "Turns this Streamable into a HotStream, a connectable Stream, being executed on a thread on the supplied executor, that is producing data", "Reference": "Turns this Streamable into a Connectable, a connectable Stream, being executed on a thread on the supplied executor, that is producing data", "NNUpdater": "Wrap a Stream into a Sequential FutureStream."}
{"Origin": "Sends a request and returns immediately without getting a response.", "Reference": "Sends a request and waits until the request is flushed to network.", "NNUpdater": "Sends the response back to the client."}
{"Origin": "Add optimized insert value.", "Reference": "Add insert value.", "NNUpdater": "Insert a Row"}
{"Origin": "Creates a {@code TokenStream} that aggregates the outputs of a given set of {@code TokenStreams}.", "Reference": "Creates a {@code TwitterTokenStream} that aggregates the outputs of a given set of {@code TokenStreams}.", "NNUpdater": "Return a {@link RangeToken} that wraps {@code key} {@code operator} {@code values} for the purpose of reading."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Returns the pivot of a view on a specific axis, when overshooting at the end.", "Reference": "Returns the pivot of an item on a specific axis, when overshooting at the end.", "NNUpdater": "Returns the pivot of a view on a specific axis, when it is swiped."}
{"Origin": "Default is to have both left and right buttons pressed when moving.", "Reference": "Default is to have both left and right buttons, or just middle button, pressed when moving.", "NNUpdater": "Called when a key is de-pressed."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Code snippet for {@link DataLakeDirectoryAsyncClient#getSubDirectoryAsyncClient(String)}", "Reference": "Code snippet for {@link DataLakeDirectoryAsyncClient#getSubdirectoryAsyncClient(String)}", "NNUpdater": "Code snippet for {@link BlobServiceAsyncClient#getBlobContainerAsyncClient(String)}"}
{"Origin": "Transforms this {@code Try} by applying either {@code onSuccess} to this value or {@code onFailure} to this cause.", "Reference": "Transforms this {@code Try} by applying either {@code ifSuccess} to this value or {@code ifFailure} to this cause.", "NNUpdater": "Transforms the value of this {@code Future}, whether it is a success or a failure."}
{"Origin": "Initializes this AuthenticatedUser using the given credentials.", "Reference": "Initializes this AuthenticatedUser using the given credentials and arbitrary attributes.", "NNUpdater": "Returns the authenticated user associated with this session."}
{"Origin": "If the variable was set, a configuration {@link ConfigurationEvent event} will be passed to all registered listeners.", "Reference": "If the variable was set, a CONFIGURATION {@link ConfigurationEvent event} will be passed to all registered listeners.", "NNUpdater": "Is responsible for calling {@link EventSource#onEvent(InboundEvent)} and all registered {@link EventListener} instances."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Finds a resolved module in this configuration, or if not in this configuration, the {@linkplain #parent parent} configurations.", "Reference": "Finds a resolved module in this configuration, or if not in this configuration, the {@linkplain #parents parent} configurations.", "NNUpdater": "This conversion uses {@linkplain StrategiesSupplier#builder() default strategies}."}
{"Origin": "Sets the value of the 'publicPort' field", "Reference": "Sets the value of the 'publicPorts' field", "NNUpdater": "Sets the value of the 'paramName' field."}
{"Origin": "Sets the quorum name for operations.", "Reference": "Sets the split brain protection name for operations.", "NNUpdater": "Sets the cluster read quorum strategy."}
{"Origin": "Should be called when the {@link MediaSession2#play()} is called.", "Reference": "Should be called when the {@link XMediaPlayer#play()} is called.", "NNUpdater": "Should be called after {@link #contentType(MediaType)}"}
{"Origin": "If a notification configuration for a vault is not set, the operation returns a error.", "Reference": "If a notification configuration for a vault is not set, the operation returns a 404 Not Found error.", "NNUpdater": "Set the score."}
{"Origin": "Same as {@link #of(boolean, int)} except with the default number of threads.", "Reference": "Same as {@link #of()} except with the default number of threads.", "NNUpdater": "Return the same value as {@link Boolean#hashCode(boolean)}}."}
{"Origin": "If you specify both tag keys and tag values in the same request,", "Reference": "If you specify both tag keys and tag values in the same request, Amazon", "NNUpdater": "Returns a tag or attribute name."}
{"Origin": "Reserve ids used by the predicates or constraints associated with some join graph.", "Reference": "Reserve ids used by the constraints for some predicate or join graph.", "NNUpdater": "Reserve the page if this is a index root page entry."}
{"Origin": "Returns the ``real`` location of the file loaded by the other commands, starting from javatests/.", "Reference": "Returns the ``real`` location of the file loaded by the other commands, starting from src/test/resources/.", "NNUpdater": "Starts from the first ``java`` or ``javatests`` or ``src`` or ``testsrc`` segment."}
{"Origin": "Get the preventEncryptionScopeOverride property: The preventEncryptionScopeOverride property.", "Reference": "Get the encryptionScopeOverridePrevented property: The encryptionScopeOverridePrevented property.", "NNUpdater": "Get the encryptionKey property: Optional."}
{"Origin": "Verifies the user's PW1 or PW3 with the appropriate mode.", "Reference": "Verifies the user's PW1 with the appropriate mode.", "NNUpdater": "Verifies the user's PW1 or PW3 with the appropriate mode."}
{"Origin": "Store the engine internals (model + norms), always as user files.", "Reference": "Store the engine internals, always as user files.", "NNUpdater": "Store the engine in XML format, always as a user file."}
{"Origin": "Creates {@link Changes} container with info about changes.", "Reference": "Creates new instance of {@link Changes}.", "NNUpdater": "Changes the container's leaseAccessConditions."}
{"Origin": "Validates that the {@link #operationModel} is valid for the given {@code configurationProvider}", "Reference": "Validates that the {@link #componentModel} is valid for the given {@code configurationProvider}", "NNUpdater": "Returns a {@link List} with all the {@link OperationModel} available to the {@code configurationModel} which requires a connection."}
{"Origin": "Returns the ModuleReader for the given module.", "Reference": "Returns the ModuleReader for the given module, creating it if needed", "NNUpdater": "Returns the ModuleReader for the given module, creating it and replacing the NULL_MODULE_READER if needed."}
{"Origin": "The returned RxDao is a special DAO that let's you interact with Rx Observables.", "Reference": "The returned RxDao is a special DAO that let's you interact with Rx Observables without any Scheduler set for subscribeOn.", "NNUpdater": "NOTE: You should maybe use the {@link DatabaseTable#daoClass()} and have the DaoManager construct the DAO if possible."}
{"Origin": "Remove from cache all entries that match the given predicate.", "Reference": "Invalidate cache entries with keys matching the given predicate", "NNUpdater": "Remove all entries from the model cache"}
{"Origin": "Add to the hash table associated with .", "Reference": "Add to the hash table.", "NNUpdater": "Add a column to the hash table using the default column family."}
{"Origin": "Copies the contents from the fist {@link AttributeValue} into the second.", "Reference": "Copies the value of this {@link AttributeValue} into the second.", "NNUpdater": "Copies the contents (all fields) of one record into another, including transient fields."}
{"Origin": "Generate a FactorStatus from a string.", "Reference": "Generate a FactorStatuses from a string.", "NNUpdater": "Generate a PROGRESS (status) command"}
{"Origin": "Setter for {@link #exposeOnlyRequestedHeader}", "Reference": "Setter for {@link #allowOnlyRequestedHeader}", "NNUpdater": "Add a response header to expose."}
{"Origin": "Client will automatically attempt to reconnect to the server if the connection is lost.", "Reference": "Sets whether the client will automatically attempt to reconnect to the server if the connection is lost.", "NNUpdater": "Is the connection lost for more than 3 minutes, the user will be removed (within 3 minutes the user can reconnect)"}
{"Origin": "Sets the {@link OAuth2AccessTokenResponseClient} to be used for getting an {@link OAuth2AuthorizedClient} for client_credentials grant.", "Reference": "Sets the {@link OAuth2AccessTokenResponseClient} used for getting an {@link OAuth2AuthorizedClient} for the client_credentials grant.", "NNUpdater": "Code snippet for {@link BlobServiceClient#getBlobContainerClient(String)}"}
{"Origin": "This prints the date-time to the specified destination.", "Reference": "This formats the date-time to the specified destination.", "NNUpdater": "This outputs the formatted date-time to the specified destination."}
{"Origin": "Process conneciton parameters into a synchronized map.", "Reference": "Process connection parameters into a synchronized map.", "NNUpdater": "On GET, suspend the connection."}
{"Origin": "Calculates convex hull of all the vertices during build time", "Reference": "Calculates convexHull of all the vertices during build time", "NNUpdater": "Load all the BonedVertices"}
{"Origin": "Gets the set of this charset's aliases.", "Reference": "Returns a set containing this charset's aliases.", "NNUpdater": "Gets the charset name if set as property or header {@link Exchange#CHARSET_NAME}."}
{"Origin": "The Camel Rest component to use for the REST transport, such as restlet, spark-rest.", "Reference": "The Camel Rest component to use for (consumer) the REST transport, such as jetty, servlet, undertow.", "NNUpdater": "Provides access to a {@link RestAssuredRestDocumentationConfigurer} that can be used to configure Spring REST Docs using the given {@code contextProvider}."}
{"Origin": "The comparison is based on the time-line position of the dates.", "Reference": "The comparison is primarily based on the date, from earliest to latest.", "NNUpdater": "The comparison is based on the date and time within the calendar system."}
{"Origin": "Amazon SimpleDB automatically adjusts the number of items returned per page to enforce this limit.", "Reference": "SimpleDB automatically adjusts the number of items returned per page to enforce this limit.", "NNUpdater": "Set the number of rows per page and refresh the table."}
{"Origin": "Obtains an instance of {@code OffsetDate} from an {@code Instant}.", "Reference": "Obtains an instance of {@code OffsetDate} from an {@code Instant} and zone ID.", "NNUpdater": "Obtains an instance of {@code OffsetDate} from an {@code Instant}."}
{"Origin": "Amazon Redshift returns all security groups that match any combination of the specified keys and values.", "Reference": "Redshift returns all security groups that match any combination of the specified keys and values.", "NNUpdater": "Describes the SQL Query to execute on an Amazon Redshift database for an"}
{"Origin": "Deletes a line.", "Reference": "Deletes lines.", "NNUpdater": "Removes the line from the supplied StringBuffer."}
{"Origin": "Opens a {@link TitanGraph} database configured according to the provided configuration.", "Reference": "Opens a {@link JanusGraph} database configured according to the provided configuration.", "NNUpdater": "Creates a new {@link Graph} instance using the default {@link Configuration} from {@link #standardGraphConfiguration()}."}
{"Origin": "Creates a ModuleReference to a module packaged as a modular JAR.", "Reference": "Creates a ModuleReference to a possibly-patched module in a modular JAR.", "NNUpdater": "Returns a {@code ModuleReference} to a module in modular JAR file on the file system."}
{"Origin": "Set Document Controlled.", "Reference": "Set Belegartgesteuert.", "NNUpdater": "Set Belegart."}
{"Origin": "Builds a JFreeChart time series from a Ta4j time series and an indicator.", "Reference": "Builds a JFreeChart time series from a Ta4j bar series and an indicator.", "NNUpdater": "Gets the time-series of fixings, defaulted to an empty time-series."}
{"Origin": "This will return the {@link Secret secret} with value included of its latest version.", "Reference": "This will return the {@link KeyVaultSecret secret} with value included of its latest version.", "NNUpdater": "Loop over the {@link SecretAttributes secretAttributes} and call {@link SecretClient#getSecret(SecretAttributes)} ."}
{"Origin": "Builds a metastorage key for pending task object.", "Reference": "Builds a metastorage key for continuous task object.", "NNUpdater": "Builds an operation."}
{"Origin": "Retrieves all the tags for the specified {@link NamespacedEntityId}.", "Reference": "Retrieves all the tags for the specified {@link MetadataEntity}.", "NNUpdater": "Retrieves all the tags for the specified {@link NamespacedEntityId}."}
{"Origin": "Creates a valid {@link Sort} operation.", "Reference": "Creates a valid {@link SortTableOperation} operation.", "NNUpdater": "Creates a new {@link SortByCountOperation} given {@link AggregationExpression group and sort expression}."}
{"Origin": "Returns the server list for the requested cluster.", "Reference": "Returns the configured server list for the requested cluster.", "NNUpdater": "Returns the requested function."}
{"Origin": "Set module provides.", "Reference": "Sets module provides.", "NNUpdater": "A {@link ProcessingStep} for {@code @Module} classes that generates factories for {@code"}
{"Origin": "`DEPRECATED`: Number of admins (for rooms only)", "Reference": "`DEPRECATED`: Number of admins (for rooms only) [Deprecated since version VERSION]", "NNUpdater": "Size of the environment."}
{"Origin": "return map with non generic resources removded", "Reference": "return map with non generic resources removed", "NNUpdater": "IndexedRecord}."}
{"Origin": "Setter for {@link #exposeHeaders}", "Reference": "Setter for {@link #allowHeaders}", "NNUpdater": "expose as protected"}
{"Origin": "Creates tag swagger definition.", "Reference": "Creates tag openApi definition.", "NNUpdater": "Creates an object from a definition element."}
{"Origin": "Queries this search source for the given queryString.", "Reference": "Creates query for the given searchPattern.", "NNUpdater": "Queries this ContactSourceService for SourceContacts which match a specific query Pattern."}
{"Origin": "If we succeeded on both stream in and out, reply back to coordinator", "Reference": "If we succeeded on both stream in and out, respond back to coordinator", "NNUpdater": "Set reply-to address"}
{"Origin": "Optimized method used when keys can be deserialized as plain old {@link java.lang.String}s, and there is no custom deserialized specified.", "Reference": "Optimized method used when keys can be deserialized as plain old {@link java.lang.String}s, and there is no custom deserializer specified.", "NNUpdater": "Convenience method for {@link #methodType(java.lang.Class, java.lang.Class[]) methodType}."}
{"Origin": "Retrieves all the of controller services in this NiFi.", "Reference": "Retrieves controller services for reporting tasks in this NiFi.", "NNUpdater": "The uri for linking to this drop request in this NiFi."}
{"Origin": "Sets the {@link SharedKeyCredential} used to authorize requests sent to the service.", "Reference": "Sets the {@link StorageSharedKeyCredential} used to authorize requests sent to the service.", "NNUpdater": "Sets the SAS token used to authorize requests sent to the service"}
{"Origin": "Convert to object types, returning null if text is null.", "Reference": "Convert to object types, returning null if text is null or empty.", "NNUpdater": "IsNullOrEmpty {is null or empty}."}
{"Origin": "Sets the title text.", "Reference": "Sets the title text as a static string.", "NNUpdater": "Returns the title of the resource."}
{"Origin": "Implements the {@code --run } legacy handling.", "Reference": "Implements the {@code --run} command line argument.", "NNUpdater": "Implements the method of Runnable."}
{"Origin": "Sets the noneOfTheAbovePrompt.", "Reference": "Set the noneOfTheAbovePrompt.", "NNUpdater": "Set the (new) values of the {@code If-None-Match} header."}
{"Origin": "This method will interpolate between each two successive quaternions via {@link #nlerpIterative(Quaterniond, double, double)} using their relative interpolation weights.", "Reference": "This method will interpolate between each two successive quaternions via {@link #nlerpIterative(Quaterniondc, double, double)} using their relative interpolation weights.", "NNUpdater": "C(type)=float"}
{"Origin": "If true, given partial blocks are not evaluated when defined but when used.", "Reference": "If true, partial blocks will implicitly be evaluated before the partials will actually be executed.", "NNUpdater": "partial | OPEN_PARTIAL sexpr CLOSE ;"}
{"Origin": "The endpoint type.", "Reference": "The action to do.", "NNUpdater": "Gets the currently pinned Endpoint at this Endpoint."}
{"Origin": "Decorates {@link Service}s whose {@link Route} matches the specified {@code pathPattern}.", "Reference": "Decorates {@link HttpService}s whose {@link Route} matches the specified {@code pathPattern}.", "NNUpdater": "Finds the {@link Service} whose {@link Router} matches the {@link PathMappingContext}."}
{"Origin": "Test that verbose does not corrumpt file not found exceptions", "Reference": "Test that verbose does not corrupt file not found exceptions", "NNUpdater": "FileNotFoundException is thrown."}
{"Origin": "Set selectedWorld when configure from WorldPreGenerationScreen", "Reference": "Set seletedWorld when configure from WorldPreGenerationScreen", "NNUpdater": "Get the extent."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Returns the raw transaction data (trytes) of a specific transaction.", "Reference": "raw transaction data (trytes) of a specific transaction.", "NNUpdater": "Set Transaktion."}
{"Origin": "Sets a cursor, forcing a new look if necessary.", "Reference": "Sets a cursor, enforcing a new look if necessary.", "NNUpdater": "Sets a new text cursor position."}
{"Origin": "Gets the \\c Colour at the corresponding point on the gradient.", "Reference": "Gets the {@link Colour} at the corresponding point on the gradient.", "NNUpdater": "Set the selected colour represented by this view."}
{"Origin": "If true, given partial blocks are not evaluated when defined but when used.", "Reference": "If true, partial blocks will implicitly be evaluated before the partials will actually be executed.", "NNUpdater": "partial | OPEN_PARTIAL sexpr CLOSE ;"}
{"Origin": "Return a new {@link Terms} in which term of {@code coreNodeName} is removed", "Reference": "Return a new {@link Terms} in which terms for the {@code coreNodeName} are removed", "NNUpdater": "Returns a new persistent node."}
{"Origin": "Convert the attribute if necessary and add it to the profile.", "Reference": "Convert a profile or authentication attribute, if necessary, and add it to the profile.", "NNUpdater": "Set the identifier."}
{"Origin": "Removes all the tags from the {@link NamespacedEntityId}", "Reference": "Removes all the tags from the {@link MetadataEntity}", "NNUpdater": "Removes all the tags from the {@link NamespacedEntityId}"}
{"Origin": "Returns the non-empty endpoints of the clusters in the deployment, or empty if the request fails.", "Reference": "Returns the non-empty endpoints per cluster in the given deployment, or empty if endpoints can't be found.", "NNUpdater": "Returns the endpoints of the deployment, or throws an exception if this fails."}
{"Origin": "The maximum size for #extraData is 32600 bytes.", "Reference": "The maximum size for #extraDataWriter is 32600 bytes.", "NNUpdater": "BatchOptions#getMaximumSizeInBytes()}."}
{"Origin": "* The custom model contains less than 10 minutes or more than 100 hours of audio data.", "Reference": "* The custom model contains less than 10 minutes or more than 200 hours of audio data.", "NNUpdater": "A channel name must not be {@code null} nor empty or more than 100 characters long!"}
{"Origin": "Verifies that a stateful bean with timeout value 0 is eligible fore removal immediately, and its preDestroy method is invoked.", "Reference": "Verifies that a stateful bean with timeout value 0 is eligible for removal immediately, and its preDestroy method is invoked.", "NNUpdater": "Set the pre destroy method."}
{"Origin": "Returns true if field ufsLastModificationTimeMs is set (has been assigned a value) and false otherwise", "Reference": "Returns true if field ufsFingerprint is set (has been assigned a value) and false otherwise", "NNUpdater": "Returns true if field mountId is set (has been assigned a value) and false otherwise"}
{"Origin": "Nota: the defining points are meant to be the extrema points inside the parallelogram.", "Reference": "Nota: the defining points are meant to be the extrema points on the borders of the parallelogram.", "NNUpdater": "Returns all of data points in order."}
{"Origin": "Method to check if Postgres DB is a type of EDB.", "Reference": "Method to get Postgres DB type", "NNUpdater": "Before."}
{"Origin": "This bootstraps the Layout and the Management server with the existing layout which initiates failure handling capabilities on the management server.", "Reference": "This bootstraps the Layout server with the existing layout.", "NNUpdater": "This bootstraps the Layout and the Management server with the existing layout which initiates failure handling capabilities on the management server."}
{"Origin": "We assume {@link #canSerialize(String)} returns or a runtime exception may be thrown.", "Reference": "We assume {@link #canSerialize(String, java.util.List)} returns or a runtime exception may be thrown.", "NNUpdater": "We assume {@link #canSerialize(String)} returns or a runtime exception may be thrown."}
{"Origin": "Adjust dates to be within 80 years before and 20 years after instantiation", "Reference": "Adjust dates to be within appropriate century", "NNUpdater": "Gets the period unit for years."}
{"Origin": "The method is used to disallow any further command sending until next {@link #connect()} call.", "Reference": "The method disconnects and disallows any further connections until next {@link #connect()} call.", "NNUpdater": "Method to attempt freezing a {@link BValue}, to disallow further modification."}
{"Origin": "Primary input method for receiving complex sample buffers from the wideband source (ie tuner)", "Reference": "Primary interface for receiving incoming complex sample buffers to be frequency translated and decimated.", "NNUpdater": "Responds to tuner event by deregistering from the current complex sample buffer source and registering with the tuner argument."}
{"Origin": "Get a map of counter names and values", "Reference": "Get a map of counter names and values for the given superstep", "NNUpdater": "The Map keys represent variable names, the Map values variable values."}
{"Origin": "Add an asynchronous part with {@link Publisher}-based content.", "Reference": "Add a part from {@link Publisher} content.", "NNUpdater": "Asynchronous send of whole content."}
{"Origin": "Indicate to all associated {@link ExportDataSource}to PREPARE assume mastership role for the given partition id", "Reference": "Indicate to all associated {@link ExportDataSource}to PREPARE give up mastership role for the given partition id", "NNUpdater": "Finds the role associated to the given name."}
{"Origin": "Reads all available bytes from InputStream as a byte array.", "Reference": "Reads all available bytes from {@link InputStream} as a byte array.", "NNUpdater": "Reads a token."}
{"Origin": "If the reading user and the target user are not the same, then explicit READ or SYSTEM_ADMINISTER access is required.", "Reference": "If the reading user and the target entity are not the same, then explicit READ or SYSTEM_ADMINISTER access is required.", "NNUpdater": "Verifies that the user has the specified access to the system."}
{"Origin": "The option is a type.", "Reference": "The option will be converted to a type.", "NNUpdater": "Returns the {@link OptionsBase} class the defines the given option, null if the option isn't recognized."}
{"Origin": "Queries this search source for the given searchPattern.", "Reference": "Creates query for the given searchPattern.", "NNUpdater": "Search All cases"}
{"Origin": "If you do not close the iterator then the remains open.", "Reference": "If you do not close the iterator then the {@code Reader} remains open.", "NNUpdater": "If you do not close the iterator then the remains open."}
{"Origin": "The bucket that is included in this file.", "Reference": "The bucketId that is included in this file.", "NNUpdater": "Returns the service-generated id for the bucket."}
{"Origin": "Encode each value.", "Reference": "Encode each Resource.", "NNUpdater": "encode = false"}
{"Origin": "Checks to make sure that all properties specified in {@code properties} are known to the program by checking that each simply overrides a default value.", "Reference": "Checks to make sure that all properties specified in are known to the program by checking that each simply overrides a default value.", "NNUpdater": "Removes a property from a program."}
{"Origin": "Shuts down the managed channel.", "Reference": "Tries to gracefully shut down the managed channel.", "NNUpdater": "Shuts down the request worker."}
{"Origin": "This indicator says if --defaultReturnType parameter should be visible or not.", "Reference": "This indicator says if --returnType parameter should be visible or not.", "NNUpdater": "Returns if the X axis grid should be visible."}
{"Origin": "Execute http request and produce a response.", "Reference": "Execute http response.", "NNUpdater": "Execute the HTTP request and discard the response."}
{"Origin": "Increment the count of triggered asynchronous state updates (by one).", "Reference": "Increment the count of triggered asynchronous state updates in Litho components (by one).", "NNUpdater": "Increment source count by 1."}
{"Origin": "If non-null non-missing node, {@code this} is returned to allow chaining; otherwise {@link IllegalArgumentException} is thrown.", "Reference": "If non-null non-missing node, {@code this} is returned to allow chaining; otherwise exception is thrown.", "NNUpdater": "If the property is missing an {@link ConfigurationPropertyException} is thrown"}
{"Origin": "Creates the jdeps file path if needed.", "Reference": "Creates the jdeps artifact if needed.", "NNUpdater": "Returns the absolute file path."}
{"Origin": "Decode an action profile group with members information to a PI action group.", "Reference": "Decode an action profile group with members information to a PI action profile group.", "NNUpdater": "Guide."}
{"Origin": "This method retrieves the status object, then blocks waiting for validity prior to returning.", "Reference": "This method retrieves the {@link MPDStatus} object, then blocks waiting for validity prior to returning.", "NNUpdater": "Finishes a text selection."}
{"Origin": "Returns the response object with list of dhcp servers without counters.", "Reference": "Returns results with aggregate of counters.", "NNUpdater": "Resets the member selector."}
{"Origin": "Returns the last sync d l object in the ordered set where parentFolderId = ?.", "Reference": "Returns the last sync d l object in the ordered set where modifiedTime > ?", "NNUpdater": "Returns the last b b b server in the ordered set where active = ?."}
{"Origin": "Generates a name from some arbitrary text that is both a valid JCR node name and is consistent with other ``system names``.", "Reference": "Generates a lower-case name from some arbitrary text that is both a valid JCR node name and is consistent with other ``system names``.", "NNUpdater": "Sets the name."}
{"Origin": "The timestamp for the last update to the counterexample.", "Reference": "The timestamp for the most recent update to the object.", "NNUpdater": "Query for the last update time of a given ."}
{"Origin": "Returns the highlighInfo.", "Reference": "Returns the parameters.", "NNUpdater": "Get the headers"}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "This name will contain transaction id and reflect the fact whether transaction is logically committed or not.", "Reference": "This name will contain transaction id.", "NNUpdater": "Reset this transaction to a vanilla state, turning it into a logically new transaction."}
{"Origin": "Note: this method resolves custom data locations for the shard.", "Reference": "Note: this method resolves custom data locations for the shard if such a custom data path is provided.", "NNUpdater": "Resolves derived values in the request."}
{"Origin": "Print scored parse trees for one sentence in format used by Charniak parser.", "Reference": "Print scored parse trees for one sentence in format used by charniak parser", "NNUpdater": "Set Druck - Format."}
{"Origin": "Gets the SSLHostConfig infos.", "Reference": "Gets the SslHostConfig infos.", "NNUpdater": "Return List of IpAddresses"}
{"Origin": "Revise parameters.", "Reference": "Get revise parameters.", "NNUpdater": "Returns:"}
{"Origin": "Always iterates forward, whether or not we are on a forward or backward edge.", "Reference": "Always iterates forward over the geometry, whether we are on a forward or backward edge.", "NNUpdater": "-R race type 0 = forward, 1 = backward, 2 = schemata, 3 = rank."}
{"Origin": "For more information about the vault locking process,", "Reference": "For more information about the vault locking process, Amazon Glacier Vault Lock.", "NNUpdater": "For more information, see the Amazon"}
{"Origin": "It is not very important to select a precise bar line within a group, since for left end we choose the right-most bar and the opposite for right end.", "Reference": "It is not very important to select a precise barline within a group, since for left end we choose the right-most bar and the opposite for right end.", "NNUpdater": "Returns the html for a button bar."}
{"Origin": "Provides the default {@link GoogleCredential} from the Google Cloud runtime.", "Reference": "Provides the default {@link GoogleCredentialsBundle} from the Google Cloud runtime.", "NNUpdater": "If {@link #type()} is {@link Type#FROM_URI} the method returns a Google Cloud Storage URI (e.g."}
{"Origin": "Returns the default option type for property maps for the given value class.", "Reference": "Returns the default option type for option maps for the given value class.", "NNUpdater": "Returns value of the toList option."}
{"Origin": "This declaration is of the form ``Label lXXX = new Label();``.", "Reference": "This declaration is of the form ``Label labelXXX = new Label();``.", "NNUpdater": "label1 and label2 in X.Y.Z-label1-lable2."}
{"Origin": "Merges all the changes in other into this instance.", "Reference": "Merges all the changes in other with this instance.", "NNUpdater": "Concatenates multiple vectors into one array of strings."}
{"Origin": "Sets the bottom border for a region of cells by manipulating the cell style of the individual cells on the bottom", "Reference": "Sets the bottom border style for a region of cells by manipulating the cell style of the individual cells on the bottom", "NNUpdater": "Sets the left border for a region of cells by manipulating the cell style of the individual cells on the left"}
{"Origin": "Show the fragment displaying information about this application.", "Reference": "Show the fragment displaying the blocked URLs.", "NNUpdater": "Updates settings for the specified application."}
{"Origin": "Gets the Right value or throws, if the projected Either is a Left.", "Reference": "Gets the Right value or throws, if this Either is a Left.", "NNUpdater": "Gets the Left value or an alternate value, if the projected Either is a Right."}
{"Origin": "Runs the shell command which is specified, along with its arguments, in the given array.", "Reference": "Runs the shell command which is specified, along with its arguments, in the given {@code String} array.", "NNUpdater": "Writes the content of the {@link com.mucommander.shell.ShellHistoryManager} to the specified output stream."}
{"Origin": "Returns a Graph containing only requires public edges with transitive reduction.", "Reference": "Returns a Graph containing only requires transitive edges with transitive reduction.", "NNUpdater": "Returns a Graph containing only requires transitive edges with transitive reduction."}
{"Origin": "Channel number for this ISCH", "Reference": "Timeslot for this ISCH", "NNUpdater": "Default display string for this channel: SYSTEM_SITE_NAME"}
{"Origin": "Retrieves all the properties for the specified {@link NamespacedEntityId}.", "Reference": "Retrieves all the properties for the specified {@link MetadataEntity}.", "NNUpdater": "Retrieves all the properties for the specified {@link NamespacedEntityId}."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "This method will ensure that you have a right and initialized instance of {@link StandaloneContextAwareManagerFactory}.", "Reference": "This method will ensure that you have a right and initialized instance of {@link StandaloneContextAware}.", "NNUpdater": "Add a collection of {@link ContextAwareScheduledReporter}s."}
{"Origin": "It tests that the method {@code addEdge} will silently add the missing nodes to the graph, then add the edge connecting them.", "Reference": "Tests that the method {@code addEdge} will silently add the missing nodes to the graph, then add the edge connecting them.", "NNUpdater": "Add an edge between {@code nodeA} and {@code nodeB}; if these nodes are not already present in this graph, then add them."}
{"Origin": "Parent will have modified time to set to {@link LayerEntry#DEFAULT_MODIFIED_TIME}.", "Reference": "Parent will have modified time to set to {@link LayerConfiguration#DEFAULT_MODIFIED_TIME}.", "NNUpdater": "Not compatible with {@link #ifETagDoesntMatch(String)} or {@link #ifModifiedSince(Date)}"}
{"Origin": "This defaults to all of the {@linkplain Action} in {@linkplain ActionPlugin#getActions()}.", "Reference": "This defaults to all of the {@linkplain ActionType} in {@linkplain ActionPlugin#getActions()}.", "NNUpdater": "This defaults to all of the {@linkplain Action} in {@linkplain ActionPlugin#getActions()}."}
{"Origin": "Add a EventLogItem, but don't log.", "Reference": "Add a EventLogEntry, but don't log.", "NNUpdater": "Add to Log"}
{"Origin": "returns a Vector with all the classnames of the specified property in the GenericPropertiesCreator.", "Reference": "returns a Vector with all the classnames of the specified property in the", "NNUpdater": "Returns the configured properties."}
{"Origin": "Gets the master secret used for encrypting application layer data exchanged in this session.", "Reference": "Gets the master secret used for resumption handshakes.", "NNUpdater": "Get the secret of this client"}
{"Origin": "Is grand type supported.", "Reference": "Is grant type supported.", "NNUpdater": "Checks if the element has a grand parent."}
{"Origin": "The default implementation is a NOP.", "Reference": "Note: The default implementation is a NOP.", "NNUpdater": "Set Background"}
{"Origin": "Return point data dimension count", "Reference": "Return point dimension count", "NNUpdater": "Return point dimension count"}
{"Origin": "Sets the additional data used for creating new pages.", "Reference": "Sets the create parameter used for new pages.", "NNUpdater": "Sets the default factory to be used when creating pages."}
{"Origin": "Executes random mutator and accessor operations on {@link AsynchronousDataStore} validating that the used data structures can be used simultaneously.", "Reference": "Executes random mutator and accessor operations on {@link AsynchronousPageStore} validating that the used data structures can be used simultaneously.", "NNUpdater": "Sets the data reference."}
{"Origin": "This method will retrieve all the ExternalSourceEntries for the ExternalSource for the given AuthorityName param", "Reference": "This method will retrieve all the ExternalSourceEntries for the ExternalSource for the given externalSourceName param", "NNUpdater": "Set the name value."}
{"Origin": "Calls {@link Plugin#didDeclareGetter(TypeSpec.Builder, PropertyGenerator, MethodSpec)} on all the bundled plugins", "Reference": "Calls {@link Plugin#afterDeclareGetter(TypeSpec.Builder, PropertyGenerator, MethodSpec)} on all the bundled plugins", "NNUpdater": "Calls {@link Plugin#didDeclareGetter(TypeSpec.Builder, PropertyGenerator, MethodSpec)} on all the bundled plugins"}
{"Origin": "Getter Parameter Value for File Name", "Reference": "Getter Parameter Value for File Path or Name", "NNUpdater": "Getter Parameter Value for D-U-N-S"}
{"Origin": "To prevent this, implement this method such that it returns an upper bound for the two qualifiers that is wider than the least upper bound.", "Reference": "To prevent this, implement this method such that it returns an upper bound for the two qualifiers that is a super type and not equal to the least upper bound.", "NNUpdater": "Returns the least upper bound of two types."}
{"Origin": "{@code MinguoEra} is an enum representing the Minguo eras of ERA_BEFORE_ROC/ROC.", "Reference": "{@code MinguoEra} is an enum representing the Minguo eras of BEFORE_ROC/ROC.", "NNUpdater": "the eraValue is a valid Era number, -1..2."}
{"Origin": "This will return the {@link Key keys} with key material included of the specified versions.", "Reference": "This will return the {@link KeyVaultKey keys} with key material included of the specified versions.", "NNUpdater": "KeyImportOptions#getKeyMaterial() key material} cannot be null."}
{"Origin": "The client connection manager is set to {@link PoolingHttpClientConnectionManager}.", "Reference": "The client connection manager is set to {@link ThreadSafeClientConnManager}.", "NNUpdater": "Close the NonBlockingConnectionManager."}
{"Origin": "### \u24d8 Further Information: Overwriting an existing keypair is not possible.", "Reference": "### Precondition: Authenticated user.", "NNUpdater": "Creates an AndroidDataSet of the overwriting, nonOverwritingResources, and asset lists."}
{"Origin": "Get the current {@link IGetAndSetLocator}.", "Reference": "Get the current {@link IPropertyLocator}.", "NNUpdater": "Get Lagerort."}
{"Origin": "Returns an adjusted date based on this date.", "Reference": "Returns an adjusted copy of this date.", "NNUpdater": "This returns a {@code ZonedDateTime}, based on this one, with the date-time adjusted."}
{"Origin": "Question is identified by it's question number, and the feedback session name and course ID of the question.", "Reference": "Question is identified by its question number, the feedback session name and the course ID of the question.", "NNUpdater": "Updates the question number of a Feedback Question."}
{"Origin": "Group: producer", "Reference": "Group: consumer", "NNUpdater": "post-processor producer -> copy producer -> inputProducer"}
{"Origin": "This will return then underlying COSArray.", "Reference": "This will return the underlying COSArray.", "NNUpdater": "Returns the color component values as a COS array"}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "The ACLs used by the quorum actor and watcher.", "Reference": "Return the ACLs used by the quorum actor and watcher.", "NNUpdater": "Return a list of delete ACLs results for a given filter."}
{"Origin": "Provides a list of all connection wrappers corresponding to a current environment.", "Reference": "Provides a list of all connection configs corresponding to a current environment.", "NNUpdater": "Provides the legacy environment's major version number."}
{"Origin": "Returns the user login if the token hash is found, else {@code Optional.absent()}.", "Reference": "Returns the user uuid if the token hash is found, else {@code Optional.absent()}.", "NNUpdater": "Optional#empty() Optional.empty()}."}
{"Origin": "Map method name to the new name.", "Reference": "Maps a method name to its new name.", "NNUpdater": "Returns the tab bar height."}
{"Origin": "Reduce a collection of {@link DataTable}s to selection rows for selection queries with .", "Reference": "Reduces a collection of {@link DataTable}s to selection rows for selection queries with .", "NNUpdater": "Reduce a collection of {@link DataTable}s to selection rows for selection queries with ."}
{"Origin": "The {@link RsaKeyCreateOptions} is required.", "Reference": "The {@link CreateRsaKeyOptions} is required.", "NNUpdater": "The {@link RsaKeyCreateOptions#getKeySize() keySize} can be optionally specified."}
{"Origin": "if TTL is 60 seconds and specified duration is 20 seconds, refresh will be scheduled in 60 - 20 = 40 seconds.", "Reference": "if time before expiration is 60 seconds and specified duration is 20 seconds, refresh will be scheduled in 60 - 20 = 40 seconds.", "NNUpdater": "The default connection timeout is 60 seconds."}
{"Origin": "Retreives the Soundex code for a given String object.", "Reference": "Retrieves the Soundex code for a given String object.", "NNUpdater": "Return the string associated with the specified reply code."}
{"Origin": "This condition is most notably false for arrays, where encoded equality does not correspond to Java equality.", "Reference": "This condition is most notably false for arrays.", "NNUpdater": "Determines the equality of two objects."}
{"Origin": "Parses {@link SparseMatrix} from the given Matrix Market string.", "Reference": "Parses {@link SparseMatrix} from the given Matrix Market.", "NNUpdater": "Test of text method, of class SparseMatrix."}
{"Origin": "returns the version of a bundle, as specified by Bundle-Version in the manifest", "Reference": "Returns the version of a bundle, as specified by Bundle-Version in the manifest", "NNUpdater": "Gets the bundle id of the bundle containing the component type of the instance."}
{"Origin": "Appends a value to the file and return it's offset.", "Reference": "Writes a token to the file.", "NNUpdater": "Appends the key/value to the active object"}
{"Origin": "TODO currently not used - but will eventually be called from BX-bot UI", "Reference": "Currently not used, but will eventually be called from BX-bot UI.", "NNUpdater": "Sets the presence of the bot when it logs in."}
{"Origin": "Check if Kerberos is enabled.", "Reference": "Check if Kerberos authentication is enabled.", "NNUpdater": "- login identity provider is not populated - Kerberos service support is not enabled - openid connect is not enabled - knox sso is not enabled"}
{"Origin": "Get the representative SingleEvent for this cell.", "Reference": "Get the representative TimeLineEvent for this cell.", "NNUpdater": "Get the representative TimeLineEvent for this row ."}
{"Origin": "Loads the muCommander configuration.", "Reference": "Loads the muCommander CONFIGURATION.", "NNUpdater": "Returns the version number of the latest muCommander release."}
{"Origin": "Returns an {@link Operator} version of {@link #run(Observable)}.", "Reference": "Returns an {@link Transformer} version of {@link #run(Observable)}.", "NNUpdater": "Operation fails."}
{"Origin": "foo(); (72)", "Reference": "foo(); (79)", "NNUpdater": "Assert.instanceOf(Foo.class, foo, ``Foo expected``);"}
{"Origin": "Creates a new multiplexed {@link ThriftCallService} with the specified service implementations.", "Reference": "Creates a new multiplexed {@link ThriftCallService} with the specified list service implementations.", "NNUpdater": "Creates a new {@link CompositeServiceEntry} with the specified {@link Route} and {@link Service}."}
{"Origin": "The new series holds a copy of all {@link Bar bars} between startIndex (inclusive) and endIndex (exclusive) of this TimeSeries.", "Reference": "The new series holds a copy of all {@link Bar bars} between startIndex (inclusive) and endIndex (exclusive) of this BaseBarSeries.", "NNUpdater": "Returns a COPY of the portion of this list between the specified fromIndex, inclusive, and toIndex, exclusive."}
{"Origin": "Generates a code sample for using {@link FileAsyncClient#setProperties(long, FileHTTPHeaders, FileSmbProperties, String)}", "Reference": "Generates a code sample for using {@link FileAsyncClient#setProperties(long, FileHttpHeaders, FileSmbProperties, String)}", "NNUpdater": "Generates a code sample for using {@link FileClient#setProperties(long, FileHTTPHeaders, FileSmbProperties,"}
{"Origin": "Check if the TrackableTrackingCode correspond the the EMPTY reference.", "Reference": "Checks if the TrackableTrackingCode corresponds to the EMPTY reference.", "NNUpdater": "Returns the tracking count for this ."}
{"Origin": "The {@link Poller poller} allows users to automatically poll on the create certificate operation status.", "Reference": "The {@link PollerFlux poller} allows users to automatically poll on the create certificate operation status.", "NNUpdater": "Parse a ``poller`` element to create a Trigger and add it to the property values of the target builder."}
{"Origin": "Combines two {@code Validation}s into a {@link Builder}.", "Reference": "Combines two {@code Validation}s into a {@link Builder2}.", "NNUpdater": "If so, it call {@link #checkValue(ValidationMessage.Builder, ValidationReport,"}
{"Origin": "This method does the same as {@link #checkSolidity(Hash, boolean, int)} but defaults to an unlimited amount of transactions that are allowed to be traversed.", "Reference": "This method does the same as {@link #checkSolidity(Hash, int)} but defaults to an unlimited amount of transactions that are allowed to be traversed.", "NNUpdater": "Return the same value as {@link Boolean#hashCode(boolean)}}."}
{"Origin": "Used to determine if the player can be used, e.g if the binary is accessible.", "Reference": "Used to determine if this {@link Player} can be used, e.g if the binary is accessible.", "NNUpdater": "Indicates whether a single color is used."}
{"Origin": "Code snippets for {@link BlobAsyncClient#setHTTPHeadersWithResponse(BlobHttpHeaders, BlobAccessConditions)}", "Reference": "Code snippets for {@link BlobAsyncClient#setHttpHeadersWithResponse(BlobHttpHeaders, BlobAccessConditions)}", "NNUpdater": "Code snippet for {@link AppendBlobAsyncClient#createWithResponse(BlobHTTPHeaders, Map, BlobAccessConditions)}"}
{"Origin": "If not, it will be wrapped by a new {@link AnnotationEventListenerAdapter}.", "Reference": "If not, it will be wrapped by a new {@link AnnotationEventHandlerAdapter}.", "NNUpdater": "Is responsible for calling {@link EventSource#onEvent(InboundEvent)} and all registered {@link EventListener} instances."}
{"Origin": "If the provided item is not an expandable it will be filtered as usual by {@link #filterObject(T, String)}.", "Reference": "If the provided item is not an expandable it will be filtered as usual by {@link #filterObject(T, Serializable)}.", "NNUpdater": "The item must implement {@link IExpandableItem}."}
{"Origin": "If {@code options} is {@code null}, then all the {@link ConfigurationSetting ConfigurationSettings} are fetched in their current state.", "Reference": "If {@code selector} is {@code null}, then all the {@link ConfigurationSetting ConfigurationSettings} are fetched in their current state.", "NNUpdater": "{@codesnippet com.azure.data.appconfiguration.ConfigurationClient.setSettingWithResponse#ConfigurationSetting-boolean-Context}"}
{"Origin": "This methods checks that this node, and all its nodes recursively, do not contain elements that were introduced in more recent versions of the ASM API than the given version.", "Reference": "This method checks that this node, and all its children recursively, do not contain elements that were introduced in more recent versions of the ASM API than the given version.", "NNUpdater": "Applies the given settings to all of the unary API methods in this service."}
{"Origin": "The system modules are typically linked into the Java run-time image.", "Reference": "The system modules are the modules in the Java run-time image.", "NNUpdater": "The system modules are typically linked into the Java run-time image."}
{"Origin": "Returns whether or not this qualifier has array with offset of -1.", "Reference": "Returns whether or not this qualifier has sequence with offset of -1.", "NNUpdater": "Result has (column, version, kvtype, id, value)"}
{"Origin": "Sets the ratings entry remote service.", "Reference": "Sets the asset entry set like local service.", "NNUpdater": "Sets the document library file entry remote service."}
{"Origin": "Such pixels are marked with a specific color (green foreground) so that the template can measure their distance to (black) foreground.", "Reference": "Such pixels are marked with a specific color (pink foreground) so that the template can measure their distance to (black) foreground.", "NNUpdater": "Collect the image foreground pixels located under the template foreground areas, with some additional margin."}
{"Origin": "Gets a list of the unfinished {@link Allocation}s in the order in which those {@link", "Reference": "Gets a list of the unfinished ``leaf`` tasks in the order in which those tasks were encountered.", "NNUpdater": "Returns a new {@link Order} with the given {@link Direction}."}
{"Origin": "Returns the 4 byte header for BIP32 (HD) wallet - public key part.", "Reference": "Returns the 4 byte header for BIP32 wallet P2PKH - public key part.", "NNUpdater": "Returns the number of null elements in the range [hd+1 .. hr-1] excluding hd and hr"}
{"Origin": "Paint inter image, plus a line from inter center to staff reference point if any, plus inter links if any.", "Reference": "Paint inter image, plus a line from inter center to staff reference point if any, plus inter decorations if any.", "NNUpdater": "Report the list of AbstractChordInter instances (rests & heads) in the neighborhood of the specified Inter."}
{"Origin": "The {@link Flux} will contain one or several feed response of the obtained users.", "Reference": "The {@link CosmosContinuablePagedFlux} will contain one or several feed response of the obtained users.", "NNUpdater": "The {@link Flux} will contain one or several feed response of the obtained containers."}
{"Origin": "Creates new {@link AggregationExpression} that returns the year portion of a date in the factory timezone (default UTC).", "Reference": "Creates new {@link AggregationExpression} that returns the year portion of a date.", "NNUpdater": "Creates new {@link AggregationExpression} that returns the year portion of a date in the factory timezone (default UTC)."}
{"Origin": "IMPORTANT: If the identified workflow execution was in progress, it is terminated immediately.", "Reference": "If the identified workflow execution was in progress, it is terminated immediately.", "NNUpdater": "The instance is not terminated immediately."}
{"Origin": "Creates query that searches for SourceContacts which match a specific query String.", "Reference": "Queries this ContactSourceService for SourceContacts which match a specific query String.", "NNUpdater": "Queries this ContactSourceService for SourceContacts which match a specific query Pattern."}
{"Origin": "Creates a randomized list of urls for the given shard.", "Reference": "Creates a list of urls for the given shard.", "NNUpdater": "Gets all ShardStates for a given shard."}
{"Origin": "Adds a new FragmentOptions instance to the builder.", "Reference": "Adds a new {@link FragmentOptions} instance to the builder.", "NNUpdater": "creates a new instance of this fragment"}
{"Origin": "DO NOT change the order of the expressions returned because broker relies on that to process the query.", "Reference": "NOTE: DO NOT change the order of the expressions returned because broker relies on that to process the query.", "NNUpdater": "Note: This method cannot be overridden since the selection and the internal methods rely on it."}
{"Origin": "Returns the total size of the segment in bytes.", "Reference": "Returns the segment size.", "NNUpdater": "The total size of all attribute values in the domain, in bytes."}
{"Origin": "0 is the max height when there is no rectangle.", "Reference": "| Remove the height from heap.", "NNUpdater": "This height is the sum of mCameraPreviewLayoutHeight + gallery height."}
{"Origin": "Returns true if Wifi calling is enabled for the specific phone with id {@code phoneId}.", "Reference": "Returns true if Wifi calling is enabled for the specific subscription with id {@code subId}.", "NNUpdater": "The old phone number or {@code null} if no phone number was previously set."}
{"Origin": "Returns the Java types corresponding to the argument types of the given method descriptor.", "Reference": "Returns the {@link Type} values corresponding to the argument types of the given method descriptor.", "NNUpdater": "Returns the {@link Type} values corresponding to the argument types of the given method descriptor."}
{"Origin": "Get the current user profile.", "Reference": "Get user detail page.", "NNUpdater": "Returns the profile Id for the current profile photo"}
{"Origin": "EpollServerSocketChannel}.", "Reference": "It's an optional parameter.", "NNUpdater": "Add a file descriptor"}
{"Origin": "Also @see {@link CompletableFutures#accumulate(CollectionX, Reducer)} if you would like a failure to result in a CompletableFuture with an error", "Reference": "Also @see {@link CompletableFutures#accumulate(IterableX, Reducer)} if you would like a failure to result in a CompletableFuture with an error", "NNUpdater": "Simplex> futureList = Monad.sequence(CompletableFuture.class, futures).simplex();"}
{"Origin": "Publishes an {@link AfterTestClassEvent} to the {@code ApplicationContext} for the supplied {@link TestContext}.", "Reference": "Publish an {@link AfterTestClassEvent} to the {@code ApplicationContext} for the supplied {@link TestContext}.", "NNUpdater": "Resolve the given {@link Parameter} for the supplied {@link TestExtensionContext}."}
{"Origin": "Check and append the synonyms words of specified word included the CJK and basic Latin words", "Reference": "Check and append the synonyms/pinyin words of specified word included the CJK and basic Latin words", "NNUpdater": "Test add words and list words."}
{"Origin": "This option won't be visible is `--entityFormatExpression` has been specified.", "Reference": "This option won't be visible if `--entity` has not already been specified.", "NNUpdater": "Operation fails."}
{"Origin": "Start building a new factory class-based service binding.", "Reference": "Start building a new supplier class-based service binding.", "NNUpdater": "Start building a new DELETE query that deletes the provided names."}
{"Origin": "Merges this frame with the given frame (case of a RET instruction).", "Reference": "Merges the given frame into this frame (case of a subroutine).", "NNUpdater": "Computes the final size of this frame."}
{"Origin": "Obtains an instance from the specified unique name.", "Reference": "Obtains an instance from the specified name.", "NNUpdater": "Obtains the type from a unique name."}
{"Origin": "NOTE: this method i meant to render fresh component instances that are disposed after the html has been generate.", "Reference": "NOTE: this method is meant to render fresh component instances that are disposed after the html has been generate.", "NNUpdater": "Generate the FOAF representation of this resource."}
{"Origin": "Set the {@link MongoClientOptions} to be used when creating {@link MongoClient}.", "Reference": "Set the {@link MongoClientSettings} to be used when creating {@link MongoClient}.", "NNUpdater": "Will use the {@link Mongo} instance configured in {@link #reactiveMongoClient()}."}
{"Origin": "Gets the value of the 'ValueType' field", "Reference": "Gets the value of the 'valueType' field.", "NNUpdater": "Returns the encoding of the next field value."}
{"Origin": "Validation of page: - detects CAPTCHA test - detects invalid credentials error - detects wrong clientId error", "Reference": "Validation of page: - detects CAPTCHA test - detects 2-step verification - detects invalid credentials error - detects wrong clientId error", "NNUpdater": "Detects localized objects in the specified local image."}
{"Origin": "Returns whether the given HTTP response status code is a redirect code {@code 301, 302, 303, 307}.", "Reference": "Returns whether the given HTTP response status code is a redirect code {@code 301, 302, 303, 307, 308}.", "NNUpdater": "302) to the client using the specified redirect location."}
{"Origin": "It the specifed {@link Path} is {@code null} a temporary filename is used.", "Reference": "It the specified {@link Path} is {@code null} a temporary filename is used.", "NNUpdater": "Constructs a temporary file resource given the temporary directory and a filename."}
{"Origin": "Returns a resource created from an Object.", "Reference": "Returns a resource wrapper created from the input.", "NNUpdater": "Returns an object from the list."}
{"Origin": "MaryData object which contains the reference to the updated utterance.", "Reference": "Utterance object which contains the reference to the updated utterance.", "NNUpdater": "Gets the transcript's dictionary."}
{"Origin": "Amazon Redshift returns all clusters that match any combination of the specified keys and values.", "Reference": "Redshift returns all clusters that match any combination of the specified keys and values.", "NNUpdater": "Describes the SQL Query to execute on an Amazon Redshift database for an"}
{"Origin": "Users should remove graphs via the {@link RemoveGraph} operation.", "Reference": "Users should remove graphs via the {@link RemoveStore} operation.", "NNUpdater": "Remove a tag from a document."}
{"Origin": "Add a EventLogItem, but don't log.", "Reference": "Add a EventLogEntry, but don't log.", "NNUpdater": "Add to Log"}
{"Origin": "Save a header from the given HTTP operation into the AList.", "Reference": "Save a header from the given HTTP operation into the Map.", "NNUpdater": "Sets the {@link PseudoHeaderName#METHOD} header."}
{"Origin": "Complexity: 5 trigonometric functions, 2 sqrt.", "Reference": "Complexity: 5 trigonometric functions, 1 sqrt.", "NNUpdater": "Distance is (sqrt(1.0 / support(%)) * (1.0 / (i==0 ?"}
{"Origin": "The option is a:", "Reference": "The option is a: type.", "NNUpdater": "Returns the {@link OptionsBase} class the defines the given option, null if the option isn't recognized."}
{"Origin": "Returns an {@link Operator} to allow the query to be pushed parameters via the {@link Observable#lift(Operator)} method.", "Reference": "Returns an {@link Transformer} to allow the query to be pushed parameters via the {@link Observable#compose(Transformer)} method.", "NNUpdater": "Automaps the first column of the ResultSet into the target class as an operator to use with ."}
{"Origin": "The extra code is defined in the imagej.legacy.patches package, as described in the documentation for {@link #insertMethod(String, String)}.", "Reference": "The extra code is defined in the imagej.legacy.patches package, as described in the documentation for {@link #insertNewMethod(String, String)}.", "NNUpdater": "Performs the {@link #insert(String, String, Map)} operation via Key/Value (``INSERT``)."}
{"Origin": "Test if same updates order on all owners after txs are finished.", "Reference": "Tests for same order of updates on all owners after txs are finished.", "NNUpdater": "If the new status if ``FINISHED``, this also updates the accumulators."}
{"Origin": "This is useful for matching through nested routes where the path is matched incrementally at each level.", "Reference": "This is useful for matching nested routes where the path is matched incrementally at each level.", "NNUpdater": "Sets the previous nested level as current nested level and removes and returns the current nested level."}
{"Origin": "Adds a ChatRoomProviderWrapperListener to the listener list.", "Reference": "Removes the ChatRoomProviderWrapperListener to the listener list.", "NNUpdater": "Returns a reference to a chatRoom named roomName or null if that room does not exist."}
{"Origin": "MEthod to show or hide the ``return the call`` layout", "Reference": "Method to show or hide the ``return the call`` layout", "NNUpdater": "Animates the list to show/hide the nodes."}
{"Origin": "R is a rotation transformation specified by the quaternion (qx, qy, qz, qw).", "Reference": "R is a rotation - and possibly scaling - transformation specified by the quaternion (qx, qy, qz, qw).", "NNUpdater": "Set this matrix to the rotation transformation of the given {@link Quaternionf}."}
{"Origin": "Invoke Builder.moduleHash(String name, String hashString);", "Reference": "Invoke Builder.moduleHash(String name, byte[] hash);", "NNUpdater": "Returns a positive hash code value for the given string."}
{"Origin": "Returns an iterator of all of the registered {@code SaslServerFactory}s where the order is based on the order of the Provider registration and/or class path order.", "Reference": "Returns a collection of all of the registered {@code SaslServerFactory}s where the order is based on the order of the Provider registration and/or class path order.", "NNUpdater": "Returns a new {@link Order} with the given {@link Direction}."}
{"Origin": "The ORGANIZATION on Ontario Bank should not ve overrwritten since Ontario (STATE_OR_PROVINCE) does not span Ontario Bank.", "Reference": "The LOCATION on Ontario Lake should not be overwritten since Ontario (STATE_OR_PROVINCE) does not span Ontario Lake.", "NNUpdater": "The LOCATION on Ontario Lake should not be overwritten since Ontario (STATE_OR_PROVINCE) does not span Ontario Lake."}
{"Origin": "`DEPRECATED`: Number of users (for rooms only)", "Reference": "`DEPRECATED`: Number of users (for rooms only) [Deprecated since version VERSION]", "NNUpdater": "Size of the environment."}
{"Origin": "quantizes a provided polygon to be consistent with the index encoding", "Reference": "quantizes a triangle to be consistent with index encoding", "NNUpdater": "Create a new PolygonBuilder"}
{"Origin": "If the delete etag doesn't match anything the delete won't happen, this will result in a 412.", "Reference": "If the delete ETag doesn't match anything the delete won't happen, this will result in a 412.", "NNUpdater": "Handles an {@link HttpMethod#DELETE DELETE} request."}
{"Origin": "Implementations of SkylarkValue may define their own behavior of {@code str}.", "Reference": "Implementations of StarlarkValue may define their own behavior of {@code str}.", "NNUpdater": "Create an iterator for the specified string."}
{"Origin": "The comparison is based on the Unicode value of each character in the strings.", "Reference": "The comparison is based on the Unicode value of each character in the CharSequences.", "NNUpdater": "The comparison is based on the local-time and the offset."}
{"Origin": "Returns the XML representation of the PacketExtension.", "Reference": "Returns the XML representation of the ExtensionElement.", "NNUpdater": "Returns the value of the crypto-suite attribute."}
{"Origin": "track that related posts have loaded and scrolled into view if we haven't already tracked it", "Reference": "track that related posts have loaded and are scrolled into view if we haven't already tracked it", "NNUpdater": "Returns the number of pixels that this view can be scrolled horizontally."}
{"Origin": "Create a compiler.", "Reference": "Create a spvc state handle.", "NNUpdater": "Source model building in the given compiler: {@link SpoonModelBuilder#build()}."}
{"Origin": "Amazon Redshift returns all subnet groups that match any combination of the specified keys and values.", "Reference": "Redshift returns all subnet groups that match any combination of the specified keys and values.", "NNUpdater": "Describes the SQL Query to execute on an Amazon Redshift database for an"}
{"Origin": "Builds a CollectionLayer bean from the {@link OpenSearchAccess#LAYER} property of a", "Reference": "Builds a CollectionLayer bean from the {@link OpenSearchAccess#LAYERS} property of a", "NNUpdater": "Returns the {@code Module} with the given name in this layer, or if not in this layer, the {@linkplain #parent parent} layer."}
{"Origin": "Add a data to internal dequeu data structure", "Reference": "Add a data to internal deque data structure", "NNUpdater": "dataName : DATA pathSegments ;"}
{"Origin": "Sets the tracking state for this costas loop.", "Reference": "Sets the PLLGain state for this costas loop.", "NNUpdater": "Returns the tracking count for this ."}
{"Origin": "Reset all labels in the instruction list.", "Reference": "Resets all the labels in the instruction list.", "NNUpdater": "The instruction which produces the input value to this instruction."}
{"Origin": "Test if the vector AD is right of AB.", "Reference": "Test if the double[] AD is right of AB.", "NNUpdater": "A: ABCDEF X: XYZ"}
{"Origin": "Called if this element get updated on the client side.", "Reference": "Called if this element getComb updated on the client side.", "NNUpdater": "Get the setup file for this entity."}
{"Origin": "Returns the execution info from the tags declared on the target.", "Reference": "Returns the execution info.", "NNUpdater": "Returns the name of the java field, as declared on the class"}
{"Origin": "Compute the theoretical starting abscissa for each key-sig item.", "Reference": "Compute the theoretical starting abscissa for each key signature item.", "NNUpdater": "Set the coordinates of the top left point in the score"}
{"Origin": "Test the behavior getObject for inet columns.", "Reference": "Test the behavior getObject for ipv4 inet columns.", "NNUpdater": "Get number parameters."}
{"Origin": "Create a {@link MongoDbOutboundGatewaySpec} builder instance based on the provided {@link MongoDbFactory} and {@link MongoConverter}.", "Reference": "Create a {@link MongoDbOutboundGatewaySpec} builder instance based on the provided {@link MongoDatabaseFactory} and {@link MongoConverter}.", "NNUpdater": "Will use the {@link MongoClient} instance configured in {@link #mongo()}."}
{"Origin": "Returns the servlet HTTP context.", "Reference": "Returns the current HTTP connection.", "NNUpdater": "Create a new {@link MockHttpServletRequest} based on the given {@link ServletContext}."}
{"Origin": "Getter for {@link #exposeOnlyRequestedHeader}", "Reference": "Getter for {@link #allowOnlyRequestedHeader}", "NNUpdater": "Add a response header to expose."}
{"Origin": "Checks whether the extension of the filename is one of those specified.", "Reference": "Checks whether the extension of the fileName is one of those specified.", "NNUpdater": "Checks whether the extension of the filename is one of those specified."}
{"Origin": "Get Allowed En Cashment?.", "Reference": "Get Allowed Encashment.", "NNUpdater": "Translate TARGETFEATURES to HTSCONTEXT"}
{"Origin": "For more information on", "Reference": "For more information on Amazon", "NNUpdater": "For more information, see Resource Management."}
{"Origin": "Gets the Processing Group this Saga is assigned to, if it is explicitly set.", "Reference": "Gets the Processing Group this Saga is assigned to.", "NNUpdater": "Configures the ListenerInvocationErrorHandler to use when processing of event in saga fails."}
{"Origin": "If nodes returned are to be further used, they must be finalized via {@link ANode#finish()}.", "Reference": "Before nodes are added to the result, they must be finalized via {@link ANode#finish()}.", "NNUpdater": "If there are more, {@link #run(int, ExecutorService)} must be used."}
{"Origin": "Reverts method {{@link #unsignedToTwosComplement(byte[])}.", "Reference": "Reverts method {{@link #padLeadingZero(byte[])}.", "NNUpdater": "Operation fails."}
{"Origin": "Copy the AndroidManifest.xml from sourceManifestFile to androidManifestFile", "Reference": "Copy the AndroidManifest.xml from androidManifestFile to destinationManifestFile", "NNUpdater": "Find valid library AndroidManifest files referenced from an already loaded AndroidManifest's `project.properties` file, recursively."}
{"Origin": "Generate a hashcode by hashing all of the properties.", "Reference": "Generate a hash code by hashing all of the properties.", "NNUpdater": "Return the hashCode of the"}
{"Origin": "Get the value of username.", "Reference": "Gets the value of userName.", "NNUpdater": "Gets the username."}
{"Origin": "Menge in Preiseinheit eff..", "Reference": "Menge In Preiseinheit.", "NNUpdater": "Set Bestellmenge."}
{"Origin": "Loads the update center data, if any and if modified since last read.", "Reference": "Loads the update center data, if any.", "NNUpdater": "Return the value of the {@code IfModifiedSince} header."}
{"Origin": "escapes character data in val", "Reference": "escapes character data in val and attributes", "NNUpdater": "The nullValue of the type"}
{"Origin": "Creates new {@link AggregationExpression} that returns the week of the year for a date as a number between 0 and 53 in the factory timezone (default UTC).", "Reference": "Creates new {@link AggregationExpression} that returns the week of the year for a date as a number between 0 and 53.", "NNUpdater": "Creates new {@link AggregationExpression} that returns the week of the year for a date as a number between 0 and 53 in the factory timezone (default UTC)."}
{"Origin": "Create a new builder using the default version of GraphSON.", "Reference": "Create a new builder using the default version of GraphSON - v3.", "NNUpdater": "This method by default uses the {@link GraphSONObjectMapper} created by {@link #graphSONMapper}."}
{"Origin": "Iterate of a copy of the table.", "Reference": "Iterate over the underlying rows in the source table.", "NNUpdater": "Make a deep copy of the table."}
{"Origin": "Returns an ordered range of all the sync d l objects where companyId = ?", "Reference": "Returns an ordered range of all the sync d l objects where repositoryId = ?", "NNUpdater": "Finds an ordered range of all the articles where groupId = ?"}
{"Origin": "Register the dao with the cache.", "Reference": "Register the DAO with the cache.", "NNUpdater": "Register the dao with the cache."}
{"Origin": "Removes all values bound to this ThreadContext, which includes any Subject, Session, or InetAddress that may be bound by these respective objects' conveninece methods, as well as all values bound by your application code.", "Reference": "Clears all values bound to this ThreadContext, which includes any Subject, Session, or InetAddress that may be bound by these respective objects' convenience methods, as well as all values bound by your application code.", "NNUpdater": "Sequence type of values bound to this variable."}
{"Origin": "This method will just return the ReflectivePropertyAccessor instance if it is unable to build something more optimal.", "Reference": "This method will just return the ReflectivePropertyAccessor instance if it is unable to build a more optimal accessor.", "NNUpdater": "Get the 'reflective' type of the given type."}
{"Origin": "It is not recommended to expand large trees this way since that might cause huge interface lags.", "Reference": "It is not recommended to expand large tree chunks this way since that might cause interface lags.", "NNUpdater": "Note that this method of authentication is not recommended, since it is very inflexible."}
{"Origin": "Set Eingabegruppe.", "Reference": "Set Untergruppe.", "NNUpdater": "Set Untergruppe."}
{"Origin": "Get the ``original`` database name.", "Reference": "Get the ``original`` wiki id.", "NNUpdater": "Get the name value."}
{"Origin": "Returns xpath query corresponding to {@code TreeWalkerAuditEvent} object which points to the same AST element as specified {@code AuditEvent} object.", "Reference": "Returns xpath query corresponding to localized message of the {@code TreeWalkerAuditEvent} object which points to the same AST element as specified {@code AuditEvent} object.", "NNUpdater": "Query events."}
{"Origin": "Set the certificate that will sign this certificate.", "Reference": "Set the certificate that will issue this certificate.", "NNUpdater": "Delete the certificate associated with a certificate order."}
{"Origin": "Note, that the processor surround the commands with BlockFocusEventsCmd - UnbockFocusEventsCmd.", "Reference": "Note, that the processor surround the commands with BlockFocusEventsCmd - UnblockFocusEventsCmd.", "NNUpdater": "Returns the {@link SocksCmdType} of this {@link SocksCmdRequest}"}
{"Origin": "Creates a new {@code AtomicTreeMapBuilder}.", "Reference": "Creates a new {@code AtomicNavigableMapBuilder}.", "NNUpdater": "Creates a {@code TreeMap} of the given entries using the given key comparator."}
{"Origin": "Note: this method can only be called once per index.", "Reference": "NOTE: this method can only be called once per index.", "NNUpdater": "This method is guaranteed to only be called once."}
{"Origin": "Returns a list containing containing only elements found in {@code first} and also in {@code second}.", "Reference": "Returns true if there is an element in {@code first} that is also in {@code second}.", "NNUpdater": "Returns a list containing containing only elements found in {@code first} and also in {@code second}."}
{"Origin": "This method should be called on completion of an operation (afterQuery all cascades are completed) that saves an entity.", "Reference": "This method should be called on completion of an operation (after all cascades are completed) that saves an entity.", "NNUpdater": "After the operation is completed, Amazon Kinesis sets the to ."}
{"Origin": "Completely Removes the Connection associated with the given id.", "Reference": "Completely Removes the wire associated with the given id.", "NNUpdater": "Remove the connection associated with the given connectionId."}
{"Origin": "no_cores: The empty string is also a valid keyword, and maps to the Anonymous state.", "Reference": "NO_CORS: The empty string is also a valid keyword, and maps to the Anonymous state.", "NNUpdater": "Uses {@link #isValidString(String)} to validate the value."}
{"Origin": "Subscribes to changes of required table.", "Reference": "Allows observer changes of required table.", "NNUpdater": "Subscribes for changes in resource assignment."}
{"Origin": "Currently supported views are listed in WebConstants.*_VIEW.", "Reference": "Currently supported views are listed in ComplexObsHandler.*_VIEW.", "NNUpdater": "WebView."}
{"Origin": "Gets the time-zone, such as 'Europe/Paris'.", "Reference": "Gets the zone ID, such as 'Europe/Paris'.", "NNUpdater": "Gets the time zone region identifier, such as 'Europe/London'."}
{"Origin": "Creates an audit entry when a service definition is updated.", "Reference": "Creates an audit entry when a API definition is updated.", "NNUpdater": "Creates an object from a definition element."}
{"Origin": "Find {@link NativeLinkable} nodes transitively reachable from the given roots.", "Reference": "Find {@link NativeLinkableGroup} nodes transitively reachable from the given roots.", "NNUpdater": "Returns our {@link #getBuildDeps()}, limited to the subset of those which are {@link NativeLinkable}."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Get all non-null values with the given ids for default COLUMN", "Reference": "Get all non-null values of type T with the given ids for default COLUMN in a map", "NNUpdater": "Should default initialization of field values be overridden?"}
{"Origin": "Tests the {@link SecurityUtils#getOwnerFromThriftClient()} ()} method.", "Reference": "Tests the {@link SecurityUtils#getOwnerFromGrpcClient()} ()} method.", "NNUpdater": "Tests the {@link Permission#setUserFromThriftClient()} method."}
{"Origin": "Overriden to ensure that procedure is applied against read-only view and not the {@link DelegateIndex}.", "Reference": "Overridden to ensure that procedure is applied against read-only view and not the {@link DelegateIndex}.", "NNUpdater": "Gets the read-only snapshot view of all {@link Executor}s."}
{"Origin": "Convert unserializable exceptions (usually from dev mode) into generic serializable ones.", "Reference": "Convert unserializable exceptions into generic serializable ones.", "NNUpdater": "Extract from XHTML RFC:"}
{"Origin": "Group: common", "Reference": "Group: security", "NNUpdater": "Returns the default number of {@linkplain CommonPools#blockingTaskExecutor() blocking task executor} threads."}
{"Origin": "The default value of this attribute is {@code 40}.", "Reference": "The default value of this attribute is {@code VERSION}.", "NNUpdater": "The model supports k = 5 ... 50."}
{"Origin": "Converts a BucketAutoOptions to a DBObject for use by the Java driver.", "Reference": "Converts a BucketAutoOptions to a Document for use by the Java driver.", "NNUpdater": "Gets the autoConnectRetry attribute for MongoDB Java driver version 2."}
{"Origin": "Sets the {@link GridProjectionFactory} used to create an instances of {@link GridProjection}s.", "Reference": "Sets the {@link GridProjectionFactoryLocator} used to find factories which are creating an instances of {@link GridProjection}s.", "NNUpdater": "Sets cloner to be used if {@link CacheFlag#CLONE} flag is set on projection."}
{"Origin": "Sets the input format of this processor, returning whether the input format has changed.", "Reference": "Sets the input format of this processor.", "NNUpdater": "Sets the input format."}
{"Origin": "Cron expression to be used for the service which does TTL of the backups.", "Reference": "Monitoring period for the service which does TTL of the backups.", "NNUpdater": "Number of synchronous backups."}
{"Origin": "Returns the set of compilation unit type names for all contained super source compilation units.", "Reference": "Returns the set of compilation unit type source names for all contained super source compilation units.", "NNUpdater": "Creates a {@link Resource} and adds it the set of resources."}
{"Origin": "Creates an instance from an input stream.", "Reference": "Obtains an instance from an input stream.", "NNUpdater": "Creates an instance from typed strings."}
{"Origin": "Does not close the channel when the flux is terminated, but does {@linkplain #release(DataBuffer) release} the data buffers in the source.", "Reference": "Does not close the channel when the flux is terminated, and does not {@linkplain #release(DataBuffer) release} the data buffers in the source.", "NNUpdater": "Attempt to look up the {@code DataSource} by type and the {@linkplain #DEFAULT_DATA_SOURCE_NAME default data source name}."}
{"Origin": "For each the offsets for each array in superType, there must be an offset in this qualifier for the array that is greater than or equal to the super offset.", "Reference": "For each the offsets for each sequence in superType, there must be an offset in this qualifier for the sequence that is greater than or equal to the super offset.", "NNUpdater": "The offset argument must be greater than or equal to , and less than or equal to the length of this AppendingStringBuffer."}
{"Origin": "Returns default type cache implementation variant.", "Reference": "Sets default file prefix.", "NNUpdater": "Returns instance."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Get Zahlwert.", "Reference": "Get Eingaberegister.", "NNUpdater": "Get Eingabegruppe."}
{"Origin": "Block volumes that should be attached to the instance at boot time.", "Reference": "Block devices that should be attached to the instance at boot time.", "NNUpdater": "Use the ListVolumes operation to return a list of gateway volumes."}
{"Origin": "This is however tranparent to the caller.", "Reference": "This is however transparent to the caller.", "NNUpdater": "Finds a static method of the required type in the caller class itself, and installs it on the caller class."}
{"Origin": "In order to set the matrix to a rotation transformation without pre-multiplying, use {@link #rotation(Quaterniond)}.", "Reference": "In order to set the matrix to a rotation transformation without pre-multiplying, use {@link #rotation(Quaterniondc)}.", "NNUpdater": "In order to set the matrix to a rotation transformation without pre-multiplying, use {@link #rotation(Quaternionfc)}."}
{"Origin": "Each adapter will try to send blocks until have got special {@link Packet} with type {@link PacketTypes#ACK}, that means receiver have got block.", "Reference": "Each adapter will try to send blocks until have got special {@link Block} with type {@link PacketTypes#ACK}, that means receiver have got block.", "NNUpdater": "Get head packet."}
{"Origin": "Converts from {@link CpuProfilerConfig} to {@link CpuProfiler.CpuProfilerConfiguration}", "Reference": "Converts from {@link CpuProfilerConfig} to {@link Cpu.CpuTraceConfiguration.UserOptions}", "NNUpdater": "Receives a {@link Common.Device.Builder} and converts it into a {@link Common.Device}."}
{"Origin": "NOTE: TODO(b/140064271): Add handling for composite types + tests for this file.", "Reference": "NOTE: TODO(b/140064271): Add handling for composite types.", "NNUpdater": "Data in this, e.g."}
{"Origin": "Expands all tree nodes accepted by filter in a single call.", "Reference": "Expands all tree nodes.", "NNUpdater": "Expands the specified leaf nodes."}
{"Origin": "Generate list of dependencies of package.", "Reference": "Generate list of imports of dependencies.", "NNUpdater": "Gets or sets the deployment mode."}
{"Origin": "Gets the value of the pubBrowser property.", "Reference": "Gets the value of the target property.", "NNUpdater": "Gets the value of the links property."}
{"Origin": "Returns a copy of this time with the specified field altered.", "Reference": "Returns a copy of this time with the specified field set to a new value.", "NNUpdater": "Returns a copy of this LocalTime with the time altered using the adjuster."}
{"Origin": "Gets the ModelService instance that corresponds to the given name", "Reference": "Gets the ModelService instance that corresponds to given the name", "NNUpdater": "The value corresponds to:"}
{"Origin": "This method always return {@code true} when invoked on an unnamed module.", "Reference": "It always returns {@code true} when invoked on an unnamed module.", "NNUpdater": "This method always returns {@code true} when invoked on an unnamed module."}
{"Origin": "Stub of {@link Plugin#didDeclareSetter(TypeSpec.Builder, PropertyGenerator, MethodSpec)} for subclasses to override", "Reference": "Stub of {@link Plugin#afterDeclareSetter(TypeSpec.Builder, PropertyGenerator, MethodSpec)} for subclasses to override", "NNUpdater": "Operation fails."}
{"Origin": "The object must have at least all the fields as the object with the same name and type.", "Reference": "The object must have at least all the fields of the object with the same name and type.", "NNUpdater": "To be equal, the object must be a PeriodType with the same set of fields."}
{"Origin": "This method is intended to be called at most once for SoyDoc params and at most once for header params.", "Reference": "This method is intended to be called at most once for header params.", "NNUpdater": "Returns if the type may exactly once."}
{"Origin": "Record an {@link ExecutionEvent} for a container or test that completed with the provided {@link TestExecutionResult}.", "Reference": "Record an {@link Event} for a container or test that completed with the provided {@link TestExecutionResult}.", "NNUpdater": "Resolve the given {@link Parameter} for the supplied {@link TestExtensionContext}."}
{"Origin": "Retrieve the {@link MetadataEntry} corresponding to the specified key for the {@link NamespacedEntityId}.", "Reference": "Retrieve the {@link MetadataEntry} corresponding to the specified key for the {@link MetadataEntity}.", "NNUpdater": "Retrieve the {@link MetadataEntry} corresponding to the specified key for the {@link NamespacedEntityId}."}
{"Origin": "Saves the field value by invoking the setter function on the given bean, if the value passes all registered validators.", "Reference": "Write the field value by invoking the setter function on the given bean, if the value passes all registered validators.", "NNUpdater": "Returns the value of the property of the MBean"}
{"Origin": "Creates a new tracing {@link Service} decorator using the specified {@link Tracing} instance.", "Reference": "Creates a new tracing {@link HttpService} decorator using the specified {@link Tracing} instance.", "NNUpdater": "Creates a new tracing {@link Client} decorator using the specified {@link Tracing} instance and the remote service name."}
{"Origin": "Resets value of mJvmMonitorThread and mThreadStarted.", "Reference": "Resets value of mJvmMonitorThread.", "NNUpdater": "if {@link #CancellableThreads()} was used, the threads will be interrupted."}
{"Origin": "Determines if locale's dictionary is locally available or not.", "Reference": "Determines if locale's dictionary is locally available or a system.", "NNUpdater": "Use this to check if this file is downloading"}
{"Origin": "Creates a new block blob, or updates the content of an existing block blob.", "Reference": "Creates a new block blob.", "NNUpdater": "Creates a new block blob, or updates the content of an existing block blob."}
{"Origin": "This most commonly would occur when an encryption key is updated and old principals are retrieved that have been encrypted with the previous key.\\", "Reference": "This most commonly would be called when an encryption key is updated and old principals are retrieved that have been encrypted with the previous key.", "NNUpdater": "Invoke callback with the encryptedKey and encryptedBlobContent"}
{"Origin": "Returns an {@link Action} object that matches the parameters given.", "Reference": "Returns an {@link teammates.ui.controller.Action} object that matches the parameters given.", "NNUpdater": "Returns the {@link ComputeService} that matches the given providerOrApi."}
{"Origin": "The metamodel is populated in two phases, first to create a {@link DomainClass} for each ObjectSpecification, and then to populate the members of those domain class types.", "Reference": "The metamodel is populated in two phases, first to create a {@link DomainClassDto} for each ObjectSpecification, and then to populate the members of those domain class types.", "NNUpdater": "Get {@link EFeaturePackageInfo package information} mapped to {@link EFeaturePackageInfo#eNsURI() namespace URIs}"}
{"Origin": "The MediaTimestamp2 represents how the media time correlates to the system time in a linear fashion using an anchor and a clock rate.", "Reference": "The MediaTimestamp represents how the media time correlates to the system time in a linear fashion using an anchor and a clock rate.", "NNUpdater": "The MediaTimestamp2 represents how the media time correlates to the system time in a linear fashion using an anchor and a clock rate."}
{"Origin": "If you want to retrieve the latest inventory of the vault, use", "Reference": "If you want to retrieve the latest inventory of the vault, use InitiateJob.", "NNUpdater": "Get an analyzer suited to analyze a file."}
{"Origin": "{@codesnippet com.azure.security.keyvault.certificates.CertificateAsyncClient.createIssuer#String-String}", "Reference": "{@codesnippet com.azure.security.keyvault.certificates.CertificateAsyncClient.cancelCertificateOperation#string}", "NNUpdater": "{@codesnippet com.azure.security.keyvault.certificates.CertificateAsyncClient.createIssuer#String-String}"}
{"Origin": "Returns the builder for the settings used for calls to labelAudio.", "Reference": "Returns the builder for the settings used for calls to getEvaluation.", "NNUpdater": "Gets the labels used to filter settings based on their {@link ConfigurationSetting#label() label} in the service."}
{"Origin": "Returns the InetAddress associated with the current subject.", "Reference": "Returns the host name or IP associated with the current subject.", "NNUpdater": "Returns all local {@link InetAddress} except the loopback address."}
{"Origin": "Otherwise the patches for the module are scanned (to find any new concealed packages) and a new module reference is returned.", "Reference": "Otherwise the patches for the module are scanned (to find any new packages) and a new module reference is returned.", "NNUpdater": "Returns the set of concealed packages from ModuleDescriptor, if present or compute it if the module does not have ConcealedPackages attribute"}
{"Origin": "Then it helps to define image URI is loaded into", "Reference": "Then it helps to define image URI is loaded into View at exact moment.", "NNUpdater": "Get the define ID for a given material parameter."}
{"Origin": "This operation changes the position of the key in the map to the most recently used position (first).", "Reference": "This operation changes the position of the key in the map to the most recently used position (last).", "NNUpdater": "DFS."}
{"Origin": "Passes the specified event to all registered configuration listeners.", "Reference": "Passes the specified event to all registered configuration LISTENERS.", "NNUpdater": "Adds the specified object to the list of registered configuration listeners."}
{"Origin": "Group: consumer", "Reference": "Group: producer", "NNUpdater": "Guide."}
{"Origin": "when add/rm/mv element", "Reference": "when add/rm element", "NNUpdater": "Performs a touch command."}
{"Origin": "When this is set, in turn it sets the following:", "Reference": "When this property is set, in turn it sets the following:", "NNUpdater": "when the angle remaining in the robot's turn is 0."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Returns the partition storage level.", "Reference": "Returns the storage configuration.", "NNUpdater": "Resets the entry state."}
{"Origin": "Obtains an instance of {@code ZonedDateTime} from an {@code OffsetDateTime}.", "Reference": "Obtains an instance of {@code ZonedDateTime} from the instant formed by combining the local date-time and offset.", "NNUpdater": "Obtains an instance of {@code OffsetDateTime} from a local date and offset time."}
{"Origin": "Decodes a byte array where each byte represents an ascii '0' or '1'.", "Reference": "Decodes a byte array where each byte represents an ASCII '0' or '1'.", "NNUpdater": "Converts a byte array into a {@link ByteString}."}
{"Origin": "This is activated by setting an explicit value for {@link #INTERFACE} in the Titan configuration.", "Reference": "This is activated by setting an explicit value for {@link #INTERFACE} in the JanusGraph configuration.", "NNUpdater": "Deactivated by default."}
{"Origin": "Queries the coordination service to collect the multi-user case node data stored in the case directory lock ZooKeeper nodes.", "Reference": "Collects the multi-user case node data stored in the case directory coordination service nodes.", "NNUpdater": "Generate the final ZooKeeper coordination directory on HDFS"}
{"Origin": "Creates a new instance of {@link InconsistentProperty} from thrift representation.", "Reference": "Creates a new instance of {@link InconsistentProperty} from proto representation.", "NNUpdater": "Creates a new instance of from the given {@link BaseStream}."}
{"Origin": "removes null elements) the list and return it.", "Reference": "Removes all null elements from the list and returns it.", "NNUpdater": "The existing list must be sorted."}
{"Origin": "Runs the {@link Runnable task} in the request scope initialized from the {@link RequestScope.Instance scope instance}.", "Reference": "Runs the {@link Runnable task} in the request scope initialized from the {@link RequestContext scope context}.", "NNUpdater": "Maps a {@link Scope} instance to a given annotation."}
{"Origin": "Returns the feed with the primary key or throws a {@link com.liferay.twitter.NoSuchFeedException} if it could not be found.", "Reference": "Returns the feed with the primary key or throws a {@link NoSuchFeedException} if it could not be found.", "NNUpdater": "Removes the feed where companyId = ?"}
{"Origin": "It should be encoded in 7-bit ASCII, but UTF-8 is supported too.", "Reference": "It should be encoded in 7-bit ASCII, but UTF-8 and UTF-16 are supported too.", "NNUpdater": "Reads a potentially Huffman encoded string byte string."}
{"Origin": "Returns a progress notification for the given download states.", "Reference": "Returns a progress notification for the given downloads.", "NNUpdater": "Returns a progress notification for the given download states."}
{"Origin": "The code of this method is a copy of {@link #handleAttributes(Element,", "Reference": "The code of this method is a copy of {@link #outputAttributes(Element,", "NNUpdater": "Create an instance of {@link JAXBElement }{@code <}{@link CTStrokeChild }{@code >}}"}
{"Origin": "Returns all attributes of the specified session.", "Reference": "Returns all attributes of a session.", "NNUpdater": "Find {@code @ModelAttribute} arguments also listed as {@code @SessionAttributes}."}
{"Origin": "Returns the absolute uri of the Class-Path entry value as specified in JAR File Specification.", "Reference": "Returns the absolute uri of the Class-Path entry value as specified in JAR", "NNUpdater": "Returns the class path URIs specified by the {@code Class-Path} manifest attribute, according to"}
{"Origin": "Returns a stream of modules upon which the given module `requires public`", "Reference": "Returns a stream of modules upon which the given module `requires transitive`", "NNUpdater": "Returns the set of modules that this module reads."}
{"Origin": "Starts the ___protobuf_metadata cache when needed.", "Reference": "Adds a stop dependency on ___protobuf_metadata cache.", "NNUpdater": "Set the ``X-Protobuf-*`` HTTP headers when responding with a message of content type ``application/x-protobuf``"}
{"Origin": "Examines the given verb pair and returns true if it is a valid pairing of verb form and clitic pronoun(s).", "Reference": "Returns true if the given data is a valid pairing of verb form and clitic pronoun(s).", "NNUpdater": "Get method's http verbs."}
{"Origin": "Gets the maximum number of deferred processed application data messages.", "Reference": "Gets the maximum number of deferred processed outgoing application data messages.", "NNUpdater": "Returns an option to specify the maximum number of messages that can be queued in the message consumer at any time."}
{"Origin": "Set this matrix to be equivalent to the rotation specified by the given {@link Quaterniond}.", "Reference": "Set this matrix to be equivalent to the rotation specified by the given {@link Quaterniondc}.", "NNUpdater": "Set this matrix to be equivalent to the rotation specified by the given {@link Quaternionf}."}
{"Origin": "Create a {@link ServiceLocator}.", "Reference": "Create a {@link InstanceManager}.", "NNUpdater": "Return a default configuration StreamManager with a {@link LocatorFile}, {@link LocatorURL}, and {@link LocatorClassLoader}"}
{"Origin": "Encodes the document length in the same way as {@link TFIDFSimilarity}.", "Reference": "Encodes the document length in the same way as {@link BM25Similarity}.", "NNUpdater": "Encodes the {@link IRequestHandler} to {@link Url}."}
{"Origin": "Register {@link DubboLifecycleComponentApplicationListener} as a Spring Bean", "Reference": "Register {@link ApplicationListener ApplicationListeners} as a Spring Bean", "NNUpdater": "Creates an instance of {@link SpringBeanFinder}."}
{"Origin": "Apply the rotation transformation of the given {@link Quaterniond} to this matrix, which is assumed to only contain a translation, and store the result in .", "Reference": "Apply the rotation transformation of the given {@link Quaterniondc} to this matrix, which is assumed to only contain a translation, and store the result in .", "NNUpdater": "Apply the rotation transformation of the given {@link Quaternionfc} to this matrix, which is assumed to only contain a translation, and store the result in ."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Sets the {@link Service} and returns the {@link VirtualHostBuilder} that this {@link VirtualHostServiceBindingBuilder} was created from.", "Reference": "Sets the {@link HttpService} and returns the {@link VirtualHostBuilder} that this {@link VirtualHostServiceBindingBuilder} was created from.", "NNUpdater": "Adds the name-based virtual host."}
{"Origin": "Computes the minimum for each pixel across all bands in the {@link Planar} image.", "Reference": "Computes the minimum for each pixel across selected bands in the {@link Planar} image.", "NNUpdater": "Computes the average for each pixel across all bands in the {@link Planar} image."}
{"Origin": "Set this {@link AxisAngle4f} to be equivalent to the rotational component of the given {@link Matrix4d}.", "Reference": "Set this {@link AxisAngle4f} to be equivalent to the rotational component of the given {@link Matrix4dc}.", "NNUpdater": "Set this {@link AxisAngle4f} to be equivalent to the rotational component of the given {@link Matrix4dr}."}
{"Origin": "Adds the specified object to the list of registered configuration listeners.", "Reference": "Adds the specified object to the list of registered configuration LISTENERS.", "NNUpdater": "Adds the specified object to the list of registered configuration listeners."}
{"Origin": "Note: Not used for the {@code update} variant with generated key handling.", "Reference": "Note: Directly called from all {@code query} variants.", "NNUpdater": "For generated code only."}
{"Origin": "Adjust voice ID per staff, in line with their order.", "Reference": "Adjust voice ID per family, in line with their order.", "NNUpdater": "Create a staff info, using the staffCandidate that corresponds to the staff lines."}
{"Origin": "Geodetic Distance Queries on R-Trees for Indexing Geographic Data", "Reference": "Geodetic Distance Queries on R-Trees for Indexing Geographic Data 13th Int.", "NNUpdater": "Initializes all trees for adding new full-text data."}
{"Origin": "Test that {@link RawContactDelta#buildDiffWrapper(ArrayList)} is correctly built for insert, update, and delete cases.", "Reference": "Test that {@link RawContactDelta#buildDiff(ArrayList)} is correctly built for insert, update, and delete cases.", "NNUpdater": "Test that {@link EntityDelta#buildDiff(ArrayList)} is correctly built for insert, update, and delete cases."}
{"Origin": "Returns the sum of all operand stack sizes.", "Reference": "Computes the stack size of all supplied types.", "NNUpdater": "Returns the entry for the operand at the specified offset."}
{"Origin": "Sets the time.", "Reference": "Set the time.", "NNUpdater": "Sets the time Offset in seconds."}
{"Origin": "Sets the timeline on this fake player, which notifies listeners with the changed timeline.", "Reference": "Sets the timeline on this fake player, which notifies listeners with the changed timeline and the given timeline change reason.", "NNUpdater": "Add the songs from the given cursor to the song timeline."}
{"Origin": "Produces a Collapsed SemanticGraph with no extras.", "Reference": "Produces a Collapsed SemanticGraph.", "NNUpdater": "Set the semanticRoles."}
{"Origin": "Returns an immutable map containing six mappings.", "Reference": "Returns an unmodifiable map containing six mappings.", "NNUpdater": "Returns an immutable map of named bindings."}
{"Origin": "Places elements into order by increasing normalized {@link #getScore()}.", "Reference": "Places elements into order by decreasing {@link #getScore() normalized load}.", "NNUpdater": "The image is rendered with {@link ppppp * omr.score.ui.ScoreConstants#INTER_LINE} normalized size."}
{"Origin": "Runs the given {@code runnable} at most {@code retryCount} times until it passes, leaving {@code intervalMillis} milliseconds between the invocations.", "Reference": "Runs the given {@code runnable} at most {@code attemptsCount} times until it passes, leaving {@code intervalMillis} milliseconds between the invocations.", "NNUpdater": "The {@code intervalMillis} must be greater than or equal to {@link PeriodicWork#MIN_PERIODIC_INTERVAL_MILLIS}."}
{"Origin": "Exchange Adapter on the 2nd cycle.", "Reference": "Exception from Exchange Adapter on the 2nd cycle.", "NNUpdater": "Fetches other config for the exchange adapter."}
{"Origin": "Test of var method, of class WeibullDistribution.", "Reference": "Test of variance method, of class WeibullDistribution.", "NNUpdater": "This method returns the index of the maximum probability as provided by {@link #classDistribution(O) classDistribution(M)}."}
{"Origin": "Returns a map where keys are masked if they are considered a password.", "Reference": "Returns a map where values are masked if they are considered a password.", "NNUpdater": "Display info about stored secured attribute."}
{"Origin": "Get the {@link MongoDbFactory} that this instance manages transactions for.", "Reference": "Get the {@link MongoDatabaseFactory} that this instance manages transactions for.", "NNUpdater": "Will use the {@link MongoClient} instance configured in {@link #mongo()}."}
{"Origin": "Decodes a String where each char of the String represents an ascii '0' or '1'.", "Reference": "Decodes a String where each char of the String represents an ASCII '0' or '1'.", "NNUpdater": "Converts a byte array into a {@link ByteString}."}
{"Origin": "returns the ID of a given object from the pool", "Reference": "Returns the ID of a given object from the pool.", "NNUpdater": "Returns the sync d l object ID of this sync d l object."}
{"Origin": "After that, continues to wait for the interrupted threads to finish, so if job do not obey interruptions, they can continue indefinitely regardless of the timeout.", "Reference": "After that, {@code join} continues to wait for the interrupted threads to finish, so if job do not obey interruptions, they can continue indefinitely regardless of the timeout.", "NNUpdater": "Disconnect storage so cache can wait for all entry operations to finish."}
{"Origin": "Chosen bits are [10, 6, 5]", "Reference": "Chosen bits are [8, 7, 6]", "NNUpdater": "Chosen bits are [11, 6, 4]"}
{"Origin": "Resolve the {@link Repo} referenced by the given intent", "Reference": "Resolve the {@link Repository} referenced by the given intent", "NNUpdater": "Resolve the {@link Repo} referenced by the given intent"}
{"Origin": "The {@code onErrorResumeNext} method changes this behavior.", "Reference": "The {@code onErrorResumeWith} method changes this behavior.", "NNUpdater": "Must be the first call in {@link Activity#onResume()} method, even before super.onResume call."}
{"Origin": "Deletes all documents from the Solr server.", "Reference": "Deletes all documents from the Solr client.", "NNUpdater": "Create a new solr client."}
{"Origin": "Gets the {@link PatternListValue} of all patterns for the {@link Banner}.", "Reference": "Gets the {@link ListValue.Mutable} of all patterns for the {@link Banner}.", "NNUpdater": "Gets the {@link PatternListValue.Mutable} of all patterns for the {@link Banner}."}
{"Origin": "{@code requestType} and {@code options} defaults to {@code null}.", "Reference": "{@code options} defaults to {@code null}.", "NNUpdater": "A {@code null} CharSequence will return {@code -1}."}
{"Origin": "Undoes the previous command associated with the given object.", "Reference": "Undoes the previous command associated with the given display.", "NNUpdater": "Get an optional value associated with a key."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "This can be trained with {@link ClauseSplitter#train(Stream, Featurizer, TrainingOptions, Optional, Optional)}.", "Reference": "This can be trained with {@link ClauseSplitter#train(Stream, Optional, Optional, Featurizer)}.", "NNUpdater": "Required."}
{"Origin": "Get the {@link DiscordClient} that emitted this {@link Event}.", "Reference": "Get the {@link GatewayDiscordClient} that emitted this {@link Event}.", "NNUpdater": "Creates a new instance of {@link org.spongepowered.api.event.inventory.DropItemEvent.Toss}."}
{"Origin": "Default {@link ValidationStatusHandler} functional method implementation.", "Reference": "Default {@link BindingValidationStatusHandler} functional method implementation.", "NNUpdater": "Default {@link ValidationStatusHandler} functional method implementation."}
{"Origin": "Return the attributes map", "Reference": "Return the properties map", "NNUpdater": "Returns unmodifiable map of machine attributes."}
{"Origin": "Scenario successful connection to the back end service via basic auth.", "Reference": "Scenario successful connection to the back end API via basic auth.", "NNUpdater": "Sets the http auth."}
{"Origin": "LabelNode if necessary.", "Reference": "Creates a new LabelNode if necessary.", "NNUpdater": "label1 and label2 in X.Y.Z-label1-lable2."}
{"Origin": "Returns if the configuration need has specified an external network to use.", "Reference": "Returns if the configuration specifies an external network to use.", "NNUpdater": "Set External Line ID."}
{"Origin": "Returns the first asset entry set in the ordered set where createTime = ?", "Reference": "Returns the last asset entry set in the ordered set where createTime > ?", "NNUpdater": "Returns the create time of this asset entry set."}
{"Origin": "Stop the main thread of {@link AlluxioLogServerProcess}.", "Reference": "Stops the main thread of {@link AlluxioLogServerProcess}.", "NNUpdater": "Starts the Alluxio worker."}
{"Origin": "Assembles all the fragments into one buffer.", "Reference": "Assembles all the fragments into one payload.", "NNUpdater": "Map atoms to exclusive fragments."}
{"Origin": "Sets the focus of the screen.", "Reference": "Sets the focus on the screen.", "NNUpdater": "Sets the current page."}
{"Origin": "Returns whether PUT is supported for the given {@link ResourceMetadata}.", "Reference": "Returns whether PUT requests can be used to create new instances for the type backing the given {@link ResourceMetadata}.", "NNUpdater": "Checks whether fields indexing is enabled for objects of the given {@code cls}."}
{"Origin": "Set the number of digits in the fractional part of a price.", "Reference": "Set the default number of digits in the fractional part of a price.", "NNUpdater": "Set Preisliste."}
{"Origin": "Multi-AZ option expands an Amazon CloudSearch domain to an additional", "Reference": "Enabling the Multi-AZ option expands an Amazon CloudSearch domain to an additional Availability", "NNUpdater": "Start an Goodreads search"}
{"Origin": "By default, 10 seconds.", "Reference": "By default, both are set to 10 seconds.", "NNUpdater": "The default is 1 minute."}
{"Origin": "Wait for this task to meet the expected number of records as defined by {@code expectedRecords}.", "Reference": "Wait up to the specified timeout for this task to meet the expected number of records as defined by {@code expectedRecords}.", "NNUpdater": "Records a failed call."}
{"Origin": "Getter for beta", "Reference": "Getter for betaMarker", "NNUpdater": "1 VERSION VERSION 1-beta-1 VERSION-beta-1 VERSION-beta-1 VERSION VERSION-beta-1"}
{"Origin": "Provided key is a single private key needed to spend such inputs and provided program should be a proper CHECKSIG program.", "Reference": "Provided key is a single private key needed to spend such inputs.", "NNUpdater": "Initialize the upgrade framework, if necessary."}
{"Origin": "Returns the last saved gallery for the given gallery type id.", "Reference": "Returns the last saved gallery for the given gallery key.", "NNUpdater": "Returns a list of gallery items (resources) for the currently selected gallery and resource type id."}
{"Origin": "Returns an immutable set containing five elements.", "Reference": "Returns an unmodifiable set containing five elements.", "NNUpdater": "Defaults to one second."}
{"Origin": "If possible the supplier should be cached in the AST in order to avoid the repeated lookup of the parent executable or root node.", "Reference": "If possible the reference should be cached in the AST in order to avoid the repeated lookup of the parent executable or root node.", "NNUpdater": "The location is specified as an instance of a {@link Node} in the AST."}
{"Origin": "Both filenames are first passed to {@link #normalize(String)}.", "Reference": "Both fileNames are first passed to {@link #normalize(String)}.", "NNUpdater": "Default implementation use {@code normalizeName()}, or {@code normalizeName( lowercase())} if operation id is not set."}
{"Origin": "Has the replay merge failed and entered into an errored state?", "Reference": "Has the replay merge failed and entered into an error state?", "NNUpdater": "Verifies whether the call peer has entered a state."}
{"Origin": "Otherwise if the object is from a {@code java} package, returns the result of {@code toString}.", "Reference": "If the object is from a {@code java} package, returns the result of {@code toString}.", "NNUpdater": "5) Otherwise, the result is {@code null}."}
{"Origin": "Setter for leaf.", "Reference": "Setter for leaf flag.", "NNUpdater": "This will not be applicable on leaf and leaf-list node."}
{"Origin": "Return a SimScorer for this context", "Reference": "Return a LeafSimScorer for this context", "NNUpdater": "starts the scorer"}
{"Origin": "Register a record reader.", "Reference": "Register a batch listener.", "NNUpdater": "Register a record reader listener."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Retrieves a basic template given the template name.", "Reference": "Retrieves a template or element given the template name.", "NNUpdater": "Return the processing context corresponding to the template execution for which the template handler instance has been created."}
{"Origin": "checks that no scores or freqs are infinite", "Reference": "checks that no scores are infinite", "NNUpdater": "Return the intersection point between provided infinite line and the infinite vertical line at provided abscissa."}
{"Origin": "get the preference key which stores the number of times the toast associated with the smart toast type has been shown", "Reference": "returns the preference key which stores the number of times the toast associated with the smart toast type has been shown", "NNUpdater": "Cancel the sToast."}
{"Origin": "Does a few instances of short work with {@code policy = ALWAYS} and expects that they will be executed on a remote node.", "Reference": "Schedules a single instance of short work with {@code policy = ALWAYS} and expects that it will be executed on a remote node.", "NNUpdater": "Expects a short that is equal to the given value."}
{"Origin": "Submit a task for execution.", "Reference": "Submit a set of works for execution.", "NNUpdater": "Submit a operations."}
{"Origin": "System will constantly measure actual average latency and compare it with ``desirableOperationLatency``.", "Reference": "System will constantly measure actual average latency and compare it with ``slowCallDurationThreshold``.", "NNUpdater": "Desirable operation latency in millis/operation."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Sets the ratings stats total score of this asset entry set.", "Reference": "Sets the asset entry set likes count of this asset entry set.", "NNUpdater": "Sets the ratings stats total score of this asset entry set."}
{"Origin": "This date-time will be passed to the formatter {@link DateTimeFormatter#print(TemporalAccessor) print method}.", "Reference": "This date-time will be passed to the formatter {@link DateTimeFormatter#format(TemporalAccessor) print method}.", "NNUpdater": "This time will be passed to the formatter {@link DateTimeFormatter#format(TemporalAccessor) format method}."}
{"Origin": "Currently, SONA supports Flat, VXLAN, GRE and VLAN modes.", "Reference": "Currently, SONA supports Flat, VXLAN, GRE, GENEVE and VLAN modes.", "NNUpdater": "Currently, SONA supports Flat, VXLAN and VLAN modes."}
{"Origin": "Specifies the path of the button's image.", "Reference": "Specifies the path of the background image of the %type%.", "NNUpdater": "Specifies single search path."}
{"Origin": "Appends a declaration of the given label to {@link #buf buf}.", "Reference": "Appends a declaration of the given label to {@link #stringBuilder}.", "NNUpdater": "Writes rec file position to given {@code buf}."}
{"Origin": "Is has sharding query assisted encryptor or not.", "Reference": "Is has query assisted column or not.", "NNUpdater": "Is has sharding query assisted encryptor or not."}
{"Origin": "Converts the Swagger paths into a list PathOperations.", "Reference": "Converts the Swagger paths into a list of PathOperations.", "NNUpdater": "Builds all paths of the Swagger model"}
{"Origin": "Runs the command with the given args.", "Reference": "Runs a command with the given args.", "NNUpdater": "Runs commands and return output"}
{"Origin": "Default implementation returns {@link ControllerResult#RESULT_CODE_NOT_SUPPORTED}.", "Reference": "Default implementation returns {@link SessionResult#RESULT_CODE_NOT_SUPPORTED}.", "NNUpdater": "The default is {@link XPathEvaluationType#STRING_RESULT}."}
{"Origin": "Returns true if there is a joined instructor (other than the instructor to delete) with the privilege of modifying instructors.", "Reference": "Returns true if there is at least one joined instructor (other than the instructor to delete) with the privilege of modifying instructors and at least one instructor visible to the students.", "NNUpdater": "Checks if there exists a INSTRUCTOR with this googleId"}
{"Origin": "Executes tol-level statement of this build file in a given Environment.", "Reference": "Executes top-level statement of this build file in a given Environment.", "NNUpdater": "Executes this sql statement using an ordinary Statement."}
{"Origin": "Checks if the path can be rewritten for iterative evaluation.", "Reference": "Checks if the specified axis steps can be evaluated iteratively.", "NNUpdater": "Checks if the specified filter input can be rewritten to an axis path."}
{"Origin": "Create a GeoCircle of the right kind given the specified bounds.", "Reference": "Create a GeoCircle from a center and a cutoff angle.", "NNUpdater": "Create a context with the given configuration."}
{"Origin": "Returns an {@link Operator} to allow the query to be pushed parameters via the {@link Observable#lift(Operator)} method.", "Reference": "Returns an {@link Transformer} to allow the query to be pushed parameters via the {@link Observable#compose(Transformer)} method.", "NNUpdater": "Automaps the first column of the ResultSet into the target class as an operator to use with ."}
{"Origin": "Set a limit of the number of outstanding or to-be acknowledged messages.", "Reference": "Set a limit on the rate of messages per second received.", "NNUpdater": "Called when a message reply is received."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Returns the fully qualified domain name (FQDN) of this Event Hub.", "Reference": "Gets the fully qualified namespace of this Event Hub.", "NNUpdater": "Creates a new FullyQualifiedName with sorted qualifiers."}
{"Origin": "Tests for the {@link BaseFileSystem#listStatus(AlluxioURI, ListStatusOptions)} method.", "Reference": "Tests for the {@link BaseFileSystem#listStatus(AlluxioURI, ListStatusPOptions)} method.", "NNUpdater": "Tests for the {@link BaseFileSystem#listStatus(AlluxioURI, ListStatusOptions)} method."}
{"Origin": "timedSleep throws InterruptedException when interrupted", "Reference": "timeUnit.sleep throws InterruptedException when interrupted", "NNUpdater": "Interrupted timed poll throws Exception instead of returning timeout status"}
{"Origin": "The {@link Secret} is required.", "Reference": "The {@link KeyVaultSecret} is required.", "NNUpdater": "The {@code secret} is required and its fields secret.name and secret.value cannot be null."}
{"Origin": "Make a new label with this as the value (word).", "Reference": "Make a new label with this {@code String} as the value (word).", "NNUpdater": "label1 and label2 in X.Y.Z-label1-lable2."}
{"Origin": "Get the content of this element.", "Reference": "Gets the value of the content property.", "NNUpdater": "Removes all child content from this parent."}
{"Origin": "Sets the max age of the cookie in seconds.", "Reference": "Sets the max age of the cookie.", "NNUpdater": "Set max age to 1800 seconds (30 minutes)."}
{"Origin": "Returns the s v n revision with the primary key or throws a {@link com.liferay.socialcoding.NoSuchSVNRevisionException} if it could not be found.", "Reference": "Returns the s v n revision with the primary key or throws a {@link NoSuchSVNRevisionException} if it could not be found.", "NNUpdater": "Set the value of update."}
{"Origin": "Intervals are inclusive of the start instant and exclusive of the end.", "Reference": "Non-zero duration intervals are inclusive of the start instant and exclusive of the end.", "NNUpdater": "Gets the start of this time interval, which is inclusive, as a DateTime."}
{"Origin": "Makes sure, that for each language a ``rulesets.properties`` file exists.", "Reference": "Makes sure, that for each language a ``categories.properties`` file exists.", "NNUpdater": "Returns an Iterator of RuleSet objects loaded from descriptions from the ``categories.properties`` resource for each Language with Rule support."}
{"Origin": "Get the names of any classes referenced in the methods in this list.", "Reference": "Find the names of any classes referenced in the methods in this list.", "NNUpdater": "Render a list of names of the contained in this list."}
{"Origin": "Sets the recreateMountedPagesAfterExpiry setting", "Reference": "Sets the recreateBookmarkablePagesAfterExpiry setting", "NNUpdater": "Gets the factory configuration for the {@link javax.cache.expiry.ExpiryPolicy}."}
{"Origin": "Returns a {@link ChannelOption} for the given {@link SocketOption}.", "Reference": "Returns a {@link ChannelOption} for the given {@link java.net.SocketOption}.", "NNUpdater": "Returns the {@link OptionsBase} class the defines the given option, null if the option isn't recognized."}
{"Origin": "Sets the habitat for use in creating DeployCommand and UndeployCommand instances.", "Reference": "Sets the serviceLocator for use in creating DeployCommand and UndeployCommand instances.", "NNUpdater": "Sets the tags allocated to this command."}
{"Origin": "This could be used for load balancing of plugins across multiple machines, CPU usage monitoring and other nice stuff.", "Reference": "This could be used for load balancing of plugins across multiple machines, CPU usage monitoring, sandboxing and other nice stuff.", "NNUpdater": "Balancing."}
{"Origin": "Generates an object representing the Schema.org BreadcrumbList TODO: implement", "Reference": "Generates an object representing the Schema.org BreadcrumbList", "NNUpdater": "Bugsnag.beforeRecordBreadcrumb(new BeforeRecordBreadcrumb() { public boolean send(Breadcrumb breadcrumb) { return false; ignore the breadcrumb } })"}
{"Origin": "Return a new {@code DataBuffer} composed of the {@code dataBuffers} elements joined together.", "Reference": "Return a new {@code DataBuffer} composed from joining together the given {@code dataBuffers} elements.", "NNUpdater": "DSA version of {@link GL15C#glBufferData BufferData}."}
{"Origin": "The migration can be finalized and the new features enabled only after all administrators approve the switch by accepting the handshake.", "Reference": "The feature set change can be finalized and the additional features enabled only after all administrators in the invited accounts approve the change by accepting the handshake.", "NNUpdater": "Invokes the {@link MigrationOperation} on the migration destination."}
{"Origin": "Deletes the specified variable from the configuration.", "Reference": "Deletes the specified variable from the CONFIGURATION.", "NNUpdater": "Returns the value of the specified variable."}
{"Origin": "Obtain the default {@link MongoDatabase database} form the given {@link MongoDbFactory factory}.", "Reference": "Obtain the default {@link MongoDatabase database} form the given {@link MongoDatabaseFactory factory}.", "NNUpdater": "Will use the {@link MongoClient} instance configured in {@link #mongo()}."}
{"Origin": "Runs the logic to read from the socket until {@link #_isRunning} is false.", "Reference": "Runs the logic to read from the socket until {@link #isRunning} is false.", "NNUpdater": "Wait until the count of running threads becomes 0."}
{"Origin": "Transitive reduction of requires public edge and requires edge have to be applied separately to prevent the requires public edges (e.g.", "Reference": "Transitive reduction of requires transitive edge and requires edge have to be applied separately to prevent the requires transitive edges (e.g.", "NNUpdater": "Transitive reduction of requires transitive edge and requires edge have to be applied separately to prevent the requires transitive edges (e.g."}
{"Origin": "Change the status of the pageCommentCheckbox.", "Reference": "Set the state of the given application for the given format.", "NNUpdater": "Create the checkbox button"}
{"Origin": "Creates a {@link Behavior} that uses the given {@link WicketConsumer consumer} to do something with the component's tag.", "Reference": "Creates a {@link Behavior} that uses the given {@code SerializableConsumer consumer} to do something with the component's tag.", "NNUpdater": "wicket:id=``componentId``."}
{"Origin": "The shortfall level is in decimal, i.e.", "Reference": "The quantile level is in decimal, i.e.", "NNUpdater": "JsonNode)} or {@link #validateDecimal(ValidationReport, JsonNode)}"}
{"Origin": "Gets the servers resolved by name resolution.", "Reference": "Gets the addresses resolved by name resolution.", "NNUpdater": "Set the dnsType value."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "See {@link MethodVisitor#visitTryCatchAnnotation}.", "Reference": "MethodVisitor#visitTryCatchAnnotation}.", "NNUpdater": "Equivalent to {@code transform(``transform``, func)}."}
{"Origin": "Test of var method, of class LogNormalDistribution.", "Reference": "Test of variance method, of class LogNormalDistribution.", "NNUpdater": "This method returns the index of the maximum probability as provided by {@link #classDistribution(O) classDistribution(M)}."}
{"Origin": "Generates a code sample for using {@link FileClient#setPropertiesWithResponse(long, FileHTTPHeaders,", "Reference": "Generates a code sample for using {@link FileClient#setPropertiesWithResponse(long, FileHttpHeaders,", "NNUpdater": "Generates a code sample for using {@link FileClient#setProperties(long, FileHTTPHeaders, FileSmbProperties,"}
{"Origin": "Checks if either one of the main or temporary files currently exists.", "Reference": "Checks if the properties file exists.", "NNUpdater": "Checks if the index for Graylog2 exists"}
{"Origin": "This new transition is created using {@link TransitionBuilder#createMerged(TransitionBuilder, MatcherBuilder)}.", "Reference": "This new transition is created using {@link TransitionBuilder#createMerged(TransitionBuilder, CharSet)}.", "NNUpdater": "Creates a set of {@link Transition}s that will run in parallel."}
{"Origin": "Structural Specification for more details.", "Reference": "The OWL 2 Structural Specification for more details.", "NNUpdater": "Returns the equivalent structural type."}
{"Origin": "Whether or not {@code lhs} is mutated depends on its type.", "Reference": "Whether or not {@code x} is mutated depends on its type.", "NNUpdater": "lhsExpression := lhsOr*"}
{"Origin": "Scan a term buffer for a block of message fragments from an offset up to a limit.", "Reference": "Scan a term buffer for a block of message fragments from an offset up to a limitOffset.", "NNUpdater": "Scan for gaps from the scanOffset up to a limit offset."}
{"Origin": "Generates a code sample for using {@link FileClient#startCopyWithResponse(String, Map, Duration, Context)}", "Reference": "Generates a code sample for using {@link FileClient#beginCopy(String, Map, Duration)}", "NNUpdater": "Generates a code sample for using {@link FileClient#startCopyWithResponse(String, Map, Duration, Context)}"}
{"Origin": "If this happens, a configuration {@link ConfigurationEvent event} will be sent to all registered listeners.", "Reference": "If this happens, a CONFIGURATION {@link ConfigurationEvent event} will be sent to all registered listeners.", "NNUpdater": "Returns Event Processing Configuration defined in this Configuration."}
{"Origin": "| Update previous height to current height.", "Reference": "| Add the height to heap.", "NNUpdater": "This height is the sum of mCameraPreviewLayoutHeight + gallery height."}
{"Origin": "Use system emergency password for files in this room", "Reference": "Use system emergency password (rescue key) for files in this room", "NNUpdater": "Returns the room's configuration form that the room's owner can use or null if no configuration is possible."}
{"Origin": "Instructor View pages, so put here in super class.", "Reference": "Used by both Assignmenet Details and Instructor View pages, so put here in super class.", "NNUpdater": "calls `outputConsumer.accept(superClass)` for all super classes of superType."}
{"Origin": "Returns the last sync d l object in the ordered set where companyId = ?", "Reference": "Returns the last sync d l object in the ordered set where repositoryId = ?", "NNUpdater": "Finds the gadget where companyId = ?"}
{"Origin": "Given that the caption column value is a number.", "Reference": "Given rolap member with caption value specified.", "NNUpdater": "Sets a header text for this column."}
{"Origin": "Scheduler: {@code combineLatest} does not operate by default on a particular {@link Scheduler}.", "Reference": "Scheduler: {@code combineLatestArray} does not operate by default on a particular {@link Scheduler}.", "NNUpdater": "Scheduler: {@code combineLatestDelayError} does not operate by default on a particular {@link Scheduler}."}
{"Origin": "or throws a {@link com.liferay.samplelar.NoSuchBookingException} if it could not be found.", "Reference": "or throws a {@link NoSuchBookingException} if it could not be found.", "NNUpdater": "Operation fails."}
{"Origin": "Removes all the sync d l objects where parentFolderId = ?", "Reference": "Removes all the sync d l objects where modifiedTime > ?", "NNUpdater": "Removes the sync d l object where type = ?"}
{"Origin": "The current thread might be already in any request scope and in that case the scope will be changed to the scope defined by the {@link RequestScope.Instance scope instance}.", "Reference": "The current thread might be already in any request scope and in that case the scope will be changed to the scope defined by the {@link RequestContext scope instance}.", "NNUpdater": "Maps a {@link Scope} instance to a given annotation."}
{"Origin": "Replace actual names found in a string with meaningless randomized names.", "Reference": "Replace actual names found in a string with redacted names.", "NNUpdater": "Sets the type names."}
{"Origin": "Returns a configuration object containing the names of all the modules.", "Reference": "Returns a configuration object containing the names of all the modules and warnings to display to the user.", "NNUpdater": "Names of the classes to use as modules, plus optional parameter info."}
{"Origin": "Sets the request query.", "Reference": "Sets the query consistency level.", "NNUpdater": "Sets the request address."}
{"Origin": "Returns the partition ID.", "Reference": "Returns the partition.", "NNUpdater": "Returns the partition service."}
{"Origin": "If the Multi-AZ option is enabled, these values control the resources used per Availability", "Reference": "If the Multi-AZ option is enabled, these values control the resources used per Availability Zone.", "NNUpdater": "Sets the HTTP/2 flow control window."}
{"Origin": "Get a {@link Vector} form of this location's position.", "Reference": "Get a {@link Vector3} form of this location's position.", "NNUpdater": "If the vector is the 0-Vector (ignoring y), this method returns {@link #NONE}."}
{"Origin": "Returns The The subscriber_sid.", "Reference": "Returns The The absolute URL for this resource..", "NNUpdater": "Sets the node IPv4 node SID of the router."}
{"Origin": "Item level validators are ignored if there is no bound item or if any field level validator fails.", "Reference": "Bean level validators are ignored if there is no bound bean or if any field level validator fails.", "NNUpdater": "Validates the {@code item} using item validators added using {@link #withValidator(Validator)} and returns the result of the validation as a list of validation results."}
{"Origin": "Core mcMMO skills will pull the name from Locale with this method", "Reference": "Core mcMMO skills will pull the name from LocaleManager with this method", "NNUpdater": "Get the McMMOPlayer of a player by a partial name."}
{"Origin": "or throws a {@link com.liferay.twitter.NoSuchFeedException} if it could not be found.", "Reference": "or throws a {@link NoSuchFeedException} if it could not be found.", "NNUpdater": "Operation fails."}
{"Origin": "Returns the string up to but not including any delimiter characters.", "Reference": "Reads the value up to but not including any delimiter characters.", "NNUpdater": "Get start delimiter."}
{"Origin": "Sets the response session ID.", "Reference": "Sets the response client ID.", "NNUpdater": "Sets the request version."}
{"Origin": "Log rule execution statistics.", "Reference": "Log rule execution statistics @ INFO.", "NNUpdater": "Returns the execution log of the given the node."}
{"Origin": "Computes the minimum for each pixel across all bands in the {@link Planar} image.", "Reference": "Computes the minimum for each pixel across selected bands in the {@link Planar} image.", "NNUpdater": "Computes the average for each pixel across all bands in the {@link Planar} image."}
{"Origin": "Get the SQL snippet for this index column.", "Reference": "Appends the SQL snippet for this index column to the specified string builder.", "NNUpdater": "Get Spalte."}
{"Origin": "Amazon Glacier Data Retrieval Policies.", "Reference": "Amazon Glacier sends both notifications.", "NNUpdater": "Working with Archives in Amazon Glacier in the Amazon Glacier Developer Guide ."}
{"Origin": "Uses the {@link HandlerMapping#BEST_MATCHING_PATTERN_ATTRIBUTE} best matching pattern.", "Reference": "Uses the {@link HandlerMapping#BEST_MATCHING_PATTERN_ATTRIBUTE} best matching pattern from", "NNUpdater": "2014-09-09-Holiday"}
{"Origin": "Waits until the System.currentTimeMillis() results has changed.", "Reference": "Waits until System.currentTimeMillis() has flipped to the next second.", "NNUpdater": "Time in time until no new instruction"}
{"Origin": "Return a read-only {@link DatasetGraphFilteredView} that fulfils the {@link SecurityPolicy}.", "Reference": "Return a read-only {@link DatasetGraphFilteredView} that fulfils the {@link SecurityContext}.", "NNUpdater": "Operation fails."}
{"Origin": "Returns The The Type of this Challenge.", "Reference": "Returns The The Factor Type of this Challenge.", "NNUpdater": "Get the encoded challenge in the last challenge."}
{"Origin": "Returns true if the pressed key is a modifier key (including 'escape' and 'alt'-'tab').", "Reference": "Returns true if the pressed key is a modifier key (including 'escape' and 'tab' + control key).", "NNUpdater": "Returns the default {@code KeyTab} instance that is bound to an unknown service principal."}
{"Origin": "Waits during {@code timeout} until specified {@code element} contains the defined {@code expectedText}.", "Reference": "Waits during {@code timeout} until specified {@code element} contains the defined {@code expected} value.", "NNUpdater": "WebElement#getText()} equals to provided {@code expectedText}."}
{"Origin": "Test of npara method, of class Poisson.", "Reference": "Test of length method, of class Poisson.", "NNUpdater": "Test of poisson method, of class DiscreteDistributions."}
{"Origin": "Gets the next available port starting at the lowest port number.", "Reference": "Gets an available port, selected by the system.", "NNUpdater": "Gets the next available port starting at a given from port."}
{"Origin": "Makes the format for the level-1 data.", "Reference": "Determines the format of the level-1 data.", "NNUpdater": "Data.maxPokeLevelToIndex."}
{"Origin": "Public static faciliatates the test cases.", "Reference": "Public static facilitates the test cases.", "NNUpdater": "Test get static property1."}
{"Origin": "Invalidate authentication token ### Functional Description: Logout a user.", "Reference": "Invalidate authentication token ### Functional Description: Log out a user.", "NNUpdater": "enabled and logout type must not be {@link RegisteredService.LogoutType#NONE}."}
{"Origin": "Create a custom Layer by resolving the given module names.", "Reference": "Create a custom layer by resolving the given module names.", "NNUpdater": "Returns the module layer (of JPMS type ModuleLayer)."}
{"Origin": "Return if the servlet class represented by this component implements the interface.", "Reference": "Does the servlet class represented by this component implement the interface?", "NNUpdater": "Returns if this type is part of the standard java packages."}
{"Origin": "Returns null.", "Reference": "Returns empty string.", "NNUpdater": "IsNullOrEmpty {is null or empty}."}
{"Origin": "Returns an immutable set containing eight elements.", "Reference": "Returns an unmodifiable set containing eight elements.", "NNUpdater": "Gets an {@link ImmutableSet} of {@link Value.Immutable}s for the block at the given location."}
{"Origin": "used by TestJob and directly above and for encrypting DatabaseLookupMessages", "Reference": "Used by TestJob, and directly above, and by MessageWrapper for encrypting DatabaseLookupMessages", "NNUpdater": "Returns a {@link Coder} instance for decrypting contents."}
{"Origin": "Is grand type supported.", "Reference": "Is grant type supported.", "NNUpdater": "Checks if the element has a grand parent."}
{"Origin": "Tests the {@link BlockWorker#createBlockRemote(long, long, String, long)} method.", "Reference": "Tests the {@link BlockWorker#createBlockRemote(long, long, String, String, long)} method.", "NNUpdater": "Tests the {@link TieredBlockStore#createBlock(long, long, BlockStoreLocation, long)} method to work with eviction."}
{"Origin": "Modified enum is hiding in the 2 and 3 bits of the flags.", "Reference": "Modified enum is hiding in the 3 and 4 bits of the flags.", "NNUpdater": "Deprecated, use getModifierStr() instead."}
{"Origin": "Returns the (unbiased) kurtosis excess of all the values within a {@link PointSet} region of a {@link Dataset}", "Reference": "Returns the (biased) kurtosis of all the values within a {@link PointSet} region of a {@link Dataset}", "NNUpdater": "The class of the {@link DatasetsFinder} is read from property {@link #DATASET_PROFILE_CLASS_KEY}."}
{"Origin": "Returns the Java type corresponding to the return type of the given method descriptor.", "Reference": "Returns the {@link Type} corresponding to the return type of the given method descriptor.", "NNUpdater": "Returns the {@link Type} corresponding to the return type of the given method descriptor."}
{"Origin": "qualifier from the passed attribute, if any.", "Reference": "qualifier from the passed attribute.", "NNUpdater": "This method will return if the given schema, element, qualifier and language match the schema, element, qualifier and language of the object passed in."}
{"Origin": "Created by user info", "Reference": "Created by user", "NNUpdater": "Sets URI user-info."}
{"Origin": "Test that {@link AMQPMessageIdHelper#toBaseMessageIdString(Object)} returns null if given null", "Reference": "Test that {@link AMQPMessageIdHelper#hasMessageIdPrefix(String)} returns false for null", "NNUpdater": "The string representation of the path: /{Object ID}/{ObjectInstance ID}/{Resource ID}/{ResourceInstance ID}"}
{"Origin": "Ensures that the service referenced by the Contract at the head of the iterator actually exists (is published).", "Reference": "Ensures that the api referenced by the Contract at the head of the iterator actually exists (is published).", "NNUpdater": "Store the subItem."}
{"Origin": "Exits the current lazy scope.", "Reference": "Exits the current scope.", "NNUpdater": "Exit the application."}
{"Origin": "Generic getter for the virtualMetadataPopularConfiguration property of this class", "Reference": "Generic getter for the virtualMetadataConfiguration property of this class", "NNUpdater": "Getter for property type."}
{"Origin": "Returns cached transparent {@link Color}.", "Reference": "Returns fully transparent white {@link Color}.", "NNUpdater": "Returns cached transparent {@link Color}."}
{"Origin": "This method is a no-op when invoked on an unnamed module.", "Reference": "This method is a no-op when invoked on an unnamed module or an automatic module.", "NNUpdater": "This method is a no-op when invoked on an unnamed module or an automatic module."}
{"Origin": "Parse service endpoint properties to retrieve enum value (if any)", "Reference": "Parse API endpoint properties to retrieve enum value (if any)", "NNUpdater": "Sets generated file files."}
{"Origin": "Loads a new module from the class path and may or may not immediately scan associated directories for resources, depending on parameters.", "Reference": "Loads a new module from the class path and may or may not immediately scan associated directories for resources or consider it monolithic, depending on parameters.", "NNUpdater": "Either node may or may not already exist in the graph."}
{"Origin": "AssertionResult will reflect the success of the Sample.", "Reference": "Otherwise the returned AssertionResult will reflect the success of the Sample.", "NNUpdater": "Method isAssertion returns true if this Operation represents an {@link Assertion} operation."}
{"Origin": "Backs up all buckets for the device to the given node.", "Reference": "Backs up the given flow bucket.", "NNUpdater": "Backs up database files."}
{"Origin": "Group: common", "Reference": "Group: security", "NNUpdater": "Returns the default number of {@linkplain CommonPools#blockingTaskExecutor() blocking task executor} threads."}
{"Origin": "Configure a SpEL expression to evaluate a {@link RSocketOutboundGateway.Command} for RSocket request type at runtime against a request message.", "Reference": "Configure a SpEL expression to evaluate an {@link RSocketOutboundGateway.Command} for the RSocket request type at runtime against a request message.", "NNUpdater": "Specify an {@link Expression} to evaluate a value for the uri template variable."}
{"Origin": "Obtains an instance from the specified unique name.", "Reference": "Obtains an instance from the specified name.", "NNUpdater": "Obtains the type from a unique name."}
{"Origin": "Removes pending delete object.", "Reference": "Removes local continuous task object.", "NNUpdater": "Adds a pending delete for the given index."}
{"Origin": "If you want to add or replace functionality, please use the {@link KarafDistributionConfigurationFilePutOption} option.", "Reference": "If you would like to have add or replace functionality please use the {@link KarafDistributionConfigurationFilePutOption} instead.", "NNUpdater": "Adds the specified {@link ClientOption} and its {@code value}."}
{"Origin": "Replace the placeholder mapreduce tags with our MR jobid so that all child jobs get tagged with it.", "Reference": "Replace the placeholder tags with our MR jobid so that all child jobs or hive queries are get tagged with it.", "NNUpdater": "Create FROM file with specified content."}
{"Origin": "Registers an event handler towards the {@link EventBus} and registers it to be only active when the presenter is visible is called.", "Reference": "Registers an event handler towards the {@link EventBus} and registers it to be only active when the presenter is visible.", "NNUpdater": "Registers on a event topic."}
{"Origin": "If the object is null or , returns {@link #NULL}.", "Reference": "If the object is null, return the NULL object.", "NNUpdater": "IsNullOrEmpty {is null or empty}."}
{"Origin": "More stable than {@code Math.log(1 - Math.exp(x))}", "Reference": "More stable than {@code FastMath.log(1 - FastMath.exp(x))}", "NNUpdater": "Math."}
{"Origin": "Get the {@link Set} of {@link EventCode}s that are enabled for the logger.", "Reference": "Get the {@link Set} of {@link DriverEventCode}s that are enabled for the logger.", "NNUpdater": "Create an instance of {@link JAXBElement }{@code <}{@link ResultType }{@code >}}"}
{"Origin": "Indicate to all associated {@link ExportDataSource} to assume mastership role for the given partition id", "Reference": "Indicate to all associated {@link ExportDataSource} to assume leadership role for the given partition id", "NNUpdater": "Finds the role associated to the given name."}
{"Origin": "Returns the last sync d l object in the ordered set where parentFolderId = ?.", "Reference": "Returns the last sync d l object in the ordered set where modifiedTime > ?", "NNUpdater": "Returns the last b b b server in the ordered set where active = ?."}
{"Origin": "Sets the quorum name for operations.", "Reference": "Sets the split brain protection name for operations.", "NNUpdater": "Sets the cluster read quorum strategy."}
{"Origin": "Setter for {@link #allowCredentials}", "Reference": "Setter for {@link #allowedCredentials}", "NNUpdater": "Return the value of the {@code Access-Control-Allow-Credentials} response header."}
{"Origin": "Uninstalls this {@link ExTreeModel} from the specified {@link WebExTree}.", "Reference": "Uninstalls this {@link ExTreeModel} from the specified {@link WebTree}.", "NNUpdater": "Given indexField = a, tag = tag, would produce the following String: {!tag=a}."}
{"Origin": "Getter for {@link #allowCredentials}", "Reference": "Getter for {@link #allowedCredentials}", "NNUpdater": "Getter Parameter Value for D-U-N-S"}
{"Origin": "Obtains an instance from the specified unique name.", "Reference": "Obtains an instance from the specified name.", "NNUpdater": "Obtains the type from a unique name."}
{"Origin": "However, the problem with exposing the information is that people running from an IDE can observe stale data from old class files left from a previous build of a JAR.", "Reference": "However, people running from an IDE will observe stale data from old class files left from a previous build of a JAR.", "NNUpdater": "Delete the all dependency files from a given application."}
{"Origin": "If original value is a ValueTimestampTimeZone, returned value will have the same time zone offset as original value.", "Reference": "If original value is a ValueTimestampTimeZone or ValueTimeTimeZone, returned value will have the same time zone offset as original value.", "NNUpdater": "Checks if this time-zone ID is equal to another time-zone ID."}
{"Origin": "Returns minimal version of available {@link UpgradeCatalog}", "Reference": "Returns minimal source version of available {@link UpgradeCatalog}", "NNUpdater": "Sets minimal value of the Column."}
{"Origin": "Configuring Access for a Search Domain in the Amazon CloudSearch Developer Guide .", "Reference": "Amazon CloudSearch Developer Guide.", "NNUpdater": "For more information, see Sorting Results in the Amazon CloudSearch Developer Guide."}
{"Origin": "Testing the clear(vector), clear(vector) methods of VMath class.", "Reference": "Testing the clear(vector), clear(matrix) methods of VMath class.", "NNUpdater": "If the vector is the 0-Vector (ignoring y), this method returns {@link #NONE}."}
{"Origin": "Context menu of a row: this was dispatched by LibraryPAgerAdapter", "Reference": "Context menu of a row: this was dispatched by LibraryPagerAdapter", "NNUpdater": "Adds a menu entry to the list of context menu items."}
{"Origin": "Get a string from the underlying resource bundle or return null if the String is not found.", "Reference": "Get a string from the underlying resource bundle or return null if the", "NNUpdater": "Returns a string from the value."}
{"Origin": "Sets text to be displayed next to icon.", "Reference": "Sets body text to be displayed next to radio button.", "NNUpdater": "Sets displayed text."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Parses {@link BasicVector} from the given Matrix Market string.", "Reference": "Parses {@link BasicVector} from the given Matrix Market.", "NNUpdater": "Creates a zero {@link BasicVector} of the given {@code length}."}
{"Origin": "this will return a Duration with 2004 {@link TimeUnit#MILLISECONDS}.", "Reference": "will return a Duration of 2004 {@link TimeUnit#MILLISECONDS}.", "NNUpdater": "{@link TimeUnit#MILLISECONDS} {@code PX} {@link TimeUnit#SECONDS} {@code EX}"}
{"Origin": "Access Control Using AWS Identity and Access Management (IAM) .", "Reference": "For more information, see Access Control Using AWS Identity and Access Management (IAM).", "NNUpdater": "Access Management (IAM) user account."}
{"Origin": "Sets the transformed layout.", "Reference": "Transform the partition.", "NNUpdater": "Size computing algorithm: 1) Get layout_width and layout_height."}
{"Origin": "Sets the vault endpoint url to send HTTP requests to.", "Reference": "Sets the vault url to send HTTP requests to.", "NNUpdater": "Creates the Nagios update request to send to the cluster."}
{"Origin": "The default behavior of this method is to return {@link HttpServletRequest#getServletMapping()} on the wrapped request object.", "Reference": "The default behavior of this method is to return {@link HttpServletRequest#getHttpServletMapping()} on the wrapped request object.", "NNUpdater": "The default behavior of this method is to return startAsync(Runnable) on the wrapped request object."}
{"Origin": "Returned array may be different size than size of provided array, due to {@link #expand(Class[]) expanding}.", "Reference": "Returned array may be different size than size of provided array, due to {@link #expand(ActionConfig, Class[]) expanding}.", "NNUpdater": "Array - the array size"}
{"Origin": "Parse a service request path from servlet path info.", "Reference": "Parse a API request path from servlet path info.", "NNUpdater": "Returns {@link HtmlStaplerServlet} servlet path."}
{"Origin": "Check when there is .codenvy.json file in the repository", "Reference": "Check when there is .factory.json file in the repository", "NNUpdater": "Engine."}
{"Origin": "Returns the w s r p consumer with the primary key or throws a {@link com.liferay.wsrp.NoSuchConsumerException} if it could not be found.", "Reference": "Returns the w s r p consumer with the primary key or throws a {@link NoSuchConsumerException} if it could not be found.", "NNUpdater": "Constructs the {@link StreamConsumerFactory} using the {@link StreamConfig ::getConsumerFactoryName()} property and initializes it"}
{"Origin": "The difference of {@link #isInteroperable} is ignore decimal precision.", "Reference": "The difference of {@link #isInteroperable} is ignore precisions.", "NNUpdater": "-D"}
{"Origin": "Format the time in the format hh:mm:ss.1234 where 1234 is milliseconds.", "Reference": "Format the time in the format mm:ss.123 or hh:mm:ss.123 where 123 is milliseconds.", "NNUpdater": "Globally Unique Key ID Example - 12345678-1234-1234-1234-123456789012"}
{"Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}", "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveFromRangeEnd }{@code >}}", "NNUpdater": "Create an instance of {@link JAXBElement }{@code <}{@link CTStrokeChild }{@code >}}"}
{"Origin": "Grants the role execute permissions on the resource.", "Reference": "Sets the execute permission status.", "NNUpdater": "By default, AWS CloudFormation grants permissions to all resource types."}
{"Origin": "Optionally provide a custom {@link LogStreamProvider} that provides streams for writing container stdout/stderr logs.", "Reference": "Optionally provide a custom {@link LogStreamFollower} that provides streams for writing container stdout/stderr logs.", "NNUpdater": "Run a command via Runtime.exec(), with its stdout and stderr streams directed to be handled by threads generated by AsyncSinks."}
{"Origin": "Set the conflict resolution policy for the graph.", "Reference": "Set the resource value.", "NNUpdater": "Gets the options for the the conflict resolution policy."}
{"Origin": "This method returns the value of the database column m_prj_project.projectStatus", "Reference": "This method returns the value of the database column m_prj_project.status", "NNUpdater": "This method returns the value of the database column m_prj_project.accountId"}
{"Origin": "An IllegalStateException is thrown because the aspectRatio has already been set.", "Reference": "An IllegalStateException is thrown because the size has already been set.", "NNUpdater": "If it hasn't been, an {@link IllegalStateException} is thrown."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Check when there is .codenvy.dockerfile in the repository", "Reference": "Check when there is .devfile in the repository", "NNUpdater": "Engine."}
{"Origin": "Orphan slurs that don't connect are removed from their SIG.", "Reference": "Orphan slurs that don't connect (and are not manual) are removed from their SIG.", "NNUpdater": "Tests that {@link ServiceRemovedEvent}s are fired correctly and alerts and the default alert group are removed."}
{"Origin": "Build the range store with provided {@link RangeStoreFactory}.", "Reference": "Build the range store with provided {@link MVCCStoreFactory}.", "NNUpdater": "Build the range store with provided {@link StorageServerClientManager}."}
{"Origin": "The protection end will be calculated based on standard semi-annual roll convention.", "Reference": "The start and end dates will be calculated based on standard semi-annual roll convention.", "NNUpdater": "Creates a convention based on the specified parameters."}
{"Origin": "This will retrieve (if in existence) or create (if not) a for the supplied prefix and URI.", "Reference": "This will retrieve (if in existence) or create (if not) a for the supplied prefix and uri.", "NNUpdater": "Create a new {@code UriSource} using the supplied {@code URI}."}
{"Origin": "Update event loops resources and return the global HTTP resources", "Reference": "Update provider resources and return the global HTTP resources", "NNUpdater": "This method may filter the resources based on the predicate and return a subset of the given resources."}
{"Origin": "Once the prefetch is done, the player will change its playback state to {@link SessionPlayer2#PLAYER_STATE_PAUSED}.", "Reference": "Once the prepare is done, the player will change its playback state to {@link SessionPlayer2#PLAYER_STATE_PAUSED}.", "NNUpdater": "Once the prefetch is done, the session will change its playback state to {@link SessionPlayer2#PLAYER_STATE_PAUSED}."}
{"Origin": "This allows additional information to be attached to the trade.", "Reference": "This allows additional information to be attached.", "NNUpdater": "This allows an attribute about a security to be obtained if available."}
{"Origin": "Information from the Dart Analysis Serve is used.", "Reference": "Information from the Dart Analysis Server is used.", "NNUpdater": "Creates an AnalysisService with all the default analyzers configured."}
{"Origin": "Sets the bootstrap member locations.", "Reference": "Sets the bootstrap nodes.", "NNUpdater": "Sets the multicast address."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Maps the given upper-case character to it's Soudex code.", "Reference": "Maps the given upper-case character to its Soundex code.", "NNUpdater": "Returns the type of ``not frozen`` maps of {@code keyType} to {@code valueType} elements."}
{"Origin": "Saves the conversation log entry to the database.", "Reference": "Saves the conversation log entry batch to the database.", "NNUpdater": "Saves the complete database."}
{"Origin": "Read a integer from a buffer at a specified offset.", "Reference": "Read an integer from a buffer at a specified offset.", "NNUpdater": "Read an int from the buffer at a specific absolute offset before the current read point."}
{"Origin": "Reset starting address.", "Reference": "Reset head segment.", "NNUpdater": "Return the current starting address."}
{"Origin": "The condition that triggers the dialog node.", "Reference": "The condition that will trigger the dialog node.", "NNUpdater": "Sets the dialogNodeId."}
{"Origin": "Warining: A Class object returned by this method may not work with a security manager or a signed jar file because a protection domain is not specified.", "Reference": "Warning: A Class object returned by this method may not work with a security manager or a signed jar file because a protection domain is not specified.", "NNUpdater": "If item is a (jar) file, its parent is returned."}
{"Origin": "Requires the mongodb-crypt library in the class path", "Reference": "Requires the mongodb-crypt library in the class path and mongocryptd on the system path.", "NNUpdater": "Creates a {@link AbstractMongodbQuery}."}
{"Origin": "To perform a partial update of a block blob's, use PutBlock and PutBlockList.", "Reference": "To perform a partial update of a block blob's, use", "NNUpdater": "Gets a list of {@link ScheduledTaskEntry}s on this block."}
{"Origin": "Creates new {@link AggregationExpression} that returns the second portion of a date as a number between 0 and 59, but can be 60 to account for leap seconds in the factory timezone (default UTC).", "Reference": "Creates new {@link AggregationExpression} that returns the second portion of a date as a number between 0 and 59, but can be 60 to account for leap seconds.", "NNUpdater": "Creates new {@link AggregationExpression} that returns the second portion of a date as a number between 0 and 59, but can be 60 to account for leap seconds in the factory timezone (default UTC)."}
{"Origin": "Tests that a job only has one failover region and can recover from task failure successfully", "Reference": "Tests that a job only has one failover region and can recover from task failure successfully with state.", "NNUpdater": "Returns the message delivery policy."}
{"Origin": "Obtains an instance of {@code ZoneId} from a date-time object.", "Reference": "Obtains an instance of {@code ZoneId} from a temporal object.", "NNUpdater": "Obtains an instance of {@code TimeZone} from an identifier ensuring that the identifier is valid and available for use."}
{"Origin": "This method is a shortcut to {@code context().uuid()}.", "Reference": "This method is a shortcut to {@code context().id()}.", "NNUpdater": "Shortcut for {@link Context#stagingArea()}"}
{"Origin": "Appends an internal name, a type descriptor or a type signature to {@link #buf buf}.", "Reference": "Appends an internal name, a type descriptor or a type signature to {@link #stringBuilder}.", "NNUpdater": "Prepare a pooled {@link TcpClient}"}
{"Origin": "Code snippets for {@link LeaseClientBuilder#buildClient()}.", "Reference": "Code snippets for {@link BlobLeaseClientBuilder#buildClient()}.", "NNUpdater": "WebClient client = WebClient.create(``URL``);"}
{"Origin": "Configures {@link jodd.petite.PetiteContainer} with default class path.", "Reference": "Configures {@link jodd.petite.PetiteContainer} with specified class path.", "NNUpdater": "Returns Petite resolvers."}
{"Origin": "Queries this contact source for the given queryString.", "Reference": "Creates query for the given queryString.", "NNUpdater": "Queries this ContactSourceService for SourceContacts which match a specific query Pattern."}
{"Origin": "In case of an error, we have to ensure that the triggerservice does not leave anything behind", "Reference": "In case of an engine related error, we have to ensure that the triggerservice does not leave anything behind", "NNUpdater": "It does not delete anything."}
{"Origin": "Called when a controller requested to prefetch a specific media item represented by a URI through {@link MediaController2#prefetchFromUri(Uri, Bundle)}.", "Reference": "Called when a controller requested to prepare a specific media item represented by a URI through {@link MediaController2#prepareFromUri(Uri, Bundle)}.", "NNUpdater": "Called when a controller requested to prefetch a specific media item represented by a URI through {@link MediaController2#prefetchFromUri(Uri, Bundle)}."}
{"Origin": "From W.X.Y.Z return Z.", "Reference": "From W.X.Y return Y.", "NNUpdater": "Operation fails."}
{"Origin": "Test of npara method, of class TDistribution.", "Reference": "Test of length method, of class TDistribution.", "NNUpdater": "This method returns the index of the maximum probability as provided by {@link #classDistribution(O) classDistribution(M)}."}
{"Origin": "Matching is performed using the matching rules specified by [RFC2459].", "Reference": "Matching is performed using the matching rules specified by [RFC5280].", "NNUpdater": "Matching is done by the file extension (e.g."}
{"Origin": "User names will always be checked in a case insensitive manner.", "Reference": "User names will always be checked in a case insensitive manner using the system default Locale.", "NNUpdater": "use case-sensitive matching."}
{"Origin": "[A4] If the new lookup class is in a different package than the old one, protected and default (package) members will not be accessible.", "Reference": "[A6] If the new lookup class is in a different package than the old one, protected and default (package) members will not be accessible.", "NNUpdater": "Get the node package string."}
{"Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}", "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveFromRangeEnd }{@code >}}", "NNUpdater": "Create an instance of {@link JAXBElement }{@code <}{@link CTStrokeChild }{@code >}}"}
{"Origin": "Test a read after write on SMRMap.", "Reference": "Test a read after write on CorfuTable.", "NNUpdater": "Set Manual."}
{"Origin": "The {@link EcKeyCreateOptions} parameter is required.", "Reference": "The {@link CreateEcKeyOptions} parameter is required.", "NNUpdater": "{@codesnippet com.azure.keyvault.keys.keyclient.createEcKeyWithResponse#keyOptions-Context}"}
{"Origin": "No component is registered, only {@link MadvocConfig} and {@link MadvocContainer}.", "Reference": "You can use only {@link MadvocConfig} and {@link MadvocContainer}.", "NNUpdater": "Action classes are annotated with {@link jodd.madvoc.meta.MadvocAction} annotation or extends a class annotated with the same annotation."}
{"Origin": "Creates a new program scope: the list of methods.", "Reference": "Creates a new program scope as the root of all scopes", "NNUpdater": "Creates program options."}
{"Origin": "Returns a range of all the sync d l objects where modifiedTime > ?", "Reference": "Returns an ordered range of all the sync d l objects where repositoryId = ?", "NNUpdater": "Returns the number of sync d l objects where type = ?"}
{"Origin": "If there is a sample in progress for the operator, the call is ignored.", "Reference": "If there is a request in progress for the vertex, the call is ignored.", "NNUpdater": "If the associated operation is inactive, the call is ignored."}
{"Origin": "Returns the message with the primary key or throws a {@link com.liferay.mail.NoSuchMessageException} if it could not be found.", "Reference": "Returns the message with the primary key or throws a {@link NoSuchMessageException} if it could not be found.", "NNUpdater": "Create a handler that throws a {@link MessageHandlerRejectedExecutionException}."}
{"Origin": "Tests rejection of expressions in VERSION model.", "Reference": "Tests rejection of expressions in either VERSION or VERSION model.", "NNUpdater": "Tests transformation of model from VERSION version into VERSION or VERSION version."}
{"Origin": "Access Control Using AWS Identity and Access Management (IAM) .", "Reference": "For more information, see Access Control Using AWS Identity and Access Management (IAM).", "NNUpdater": "Access Management (IAM) user account."}
{"Origin": "Converts from list of {@link CpuProfilerConfig} to list of {@link CpuProfiler.CpuProfilerConfiguration}", "Reference": "Converts from list of {@link CpuProfilerConfig} to list of {@link Cpu.CpuTraceConfiguration}", "NNUpdater": "Receives a {@link Common.Device.Builder} and converts it into a {@link Common.Device}."}
{"Origin": "The simplest way to create a CVC update token.", "Reference": "Create a CVC update token asynchronously.", "NNUpdater": "The simplest way to create a {@link BankAccount} token."}
{"Origin": "Tests wether the samples of all s in the list are ordered in increasing order with +1 increments.", "Reference": "Tests whether the samples of all s in the list are ordered in increasing order with +1 increments.", "NNUpdater": "Results will be ordered in increasing order (ie, earliest to latest) if oldestfirst is true; in decreasing order otherwise."}
{"Origin": "Use reflection to discover and report on the bigdata build information.", "Reference": "Method used to discover and report on the bigdata build information.", "NNUpdater": "A {@link BigdataValueFactoryImpl}"}
{"Origin": "If the given language code is {@code null}, uses {@link DisplaySettings#getShowsLanguage(Context)}.", "Reference": "If the given language code is {@code null}, uses {@link DisplaySettings#getShowsLanguageFallback(Context)}.", "NNUpdater": "Operation fails."}
{"Origin": "Acquires the write lock to start reinitialization.", "Reference": "Acquires the resource to allow reinitialization.", "NNUpdater": "If the lock can be acquires the lock count is updated on this and the transaction lock element (tle)."}
{"Origin": "Returns a QualifiedType that has the same type as this instance, but with the given qualifiers.", "Reference": "Returns a QualifiedType that has the same type as this instance, but with only the given qualifiers.", "NNUpdater": "Returns the least upper bound of two types."}
{"Origin": "Starts a new download with the given DownloadRequest.", "Reference": "Starts a new download with the given a list of DownloadRequest.", "NNUpdater": "Starts the downloads."}
{"Origin": "This GET scenario will return a setting when the etag provided does not match the one of the current setting.", "Reference": "This GET scenario will return a setting when the ETag provided does not match the one of the current setting.", "NNUpdater": "If {@link ConfigurationSetting#getETag() etag} is specified, the configuration value is updated if the current setting's etag matches."}
{"Origin": "Reads up to bytes of data into an array of bytes from this input stream.", "Reference": "Reads up to {@code len} bytes of data into an array of bytes from this input stream.", "NNUpdater": "Reads all bytes from the given input stream, closes it and returns the result in an array."}
{"Origin": "Returns the next value from the input.", "Reference": "Get the next value.", "NNUpdater": "Get the next value."}
{"Origin": "Return an InetSocketAddress to represent the socket address in this buffer.", "Reference": "Encodes the given InetSocketAddress into this socket address.", "NNUpdater": "Gets the source/destination IP address and port."}
{"Origin": "Creates a {@link PropertyMatcher} to match against slot indexes.", "Reference": "Creates a {@link KeyValueMatcher} to match against slot indexes.", "NNUpdater": "Constructs a new builder to construct a {@link BlockStateMatcher}."}
{"Origin": "The {@link RsaKeyCreateOptions#isEnabled() enabled} field is set to true by Azure Key Vault, if not specified.", "Reference": "The {@link CreateRsaKeyOptions#isEnabled() enabled} field is set to true by Azure Key Vault, if not specified.", "NNUpdater": "The {@link Secret#isEnabled() enabled} field is set to true by key vault, if not specified."}
{"Origin": "Group: consumer", "Reference": "Group: producer", "NNUpdater": "Guide."}
{"Origin": "Creates an audit entry for the 'service created' event.", "Reference": "Creates an audit entry for the 'API created' event.", "NNUpdater": "Adds an event."}
{"Origin": "Standard utility method for typical implementation of {@link SlotSelector#validateSatisfied(IndexProvider[])}.", "Reference": "Standard utility method for typical implementation of {@link SlotSelector#validateSatisfied(InstanceSelector)}.", "NNUpdater": "Operation fails."}
{"Origin": "Sets the value of the shortDescription property.", "Reference": "Sets the value of the description property.", "NNUpdater": "Gets the type of this completion."}
{"Origin": "The result will be invoked to listener set by {@link #setOnGetCroppedImageCompleteListener(OnGetCroppedImageCompleteListener)}.", "Reference": "The result will be invoked to listener set by {@link #setOnCropImageCompleteListener(OnCropImageCompleteListener)}.", "NNUpdater": "Same as {@link #putInCache(Class, Object, Object, RequestListener)} with a null listener."}
{"Origin": "Generate a properties object with some static defaults that can be overridden by Source configuration 2.", "Reference": "Generate a properties object with some static defaults that can be overridden if corresponding properties are specified 2.", "NNUpdater": "This method should not be overridden."}
{"Origin": "The results are undefined if timing methods are called without invoking at least one pair {@link #start()} / {@link #stop()} methods.", "Reference": "The results are undefined if timing methods are called without invoking at least one pair {@link #start()} / {@code #stop()} methods.", "NNUpdater": "The {@link #getApplication()} and {@link #getUI()} methods might return after this method is called."}
{"Origin": "Enable GZip response compression if the client request presents accept encoding headers.", "Reference": "Specifies whether GZip response compression is enabled if the client request presents accept encoding headers.", "NNUpdater": "Enforce HTTP compression."}
{"Origin": "Expected: IOException is thrown", "Reference": "IllegalArgumentException is thrown", "NNUpdater": "Expected:"}
{"Origin": "An index ranges from {@code 0} to {@code getSizeInBytes() - 1}.", "Reference": "An index ranges from {@code 0} to {@code binarySection.sizeInBytes - 1}.", "NNUpdater": "Request data in {@code tableNames} under {@code dbName} and {@code ranges} from specific node."}
{"Origin": "Creates a new ClassLoader and a new class inside that ClassLoader.", "Reference": "Creates a new ClassLoader and a new {@link Exception} class inside that ClassLoader.", "NNUpdater": "ClassLoader used to load the {@link Configuration} class will be used as the parent ClassLoader of the created ClassLoader."}
{"Origin": "Issues an HTTP redirect after subject logout.", "Reference": "Issues an HTTP redirect to the specified URL after subject logout.", "NNUpdater": "Attempt to logout for EJB."}
{"Origin": "heavy weight join(), involves moving data", "Reference": "Heavy weight join(), involves moving data", "NNUpdater": "This is a heavy operation, we should avoid to use."}
{"Origin": "and {@link org.apache.flink.table.api.StreamTableEnvironment} for stream job.", "Reference": "and {@link org.apache.flink.table.planner.StreamPlanner} for stream job.", "NNUpdater": "The transformation calls a {@link org.apache.flink.api.common.functions.MapFunction} for each element of the DataSet."}
{"Origin": "Asserts that the error message and the root bean class of the given violation are equal to the expected message and root bean class.", "Reference": "Asserts that the error message, root bean class and invalid value of the given violation are equal to the expected message, root bean class and invalid value.", "NNUpdater": "Build a message for the given base message and its cause."}
{"Origin": "Retrieve the download stream using the default chunk size of 256kb.", "Reference": "Retrieve the download stream using the default chunk size of 256 kB.", "NNUpdater": "The desired minimum chunk size for the chunk combiner."}
{"Origin": "NOTE:The DB cluster snapshot must be in the available state to be deleted.", "Reference": "The DB cluster snapshot must be in the state to be deleted.", "NNUpdater": "Manual DB snapshots of the DB instance to be deleted are not deleted."}
{"Origin": "Get the number of active transports for the Image.", "Reference": "Get the count of active transports for the Image.", "NNUpdater": "Returns the protocols the client supports."}
{"Origin": "Converts a JSON document into a PdxInstance", "Reference": "Converts a String JSON document into a PdxInstance", "NNUpdater": "Parses a string in JSON format to a {@code Document}"}
{"Origin": "Code snippet for {@link AppendBlobClient#createWithResponse(BlobHTTPHeaders, Map, BlobAccessConditions,", "Reference": "Code snippet for {@link AppendBlobClient#createWithResponse(BlobHttpHeaders, Map, BlobAccessConditions,", "NNUpdater": "Code snippet for {@link AppendBlobClient#createWithResponse(BlobHTTPHeaders, Map, BlobAccessConditions,"}
{"Origin": "{@codesnippet com.azure.data.applicationconfig.configurationclient.listSettings#settingSelector}", "Reference": "{@codesnippet com.azure.data.applicationconfig.configurationclient.listConfigurationSettings#settingSelector}", "NNUpdater": "{@codesnippet com.azure.data.applicationconfig.configurationclient.listSettings#settingSelector}"}
{"Origin": "Determines the timeout in milliseconds until a new connection is fully established or established connection transmits a data packet.", "Reference": "Determines the timeout until a new connection is fully established.", "NNUpdater": "Loops until the desired connection is established and returns the resulting connector."}
{"Origin": "For an overview on tagging Amazon RDS resources, see", "Reference": "For an overview on tagging Amazon RDS resources, see Tagging Amazon RDS Resources.", "NNUpdater": "For an overview on tagging an Amazon RDS resource, see"}
{"Origin": "If you'd just like to obtain the version of SIP Communicator so that you could display it (e.g.", "Reference": "If you'd just like to obtain the version of Jitsi so that you could display it (e.g.", "NNUpdater": "That should be Jitsi most of the time but who knows .."}
{"Origin": "Search for the insertion point of current number.", "Reference": "Binary search for the insertion point of current number.", "NNUpdater": "( Dynamic Point A - Dynamic Point B )"}
{"Origin": "Attempts to find the best suited {@link OnExceptionDefinition} to be used for handling the given thrown exception.", "Reference": "Attempts to find the best suited {@link ExceptionPolicy} to be used for handling the given thrown exception.", "NNUpdater": "Attempts to find the best suited {@link ExceptionDefinition} to be used for handling the given thrown exception."}
{"Origin": "Gets {@link TableEnvironment}, {@link org.apache.flink.table.api.BatchTableEnvironment} for batch job.", "Reference": "Gets {@link PlannerBase}, {@link org.apache.flink.table.planner.BatchPlanner} for batch job.", "NNUpdater": "Operation fails."}
{"Origin": "Determine the {@link SecurityPolicy} for this request", "Reference": "Determine the {@link SecurityContext} for this request", "NNUpdater": "Returns the default timeout of a request."}
{"Origin": "You should probably instead use the frontend function for this: {@link FCPConnectionHandler#getPluginClient(String)}.", "Reference": "ATTENTION: Only for internal use by the frontend function {@link FCPConnectionHandler#getPluginClient(String)}.", "NNUpdater": "The client message handler is available as the passed {@link FredPluginFCPClient} client."}
{"Origin": "If the Artifact refers to a directory recursively removes the contents of the directory.", "Reference": "If the path refers to a directory, recursively removes the contents of the directory.", "NNUpdater": "If any of the Artifacts refers to a directory recursively removes the contents of the directory."}
{"Origin": "First scenario: press button -> two windows appear, press Esc two times -> all windows should be closed", "Reference": "First scenario: press first button -> two windows appear, press Esc two times -> all windows should be closed", "NNUpdater": "Press action on the screen."}
{"Origin": "Return the HTTP request.", "Reference": "Return the native HTTP request.", "NNUpdater": "Return the associated {@link AtmosphereRequest}"}
{"Origin": "The default behavior of this method is to return {@link HttpServletRequest#getPushBuilder()} on the wrapped request object.", "Reference": "The default behavior of this method is to return {@link HttpServletRequest#newPushBuilder()} on the wrapped request object.", "NNUpdater": "The default behavior of this method is to return {@link HttpServletRequest#upgrade(HttpUpgradeHandler)} on the wrapped request object."}
{"Origin": "Test of npara method, of class Beta.", "Reference": "Test of length method, of class Beta.", "NNUpdater": "Test of betaCdf method, of class ContinuousDistributions."}
{"Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}", "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveToRangeEnd }{@code >}}", "NNUpdater": "Create an instance of {@link JAXBElement }{@code <}{@link CTStrokeChild }{@code >}}"}
{"Origin": "It does not read the response entity, if any.", "Reference": "This method does not read the response entity, if any.", "NNUpdater": "It does not trigger valuechange events."}
{"Origin": "Gets the value of the spinCount property.", "Reference": "Gets the value of the saltValue property.", "NNUpdater": "Gets the cursor."}
{"Origin": "Returns whether a given bound is included in this slice.", "Reference": "Returns whether a given clustering or bound is included in this slice.", "NNUpdater": "Get the map of active slices (sliceName->Slice) for this collection."}
{"Origin": "Access Control Using AWS Identity and Access Management (IAM) .", "Reference": "For more information, see Access Control Using AWS Identity and Access Management (IAM).", "NNUpdater": "Access Management (IAM) user account."}
{"Origin": "The default implementation does nothing, but subclasses may chose to throw a {@link SolrException} if invariants are violated by the", "Reference": "Subclasses may choose to throw a {@link SolrException} if invariants are violated by the", "NNUpdater": "Default implementation reports no problems, but may be overridden by subclasses."}
{"Origin": "Registers the remote value wrapper interceptor in the cache before it gets started.", "Reference": "Registers the interceptor in the cache before it gets started.", "NNUpdater": "Registers the remote value wrapper interceptor in the cache before it gets started."}
{"Origin": "See Immutable Map Static Factory Methods for details.", "Reference": "See Unmodifiable Maps for details.", "NNUpdater": "VerificationTimes supports multiple static factory methods:"}
{"Origin": "As a special case, resources ending with ``{@code .class}`` are never encapsulated.", "Reference": "If the resource name ends with ``{@code .class}`` then it is not encapsulated.", "NNUpdater": "Corner case:"}
{"Origin": "Set the maxPassagesPerDocument.", "Reference": "Set the maxPerDocument.", "NNUpdater": "The max number of connections per destination, see {@link HttpClient#setMaxConnectionsPerDestination(int)}"}
{"Origin": "Test affinity awareness Sql cache size property.", "Reference": "Test Partition Awareness Sql cache size property.", "NNUpdater": "Get the current awareness as list of cognitions."}
{"Origin": "Returns the default SelectorProvider.", "Reference": "Returns the default SelectorProvider implementation.", "NNUpdater": "Returns the IO controller."}
{"Origin": "Maintains type, name, and calibration values.", "Reference": "Maintains metadata including axis types, dataset name, and axis calibrations.", "NNUpdater": "CompassMode_CALIBRATION_MODE property getter."}
{"Origin": "{@codesnippet com.azure.data.appconfiguration.configurationasyncclient.setSetting#string-string-string}", "Reference": "{@codesnippet com.azure.data.appconfiguration.configurationasyncclient.setConfigurationSetting#string-string-string}", "NNUpdater": "{@codesnippet com.azure.data.appconfiguration.configurationasyncclient.setSetting#string-string-string}"}
{"Origin": "Returns an immutable map containing three mappings.", "Reference": "Returns an unmodifiable map containing three mappings.", "NNUpdater": "Returns an immutable map of named bindings."}
{"Origin": "Use securitForOperation instead", "Reference": "Use securityForOperation instead", "NNUpdater": "Find the page with the lowest position value which is visible in the current security context"}
{"Origin": "Converts a date to a relative time span (``8h``, ``3d``, etc.)", "Reference": "Converts a date to a localized relative time span (``Now``, ``8 hr.", "NNUpdater": "Converts a date to a relative time span (``8h``, ``3d``, etc.)"}
{"Origin": "Attributes can extend the parameters of this class without having to extend it.", "Reference": "Attributes can extend the parameters of this class without actually having to extend it.", "NNUpdater": "The class is the class of the command, which must extend {@link LocalCommand} and have a default constructor."}
{"Origin": "The operator subscribes to its sources in the order they are specified and completes eagerly if one of the sources is shorter than the rest while cancel the other sources.", "Reference": "The operator subscribes to its sources in the order they are specified and completes eagerly if one of the sources is shorter than the rest while canceling the other sources.", "NNUpdater": "Extract rule collection from fact sources"}
{"Origin": "Generates random trits for a transaction.", "Reference": "Generates trits for a transaction.", "NNUpdater": "Generates a random bar."}
{"Origin": "Convert a time in milliseconds in UTC to the nanoseconds since midnight (in the default timezone).", "Reference": "Convert a time in milliseconds in local time to the nanoseconds since midnight.", "NNUpdater": "Regression test."}
{"Origin": "Get XA connection.", "Reference": "Get connection.", "NNUpdater": "Create XA connection from normal connection."}
{"Origin": "Group: common", "Reference": "Group: security", "NNUpdater": "Returns the default number of {@linkplain CommonPools#blockingTaskExecutor() blocking task executor} threads."}
{"Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}", "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveToRangeEnd }{@code >}}", "NNUpdater": "Create an instance of {@link JAXBElement }{@code <}{@link CTStrokeChild }{@code >}}"}
{"Origin": "Stops this thing's polling future", "Reference": "Stops/clears this thing's polling future", "NNUpdater": "Updates the given property value for the thing that is handled by this thing handler instance."}
{"Origin": "Tests that Grindstone mills all cards to graveyard while Painter's Servant is in play", "Reference": "Tests that Grindstone mills all cards to graveyard while Painter's", "NNUpdater": "Returns label painter."}
{"Origin": "Scenario successful connection to the back end service via basic auth.", "Reference": "Scenario successful connection to the back end API via basic auth.", "NNUpdater": "Sets the http auth."}
{"Origin": "Set the elements of this matrix to the upper left 3x3 of the given {@link Matrix4f}.", "Reference": "Set the elements of this matrix to the upper left 3x3 of the given {@link Matrix4fc}.", "NNUpdater": "Set the upper left 3x3 submatrix of this {@link Matrix4f} to that of the given {@link Matrix4f} and don't change the other elements."}
{"Origin": "Writer for genotypes of arbitrary chromosomes.", "Reference": "Create a writer for genotypes of arbitrary chromosomes.", "NNUpdater": "Create a new Genotype from a given array of {@code Chromosomes}."}
{"Origin": "Sets the alignment of the selected element.", "Reference": "Sets the alignment of the selected item in the select box.", "NNUpdater": "Sets the alignment of widgets within the horizontal group."}
{"Origin": "Obtains an instance of {@code ZonedDateTime} from a local date-time using the specified offset if possible.", "Reference": "Obtains an instance of {@code ZonedDateTime} from a local date-time using the preferred offset if possible.", "NNUpdater": "Obtains an instance of {@code OffsetDateTime} from a local date and offset time."}
{"Origin": "{@codesnippet com.azure.data.applicationconfig.configurationclient.setReadOnly#string-string}", "Reference": "{@codesnippet com.azure.data.applicationconfig.configurationclient.setReadOnly#string-string-boolean}", "NNUpdater": "{@codesnippet com.azure.data.applicationconfig.configurationclient.deleteSetting#string-string}"}
{"Origin": "Sets the servers.", "Reference": "Sets the addresses.", "NNUpdater": "Set the dnsType value."}
{"Origin": "If any package doesen't belong to any specified group on the comamnd line, then a new group named ``Other Packages`` will be created for it.", "Reference": "If any package doesn't belong to any specified group on the command line, then a new group named ``Other Packages`` will be created for it.", "NNUpdater": "Guide."}
{"Origin": "Queries this search source for the given queryString.", "Reference": "Creates query for the given query.", "NNUpdater": "Queries this ContactSourceService for SourceContacts which match a specific query Pattern."}
{"Origin": "You don't need to call {@link #close()} after calling this method.", "Reference": "You don't need to call {@link GenbankReader#close()} after calling this method.", "NNUpdater": "If you don't care about ordering, set this value to 0."}
{"Origin": "This API returns an export ID which you can query using the DescribeExportConfigurations API.", "Reference": "This API returns an export ID that you can query using the DescribeExportConfigurations API.", "NNUpdater": "Set Kann exportieren."}
{"Origin": "Returns the search roots.", "Reference": "Returns the searchRoots.", "NNUpdater": "Get git roots for the selected paths"}
{"Origin": "Action remove hop from this step", "Reference": "Action remove hop exiting this step", "NNUpdater": "Method getStepDisplayName returns the stepDisplayName of this FlowStep object."}
{"Origin": "RecordActivityTaskHeartbeat request returns true and if the activity can be safely undone or abandoned.", "Reference": "RecordActivityTaskHeartbeat request returns and if the activity can be safely undone or abandoned.", "NNUpdater": "Set Kostenstelle."}
{"Origin": "Generates a valid document ID for a service, used to index the service in ES.", "Reference": "Generates a valid document ID for a api, used to index the api in ES.", "NNUpdater": "Get the used service list."}
{"Origin": "For an interface parent (MUST be an interface), returns set of all subinterfaces.", "Reference": "For an interface parent (MUST be an interface), returns set of all subinterfaces including .", "NNUpdater": "Check a class is an interface (throws an IllegalArgumentException if not), and return the name of the interface."}
{"Origin": "Returns the projects entry with the primary key or throws a {@link com.liferay.so.NoSuchProjectsEntryException} if it could not be found.", "Reference": "Returns the projects entry with the primary key or throws a {@link NoSuchProjectsEntryException} if it could not be found.", "NNUpdater": "Returns the list of projects."}
{"Origin": "Handles URL: /clusters/{clusterName}/servicegroups/{serviceGroupName}/services/{serviceDisplayName}", "Reference": "Handles URL: /clusters/{clusterName}/servicegroups/{serviceGroupName}/services/{serviceName}", "NNUpdater": "Handles GET: /clusters/{clusterID}/services/{serviceID}/components"}
{"Origin": "Open a new file for data matching a schema.", "Reference": "Open a new file for data matching a schema with a random sync.", "NNUpdater": "Given a data schema, remove data tables that are not compatible with this data schema."}
{"Origin": "If you have an EdgeIteratorState the other createTraversalId is preferred!", "Reference": "If you have an EdgeIteratorState the other createTraversalKey is preferred!", "NNUpdater": "Create an _IteratorV."}
{"Origin": "Remove a given task from the database via mode query.", "Reference": "Remove the task related to this worker from the DB via mode query.", "NNUpdater": "Remove a user from the DB by name."}
{"Origin": "List the batch-processing jobs submitted by users.", "Reference": "Lists batch-processing jobs submitted by users.", "NNUpdater": "Sets the modifiable list of users."}
{"Origin": "Open a Session for the SessionFactory that this interceptor uses.", "Reference": "Open a Session for the given SessionFactory.", "NNUpdater": "SessionManager instance."}
{"Origin": "In order to set the matrix to a rotation transformation without post-multiplying, use {@link #rotation(Quaterniond)}.", "Reference": "In order to set the matrix to a rotation transformation without post-multiplying, use {@link #rotation(Quaterniondc)}.", "NNUpdater": "In order to set the matrix to a rotation transformation without post-multiplying, use {@link #rotation(Quaternionf)}."}
{"Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}", "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveToRangeEnd }{@code >}}", "NNUpdater": "Create an instance of {@link JAXBElement }{@code <}{@link CTStrokeChild }{@code >}}"}
{"Origin": "Computes the maximum for each pixel across all bands in the {@link Planar} image.", "Reference": "Computes the maximum for each pixel across selected bands in the {@link Planar} image.", "NNUpdater": "Computes the average for each pixel across all bands in the {@link Planar} image."}
{"Origin": "Note: returned indent is not set to be to it's direct parent block", "Reference": "Note: returned indent is not set to be {@code 'relative'} to it's direct parent block", "NNUpdater": "Note: {@code -1} is returned if the number is unknown, so the returned value has to be checked."}
{"Origin": "Parses an array containing a coordinate into a LatLng object", "Reference": "Parses an array containing a coordinate into a LatLngAlt object", "NNUpdater": "Convert a string coordinate from a string into a LatLngAlt object"}
{"Origin": "Setter for {@link #allowOnlyRequestedHeader}", "Reference": "Setter for {@link #allowAllRequestedHeaders}", "NNUpdater": "Return the value of the {@code Access-Control-Allow-Methods} response header."}
{"Origin": "Returns the list of fields used to define this provider, or null if the provider is schemaless.", "Reference": "Returns the list of fields allowed by this provider, or null if the provider is schemaless.", "NNUpdater": "Unsets the provider for the intent domain."}
{"Origin": "Iterate over all the {@link KeyProperties key} by page and call {@link KeyClient#getKey(KeyProperties key properties)}.", "Reference": "Iterate over all the {@link KeyProperties key} by page and call {@link KeyClient#getKey(String, String)}.", "NNUpdater": "Iterate over all the {@link KeyProperties key} by page and call {@link KeyClient#getKey(KeyProperties key properties)}."}
{"Origin": "Returns true if field ttlNotUsed is set (has been assigned a value) and false otherwise", "Reference": "Returns true if field ttl is set (has been assigned a value) and false otherwise", "NNUpdater": "Returns true if field eB is set (has been assigned a value) and false otherwise"}
{"Origin": "adds a local ID to the list of recently chosen sites", "Reference": "adds a local site ID to the top of list of recently chosen sites", "NNUpdater": "Returns a map of configured sites."}
{"Origin": "Fills the current buffer with bytes from the specified array from the specified offset.", "Reference": "Fills the current buffer with bytes from the specified array and offset.", "NNUpdater": "Sets bytes from specified buffer to a given value."}
{"Origin": "This method must only be used for type references whose sort is {@link #CLASS_EXTENDS CLASS_EXTENDS}.", "Reference": "This method must only be used for type references whose sort is {@link #CLASS_EXTENDS}.", "NNUpdater": "It must have a return type of org.hamcrest.Matcher (or something that extends this)."}
{"Origin": "Create a QuickConnection object from a GuacamoleConfiguration and get an ID and place it on the tree.", "Reference": "Create a QuickConnection object from a GuacamoleConfiguration and get an ID and place it on the tree, returning the new connection identifier value.", "NNUpdater": "Get Is Single Document Action."}
{"Origin": "Returns the configured bootstrap locations.", "Reference": "Returns the configured bootstrap nodes.", "NNUpdater": "Returns the multicast address."}
{"Origin": "Takes SPIR-V as a sequence of 32-bit words, validates it, then compiles to HLSL.", "Reference": "Takes SPIR-V as a sequence of 32-bit words, validates it, then creates the internal compiler for translating to HLSL and performing reflection.", "NNUpdater": "Test method for {@link BitArray#toArray()}."}
{"Origin": "Each type will be instantiated by Bootique and added to the Guice DI container.", "Reference": "Each type will be instantiated by Bootique and added to the DI container.", "NNUpdater": "Bootique core module."}
{"Origin": "Add an algorithm by loading a config file.", "Reference": "Add one or more algorithms by loading a config file.", "NNUpdater": "Create new service by default SPI type."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Requires {@link ClassGraph#enableFieldConstantInitializerValues()} to have been called.", "Reference": "Requires {@link ClassGraph#enableStaticFinalFieldConstantInitializerValues()} to have been called.", "NNUpdater": "Operation fails."}
{"Origin": "Creates a new {@link PrivilegedEvent} based on an existing {@link PrivilegedEvent} instance and and {@link EventContext}.", "Reference": "Creates a new {@link PrivilegedEvent} based on an existing {@link PrivilegedEvent} instance and a {@link EventContext}.", "NNUpdater": "Is responsible for calling {@link EventSource#onEvent(InboundEvent)} and all registered {@link EventListener} instances."}
{"Origin": "Returns URL to post events to.", "Reference": "Returns URI where to post events.", "NNUpdater": "Executes a DELETE request to the url provided."}
{"Origin": "Declared a queue.", "Reference": "Declare a queue.", "NNUpdater": "Get declared fields of a given type."}
{"Origin": "Determines whether or not this version supports setting keyspace on a per-query basis.", "Reference": "Determines whether or not this version supports the given feature.", "NNUpdater": "for a keyspace, return the ranges and corresponding RPC addresses for a given keyspace."}
{"Origin": "A more complex adjuster might set the date-time to the last day of the month.", "Reference": "A more complex adjuster might set the date to the last day of the month.", "NNUpdater": "A more complex adjuster might set the date to the last day of the month."}
{"Origin": "RandomAccessThing, then read randomly and compare.", "Reference": "RandomAccessBuffer, then read randomly and compare.", "NNUpdater": "Two Pointers."}
{"Origin": "Updates the UI after the result of an update operation on the edited {@link OCShare} permissions.", "Reference": "Updates the UI after the result of an update operation on the edited {@link OCFile}.", "NNUpdater": "Updates a public share on a folder to set its editing permission."}
{"Origin": "Get Document Controlled.", "Reference": "Get Belegartgesteuert.", "NNUpdater": "Get Belegart."}
{"Origin": "This method will attempt to load the cluster and path level configuration defaults and update the configuration if necessary.", "Reference": "This method will load the cluster and path level configuration defaults and update the configuration in one RPC.", "NNUpdater": "Returns the current cluster configuration."}
{"Origin": "Returns an immutable set containing two elements.", "Reference": "Returns an unmodifiable set containing two elements.", "NNUpdater": "Gets an {@link ImmutableSet} of {@link Value.Immutable}s for the block at the given location."}
{"Origin": "Returns ``true`` if the provided CrawlURI has an HttpMethod with a status code that does not fall within this instance's specified range.", "Reference": "Returns ``true`` if the provided CrawlURI has a fetch status that does not fall within this instance's specified range.", "NNUpdater": "Finally, this method delegates to {@link #innerExtract(ExtractorURI)} and returns that result."}
{"Origin": "This is useful in {@link ItemAttributeValueConverter} implementations, without having to write a switch statement on the {@link #type()}.", "Reference": "This is useful in {@link AttributeConverter} implementations, without having to write a switch statement on the {@link #type()}.", "NNUpdater": "Operation fails."}
{"Origin": "This means that, by default, a codec will accept any subtype of the Java type that it has been created for.", "Reference": "This means that, by default, a codec will accept any subtype of the", "NNUpdater": "This means that a codec will only ever return {@code true} for the exact Java type that it has been created for."}
{"Origin": "Returns {@link ServiceLocator} relevant to current application.", "Reference": "Returns {@link InstanceManager} relevant to current application.", "NNUpdater": "Returns {@link ServiceLocator} relevant to current application."}
{"Origin": "Returns the parent folder of this resource.", "Reference": "Returns the parent folder of this resource in the current site.", "NNUpdater": "Returns the lock of a possible locked parent folder of a resource, system locks are ignored."}
{"Origin": "Look for all unclosed issues in branches/PR targeting the same long living branch, and run a light issue tracking to find matches.", "Reference": "Look for all unclosed issues in PR targeting the same branch, and run a light issue tracking to find matches.", "NNUpdater": "Creates an issue in the gb-issues branch of the repository."}
{"Origin": "Emit MetricsContext for publishing profile related status, the tags are constructed with the program run id and the profile id", "Reference": "Get the metrics context for the program, the tags are constructed with the program run id and the profile id", "NNUpdater": "Returns the {@link MetricsContext} for this context."}
{"Origin": "Setting bounds to means default value should be taken from the underlying OS.", "Reference": "Setting bounds to {@code null} means default value should be taken from the underlying OS.", "NNUpdater": "Taken from URL and URL"}
{"Origin": "Add the triple to the where clause", "Reference": "Add the triple path to the where clause", "NNUpdater": "Add a clause where the ID is from an existing object."}
{"Origin": "then a new {@code BasicDocument} is used instead.", "Reference": "then a new BasicDocument is used instead.", "NNUpdater": "Creates a zero {@link BasicVector} of the given {@code length}."}
{"Origin": "Computes the maximum for each pixel across all bands in the {@link Planar} image.", "Reference": "Computes the average for each pixel across all bands in the {@link Planar} image.", "NNUpdater": "Computes the average for each pixel across all bands in the {@link Planar} image."}
{"Origin": "Invokes parent.resolveRequires to resolve the given root modules.", "Reference": "Invokes parent.resolve to resolve the given root modules.", "NNUpdater": "Resolve the given modules, by name, and returns the resulting"}
{"Origin": "Semantics double with {@link TimerEventListener#timerEventExpireEntry(Entry, Object)}", "Reference": "Semantics double with {@link HeapCache#timerEventExpireEntry(Entry, Object)}", "NNUpdater": "We are called to remove the entry."}
{"Origin": "Set this matrix to be equivalent to the rotation specified by the given {@link Quaterniond}.", "Reference": "Set this matrix to be equivalent to the rotation specified by the given {@link Quaterniondc}.", "NNUpdater": "Set this matrix to be equivalent to the rotation specified by the given {@link Quaternionf}."}
{"Origin": "Returns the {@link ISeedingStrategyFactory} used by this factory.", "Reference": "Returns the {@link SeedingStrategyFactory} used by this factory.", "NNUpdater": "Returns the {@link ISeedingStrategyFactory} used by this factory."}
{"Origin": "Locates a packaged or exploded module, returning a {@code ModuleReference} to the module.", "Reference": "Reads a packaged or exploded module, returning a {@code ModuleReference} to the module.", "NNUpdater": "Returns a {@code ModuleReference} to an exploded module on the file system."}
{"Origin": "Verifies whether signature is made by signer with publicKey", "Reference": "Verifies whether signature is made by signer with pubKey", "NNUpdater": "Verifies a signature using a specified key."}
{"Origin": "Sets the {@link SharedKeyCredential} used to authorize requests sent to the service.", "Reference": "Sets the {@link StorageSharedKeyCredential} used to authorize requests sent to the service.", "NNUpdater": "Sets the SAS token used to authorize requests sent to the service"}
{"Origin": "Sets the resource types.", "Reference": "Sets the resourceTypes.", "NNUpdater": "Sets the types map."}
{"Origin": "Create a Payload from the given data.", "Reference": "Create a Payload with data only.", "NNUpdater": "Creates the parsed data view of given {@link Payload}, or returns null if the payload is not applicable for parsing."}
{"Origin": "Get a string representation of a pokemon rating, for example ``A`` or ``B+``.", "Reference": "Get a string representation of a pokemon rating, for example ``AB`` or ``TG``.", "NNUpdater": "Get the rating for key."}
{"Origin": "Returns a {@link PointerBuffer} view of the {@code data.l} field.", "Reference": "Returns a {@link CLongBuffer} view of the {@code data.l} field.", "NNUpdater": "Returns a {@link YGValue}.Buffer view of the {@code resolvedDimensions} field."}
{"Origin": "***** Property JVERSION *****", "Reference": "***** Property JAVAVERSION *****", "NNUpdater": "Operation fails."}
{"Origin": "Convert this MapX to a ListX via the provided transformation function", "Reference": "Convert this MapX to a Seq via the provided transformation function", "NNUpdater": "The transformation calls a {@link RichMapFunction} for each element of the DataStream."}
{"Origin": "This methods checks that this node, and all its nodes recursively, do not contain elements that were introduced in more recent versions of the ASM API than the given version.", "Reference": "This method checks that this node, and all its children recursively, do not contain elements that were introduced in more recent versions of the ASM API than the given version.", "NNUpdater": "Applies the given settings to all of the unary API methods in this service."}
{"Origin": "If one param is a float, the other is converted to a float.", "Reference": "a*b If one param is a float, the other is converted to a float.", "NNUpdater": "Method getFloat returns the element at the given position as a float."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Recursively scan all files in the designated directories.", "Reference": "Scan all of the given paths.", "NNUpdater": "Find all json test suite files in specified directories."}
{"Origin": "Get the Date that this Token expires", "Reference": "Get the ZonedDateTime that this Token expires", "NNUpdater": "Returns when this token expires."}
{"Origin": "Returns a new Task that, when this task completes normally, executes the given action using the supplied Scheduler.", "Reference": "Returns a new Task that, when this task completes normally, executes the given action using the supplied Executor.", "NNUpdater": "Returns a new Task that, when this task completes normally, is executed using the default Scheduler."}
{"Origin": "Refreshes the filter view.", "Reference": "Refreshes the project view.", "NNUpdater": "Serializes the specified nodes."}
{"Origin": "Assumes {@code string} is in {@value #ENCODING_CHARSET} format.", "Reference": "Assumes {@code string} is in {@see #ENCODING_CHARSET} format.", "NNUpdater": "Assumes {@code string} is in {@link StandardCharsets#UTF_8} format."}
{"Origin": "Returns {@code true} if this module exports the given package to the given module.", "Reference": "Returns {@code true} if this module exports or opens the given package to the given module.", "NNUpdater": "Returns {@code true} if this module exports the given package to at least the given module."}
{"Origin": "Checks whether two filenames are equal after both have been normalized and using the case rules of the system.", "Reference": "Checks whether two fileNames are equal after both have been normalized and using the case rules of the system.", "NNUpdater": "Checks whether two filenames are equal after both have been normalized."}
{"Origin": "If {@link Context#dropPermissions()} has been called then this will return the guest user no matter who the real author is.", "Reference": "If {@link XWikicontext#dropPermissions()} has been called then this will return the guest user no matter who the real author is.", "NNUpdater": "Returns if this user is the default guest user."}
{"Origin": "Set the new period between two lifecycle events.", "Reference": "Set the new period between two lifecycle events in seconds.", "NNUpdater": "Set Periode."}
{"Origin": "Returns the package type (EXPath/internal).", "Reference": "Returns the package type.", "NNUpdater": "Given indexField = a, tag = tag, would produce the following String: {!tag=a}."}
{"Origin": "CallPeers to reflect a possible change in the media setup related to video.", "Reference": "Call, to reflect the current state of the the video contents of this Call.", "NNUpdater": "Sends a re-INVITE request to all CallPeers to reflect possible changes in the media setup (video start/stop, ...)."}
{"Origin": "Returns a stream of non-directory entries in this jmod file.", "Reference": "Returns a stream of entries in this JMOD file.", "NNUpdater": "Returns a stream of the names of the entries in a JAR file."}
{"Origin": "Test the write path using a {@link FakeWriter} and verifying the expected log statements are written.", "Reference": "Test the write path using a {@link FakeWriter} and verifies the expected log statements are written.", "NNUpdater": "Verifies that {@code cacheEntry} corresponds to the second fake layer in {@link #setUp}."}
{"Origin": "Shifts the focus to the previous element.", "Reference": "Shifts the focus to the previous focus.", "NNUpdater": "Shifts the index right by 1"}
{"Origin": "Apply the rotation transformation of the given {@link Quaterniond} to this matrix.", "Reference": "Apply the rotation transformation of the given {@link Quaterniondc} to this matrix.", "NNUpdater": "Apply the rotation transformation of the given {@link Quaterniond} to this matrix."}
{"Origin": "| If left child is added to queue before right child, it will be in the front of the level.", "Reference": "| If left child is enqueued before right child, it will be in the front in the result.", "NNUpdater": "Gets the index of the specified child in this node's child list."}
{"Origin": "Returns default compiler options.", "Reference": "Creates default compiler options.", "NNUpdater": "Sets options."}
{"Origin": "Removes the subtree rooted at {@code this} node from the tree, giving {@code this} node a {@code null} parent.", "Reference": "Detaches the subtree rooted at {@code this} node from the tree, giving {@code this} node a {@code null} parent.", "NNUpdater": "Removes the subtree rooted at this node from the tree, giving this node an empty parent."}
{"Origin": "If the prefetch is not needed, {@link #playFromUri} can be directly called without this method.", "Reference": "If the prepare is not needed, {@link #playFromUri} can be directly called without this method.", "NNUpdater": "If the prefetch is not needed, {@link #playFromUri} can be directly called without this method."}
{"Origin": "Creates a CaptureRequestConfig.Builder contains shared options.", "Reference": "Creates a CaptureConfig.Builder contains shared options.", "NNUpdater": "Creates a builder for a {@link RequestType#API} options item"}
{"Origin": ": property1 = value1,value2,``a quoted value``,'another quoted value'", "Reference": "property1 = value1,value2,``a quoted value``,'another quoted value'", "NNUpdater": "Visit the {@link BlockQuoteNode}."}
{"Origin": "When multiple tokens, an ordered with slop of 0 is returned.", "Reference": "When multiple tokens, an ordered with slop 0 is returned.", "NNUpdater": "Returns the username."}
{"Origin": "Code snippets for {@link LeaseClientBuilder#buildClient()}.", "Reference": "Code snippets for {@link BlobLeaseClientBuilder#buildClient()}.", "NNUpdater": "WebClient client = WebClient.create(``URL``);"}
{"Origin": "Take the date referenced by given {@literal fieldReference} in the UTC timezone.", "Reference": "Take the date referenced by given {@literal fieldReference}.", "NNUpdater": "Take the date referenced by given {@literal fieldReference} in the UTC timezone."}
{"Origin": "Create a connection creator for permanent connections.", "Reference": "Creates a channel creator for permanent TCP connections.", "NNUpdater": "Create link."}
{"Origin": "Return the defined properties as an unmodifiable Map.", "Reference": "Return the defined properties as an unmodifieable Map.", "NNUpdater": "Return all the translations."}
{"Origin": "{@code CopticEra} is an enum representing the Coptic eras of ERA_BEFORE_AM/ERA_AM.", "Reference": "{@code CopticEra} is an enum representing the Coptic eras of BEFORE_AM/AM.", "NNUpdater": "{@code CopticEra} is an enum representing the Coptic eras of BEFORE_AM/AM."}
{"Origin": "Directions are {@link com.sk89q.worldedit.Vector}s that determine what adjacent points area available.", "Reference": "Directions are {@link BlockVector3}s that determine what adjacent points area available.", "NNUpdater": "Get the pattern factory from which new {@link com.sk89q.worldedit.function.pattern.Pattern}s can be constructed."}
{"Origin": "Parse the given comma-separated string into a list of {@code MediaType} objects.", "Reference": "Parse the comma-separated string into a list of {@code MediaType} objects.", "NNUpdater": "Parameters of a method or function."}
{"Origin": "Tries to registers {@code manager} for the given {@code typeUrl}.", "Reference": "Tries to register {@code manager} for the given {@code typeUrl}.", "NNUpdater": "Creates a TypeMap for the {@code sourceType} and {@code destinationType} using the {@code configuration}."}
{"Origin": "Set the value for some metadata on a collection alias.", "Reference": "Set the value for some properties on a collection alias.", "NNUpdater": "Sets a metadata."}
{"Origin": "User / Group may restore files / folders from Recycle Bin - room permissions required.", "Reference": "User / Group may restore files / folders from recycle bin - room permissions required.", "NNUpdater": "API to check if the recycle bin feature is active recycle bin is activated in xwiki.cfg or in the XWiki"}
{"Origin": "Saves changes from the bound fields to the given bean if all validators (binding and bean level) pass.", "Reference": "Writes changes from the bound fields to the given bean if all validators (binding and bean level) pass.", "NNUpdater": "Saves changes from the bound fields to the given bean if all validators pass."}
{"Origin": "Getter for {@link #allowHeaders}", "Reference": "Getter for {@link #allowedHeaders}", "NNUpdater": "Getter Parameter Value for D-U-N-S"}
{"Origin": "See Immutable Map Static Factory Methods for details.", "Reference": "See Unmodifiable Maps for details.", "NNUpdater": "VerificationTimes supports multiple static factory methods:"}
{"Origin": "If the argument points to a configuration file, the configuration file is loaded to configure the Titan graph", "Reference": "If the argument points to a configuration file, the configuration file is loaded to configure the JanusGraph graph", "NNUpdater": "Writes configuration."}
{"Origin": "Enable http status 301/302 auto-redirect support", "Reference": "Specifies whether http status 301/302 auto-redirect support is enabled", "NNUpdater": "302) to the client using the specified redirect location."}
{"Origin": "Computes the weighted covariance matrix of the given data set.", "Reference": "Computes the weighted result for the covariance matrix of the given data set.", "NNUpdater": "Computes the weighted mean of the given data set."}
{"Origin": "Binds the specified {@link Service} at the specified path pattern.", "Reference": "Binds the specified {@link HttpService} at the specified path pattern.", "NNUpdater": "Binds the specified {@link Service} at the specified {@link Route}."}
{"Origin": "This method must only be used for type references whose sort is {@link #CLASS_EXTENDS CLASS_EXTENDS}.", "Reference": "This method must only be used for type references whose sort is {@link #CLASS_EXTENDS}.", "NNUpdater": "It must have a return type of org.hamcrest.Matcher (or something that extends this)."}
{"Origin": "Aggregate given void publishers into a new {@literal Mono} that will be fulfilled when all of the given {@literal Publishers} have been fulfilled.", "Reference": "Aggregate given publishers into a new {@literal Mono} that will be fulfilled when all of the given {@literal Publishers} have been fulfilled.", "NNUpdater": "Aggregate given void publisher into a new a {@literal Mono} that will be fulfilled when all of the given {@literal"}
{"Origin": "So when we got packet and all is ok - call this method.", "Reference": "So when we got block and all is ok - call this method.", "NNUpdater": "Get head packet."}
{"Origin": "Add a new cell to this table and copy processed content of tc to it.", "Reference": "Add a new cell to this table", "NNUpdater": "Add a command to be processed with no line number association."}
{"Origin": "Useful because the granularity of the clock on some systems is low, so doing a Thread.sleep(10) may not give you a different clock value, for example.", "Reference": "(Also, useful because the granularity of the clock on some systems is low, so doing a Thread.sleep(10) may not give you a different clock value", "NNUpdater": "Get request id"}
{"Origin": "POSTs the experiment to the server and updates it with the returned values.", "Reference": "POSTs the experiment for the existing app to the server and updates it with the returned values.", "NNUpdater": "Get the experiment label based on experiment ID"}
{"Origin": "estimateMinimumDemand reports 0 until request, nonzero after request, and zero again after delivery", "Reference": "estimateMinimumDemand reports 0 until request, nonzero after request", "NNUpdater": "Notification after the request was fully sent."}
{"Origin": "Checks and adjusts the market data names.", "Reference": "Checks and adjusts the parameter metadata.", "NNUpdater": "Gets the source of observable market data."}
{"Origin": "Print out jena version information and exit.", "Reference": "Print out jena version information and exits.", "NNUpdater": "java -version --list-modules => should print version and exit"}
{"Origin": "Obtains an instance from the specified unique name.", "Reference": "Obtains an instance from the specified name.", "NNUpdater": "Obtains the type from a unique name."}
{"Origin": "[A5] If the new lookup class is not within the same package member as the old one, private members will not be accessible.", "Reference": "[A7] If the new lookup class is not within the same package member as the old one, private members will not be accessible.", "NNUpdater": "The proxy class is not accessible to any module."}
{"Origin": "The returned map doesn't contain any entry for component uuid for which there is no entry in the queue (ie.", "Reference": "The returned map doesn't contain any entry for main component uuids for which there is no entry in the queue (ie.", "NNUpdater": "Returns the site path."}
{"Origin": "The sequence dictionary is taken from the read-count file.", "Reference": "The sequence dictionary is taken from the read-count path.", "NNUpdater": "Returns the FontMatrix."}
{"Origin": "Read up to {@code length} of bytes from {@code in} until EOF is detected.", "Reference": "Read exactly {@code length} of bytes from {@code in}.", "NNUpdater": "Transfer bytes from {@code source} to {@code sink} until either {@code byteCount} bytes have been transferred or {@code source} is exhausted."}
{"Origin": "The conversion extracts the {@link ChronoField#EPOCH_DAY epoch-day} field.", "Reference": "The conversion extracts the {@link ChronoField#EPOCH_DAY EPOCH_DAY} field.", "NNUpdater": "{@code PROLEPTIC_MONTH} -"}
{"Origin": "Returns the comment describing the purpose of this cookie, or null if no such comment has been defined.", "Reference": "Returns the comment describing the purpose of this cookie, or {@code null} if no such comment has been defined.", "NNUpdater": "Gets a comment by the specified id."}
{"Origin": "JAX-WS VERSION API is loaded from {0}, But JAX-WS runtime requires JAX-WS VERSION API.", "Reference": "JAX-WS VERSION API is loaded from {0}, But JAX-WS runtime requires JAX-WS VERSION or newer API.", "NNUpdater": "Add custom JAX-RS provider to the list of providers"}
{"Origin": "Gets the avatar of a specific MetaContact in the form of an", "Reference": "Gets the avatar of a specific UIContact in the form of an", "NNUpdater": "Returns the ui contacts."}
{"Origin": "Get hex string for the supplied big integer: ``0x`` where hex string is outputted in groups of exactly four characters sub-divided by spaces.", "Reference": "Get hex string for the supplied big integer: ``0x`` where hex string is output in groups of exactly four characters sub-divided by spaces.", "NNUpdater": "Test method for the string-to-hex() function."}
{"Origin": "Creates a negotiator used for ALTS server.", "Reference": "Creates a protocol negotiator for ALTS on the server side.", "NNUpdater": "Set the XMPP connection associated."}
{"Origin": "Throws an exception if input must be valid, or returns a question mark as replacement.", "Reference": "Throws an exception if input must be valid, or returns a replacement character as replacement.", "NNUpdater": "Returns a unicode replacement character for invalid values."}
{"Origin": "Mark the DeterministicKeys as used, if they match the pubkeyHash", "Reference": "Mark the DeterministicKeys as used, if they match the pubKeyHash", "NNUpdater": "Find the region and mark all grids as '0'."}
{"Origin": "Sets the group name used as an endpoint group password for authentication on the target endpoint.", "Reference": "Sets the cluster name used as an endpoint group password for authentication on the target endpoint.", "NNUpdater": "Sets the group address."}
{"Origin": "Builds the index from the segment bytes.", "Reference": "Returns the segment manager.", "NNUpdater": "Drops the specified index."}
{"Origin": "Computes the median for each pixel across all bands in the {@link Planar} image.", "Reference": "Computes the median for each pixel across selected bands in the {@link Planar} image.", "NNUpdater": "Computes the average for each pixel across all bands in the {@link Planar} image."}
{"Origin": "The bytecode is inserted just before every return insturction.", "Reference": "The bytecode is inserted just before every return instruction.", "NNUpdater": "class bytecode is examined every time this method is called."}
{"Origin": "get production date (available on some multisensors)", "Reference": "get hardware revision (available on some multisensors)", "NNUpdater": "Get Datum."}
{"Origin": "Returns the value in the user aligned with the integer value in the device space, applying the rounding and parity modes.", "Reference": "Returns the value in the user space aligned with the integer value in the device space, applying the rounding and parity modes.", "NNUpdater": "Returns the Soy integer value."}
{"Origin": "Retreives the Refined Soundex code for a given String object.", "Reference": "Retrieves the Refined Soundex code for a given String object.", "NNUpdater": "Return the string associated with the specified reply code."}
{"Origin": "Requests that the player prefetch a media item with the specific search query for playback.", "Reference": "Requests that the player prepare a media item with the specific search query for playback.", "NNUpdater": "Requests that the player prefetch a media item with the specific {@link Uri} for playback."}
{"Origin": "This method may return null if the field does not exist.", "Reference": "This method may return null if the field does not exist or if it has no terms.", "NNUpdater": "This will return null if the field or term does not exist."}
{"Origin": "Checks if the expression bound to this variable has the given flag.", "Reference": "Indicates if the expression bound to this variable has one of the specified compiler properties.", "NNUpdater": "Sequence type of values bound to this variable."}
{"Origin": "Shows the message if no search params were selected.", "Reference": "Shows the first available tab.", "NNUpdater": "Returns the parameters."}
{"Origin": "Otherwise the patches for the module are scanned (to find any new concealed packages) and a new module reference is returned.", "Reference": "Otherwise the patches for the module are scanned (to find any new packages) and a new module reference is returned.", "NNUpdater": "Returns the set of concealed packages from ModuleDescriptor, if present or compute it if the module does not have ConcealedPackages attribute"}
{"Origin": "This allows additional information to be attached to the trade.", "Reference": "This allows additional information to be attached.", "NNUpdater": "This allows an attribute about a security to be obtained if available."}
{"Origin": "Return the array of s that can appear in the serialized form.", "Reference": "Returns the taglets that can appear in the serialized form.", "NNUpdater": "Returns a new InputStream representing the serialized form of this frame."}
{"Origin": "Returns true if this result is an underflow condition.", "Reference": "Tells whether or not this object describes an underflow condition.", "NNUpdater": "Throws a {@link H.Status#FORBIDDEN} result if test condition is {@code true}"}
{"Origin": "Return the quality value, as indicated by a {@code q} parameter, if any.", "Reference": "Return the quality factor, as indicated by a {@code q} parameter, if any.", "NNUpdater": "If no quality source parameter is present in the media type, {@link Quality#DEFAULT default quality} is returned."}
{"Origin": "It can only be used to create method handles to public members in public classes in packages that are exported unconditionally.", "Reference": "It can only be used to create method handles to public members of public classes in packages that are exported unconditionally.", "NNUpdater": "If publicOnly is true, filter by 'visibleToPublicUsers' flag"}
{"Origin": "If possible the supplier should be cached in the AST in order to avoid the repeated lookup of the parent executable or root node.", "Reference": "If possible the reference should be cached in the AST in order to avoid the repeated lookup of the parent executable or root node.", "NNUpdater": "The location is specified as an instance of a {@link Node} in the AST."}
{"Origin": "You definitely get them more than 50% off sometimes.", "Reference": "You definitely get them more than 30% off sometimes.", "NNUpdater": "You definitely get them more than 30% off sometimes."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Looked at this post: URL", "Reference": "credit: URL", "NNUpdater": "Credit: URL i.e."}
{"Origin": "Main method to invoke this demo about how to analyze sentiment of a text input.", "Reference": "Main method to invoke this demo about how to analyze the sentiment of an input text.", "NNUpdater": "Add the sentiment."}
{"Origin": "Returns the value of cmakeAnalyzerEnabled.", "Reference": "Get the value of cmakeAnalyzerEnabled.", "NNUpdater": "Returns the {@link Analyzer} identified by the specified field name."}
{"Origin": "Gets the type of the exception that caused the failure, not present if it wasn't caused by an exception.", "Reference": "Gets the type of the throwable that caused the failure, not present if it wasn't caused by a throwable.", "NNUpdater": "Gets the rule that caused the exception."}
{"Origin": "registerHarvestable_Crop | An ItemStack of a block, with a damage value indicating the meta value to harvest at.", "Reference": "registerHarvestable_Crop | An @Nonnull ItemStack of a block, with a damage value indicating the meta value to harvest at.", "NNUpdater": "Creates a new {@link HarvestBlockEvent.SourceBlock}."}
{"Origin": "The list can be null.", "Reference": "The list is allowed to be null.", "NNUpdater": "The elements can't be null."}
{"Origin": "Atomically set the hi integer value without changing the lo value.", "Reference": "Atomically sets the hi value without changing the lo value.", "NNUpdater": "Scales each column of a matrix to range [lo, hi]."}
{"Origin": "Read owner for a given version, with CL=QUORUM and Serial CL=SERIAL to commit any remaining uncommitted Paxos state before proceeding with the read.", "Reference": "Read owner for a given version, with CL=SERIAL to commit any remaining uncommitted Paxos state before proceeding with the read.", "NNUpdater": "Gets a SerialMessage with the VERSION_GET command"}
{"Origin": "For example ``Sep``.", "Reference": "For example ``September`` in English.", "NNUpdater": "Examples:"}
{"Origin": "Turns this ReactiveSeq into a HotStream, a connectable & pausable Stream, being executed on a thread on the supplied executor, that is producing data.", "Reference": "Turns this ReactiveSeq into a Connectable, a connectable & pausable Stream, being executed on a thread on the supplied executor, that is producing data.", "NNUpdater": "Similar to @see {@link ReactiveSeq#futureOperations(Executor)}, but returns Future"}
{"Origin": "Set Warehouse.", "Reference": "Set Lager.", "NNUpdater": "Set Lager."}
{"Origin": "Returns the PatchOperation instance for the replace operation, based on the operation path.", "Reference": "Returns the patch instance for the replace operation (based on the operation path).", "NNUpdater": "The Get Create Operation Status operation returns the status of the specified create operation."}
{"Origin": "Updates a ChallengeResponse object according to given request and response and compute a new secret according to the response sent by the server.", "Reference": "Updates a {@link ChallengeResponse} object according to given request and response and compute a new secret according to the response sent by the server.", "NNUpdater": "By default, it returns the given password."}
{"Origin": "Get Balancing.", "Reference": "Get Saldierung.", "NNUpdater": "Balancing."}
{"Origin": "Bind a named Locale-valued parameter.", "Reference": "Bind multiple values to a named query parameter.", "NNUpdater": "Binds a new query parameter."}
{"Origin": "Returns the userId of the session.", "Reference": "Returns the session attributes.", "NNUpdater": "Returns the context of this session."}
{"Origin": "Compares this {@code LocalDate} to another date.", "Reference": "Compares this date to another date.", "NNUpdater": "Compares this date-time to another date-time."}
{"Origin": "Returns the name of the first check, or {@code ````}.", "Reference": "Returns the name of the first check, or {@code null}.", "NNUpdater": "Returns the values for the specified name."}
{"Origin": "The {@link RsaKeyCreateOptions#getExpires() expires} and {@link", "Reference": "The {@link CreateRsaKeyOptions#getExpiresOn() expires} and {@link", "NNUpdater": "Set the {@link LocalDateTime expires} time value."}
{"Origin": "Adds units to {@code insertionOrderUnits}.", "Reference": "Subtract {@code units} from {@code indexedRemainingUnits}.", "NNUpdater": "Most units are related to other units."}
{"Origin": "Group: reset", "Reference": "Group: producer", "NNUpdater": "Guide."}
{"Origin": "Get Verarbeitet.", "Reference": "Get Ordered.", "NNUpdater": "Get Processed."}
{"Origin": "Loop over the {@link KeyProperties key} and call {@link KeyClient#getKey(KeyProperties key properties)}.", "Reference": "Loop over the {@link KeyProperties key} and call {@link KeyClient#getKey(String, String)}.", "NNUpdater": "Loop over the {@link KeyProperties key} and call {@link KeyClient#getKey(KeyProperties key properties)}."}
{"Origin": "This merges the two objects - {@code this} and the specified time - to form an instance of {@code ZonedDateTime}.", "Reference": "This merges the two objects - {@code this} and the specified time - to form an instance of {@code OffsetDateTime}.", "NNUpdater": "Checks if this date-time is equal to another date-time."}
{"Origin": "If the insertion point equal to the current size, it means the array can be extended.", "Reference": "If the insertion point equal to the current size, it means the number is the largest.", "NNUpdater": "Array - the array size"}
{"Origin": "Returns a module supplier.", "Reference": "Returns a new module set.", "NNUpdater": "To change implementation, please use the {@link #setSupplier(java.util.function.Function) setSupplier} method."}
{"Origin": "Fetches a preview of the modified text, and shows (fades in) the Preview fragment, which includes edit summary tags.", "Reference": "Fetches preview html from the modified wikitext text, and shows (fades in) the Preview fragment, which includes edit summary tags.", "NNUpdater": "Sets the playback."}
{"Origin": "Closes the provisioning driver.", "Reference": "Closes the provisioning and storage drivers.", "NNUpdater": "Get the vmId value."}
{"Origin": "Creates new {@link AggregationExpression} that returns the millisecond portion of a date as an integer between 0 and 999 in the factory timezone (default UTC).", "Reference": "Creates new {@link AggregationExpression} that returns the millisecond portion of a date as an integer between 0 and 999.", "NNUpdater": "Creates new {@link AggregationExpression} that returns the millisecond portion of a date as an integer between 0 and 999 in the factory timezone (default UTC)."}
{"Origin": "Open a webview above the current activity.", "Reference": "Open a web view above the current activity.", "NNUpdater": "Set Kostenstelle."}
{"Origin": "Create space for a new item and returns the rank for that item.", "Reference": "Create space for a new item at the end, and returns the rank for that item.", "NNUpdater": "Adds new item after the given item."}
{"Origin": "or throws a {@link com.liferay.mail.NoSuchFolderException} if it could not be found.", "Reference": "or throws a {@link NoSuchFolderException} if it could not be found.", "NNUpdater": "Operation fails."}
{"Origin": "Create parameters necessary for creating a reusable Alipay source.", "Reference": "Create reusable Alipay Source params.", "NNUpdater": "Resolve a source file, creating its package structure if necessary."}
{"Origin": "When the area is deleted from the device, it is important first to unregister all geodatabases that are used in the map so the service doesn't have any stray geodatabases registered.", "Reference": "Before the area is deleted from the device, it's important to first unregister all geodatabases that are used in the map so the service doesn't have any stray geodatabases registered.", "NNUpdater": "Unregisters the service."}
{"Origin": "If {@link #IGNORE_OVERFLOW} is true and one of the bounds is outside the Byte range, then that bound is set to the bound of the Byte range.", "Reference": "If {@link #ignoreOverflow} is true and one of the bounds is outside the Byte range, then that bound is set to the bound of the Byte range.", "NNUpdater": "Gets the period range, which the field is bound by."}
{"Origin": "Updates the summary statistics but does not store the given LogRecord.", "Reference": "Updates the summary statistics only if the expected record matches the last record.", "NNUpdater": "Log an exception at the 'severe' level."}
{"Origin": "key is the user UUID in string form", "Reference": "key is the user UUID in string form + class name of key", "NNUpdater": "Returns the value of this Identifier in UUID format."}
{"Origin": "Loads the SchemaCrawler configuration, and override configuration, from properties files.", "Reference": "Loads the SchemaCrawler configuration from properties file.", "NNUpdater": "Load properties from a configuration file in the file system."}
{"Origin": "Decide whether to examine all the tables to dump.", "Reference": "Decide whether to dump external tables data.", "NNUpdater": "Check the given tables."}
{"Origin": "The conversion extracts the {@link ChronoField#NANO_OF_DAY nano-of-day} field.", "Reference": "The conversion extracts the {@link ChronoField#NANO_OF_DAY NANO_OF_DAY} field.", "NNUpdater": "This is {@link System#nanoTime()}."}
{"Origin": "Returns the additional filter query part.", "Reference": "Gets the filter query.", "NNUpdater": "Gets the query criteria."}
{"Origin": "Calls {@link #matches(String, String, Map) matches(pattern, str, null)}", "Reference": "Calls {@link #matches(String, String, Map) matches(pattern, str, null, boolean)}", "NNUpdater": "Not compatible with {@link #ifETagMatches(String)} or {@link #ifUnmodifiedSince(Date)}"}
{"Origin": "Removes all of the service contracts from ES.", "Reference": "Removes all of the api contracts from ES.", "NNUpdater": "SubItems are not processed by themselves but only as parts of the contracts add with {@link #setContract(Contract)}"}
{"Origin": "Get the metrics context for the program, the tags are constructed with the program run id and the profile id", "Reference": "Emit the metrics context for the program, the tags are constructed with the program run id and the profile id", "NNUpdater": "Initialize the upgrade framework, if necessary."}
{"Origin": "Retrieves the requested configration resources", "Reference": "Retrieves the requested configuration resources", "NNUpdater": "Returns the requested function."}
{"Origin": "Tests the engine starts up, executes 1 trade cycle successfully, but then receives unexpected Exception from", "Reference": "Tests the engine starts up, executes 1 trade cycle successfully, but then receives unexpected", "NNUpdater": "If an UnexpectedExceptionInformation is not found for the status code the default UnexpectedExceptionInformation will be returned."}
{"Origin": "Return the Java constructor corresponding to the Kotlin primary constructor if any.", "Reference": "Retrieve the Java constructor corresponding to the Kotlin primary constructor, if any.", "NNUpdater": "Returns the Restlet constructor."}
{"Origin": "Also checks that required {@link Role} are satisfied", "Reference": "Also checks that required Role are satisfied", "NNUpdater": "{@link GL32C#GL_CONDITION_SATISFIED CONDITION_SATISFIED} indicates that sync was signaled before the timeout expired."}
{"Origin": "Returns all the sync d l objects where companyId = ?", "Reference": "Returns all the sync d l objects where repositoryId = ?", "NNUpdater": "Returns the feed where userId = ?"}
{"Origin": "Has the given leadershipTermId already been appended?", "Reference": "Has the given leadershipTermId unknown to the log?", "NNUpdater": "The epoch when the leadership was assumed."}
{"Origin": "Returns a new {@link Key.Builder}.", "Reference": "Returns a new {@link UnloadedToolchainContextKey.Builder}.", "NNUpdater": "Returns a new {@link SearchBuilder} using the specified {@link ConditionBuilder} as filter."}
{"Origin": "Returns the {@link ProgramId} of the program who emit this message.", "Reference": "Returns the {@link EntityId} of the entity who emit this message.", "NNUpdater": "Initialize the upgrade framework, if necessary."}
{"Origin": "This method must only be used for type references whose sort is {@link #EXCEPTION_PARAMETER EXCEPTION_PARAMETER} .", "Reference": "This method must only be used for type references whose sort is {@link #EXCEPTION_PARAMETER} .", "NNUpdater": "Find an {@code @ExceptionHandler} method for the given exception."}
{"Origin": "Creates a {@link Behavior} that uses the given {@link WicketFunction function} to do something with a component's attribute.", "Reference": "Creates a {@link Behavior} that uses the given {@link WicketFunction function} to do something with a component's attributeName.", "NNUpdater": "Creates a {@link ParDo} {@link PTransform} that will invoke the given {@link DoFn} function."}
{"Origin": "Returns the identifier of a transaction.", "Reference": "Returns the identifier of the command.", "NNUpdater": "Returns the id of this entry."}
{"Origin": "Deletes the specified variable from the configuration.", "Reference": "Deletes the specified variable from the CONFIGURATION.", "NNUpdater": "Returns the value of the specified variable."}
{"Origin": "Register sub-objects such as caches", "Reference": "Register sub-objects such as caches and our own metrics", "NNUpdater": "Update all caching nodes"}
{"Origin": "Tries to move the bookmark to the specified destination.", "Reference": "Attempts to rename the bookmark to the specified destination.", "NNUpdater": "Adds a bookmark for the given value."}
{"Origin": "Updates settings for building clients.", "Reference": "Updates settings for building a client.", "NNUpdater": "Updates user profiles."}
{"Origin": "EventListener callback - unused for now - how many devices support events?", "Reference": "EventListener callback - unused for now - supported in miniupnpd as of VERSION", "NNUpdater": "Add an event listener for events with type E."}
{"Origin": "By default, {@link #useAnyPlanner()} is enabled.", "Reference": "By default, {@link #useOldPlanner()} is enabled.", "NNUpdater": "Operation fails."}
{"Origin": "Adds an entry to the layer with the given permissions.", "Reference": "Adds an entry to the layer with the given permissions and file modification time.", "NNUpdater": "Adds an element to the array."}
{"Origin": "Returns a text description of this result.", "Reference": "Returns a string describing this coder result.", "NNUpdater": "Set Beschreibung."}
{"Origin": "Returns number of arguments for the specified type.", "Reference": "Returns maximal number of arguments for the specified type.", "NNUpdater": "Get the type parameters for the class."}
{"Origin": "Removes a WebSocket from the members list.", "Reference": "Removes a WebSocket from the clients list.", "NNUpdater": "Removes calculated and default members from an array."}
{"Origin": "Returns the ISO code, except when the alias ``loc`` is used.", "Reference": "Returns the code, except when the alias ``{@code loc}`` is used.", "NNUpdater": "Returns path alias."}
{"Origin": "Replaces existing tags of the specified {@link NamespacedEntityId} with a new set of tags.", "Reference": "Replaces existing tags of the specified {@link MetadataEntity} with a new set of tags.", "NNUpdater": "Replaces existing tags of the specified {@link NamespacedEntityId} with a new set of tags."}
{"Origin": "Get sharding encryptor.", "Reference": "Find sharding encryptor.", "NNUpdater": "Is has sharding query assisted encryptor or not."}
{"Origin": "Returns an unmodifiable Map of metadata for a given alias.", "Reference": "Returns an unmodifiable Map of properties for a given alias.", "NNUpdater": "Obtain an unmodifiable map of input matrix/frame metadata."}
{"Origin": "Sets the storage serializer.", "Reference": "Sets the storage namespace.", "NNUpdater": "Sets the log segment size."}
{"Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}", "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveFromRangeEnd }{@code >}}", "NNUpdater": "Create an instance of {@link JAXBElement }{@code <}{@link CTStrokeChild }{@code >}}"}
{"Origin": "Get the sorted iterable of all {@link RankedProvider providers} (custom and default) registered for the given service provider contract in the underlying {@link ServiceLocator HK2 service locator} container.", "Reference": "Get the sorted iterable of all {@link RankedProvider providers} (custom and default) registered for the given service provider contract in the underlying {@link InstanceManager instance manager} container.", "NNUpdater": "Get the iterable of all providers (custom and default) registered for the given service provider contract in the underlying {@link ServiceLocator HK2 service locator} container."}
{"Origin": "If the variable was set, a configuration {@link ConfigurationEvent event} will be passed to all registered listeners.", "Reference": "If the variable was set, a CONFIGURATION {@link ConfigurationEvent event} will be passed to all registered listeners.", "NNUpdater": "Is responsible for calling {@link EventSource#onEvent(InboundEvent)} and all registered {@link EventListener} instances."}
{"Origin": "Gets the list of site selector options.", "Reference": "Returns the site selector options for the sitemap.", "NNUpdater": "Gets an options bundle from a collection of options."}
{"Origin": "Shutdown all the channel creators out there.", "Reference": "Shuts down all the channel creators.", "NNUpdater": "Shuts down the protocol."}
{"Origin": "User / Group may permanently remove files / folders from the Recycle Bin.", "Reference": "User / Group may permanently remove files / folders from the recycle bin.", "NNUpdater": "API to check if the recycle bin feature is active recycle bin is activated in xwiki.cfg or in the XWiki"}
{"Origin": "For EL need to unquote everything but no need to convert anything.", "Reference": "Once inside EL, no need to unquote or convert anything.", "NNUpdater": "Get Value Need to convert to String"}
{"Origin": "{@codesnippet com.azure.keyvault.keys.keyclient.getKeyWithResponse#KeyProperties-Context}", "Reference": "{@codesnippet com.azure.keyvault.keys.keyclient.deleteKey#string}", "NNUpdater": "{@codesnippet com.azure.keyvault.keys.keyclient.getKeyWithResponse#KeyProperties-Context}"}
{"Origin": "search key match RegExps value", "Reference": "search key match RegExp values", "NNUpdater": "Returns the number of arguments."}
{"Origin": "Strips aux and mark edges when we are splitting into a clause.", "Reference": "Stips aux and mark edges when we are splitting into a clause.", "NNUpdater": "Gets the map containing the aux data for this stack"}
{"Origin": "The {@link RequestScope.Instance scope instance} is NOT released by the method (this must be done explicitly).", "Reference": "The {@link RequestContext scope context} is NOT released by the method (this must be done explicitly).", "NNUpdater": "Maps a {@link Scope} instance to a given annotation."}
{"Origin": "Access Control Using AWS Identity and Access Management (IAM) .", "Reference": "For more information, see Access Control Using AWS Identity and Access Management (IAM).", "NNUpdater": "Access Management (IAM) user account."}
{"Origin": "The input file must be a list of whitespace-separated verb-lemma-POS triples, one verb form per line.", "Reference": "The input file must be a list of tab-separated verb-POS pairs, one verb per line.", "NNUpdater": "Get method's http verbs."}
{"Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}", "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveToRangeEnd }{@code >}}", "NNUpdater": "Create an instance of {@link JAXBElement }{@code <}{@link CTStrokeChild }{@code >}}"}
{"Origin": "Release any resources held by this SyslogAppender.", "Reference": "Release resources held by this SyslogAppender, including the datagram socket.", "NNUpdater": "Releases resources associated with this {@code Inflater}."}
{"Origin": "Reset starting address.", "Reference": "Reset head segment.", "NNUpdater": "Return the current starting address."}
{"Origin": "Returns an existing {@link SSHSession} for the given host.", "Reference": "Returns an existing {@link SSHSession} for the given run.", "NNUpdater": "Open a new connection by reading parameters from the given URI."}
{"Origin": "Returns an {@code application.wadl} description with all RESTXQ endpoints.", "Reference": "Returns an {@code application.wadl} description with all RESTXQ end-points.", "NNUpdater": "Returns a WADL description of the current resource."}
{"Origin": "The {@link RsaKeyCreateOptions#getKeySize() keySize} can be optionally specified.", "Reference": "The {@link CreateRsaKeyOptions#getKeySize() keySize} can be optionally specified.", "NNUpdater": "The {@link RsaKeyCreateOptions#getKeySize() keySize} can be optionally specified."}
{"Origin": "Returns a boolean value indicating whether the segment is full.", "Reference": "Returns a boolean indicating whether the segment is full.", "NNUpdater": "Returns a boolean value indicating whether the given index was released from the segment."}
{"Origin": "Sets the enabled.", "Reference": "Set the enabled.", "NNUpdater": "Sets the popup specification."}
{"Origin": "Set the valueType.", "Reference": "Set the type.", "NNUpdater": "Set the geoMapping value."}
{"Origin": "Convert to primitive types, returning default value if text is null.", "Reference": "Convert to character, returning default value if text is inconvertible.", "NNUpdater": "Convert all types, both reference and primitive, to {@code Object}."}
{"Origin": "Returns a stream of modules upon which the given module `requires public`", "Reference": "Returns a stream of modules upon which the given module `requires transitive`", "NNUpdater": "Returns the set of modules that this module reads."}
{"Origin": "Static resources are resolved from classpath.", "Reference": "Static resources are resolved from:", "NNUpdater": "Add a URL for a location (usually a JAR) that contains static resources in a META-INF/resources directory that should be included in the static resources for this context."}
{"Origin": "Get type of the Trigger.", "Reference": "Get the resource value.", "NNUpdater": "The name of the metric."}
{"Origin": "Returns the string tag if set, or {@link Constants#NULL_STRING_TAG} instead.", "Reference": "Returns the string tag if set, or {@link #NULL_STRING_TAG} instead.", "NNUpdater": "*** tag *****"}
{"Origin": "The {@link RsaKeyCreateOptions} is required.", "Reference": "The {@link CreateRsaKeyOptions} is required.", "NNUpdater": "The {@link RsaKeyCreateOptions#getKeySize() keySize} can be optionally specified."}
{"Origin": "Parse a String generated by {@link #format()}", "Reference": "Parse a String generated by {@link #format()} to extract the simple details of the main type.", "NNUpdater": "Tests the {@link QueryContext#parseLibrary(String, String, StaticContext)} method."}
{"Origin": "Defaults to false.", "Reference": "Defaults to true.", "NNUpdater": "Useful for debugging."}
{"Origin": "Test of npara method, of class LogNormalDistribution.", "Reference": "Test of length method, of class LogNormalDistribution.", "NNUpdater": "This method returns the index of the maximum probability as provided by {@link #classDistribution(O) classDistribution(M)}."}
{"Origin": "{@codesnippet com.azure.storage.blob.specialized.BlobClientBase.setHTTPHeaders#BlobHTTPHeaders}", "Reference": "{@codesnippet com.azure.storage.blob.specialized.BlobClientBase.setHTTPHeaders#BlobHttpHeaders}", "NNUpdater": "{@codesnippet com.azure.storage.blob.specialized.BlobClientBase.Builder.buildClient}"}
{"Origin": "Gets a list of suggestions of input to this parser.", "Reference": "Gets a stream of suggestions of input to this parser.", "NNUpdater": "Gets the instances for the parsers."}
{"Origin": "Create a {@link PooledConnectionImpl.PStmtKey} for the given arguments.", "Reference": "Creates a {@link PooledConnectionImpl.PStmtKey} for the given arguments.", "NNUpdater": "Return the pooled connection to its pool."}
{"Origin": "This operation returns information about a job you previously initiated, including the job initiation date, the user who initiated the job, the job status code/message and the Amazon SNS topic to notify after Amazon Glacier completes the job.", "Reference": "This operation returns information about a job you previously initiated, including the job initiation date, the user who initiated the job, the job status code/message and the Amazon SNS topic to notify after Amazon", "NNUpdater": "Gets or creates job instance."}
{"Origin": "Fire {@link IStorageSegment} changed when an {@link I_M_HU_Attribute} is changed.", "Reference": "Fire {@link IShipmentScheduleSegment} changed when an {@link I_M_HU_Attribute} is changed.", "NNUpdater": "Operation fails."}
{"Origin": "Returning null implies no access control", "Reference": "Returning null implies no authorization control", "NNUpdater": "PermissionRequired annotation, false otherwise."}
{"Origin": "get the flow start sla from the dag node config.", "Reference": "get the job start sla from the dag node config.", "NNUpdater": "This will mark this DAG as a child DAG, the dependencies of nodes in this DAG will be merged with (copied to) the parent DAG"}
{"Origin": "Make sure to keep {@link #database} fields and map synchronized.", "Reference": "Make sure to keep {@link #wikiId} fields and map synchronized.", "NNUpdater": "Make sure to use it with {@link #underlyingBytes()}."}
{"Origin": "Gets class field information for step 4 of the alogrithm.", "Reference": "Gets class field information for step 4 of the algorithm.", "NNUpdater": "Gets class field information for step 4 of the algorithm."}
{"Origin": "Checks the account and then searches for the contact.", "Reference": "Checks the account and then searches for the contact or chat room.", "NNUpdater": "Searches defaults, then searches the log manager if available or the system properties by the prefix property, and then by the key itself."}
{"Origin": "Getter for {@link #allowOnlyRequestedMethod}", "Reference": "Getter for {@link #allowAllRequestedHeaders}", "NNUpdater": "Getter Parameter Value for D-U-N-S"}
{"Origin": "Return the current starting address.", "Reference": "Return the current head segment.", "NNUpdater": "Return the current starting address."}
{"Origin": "This builder should only be used in some specific scenarios like {@code flow-ref} where a new Flow executing the same {@link BaseEvent} needs a new context.", "Reference": "This builder should only be used in some specific scenarios like {@code flow-ref} where a new Flow executing the same {@link CoreEvent} needs a new context.", "NNUpdater": "Deletes a program specified by {@code FlowIdentifier}."}
{"Origin": "Creates a {@link SSHSession} to the given host with extra sets of ssh configurations.", "Reference": "Creates a {@link SSHSession} to the given host.", "NNUpdater": "Set the linuxUserConfiguration value."}
{"Origin": "For more information about managing snapshot copy grants, go to", "Reference": "For more information about managing snapshot copy grants, go to Amazon Redshift Database Encryption in the Amazon Redshift", "NNUpdater": "For more information, see Managing User Permissions."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Returns the steps of this which are instances", "Reference": "Returns the step descendants of this which are instances", "NNUpdater": "Method getFlowSteps returns the flowSteps of this Flow object."}
{"Origin": "If the variable was set, a configuration {@link ConfigurationEvent event} will be passed to all registered listeners.", "Reference": "If the variable was set, a CONFIGURATION {@link ConfigurationEvent event} will be passed to all registered listeners.", "NNUpdater": "Is responsible for calling {@link EventSource#onEvent(InboundEvent)} and all registered {@link EventListener} instances."}
{"Origin": "Sets the value of the cycle property.", "Reference": "Sets the value of the cycleOption property.", "NNUpdater": "Sets the value of the bigint property."}
{"Origin": "The entries in the file are assumed to be the fully-qualified binary names of provider classes.", "Reference": "The entries in the file are assumed to be the fully-qualified class names of provider classes.", "NNUpdater": "Get the fully-qualified name of the enum const value, i.e."}
{"Origin": "Total runtime size is 22344 bytes", "Reference": "Total runtime size is 22752 bytes", "NNUpdater": "Total runtime size is 13952 bytes"}
{"Origin": "Adds a check that the given number is positive.", "Reference": "Adds a check that the given number is not null.", "NNUpdater": "Returns the next positive numeric argument."}
{"Origin": "Begin insert after the current line by creating a new blank line below the current line", "Reference": "Begin insert after the current line by creating a new blank line below the current line for all carets", "NNUpdater": "Read the current line builder (start line or header line)."}
{"Origin": "Lookup for multi-operand (InvokeDynamic) entries.", "Reference": "Lookup for multi-operand (InvokeDynamic, Dynamic) entries.", "NNUpdater": "The wrong return value is ``false``."}
{"Origin": "Close pool(s) being maintained by this datasource.", "Reference": "Closes pool(s) maintained by this data source.", "NNUpdater": "Set the dataSource."}
{"Origin": "Sets the value of the 'ts' field.", "Reference": "Sets the value of the 'dec' field.", "NNUpdater": "Sets the value of the 'paramName' field."}
{"Origin": "Create new note.", "Reference": "Creating new note.", "NNUpdater": "Creates and returns a new vulnerability Note"}
{"Origin": "Sort the given {@link MutablePointsReader} based on its packed value then doc ID.", "Reference": "Sort the given {@link MutablePointValues} based on its packed value then doc ID.", "NNUpdater": "Loads a {@link IndexDocValues} instance depending on the given {@link ValueType}."}
{"Origin": "Returns whether this property is a standard member property.", "Reference": "Returns whether this property is a standard cell property.", "NNUpdater": "The meta-property for the {@code key} property."}
{"Origin": "Test method for {@link org.infinispan.spring.provider.SpringRemoteCacheManager#stop()}.", "Reference": "Test method for {@link org.infinispan.spring.remote.provider.SpringRemoteCacheManager#stop()}.", "NNUpdater": "Operation fails."}
{"Origin": "Maps all index descriptors according to {@link #lockedIndex(IndexDescriptor)}.", "Reference": "Maps all index descriptors according to {@link #lockIndex(IndexDescriptor)}.", "NNUpdater": "E.g setZIndex() becomes ``zIndex``."}
{"Origin": "That requires to load all localizations, i.e., all the files making up the bundle.", "Reference": "Initialization requires to load all localizations for available locales, i.e., all the files making up the bundle.", "NNUpdater": "The returned value can be used in {@link #updatePlayer(Bundle)}."}
{"Origin": "Convert to object types, returning null if text is null.", "Reference": "Convert to object types, returning null if text is null or empty.", "NNUpdater": "IsNullOrEmpty {is null or empty}."}
{"Origin": "Sets the minimum session timeout.", "Reference": "Sets the session timeout.", "NNUpdater": "Sets the minimum session timeout."}
{"Origin": "Whitelisted props can be defined only if ignored properties are not defined.", "Reference": "Included props can be defined only if ignored properties are not defined.", "NNUpdater": "Extract props of given profiles."}
{"Origin": "Returns an adjusted time based on this time.", "Reference": "Returns an adjusted copy of this time.", "NNUpdater": "This returns a {@code ZonedDateTime}, based on this one, with the date-time adjusted."}
{"Origin": "Setter for exception's variable name format.", "Reference": "Setter for exception's variable name pattern.", "NNUpdater": "Setter for 'todo' comment pattern."}
{"Origin": "Floating point must be non-equal within the default Encog tolerance.", "Reference": "Floating point must be non-equal within the default", "NNUpdater": "Ignores tolerance."}
{"Origin": "Converts a string[] into a comma-delimited String.", "Reference": "Converts a string[] or multiple strings into one comma-delimited String.", "NNUpdater": "String, SASProtocol, IpRange, String, String, String, String, String)}"}
{"Origin": "Provide a {@link Write} {@link PTransform} to write data to a Cassandra database.", "Reference": "Provide a {@link Mutate} {@link PTransform} to write data to a Cassandra database.", "NNUpdater": "Returns a new {@link Write} that will write to the current {@link Sink} using the specified {@link PTransform} to compute the number of shards."}
{"Origin": "In case of failure the {@link Flux} will error.", "Reference": "In case of failure the {@link CosmosContinuablePagedFlux} will error.", "NNUpdater": "Get the id of the {@link CosmosContainer}"}
{"Origin": "For example, the period in decades between two year can be calculated using {@code startYear.periodUntil(endYear, DECADES)}.", "Reference": "For example, the period in decades between two year can be calculated using {@code startYear.until(endYear, DECADES)}.", "NNUpdater": "For example, the period in decades between two year can be calculated using {@code startYear.until(endYear, DECADES)}."}
{"Origin": "Subtracts a value that has been seen n times from the observed values", "Reference": "Subtracts a weighted value from the observed values", "NNUpdater": "Sets the rate to be computed."}
{"Origin": "Encode a String using the {@link #PATHSAFE} set of characters.", "Reference": "Encode a String using the {@link #PATH_SPECIAL} set of characters.", "NNUpdater": "Encode a String using the {@link #URIC} set of characters."}
{"Origin": "If this happens, a configuration {@link ConfigurationEvent event} will be sent to all registered listeners.", "Reference": "If this happens, a CONFIGURATION {@link ConfigurationEvent event} will be sent to all registered listeners.", "NNUpdater": "Returns Event Processing Configuration defined in this Configuration."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Sets the given element draggable and adds class name.", "Reference": "Makes the given element draggable and adds class name.", "NNUpdater": "Creates a list item."}
{"Origin": "Constructs a {@link SharedKeyCredential} used to authorize requests sent to the service.", "Reference": "Constructs a {@link StorageSharedKeyCredential} used to authorize requests sent to the service.", "NNUpdater": "Sets the SAS token used to authorize requests sent to the service"}
{"Origin": "If not found, {@link #currentToken} is set to .", "Reference": "If not found, {@link #currentToken} is set to {@code null}.", "NNUpdater": "Returns the id offset for the specified token, or {@code 0} if the token is not found."}
{"Origin": "This is useful for adding all of your nodes to the graph before adding edges.", "Reference": "This is useful for adding vertices to a graph before adding edges.", "NNUpdater": "Addi NEW block to the queue"}
{"Origin": "and transfer all those namespace declarations to the current document", "Reference": "and transfer all those namespace declarations to the current document root.", "NNUpdater": "C++: Add a nested namespace name to the current namespace."}
{"Origin": "In case of failure the {@link Flux} will error.", "Reference": "In case of failure the {@link CosmosContinuablePagedFlux} will error.", "NNUpdater": "Get the id of the {@link CosmosContainer}"}
{"Origin": "Returns the package name based on the boardsfile name Caters for the packages (with version number and for the old way", "Reference": "Returns the package name based on the boardsfile name Caters for the packages (with version number and for the old way if the boards file does not exists returns arduino", "NNUpdater": "Returns the full module name with org name for a given module."}
{"Origin": "Returns the signing date time in millis for which the signature needs to be computed.", "Reference": "Returns the request signing date time in millis for which the request signature needs to be computed.", "NNUpdater": "Returns the HTTP request to be signed."}
{"Origin": "Resets the analytics collector for a new media source.", "Reference": "Resets the analytics collector for a new playlist.", "NNUpdater": "Close writer."}
{"Origin": "Tests the engine starts up, executes 1 trade cycle successfully, but then receives StrategyException from", "Reference": "Tests the engine starts up, executes 1 trade cycle successfully, but then receives", "NNUpdater": "Starts a client."}
{"Origin": "httl.properties: precompiled=true", "Reference": "httl.properties: preload=true", "NNUpdater": "httl.properties: interceptors=httl.spi.interceptors.ExtendsInterceptor"}
{"Origin": "Group: producer", "Reference": "Group: consumer", "NNUpdater": "post-processor producer -> copy producer -> inputProducer"}
{"Origin": "Process workflows to purge them and their children.", "Reference": "Process workflows to purge them and their children if all the descendants are purgeable.", "NNUpdater": "Dispatch is the only place where workflows are executed based on reading activeWorkflows and therefore needs to be synchronized to prevent launching multiple workflows for the same endpoint concurrently."}
{"Origin": "Note that the writing process does not start until the returned {@code Mono} is subscribed to.", "Reference": "Note that the writing process does not start until the returned {@code Flux} is subscribed to.", "NNUpdater": "Allow writing the request."}
{"Origin": "Queries this search source for the given queryString.", "Reference": "Creates query for the given queryString.", "NNUpdater": "Queries this ContactSourceService for SourceContacts which match a specific query Pattern."}
{"Origin": "If {@code labels = ``\\0``}, settings without any label are returned.", "Reference": "If {@code labelFilter = ``\\0``}, settings without any label are returned.", "NNUpdater": "If {@code labels = ``\\0``}, settings without any label are returned."}
{"Origin": "Sets the trim mark on this endpoint's log unit and also perform a prefix trim.", "Reference": "Sets the trim mark on this endpoint's log unit, performs a prefix trim and then compaction.", "NNUpdater": "String.trim() returns a String)."}
{"Origin": "This function assumes the block at the given index is cached for the given size.", "Reference": "This function assumes the block at the given index is read and cached for the given sizes.", "NNUpdater": "Returns element at given index."}
{"Origin": "Add classpath elements from an object obtained from reflection.", "Reference": "Add classpath entries from an object obtained from reflection.", "NNUpdater": "Field values are obtained from the constant pool in classfiles, *not* from a loaded class using reflection."}
{"Origin": "Prevents access to all public members of given class.", "Reference": "Prevents access to members of given class and its subclasses.", "NNUpdater": "Returns a list of all member states."}
{"Origin": "Parse an XLS into a list of ImportedGrade objects Note that only the first sheet of the Excel file is supported.", "Reference": "Note that only the first sheet of the Excel file is supported.", "NNUpdater": "Set Importiert."}
{"Origin": "Copy all Schema Concepts to current KeyspaceCache", "Reference": "Copy schema concepts labels to current KeyspaceCache", "NNUpdater": "Load keyspace definitions for the system keyspace (system.SCHEMA_KEYSPACES_TABLE)"}
{"Origin": "Action triggered when the execution of this Node is skipped.", "Reference": "Callback invoked when the execution of this node has been skipped.", "NNUpdater": "HandlerWrapper, ActionNode)} to perform the action and to schedule the next action node."}
{"Origin": "Calls to this method on versions of Android less than P are ignored.", "Reference": "Calls to this method on versions of Android less than Q are ignored.", "NNUpdater": "Is this Duration shorter than the specified one."}
{"Origin": "It only runs when the {@link VMThreads#THREAD_MUTEX} is held (or the virtual machine is single-threaded).", "Reference": "It only runs when the VMThreads.THREAD_MUTEX is held (or the virtual machine is single-threaded).", "NNUpdater": "Operation fails."}
{"Origin": "Convenience routine to return the specified error's underlying SyntaxException, or null if it isn't one.", "Reference": "Returns the specified error's underlying SyntaxException, or null if it isn't one.", "NNUpdater": "Return the exception for this field, or if there isn't any."}
{"Origin": "Creates the metrics tables and kafka-meta table using the factory {@link DefaultMetricDatasetFactory}", "Reference": "Creates the metrics tables and metrics meta table using the factory {@link DefaultMetricDatasetFactory}", "NNUpdater": "Creates a new dataset using the provided {@link ImgFactory}."}
{"Origin": "Returns a Vector of all MuAction instances matching the specified Class.", "Reference": "Returns a Vector of all MuAction instances matching the specified action id.", "NNUpdater": "If the MuAction denoted by the specified ActionDescriptor cannot be found or cannot be instantiated, is returned."}
{"Origin": "This will return the {@link Secret secret} with value included of its latest version.", "Reference": "This will return the {@link KeyVaultSecret secret} with value included of its latest version.", "NNUpdater": "Loop over the {@link SecretAttributes secretAttributes} and call {@link SecretClient#getSecret(SecretAttributes)} ."}
{"Origin": "Adds a new job to the job queue to remove the specified extension from the specified namespace.", "Reference": "Adds a new job to the job queue to perform the given uninstall plan request.", "NNUpdater": "Adds the specified namespace to a temporary node."}
{"Origin": "Loads ifile, dfile and indexSummary, and optionally recreates the bloom filter.", "Reference": "Loads ifile, dfile and indexSummary, and optionally recreates and persists the bloom filter.", "NNUpdater": "Determines whether a given bloom filter is compatible with this bloom filter."}
{"Origin": "decode the {@link com.mongodb.DBObject} and provide the corresponding java (type-safe) object NOTE: mf might be null", "Reference": "decode the {@link Document} and provide the corresponding java (type-safe) object NOTE: mf might be null", "NNUpdater": "decode the {@link com.mongodb.DBObject} and provide the corresponding java (type-safe) object"}
{"Origin": "Gets the path from a full filename, which excludes the prefix.", "Reference": "Gets the path from a full fileName, which excludes the prefix.", "NNUpdater": "The prefix includes the first slash in the full filename where applicable."}
{"Origin": "Adds a Bundle to the watch list.", "Reference": "Adds a Bundle URLs to the watch list.", "NNUpdater": "Adds an element to the list."}
{"Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}", "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveToRangeEnd }{@code >}}", "NNUpdater": "Create an instance of {@link JAXBElement }{@code <}{@link CTStrokeChild }{@code >}}"}
{"Origin": "Sets the value of the 'publicPort' field", "Reference": "Sets the value of the 'publicPorts' field", "NNUpdater": "Sets the value of the 'paramName' field."}
{"Origin": "Copies a form with the given file name from the assets root to the SD Card where it will be loaded by {@link FormLoaderTask}.", "Reference": "Copies a form with the given file name from the from the given assets folder to the SD Card where it will be loaded by {@link FormLoaderTask}.", "NNUpdater": "Copies a form with the given file name from the from the given assets folder to the SD Card where it will be loaded by {@link FormLoaderTask}."}
{"Origin": "This will return the {@link Secret secrets} with values included of the specified versions.", "Reference": "This will return the {@link KeyVaultSecret secrets} with values included of the specified versions.", "NNUpdater": "List {@link Secret secrets} in the key vault."}
{"Origin": "Tests {@code globalRecommend(long, int, Set, Set)}.", "Reference": "Tests {@code recommendRelatedItems()(long, int, Set, Set)}.", "NNUpdater": "Delegate to {@link #globalRecommend(LongSet, int, LongSet, LongSet)}."}
{"Origin": "Setting the timeline is not allowed after a call to {@link #setMediaSources(MediaSource...)}.", "Reference": "Setting the timeline is not allowed after a call to {@link #setMediaSource(MediaSource)}.", "NNUpdater": "Should be called after {@link #contentType(MediaType)}"}
{"Origin": "Verifies that Hudson is sending 403 first.", "Reference": "Verifies that HTTP 403 is sent first.", "NNUpdater": "Set the response status to FORBIDDEN (403)."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Tests the {@link FileSystemMaster#checkConsistency(AlluxioURI, CheckConsistencyOptions)} method when some files are consistent.", "Reference": "Tests the {@link FileSystemMaster#checkConsistency(AlluxioURI, CheckConsistencyContext)} method when some files are consistent.", "NNUpdater": "Tests the {@link FileSystemMaster#checkConsistency(AlluxioURI, CheckConsistencyOptions)} method when some files are consistent."}
{"Origin": "Synchronize with the transport thread.", "Reference": "Synchronize with all transport threads.", "NNUpdater": "Create a TThreadPoolServer with the given transport and processo with the default transport factory.r"}
{"Origin": "Returns a List of item childs that holds information about affiliation, jids and nicks.", "Reference": "Returns a List of item children that holds information about affiliation, jids and nicks.", "NNUpdater": "Returns a List of item childs that holds information about affiliation, jids and nicks."}
{"Origin": "Creates a {@code For}-comprehension of three Iterables.", "Reference": "Creates a {@code For}-comprehension of three Options.", "NNUpdater": "{@code Stream} equivalent: {@link Stream#flatMap} (using a function that produces streams, not iterables)."}
{"Origin": "Returns the search index configured with the given name.", "Reference": "Returns the Lucene search index configured with the given name.", "NNUpdater": "Returns the default search fields for this index."}
{"Origin": "Adds tags for the specified {@link NamespacedEntityId}.", "Reference": "Adds tags for the specified {@link MetadataEntity}.", "NNUpdater": "Adds tags for the specified {@link NamespacedEntityId}."}
{"Origin": "Group: common", "Reference": "Group: advanced", "NNUpdater": "Returns the default number of {@linkplain CommonPools#blockingTaskExecutor() blocking task executor} threads."}
{"Origin": "Get generated getters for an AVRO-generated SpecificRecord.", "Reference": "Get generated getters for an AVRO-generated SpecificRecord or a POJO.", "NNUpdater": "for JAXB generated collection attributes {@link #getPropertyReadAccessors() } adders, typically for from table generated entities, {@link #getAdders() }"}
{"Origin": "Returns the length of the attribute list that begins with this attribute.", "Reference": "Returns the number of attributes of the attribute list that begins with this attribute.", "NNUpdater": "Returns the total size in bytes of all the attributes in the attribute list that begins with this attribute."}
{"Origin": "Escape schema name depending of the database engine.", "Reference": "Escape database name depending of the database engine.", "NNUpdater": "The name of the DB Parameter Group Family."}
{"Origin": "Checks a name to ensure that it's a legal type name.", "Reference": "Checks a name to ensure that it's a legal qualified class name", "NNUpdater": "Ensure that:"}
{"Origin": "Set the channel parameter for the cluster log and snapshot replay channel.", "Reference": "Get the counter for the current state of the cluster backup.", "NNUpdater": "Set the channel parameter for the cluster log and snapshot replay channel."}
{"Origin": "Creates a RealPropagator to propagate one or more continuous functions, separated with semi-colon ``;``", "Reference": "Creates a RealPropagator to propagate one or more continuous functions, separated with semi-colon ``;`` Each function is set to a single propagator.", "NNUpdater": "Creates a RealPropagator to propagate one or more continuous functions, separated with semi-colon ``;``"}
{"Origin": "Returns the name of the output parameter.", "Reference": "Returns the names of the output parameters.", "NNUpdater": "Returns the value of the given parameter name from the current parameter map."}
{"Origin": "Sets the address of this connection's peer.", "Reference": "Update the address of this connection's peer.", "NNUpdater": "PeerNAT)"}
{"Origin": "Get the minimum committed log tail from all log units.", "Reference": "Attempt to get the maximum committed log tail from all log units.", "NNUpdater": "Get a Logger instance"}
{"Origin": "Set the left 3x3 submatrix of this {@link Matrix4x3f} to that of the given {@link Matrix4x3f} and don't change the other elements.", "Reference": "Set the left 3x3 submatrix of this {@link Matrix4x3f} to that of the given {@link Matrix4x3fc} and don't change the other elements.", "NNUpdater": "Set the left 3x3 submatrix of this {@link Matrix4x3f} to that of the given {@link Matrix4x3f} and don't change the other elements."}
{"Origin": "Retrieves the default value of a parameter, or otherwise returns null", "Reference": "Retrieves the default value of a parameter", "NNUpdater": "Retrieves the type of a parameter, or otherwise null"}
{"Origin": "Gets the value if it is a Valid or an value calculated from the error", "Reference": "Gets the value if it is a Valid or an value calculated from the errors", "NNUpdater": "Gets the valueText."}
{"Origin": "Set this {@link AxisAngle4f} to be equivalent to the rotational component of the given {@link Matrix4f}.", "Reference": "Set this {@link AxisAngle4f} to be equivalent to the rotational component of the given {@link Matrix4fc}.", "NNUpdater": "Set this {@link AxisAngle4f} to be equivalent to the rotational component of the given {@link Matrix4fr}."}
{"Origin": "Prefixes are used to enrich the mappings of every {@code @RequestMapping} method whose controller type is matched by the corresponding {@link HandlerTypePredicate} in the map.", "Reference": "Prefixes are used to enrich the mappings of every {@code @RequestMapping} method whose controller type is matched by the corresponding {@code Predicate}.", "NNUpdater": "Returns a new {@code TypeResolver} with type variables in {@code formal} mapping to types in {@code actual}."}
{"Origin": "Adds an actor as a child of this group, at a specific index.", "Reference": "If the actor is already a child of this group, no changes are made.", "NNUpdater": "Adds an actor as a child of this group."}
{"Origin": "Translates type names to resource locations to ease lookups since the unit cache system caches based on resource location but the natural mode of interaction with this cache is via type names.", "Reference": "Translates type names to resource paths to ease lookups since the unit cache system caches based on resource path but the natural mode of interaction with this cache is via type names.", "NNUpdater": "Sets the type names."}
{"Origin": "Create a new data source from EventDAO.", "Reference": "Create a new data source from an EventDAO.", "NNUpdater": "Create data source."}
{"Origin": "Return a copy of this that is set inactive", "Reference": "Returns a copy of this with state set to given state", "NNUpdater": "A callback can only be reset to IDLE from the SUCCEEDED or FAILED states or if it is already IDLE."}
{"Origin": "Returns the bar with the primary key or throws a {@link com.liferay.testtransaction.NoSuchBarException} if it could not be found.", "Reference": "Returns the bar with the primary key or throws a {@link NoSuchBarException} if it could not be found.", "NNUpdater": "array('foo' => 'bar', 'foo1' => 'bar', 1 => 'foo')"}
{"Origin": "Finds the {@link List} of {@link VirtualHost}s that contains the specified {@link Service}.", "Reference": "Finds the {@link List} of {@link VirtualHost}s that contains the specified {@link HttpService}.", "NNUpdater": "Binds the specified {@link Service} at the specified {@link Route} of the default {@link VirtualHost}."}
{"Origin": "In some cases, changing the specified field can cause the resulting date to become invalid, such as changing the month from January to February would make the day-of-month 31 invalid.", "Reference": "In some cases, changing the specified field can cause the resulting date to become invalid, such as changing the month from 31st January to February would make the day-of-month invalid.", "NNUpdater": "If the day-of-month is invalid for the specified month in the result, the day will be adjusted to the last valid day-of-month."}
{"Origin": "Access Control Using AWS Identity and Access Management (IAM) .", "Reference": "For more information, see Access Control Using AWS Identity and Access Management (IAM).", "NNUpdater": "Access Management (IAM) user account."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Probably you want {@link #getOffsetInSection()}.", "Reference": "Probably you want {@link #getAddress()}.", "NNUpdater": "Operation fails."}
{"Origin": "The potential errors.", "Reference": "The potential status codes.", "NNUpdater": "Undefined **"}
{"Origin": "Creates an entity and populates its state based on the dbObject given.", "Reference": "Creates an entity and populates its state based on the document given.", "NNUpdater": "Creates a field based on the given data type."}
{"Origin": "Get the Date that this Token was Created", "Reference": "Get the ZonedDateTime that this Token was Created", "NNUpdater": "The range_date_created."}
{"Origin": "Gets the filters for items to fetch.", "Reference": "Gets the filter for items to fetch.", "NNUpdater": "Gets the contentItems."}
{"Origin": "Decorates {@link Service}s whose {@link Route} matches the specified {@code pathPattern}.", "Reference": "Decorates {@link HttpService}s whose {@link Route} matches the specified {@code pathPattern}.", "NNUpdater": "Finds the {@link Service} whose {@link Router} matches the {@link PathMappingContext}."}
{"Origin": "This is the reverse method of {@link #set(Matrix4d)} and allows to obtain intermediate calculation results when chaining multiple transformations.", "Reference": "This is the reverse method of {@link #set(Matrix4dc)} and allows to obtain intermediate calculation results when chaining multiple transformations.", "NNUpdater": "Set the upper left 3x3 submatrix of this {@link Matrix4d} to that of the given {@link Matrix4d} and don't change the other elements."}
{"Origin": "Returns the calendar notification template with the primary key or throws a {@link com.liferay.calendar.NoSuchNotificationTemplateException} if it could not be found.", "Reference": "Returns the calendar notification template with the primary key or throws a {@link NoSuchNotificationTemplateException} if it could not be found.", "NNUpdater": "Returns a {@link com.google.template.soy.jbcsrc.shared.CompiledTemplates} for the given template body."}
{"Origin": "Creates a {@code For}-comprehension of 5 Iterables.", "Reference": "Creates a {@code For}-comprehension of 5 Options.", "NNUpdater": "{@code Stream} equivalent: {@link Stream#flatMap} (using a function that produces streams, not iterables)."}
{"Origin": "Helper method to check if we should do GCM topic request.", "Reference": "Helper method to check if we should do FCM topic request.", "NNUpdater": "Retrieve the GCM registration token."}
{"Origin": "Reverses the order of all elements in the given interval.", "Reference": "Reverses the order of all entries in the given interval.", "NNUpdater": "Gets a comparator that reverses the order of the given comparator."}
{"Origin": "For more information about the vault locking process, see", "Reference": "For more information about the vault locking process, see Amazon Glacier Vault Lock.", "NNUpdater": "For more information, see the Amazon"}
{"Origin": "This test validates that connecting to a serviceURL does not work.", "Reference": "This test validates that connecting to a getServiceURL() does not work.", "NNUpdater": "Validate the given ."}
{"Origin": "Supports a ``siteId`` request parameter, defaulting to ``default`` for the default update site.", "Reference": "Supports a ``siteId`` request parameter, defaulting to {@link #ID_DEFAULT} for the default update site.", "NNUpdater": "Default wiki for the app"}
{"Origin": "Returns the string representation of this {@link Dimension}.", "Reference": "Returns the string representation of this {@link DimensionColumn}.", "NNUpdater": "Returns a string representation of an {@link AnnotationHolder}"}
{"Origin": "Set the point at which content is truncated.", "Reference": "Set the length after at which content is truncated.", "NNUpdater": "( Dynamic Point A - Dynamic Point B )"}
{"Origin": "Obtains an instance from the specified unique name.", "Reference": "Obtains an instance from the specified name.", "NNUpdater": "Obtains the type from a unique name."}
{"Origin": "Shortcut for {@code RDFParser.create.source(reader)}.", "Reference": "Shortcut for {@code RDFParser.create.fromString(string)}.", "NNUpdater": "Shortcut for {@code new Range(from, to)}."}
{"Origin": "Note that this is only useful for debugging porpose.", "Reference": "Note that this is only useful for debugging purpose.", "NNUpdater": "This method is useful for event logging and debugging."}
{"Origin": "Add a ResultFile to the results", "Reference": "Add a list of ResultFile to the results", "NNUpdater": "Load results as a Result"}
{"Origin": "If they only have the same name, they are considered to be two inheritances of the same(or at least compatible) declarations, and there is only a warning.", "Reference": "If they have the same name and class, they are considered to be two inheritances of the same (or at least compatible) declarations, and there is only a warning.", "NNUpdater": "Two Vectors are equivalent if they have the same cardinality and all of their values are the same."}
{"Origin": "Turns this ReactiveSeq into a HotStream, a connectable Stream, being executed on a thread on the supplied executor, that is producing data.", "Reference": "Turns this ReactiveSeq into a Connectable, a connectable Stream, being executed on a thread on the supplied executor, that is producing data.", "NNUpdater": "Similar to @see {@link ReactiveSeq#futureOperations(Executor)}, but returns Future"}
{"Origin": "Get the content of this element.", "Reference": "Gets the value of the content property.", "NNUpdater": "Removes all child content from this parent."}
{"Origin": "Default value is {@code 16}.", "Reference": "Default value is {@code 8}.", "NNUpdater": "Checks password, length [1, 16]."}
{"Origin": "NOTE: This method is meaningless unless you explicitly provide paths when constructing this instance", "Reference": "NOTE: This method is meaningless in SSLTestConfig.", "NNUpdater": "ResourceSets that represent available resources."}
{"Origin": "Set the Websocket deflate compression level.", "Reference": "Set the WebSocket deflate compression level.", "NNUpdater": "{@link Compression#DEFLATE} correctly writes deflate data."}
{"Origin": "Return writers that support specific types.", "Reference": "Return all writers that support specific types.", "NNUpdater": "If it returns true, the application must call {@link #enableWriters} later."}
{"Origin": "Modified by user info", "Reference": "Modified by user", "NNUpdater": "Sets URI user-info."}
{"Origin": "Is the value with this qualifier less than or equal to the length of array?", "Reference": "Is the value with this qualifier less than or equal to the length of sequence?", "NNUpdater": "The offset argument must be greater than or equal to , and less than or equal to the length of this AppendingStringBuffer."}
{"Origin": "Checks whether two filenames are equal after both have been normalized.", "Reference": "Checks whether two fileNames are equal after both have been normalized.", "NNUpdater": "Checks whether two filenames are equal after both have been normalized."}
{"Origin": "The input file must be a list of whitespace-separated verb-lemma-POS triples, one verb form per line.", "Reference": "The input file must be a list of tab-separated verb-POS pairs, one verb per line.", "NNUpdater": "Get method's http verbs."}
{"Origin": "### Effects: The keypair is set.", "Reference": "### Effects: The key pair is set.", "NNUpdater": "matches name of the given key pair"}
{"Origin": "It will emit the current object when subscribed to.", "Reference": "It will emit the current RealmObject when subscribed to.", "NNUpdater": "It will output the object when subscribed to."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Get the barline that starts the part.", "Reference": "Get the PartBarline that starts the part.", "NNUpdater": "Insert a barline inter as part of the logical barline."}
{"Origin": "(see {@link #isGoogleAccountType)", "Reference": "(see {@link #isWritableGoogleTypeFilter )", "NNUpdater": "If {@link #type()} is {@link Type#FROM_URI} the method returns a Google Cloud Storage URI (e.g."}
{"Origin": "Configure the name of a selector header that a subscription message can have in order to filter messages based on their headers.", "Reference": "Configure the name of a header that a subscription message can have for the purpose of filtering messages matched to the subscription.", "NNUpdater": "Removes the headers on the message"}
{"Origin": "Test of npara method, of class Gamma.", "Reference": "Test of length method, of class Gamma.", "NNUpdater": "Test of lgamma method, of class Gamma."}
{"Origin": "Populate a new {@link ExtensionRegistry} from extension types declared via {@link ExtendWith @ExtendWith} on the supplied {@link AnnotatedElement}.", "Reference": "Populate a new {@link MutableExtensionRegistry} from extension types declared via {@link ExtendWith @ExtendWith} on the supplied {@link AnnotatedElement}.", "NNUpdater": "Returns a {@link List} of {@link Extension}s in this map in tag order."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Set the value of description.", "Reference": "Sets the value of description.", "NNUpdater": "Set Beschreibung."}
{"Origin": "Finds the {@link Dimension} by name.", "Reference": "Finds the {@link DimensionColumn} by name.", "NNUpdater": "Set the system width."}
{"Origin": "When a message-driven enpoint supports retry implicitly, this header is incremented for each delivery attempt.", "Reference": "When a message-driven endpoint supports retry implicitly, this header is incremented for each delivery attempt.", "NNUpdater": "Returns the message execution policy."}
{"Origin": "Set ``global`` CORS configuration based on URL patterns.", "Reference": "Set the ``global`` CORS configurations based on URL patterns.", "NNUpdater": "Adds an pattern to patterns."}
{"Origin": "Based loosely on ``Numerical Recpies`` and the work of Paul Godfrey at URL", "Reference": "Based loosely on ``Numerical Recipes`` and the work of Paul Godfrey at URL", "NNUpdater": "Returns the Gitblit URL based on the request."}
{"Origin": "If {@code options} is {@code null}, then all the {@link ConfigurationSetting configuration settings} are fetched with their current values.", "Reference": "If {@code selector} is {@code null}, then all the {@link ConfigurationSetting configuration settings} are fetched with their current values.", "NNUpdater": "{@codesnippet com.azure.data.appconfiguration.ConfigurationClient.setSettingWithResponse#ConfigurationSetting-boolean-Context}"}
{"Origin": "Map package name to the new name.", "Reference": "Maps a package name to its new name.", "NNUpdater": "Returns package name from name space."}
{"Origin": "If the {@code ASTNode} has a valid location, this one is used.", "Reference": "If the {@code Node} has a valid location, this one is used.", "NNUpdater": "Valid values:"}
{"Origin": "The meta-property for the {@code paymentAmount} property.", "Reference": "The meta-property for the {@code payment} property.", "NNUpdater": "The meta-property for the {@code initialPrice} property."}
{"Origin": "Returns estimated number of buffered items, or -1 if disabled.", "Reference": "Returns estimated number of buffered items, or negative if closed.", "NNUpdater": "Enabled --"}
{"Origin": "Returns the ``red`` prefabricated value of the sepcified type.", "Reference": "Returns the ``red`` prefabricated value of the specified type.", "NNUpdater": "Getter for the ``red`` prefabricated value of the specified type."}
{"Origin": "Gets the amount of damage caused by the event", "Reference": "Gets the raw amount of damage caused by the event", "NNUpdater": "Gets the durability of this item"}
{"Origin": "Returns the component's {@link Tokenizer}", "Reference": "Returns the component's source", "NNUpdater": "Trains a model for the {@link TokenizerME} with a default cutoff of 5 and 100 iterations."}
{"Origin": "This is the example used in {@link IndexSetting}.", "Reference": "This is the example used in {@link IndexSettingImpl}.", "NNUpdater": "Get the {@link ExampleMatcher} used."}
{"Origin": "The xpathNodeSet is treated as a list of XPath nodes, not as a list of subtrees.", "Reference": "The {@code xpathNodeSet} is treated as a list of XPath nodes, not as a list of subtrees.", "NNUpdater": "Gets the list of nodes that use this node (i.e., as an input)."}
{"Origin": "Create SSLContext using system defaults.", "Reference": "Create SSLConnectionSocketFactory using system defaults.", "NNUpdater": "Creates a SSLContext with specified keystore credential."}
{"Origin": "Unit test for {@link ZKQuorumImpl#setupQuorum(String, ZooKeeperAccessor, List)}", "Reference": "Unit test for {@link ZKQuorumImpl#setupQuorum(String, int, ZooKeeper, List)}", "NNUpdater": "Operation fails."}
{"Origin": "Convenience method to load tree from file", "Reference": "Convenience method to load tree from an inputstream", "NNUpdater": "Convenience method to set a ``type`` on this link."}
{"Origin": "Must be logged to use.", "Reference": "Must be logged in to use.", "NNUpdater": "If not an exception will be thrown"}
{"Origin": "If {@code labels = ``*``}, settings with any label are returned.", "Reference": "If {@code labelFilter = ``*``}, settings with any label are returned.", "NNUpdater": "If {@code labels = ``*``}, settings with any label are returned."}
{"Origin": "An accurate sync method that adapts automatically to the system it runs on to provide reliable results.", "Reference": "An accurate sync method that will attempt to run an application loop at a constant frame rate.", "NNUpdater": "Checks to see if the given ID is a valid ID."}
{"Origin": "Adds all {@link CameraCaptureSession.StateCallback} callbacks.", "Reference": "Adds all {@link CameraCaptureCallback} callbacks for single and repeating requests.", "NNUpdater": "Calls {@link #authenticator(String, Client[])} with {@link #DEFAULT_AUTHENTICATOR_PATH}."}
{"Origin": "removes whitespace and does a fail-fast if a non-java identifier is found", "Reference": "Removes whitespace and does a fail-fast if a non-java identifier is found.", "NNUpdater": "Removes whitespace and the 'new ' prefix and does a fail-fast if a non-java identifier is found."}
{"Origin": "Incremental values (ex.", "Reference": "Incremental values are not currently set.", "NNUpdater": "Browser: URL"}
{"Origin": "Sort the given {@link MutablePointValues} based on its packed value then doc ID.", "Reference": "Sort the given {@link MutablePointsReader} based on its packed value then doc ID.", "NNUpdater": "Loads a {@link IndexDocValues} instance depending on the given {@link ValueType}."}
{"Origin": "A is built when the JAR is created.", "Reference": "A class is built when the JAR is created.", "NNUpdater": "The main method executed when this class is run."}
{"Origin": "Assign the current point, where the dragged image is to be displayed", "Reference": "Assign the current screen point, where the dragged image is to be displayed", "NNUpdater": "Submits a new list to be diffed, and displayed."}
{"Origin": "{@code params}, {@code requestType} and {@code options} defaults to {@code null}.", "Reference": "{@code params} and {@code options} defaults to {@code null}.", "NNUpdater": "A {@code null} CharSequence will return {@code -1}."}
{"Origin": "Returns the parameter value from the HTTP request or the value provided by the supplier", "Reference": "Returns the parameter value from the HTTP request or the default value.", "NNUpdater": "Returns the request parameter value for parameter mapping type."}
{"Origin": "Returns the default value for keys ( or for primitive types).", "Reference": "Returns the default ``empty`` value ( or for primitive types).", "NNUpdater": "Returns the primitives service."}
{"Origin": "Fetch the given user's list of starred albums", "Reference": "Fetch the given user's list of loved albums", "NNUpdater": "Build {@link Uri} for album songs list."}
{"Origin": "Converts {@link FiniteDuration} into Flink time.", "Reference": "Converts Flink time into a {@link Duration}.", "NNUpdater": "In order to execute use {@link FlinkLocalCluster}, {@link FlinkSubmitter}, or {@link"}
{"Origin": "Collect capabilities of an index.", "Reference": "Collect the field capabilities for an index.", "NNUpdater": "Returns the {@code GLCapabilities} instance that describes the capabilities of this context."}
{"Origin": "Attempts to read the next IHAWriteMessage and then the expected buffer, that is read into the client buffer.", "Reference": "Attempts to read the next {@link IHAWriteMessage} and then the expected buffer, that is read into the client buffer.", "NNUpdater": "DSA version of {@link GL11C#glReadBuffer ReadBuffer}."}
{"Origin": "Add in methods from all interfaces.", "Reference": "Adds methods from all interfaces.", "NNUpdater": "Find overridden methods from all super classes and all implemented interfaces."}
{"Origin": "We have the same file saved for Publisher 98, Publisher 2000 and Publisher 2007.", "Reference": "We have the same file saved for Publisher 98, Publisher 2000 and", "NNUpdater": "Returns a publisher that publishes each element from Collections that are produced from the given input publisher."}
{"Origin": "You may still need to reType to get the correct namesapce, or reorder.", "Reference": "You may still need to reType to get the correct namespace, or reorder.", "NNUpdater": "In case you need the full type name, use {@link #getName()}."}
{"Origin": "Test of createClassicModifiedPadding method, of class ShortPaddingGenerator.", "Reference": "Test of createClassicModifiedPadding method, of class", "NNUpdater": "Set a padding for the drawable."}
{"Origin": "Checks if the {@link Properties} contains the given key.", "Reference": "Checks if the configuration contains the given key.", "NNUpdater": "For example, if the System properties contains ``key=value``, then the call"}
{"Origin": "Sets gap between split icon and split part sides", "Reference": "Sets gap between menu icon and menu button part sides", "NNUpdater": "Sets the value amount of the split."}
{"Origin": "For an overview on tagging an Amazon RDS resource, see", "Reference": "For an overview on tagging an Amazon RDS resource, see Tagging Amazon RDS Resources.", "NNUpdater": "For an overview on tagging an Amazon RDS resource, see"}
{"Origin": "Specialized registration method for registering a named template for functions expecting zero arguments.", "Reference": "Specialized registration method for registering a named descriptor for functions expecting zero arguments.", "NNUpdater": "Specialized version of get for 3 parameters."}
{"Origin": "The supplier lookup decides which lookup method is the best given the parent {@link ExecutableNode} or {@link RootNode} and the provided languageClass.", "Reference": "The reference lookup decides which lookup method is the best given the parent {@link ExecutableNode} or {@link RootNode} and the provided languageClass.", "NNUpdater": "Set Lookup ClassName."}
{"Origin": "Write image data to the given file node and set checksum and size.", "Reference": "Write image data from the given byte[] to the given file node and set checksum and size.", "NNUpdater": "Computes the CRC32C checksum of the supplied data and performs the ``mask`` operation on the computed checksum"}
{"Origin": "Applies a {@link Publisher< InternalEvent >} function transforming a stream of {@link BaseEvent}'s.", "Reference": "Applies a {@link Publisher< InternalEvent >} function transforming a stream of {@link CoreEvent}'s.", "NNUpdater": "Is responsible for calling {@link EventSource#onEvent(InboundEvent)} and all registered {@link EventListener} instances."}
{"Origin": "Blobstore entries first detected less than NIMBUS_TOPOLOGY_BLOBSTORE_DELETION_DELAY_MS ago are ignored.", "Reference": "Topology entries first detected less than NIMBUS_TOPOLOGY_BLOBSTORE_DELETION_DELAY_MS ago are ignored.", "NNUpdater": "Blobstore entries first detected less than NIMBUS_TOPOLOGY_BLOBSTORE_DELETION_DELAY_MS ago are ignored."}
{"Origin": "Called for every component when the page is getting to be rendered.", "Reference": "Called on all components before any component is rendered.", "NNUpdater": "Adds components to the list of components to be rendered"}
{"Origin": "Gets the name of the quorum associated with specified cache", "Reference": "Gets the name of the split brain protection associated with specified cache", "NNUpdater": "Gets the primary style name associated with the object."}
{"Origin": "Observer methods with {@link TransactionPhase#IN_PROGRESS} are called asnchronously in a separate thread.", "Reference": "Then, synchronous observer methods with {@link TransactionPhase#IN_PROGRESS} are called synchronously in the current thread.", "NNUpdater": "Observer methods with {@link TransactionPhase#IN_PROGRESS} are called asnchronously in a separate thread."}
{"Origin": "Called when a track has been selected.", "Reference": "Called when a track is deselected.", "NNUpdater": "Called back when a ready key has been selected."}
{"Origin": "`DEPRECATED`: Maximal amount of files to upload", "Reference": "`DEPRECATED`: Maximal amount of files to upload [Deprecated since version VERSION]", "NNUpdater": "A message posting method for the postmessage service."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Returns the WMS {@link Layer} used by this layer", "Reference": "Returns the WMS {@link Layer}s used by this layer", "NNUpdater": "Returns the {@code Module} with the given name in this layer, or if not in this layer, the {@linkplain #parent parent} layer."}
{"Origin": "Set Tree.", "Reference": "Set Baum.", "NNUpdater": "Initializes the main tree."}
{"Origin": "Now performs a deep copy of the classifier before each call to buildClassifier() (just in case the classifier is not initialized properly).", "Reference": "Performs a deep copy of the classifier before each call to buildClassifier() (just in case the classifier is not initialized properly).", "NNUpdater": "Test get classifiers."}
{"Origin": "function source() { (41) global $argv; (46) return $argv[1]; (49) }", "Reference": "function source() { (46) global $argv; (52) return $argv[1]; (55) }", "NNUpdater": "Operation fails."}
{"Origin": "If you wish to have decimation rates higher than 700, then add additional prime factors to the PRIMES array.", "Reference": "If you wish to have decimation rates higher than the highest rate listed in the PRIMES array, then add additional prime factors to the PRIMES array.", "NNUpdater": "Returns the terms of formula."}
{"Origin": "Sets the query to match {@link ConfigurationSetting#getLabel() labels} in the service.", "Reference": "Sets the expression to filter {@link ConfigurationSetting#getLabel() labels} on for the request.", "NNUpdater": "Sets the query to match {@link ConfigurationSetting#getLabel() labels} in the service."}
{"Origin": "{@codesnippet com.azure.data.appconfiguration.ConfigurationClient.addSetting#String-String-String}", "Reference": "{@codesnippet com.azure.data.appconfiguration.ConfigurationClient.addConfigurationSetting#String-String-String}", "NNUpdater": "{@codesnippet com.azure.data.appconfiguration.ConfigurationClient.addSetting#String-String-String}"}
{"Origin": "Computes the first order sensitivities of a function of a CreditRatesProvider to a double by finite difference.", "Reference": "Computes the first order sensitivities of a function of a {@code CreditRatesProvider} to a double by finite difference.", "NNUpdater": "This computes the {@link CurveCurrencyParameterSensitivities} associated with the {@link PointSensitivities}."}
{"Origin": "Test affinity awareness Sql cache size property with semicolon.", "Reference": "Test Partition Awareness Sql cache size property with semicolon.", "NNUpdater": "Get the current awareness as list of cognitions."}
{"Origin": "Short-cut for building a named template via {@link #namedDescriptorBuilder} specifying zero arguments and accepting the rest of the builder's defaults.", "Reference": "Short-cut for building a named descriptor via {@link #namedDescriptorBuilder} specifying zero arguments and accepting the rest of the builder's defaults.", "NNUpdater": "Creates a {@link Builder} for building instance of {@link FlowSpecification}."}
{"Origin": "Any of the input words can also be the answer if one is the parent or grandparent of other", "Reference": "Any of the input words can also be the answer if one is the parent or grandparent of other, or if the input words are the same.", "NNUpdater": "Adds an word to words."}
{"Origin": "A {@link FileTransferException} if the operation was attempted but failed for any of the following reasons:", "Reference": "This method throws an {@link IOException} if the operation failed, for any of the following reasons:", "NNUpdater": "Throws a {@link FileTransferException} in any of the following conditions are true, does nothing otherwise:"}
{"Origin": "Get first class 11 (Chip/Smartcard) interface for the device", "Reference": "Get first class 11 (Chip/Smartcard) interface of the device", "NNUpdater": "11,1,15, 8b"}
{"Origin": "Non-linear refinement is recommended, even before bundle adjustment.", "Reference": "Non-linear refinement is recommended, before bundle adjustment.", "NNUpdater": "The result is equivalent to {@code new Cons<>(element, this)}."}
{"Origin": "If any of the fields in or the s timeField is missing from the JOSN inputIndex an exception is thrown", "Reference": "If any of the fields in or the s timeField is missing from the JSON inputIndex an exception is thrown", "NNUpdater": "Returns an IndexService for the specified index if exists otherwise a {@link IndexNotFoundException} is thrown."}
{"Origin": "For a provided domain item, find the range item that leads to optimal config.", "Reference": "For a provided domain item, find the range item that leads to optimal configuration.", "NNUpdater": "Adds new item after the given item."}
{"Origin": "In order to set the matrix to a rotation transformation without post-multiplying, use {@link #rotation(Quaterniond)}.", "Reference": "In order to set the matrix to a rotation transformation without post-multiplying, use {@link #rotation(Quaterniondc)}.", "NNUpdater": "In order to set the matrix to a rotation transformation without post-multiplying, use {@link #rotation(Quaternionf)}."}
{"Origin": "Adds rows to destination for each row in table1, with the columns from table2 added as missing values in each", "Reference": "Adds rows to destination for each row in table1 with the columns from table2 added as missing values.", "NNUpdater": "In each row, multiply the value in each column with row in B."}
{"Origin": "Two objects are considered different if {@code value.compareTo(reference) != 0}", "Reference": "Two objects are considered different if {@code value.equals(reference) == false}", "NNUpdater": "{@code getReference().location().toString()}."}
{"Origin": "In case of failure the {@link Flux} will error.", "Reference": "In case of failure the {@link CosmosContinuablePagedFlux} will error.", "NNUpdater": "Get the id of the {@link CosmosContainer}"}
{"Origin": "Gets the hash code of this charset.", "Reference": "Computes a hashcode for this charset.", "NNUpdater": "Returns value of this charset"}
{"Origin": "Set Untergruppe.", "Reference": "Set Unterregister.", "NNUpdater": "Add result set."}
{"Origin": "Sets the {@link DrmProvider} to use when handling DRM for media.", "Reference": "Sets the {@link MediaDrmCallback} to use when handling DRM for media.", "NNUpdater": "If {@link OnDrmConfigHelper} is registered, it will be called during preparation to allow configuration of the DRM properties before opening the DRM session."}
{"Origin": "Creates a new block blob, or updates the content of an existing block blob.", "Reference": "Creates a new block blob.", "NNUpdater": "Creates a new block blob, or updates the content of an existing block blob."}
{"Origin": "Creates query for the given queryString.", "Reference": "Queries this contact source for the given queryString.", "NNUpdater": "-D"}
{"Origin": "Reads a {@code module-info.class} from the given byte buffer but ignore the {@code Hashes} attribute.", "Reference": "Reads a {@code module-info.class} from the given byte buffer but ignore the {@code ModuleHashes} attribute.", "NNUpdater": "Reads a {@code module-info.class} from the given byte buffer but ignore the {@code Hashes} attribute."}
{"Origin": "Tests that adding a @JsNoExport annotation on a method comes out accurately and that removing it comes out accurately as well.", "Reference": "Tests that adding a @JsIgnore annotation on a method comes out accurately and that removing it comes out accurately as well.", "NNUpdater": "Returns the open corner index which is first."}
{"Origin": "Gets the lastUpdated.", "Reference": "Gets the nextCrawl.", "NNUpdater": "Gets the updated."}
{"Origin": "This has a small performance impact even if the task doesn't throw any exception because stack trace is collected in task constructor.", "Reference": "This has a small performance impact even if the task doesn't throw any exceptions because stack trace is collected in task constructor.", "NNUpdater": "Creates a new task that will handle any Throwable that this task might throw."}
{"Origin": "Same as s.substring(0, len) except that it won't split a surrogate pair.", "Reference": "Same as s.substring(0, len) except that it won't split a surrogate pair or at a ZWJ.", "NNUpdater": "SQL SUBSTRING(string FROM ... FOR ...) function."}
{"Origin": "Checks Command cancellation detection", "Reference": "Checks Command cancellation", "NNUpdater": "Create a new context which propagates the values of this context but does not cascade its cancellation."}
{"Origin": "Binds the specified {@link Service} at the specified {@link Route}.", "Reference": "Binds the specified {@link HttpService} at the specified {@link Route}.", "NNUpdater": "Binds the specified {@link Service} at the specified {@link Route}."}
{"Origin": "Get the purged gtid values from MySQL (gtid_purged value)", "Reference": "Get the purged GTID values from MySQL (gtid_purged value)", "NNUpdater": "Build horizontal sections out of shortHoriTable runs"}
{"Origin": "Gets the value of the shortDescription property.", "Reference": "Gets the value of the description property.", "NNUpdater": "Gets the menu text."}
{"Origin": "Parse an XLS into a list of ImportedGrade objects Note that only the first sheet of the Excel file is supported.", "Reference": "Note that only the first sheet of the Excel file is supported.", "NNUpdater": "Set Importiert."}
{"Origin": "Converts the given objects into a map of interned strings where the keys and values are alternating entries in the passed array.", "Reference": "Converts the given objects into a map of potentially cached and interned strings where the keys and values are alternating entries in the passed array.", "NNUpdater": "Converts the given objects into a set of interned strings contained within an internal pool of sets."}
{"Origin": "75% of elements are greater).", "Reference": "larger values cover 75% of the PDF).", "NNUpdater": "Returns the index of the smaller child."}
{"Origin": "Helper method for firing a 'value changed' event.", "Reference": "Fires a value change event.", "NNUpdater": "helper method that allows output Dataset of an operation to be set or changed"}
{"Origin": "Sets the broker URL to use to connect to ActiveMQ using the", "Reference": "Sets the broker URL to use to connect to ActiveMQ broker.", "NNUpdater": "Sets the HBase Zookeeper port for clients to connect to."}
{"Origin": "If one param is a float, the other is converted to a float.", "Reference": "a-b If one param is a float, the other is converted to a float.", "NNUpdater": "Method getFloat returns the element at the given position as a float."}
{"Origin": "This call is equivalent to calling {@code inInterpreter() || inLowTier()}.", "Reference": "This call is equivalent to calling {@code inInterpreter() || inLowGrade()}.", "NNUpdater": "The result is equivalent to {@code this & pow(2, n) != 0}."}
{"Origin": "Otherwise take the existing activate", "Reference": "Otherwise take the existing activated", "NNUpdater": "Activates this component if satisfied."}
{"Origin": "Returns all registered interceptors.", "Reference": "Return all registered interceptors.", "NNUpdater": "Reads class or method annotation for action interceptors."}
{"Origin": "Parses {@link ColumnMajorSparseMatrix} from the given Matrix Market string.", "Reference": "Parses {@link ColumnMajorSparseMatrix} from the given Matrix Market.", "NNUpdater": "Test of text method, of class SparseMatrix."}
{"Origin": "Cluster a new instance.", "Reference": "Constructor.", "NNUpdater": "Returns a new Atomix cluster builder."}
{"Origin": "The INSERT statement defining the order of the values to add for a given CQL row.", "Reference": "The INSERT or UPDATE statement defining the order of the values to add for a given CQL row.", "NNUpdater": "Insert a Row"}
{"Origin": "No interpolation is performed: Accuracy is up to the 5th decimal place", "Reference": "No interpolation is performed: Accuracy is up to the 6th decimal place", "NNUpdater": "Sets the accuracy 0 < min < 1; default VERSION"}
{"Origin": "Determines if the reachability of this object corresponds with the validity of the referenced machine code.", "Reference": "Determines if a reference to this object is the only way the machine code can be executed.", "NNUpdater": "Determines if the reachability of this object corresponds with the validity of the referenced machine code."}
{"Origin": "If not explicitly configured with an annotation, this value will be used.", "Reference": "If not explicitly configured with an annotation, or on a method element, this value will be used.", "NNUpdater": "If not explicitly configured, the default is an indefinite timeout."}
{"Origin": "Group: producer", "Reference": "Group: consumer", "NNUpdater": "post-processor producer -> copy producer -> inputProducer"}
{"Origin": "Writes a file into the specified application directory and attempts to relaunch Getdown in that directory which will cause it to upgrade to the newly specified version and relaunch the application.", "Reference": "Writes a {@code version.txt} file into the specified application directory and attempts to relaunch Getdown in that directory which will cause it to upgrade to the newly specified version and relaunch the application.", "NNUpdater": "Sets the directory name of this plugin with the specified directory."}
{"Origin": "Checks if a given String is a valid Twitch url (ie, one that will display ``Streaming`` on the Discord client).", "Reference": "Checks if a given String is a valid Twitch/Youtube streaming url (ie, one that will display ``Streaming`` on the Discord client).", "NNUpdater": "Checks if a given string is a valid Selection Behavior."}
{"Origin": "Re-loaded scripts need to have their breakpoints re-applied.", "Reference": "Reloaded scripts need to have their breakpoints reapplied.", "NNUpdater": "Re-create a group instance from a textual representation."}
{"Origin": "In that case the ISO code of the preferred language in the UMS settings is returned.", "Reference": "In that case the ISO 639 code of the preferred language in the UMS settings is returned.", "NNUpdater": "In that case the ISO code of the preferred language in the UMS settings is returned."}
{"Origin": "Creates an identifier for an ETD future instrument.", "Reference": "Creates an identifier for an ETD option instrument.", "NNUpdater": "Creates an instrument that will route execution events to a listener."}
{"Origin": "Set the nodeType.", "Reference": "Set the type.", "NNUpdater": "Set Knoten."}
{"Origin": "This method fetches the related content from related content table and assigns them to the corresponding upload field, if any is present in the form definition.", "Reference": "This method fetches the related content from related content table and assigns them to the corresponding upload field, if any is present in the form being fetched.", "NNUpdater": "import method to import the current content of the content definition to the database."}
{"Origin": "Queries the MinLen Checker to determine if there is a known minimum length for the array represented by {@code tree}.", "Reference": "Queries the Value Checker to determine if there is a known minimum length for the array represented by {@code tree}.", "NNUpdater": "Queries the SameLen Checker to return the type that the SameLen Checker associates with the given tree."}
{"Origin": "This will set the margin between the annotations ``outer`` rectangle defined by /Rect and the border.", "Reference": "This will set the difference between the annotations ``outer`` rectangle defined by /Rect and the border.", "NNUpdater": "Returns a Rect representing the intersection of this Rect with the given"}
{"Origin": "Parses the --add-exports command line option and returns the package export definitions in the form of an IModule.", "Reference": "Parses the --add-exports command line option and returns the package export definitions.", "NNUpdater": "Returns {@code true} if this module exports the given package to at least the given module."}
{"Origin": "Returns child style ID.", "Reference": "Returns child style identifier.", "NNUpdater": "Returns style identifier."}
{"Origin": "Test affinity awareness partition distributions cache size property.", "Reference": "Test Partition Awareness partition distributions cache size property.", "NNUpdater": "Get the current awareness as list of cognitions."}
{"Origin": "Helper to print change details.", "Reference": "Helper to print movies details.", "NNUpdater": "Change print content of 'x' module from 'Print A from Home' to 'Print A from Proj'."}
{"Origin": "Sets the additional trade information, defaulted to an empty instance.", "Reference": "Sets the additional information, defaulted to an empty instance.", "NNUpdater": "Gets the trade attributes."}
{"Origin": "Analyzes the provided query string and returns a space concatenation of the analyzed tokens.", "Reference": "Analyzes the provided query string and returns a concatenation of the analyzed tokens.", "NNUpdater": "Return the concatenation of all the given node tokens value."}
{"Origin": "Any metadata for the dialog node.", "Reference": "The metadata for the dialog node.", "NNUpdater": "Sets the dialogNodeId."}
{"Origin": "Report whether the repository instance has been allocated.", "Reference": "Report whether the global repository has been allocated.", "NNUpdater": "Engine."}
{"Origin": "Decode an action profile group with members information to a PI action group.", "Reference": "Decode an action profile group with members information to a PI action profile group.", "NNUpdater": "Guide."}
{"Origin": "Returns a zoned date-time formed from this date at the specified time.", "Reference": "Returns an offset date-time formed from this date at the specified time.", "NNUpdater": "Returns a ChronoLocalDateTime formed from this date at the specified time."}
{"Origin": "Creates a worker to execute single pending task.", "Reference": "Creates a worker to execute single local continuous task.", "NNUpdater": "Execute group."}
{"Origin": "Returns an immutable map containing ten mappings.", "Reference": "Returns an unmodifiable map containing ten mappings.", "NNUpdater": "Returns an immutable map of named bindings."}
{"Origin": "Returns the primitive ID for the primitive.", "Reference": "Returns the namespaced primitive name.", "NNUpdater": "Returns the primitives service."}
{"Origin": "The default value must not be null.", "Reference": "The default value may be null.", "NNUpdater": "The value must not be null."}
{"Origin": "Return the result hierarchy.", "Reference": "Return the result.", "NNUpdater": "Generate the interface hierarchy and class hierarchy."}
{"Origin": "Returns the member request with the primary key or throws a {@link com.liferay.so.NoSuchMemberRequestException} if it could not be found.", "Reference": "Returns the member request with the primary key or throws a {@link NoSuchMemberRequestException} if it could not be found.", "NNUpdater": "Returns the cluster member with the given identifier, or null if no such member exists."}
{"Origin": "Gets the index on which the underlying future fixes.", "Reference": "Gets the name of the volatilities.", "NNUpdater": "Gets the security identifier."}
{"Origin": "wal2json plugin nor pgoutput include toasted column in the update", "Reference": "wal2json plugin include toasted column in the update", "NNUpdater": "If the plugin has {@link #getUpdateInfo() an update}, returns the {@link UpdateSite.Plugin} object."}
{"Origin": "Gets all of the {@link AlertDefinition}s that exist on the path for {@link Components#AMBARI_SERVER}.", "Reference": "Gets all of the {@link AlertDefinition}s that exist on the path for {@link RootComponent#AMBARI_SERVER}.", "NNUpdater": "Operation fails."}
{"Origin": "See Immutable List Static Factory Methods for details.", "Reference": "See Unmodifiable Lists for details.", "NNUpdater": "The returned List is immutable."}
{"Origin": "This method will retrieve all the ExternalSourceEntries for the ExternalSource for the given AuthorityName param", "Reference": "This method will retrieve all the ExternalSourceEntries for the ExternalSource for the given externalSourceName param", "NNUpdater": "Set the name value."}
{"Origin": "But that is okay because {@link #constructState(Map)} will give priority to collections in the shared collection state over this map.", "Reference": "But that is okay because {@link #constructState(Set)} will give priority to collections in the shared collection state over this map.", "NNUpdater": "This method delegates to {@link #fast(VectorEntry.State)} with state {@link VectorEntry.State#SET}."}
{"Origin": "Decorates all {@link Service}s with the specified {@link DecoratingServiceFunction}.", "Reference": "Decorates all {@link HttpService}s with the specified {@link DecoratingHttpServiceFunction}.", "NNUpdater": "Returns the {@link ClientOptions} with the specified {@link ClientOptionValue}s."}
{"Origin": "A hook allowing a subclass to populate the ``names`` field in the sourcemap.", "Reference": "Returns the name to be added to the ``names`` field in the sourcemap.", "NNUpdater": "Start connector."}
{"Origin": "Add a Warn EventLogItem and log.", "Reference": "Add a Warn EventLogEntry and log.", "NNUpdater": "Send a {@link android.util.Log#WARN} log message and log the exception."}
{"Origin": "Set the upper 4x3 submatrix of this {@link Matrix4d} to the upper 4x3 submatrix of the given {@link Matrix4d} and don't change the other elements.", "Reference": "Set the upper 4x3 submatrix of this {@link Matrix4d} to the upper 4x3 submatrix of the given {@link Matrix4dc} and don't change the other elements.", "NNUpdater": "Set the upper left 3x3 submatrix of this {@link Matrix4d} to that of the given {@link Matrix4d} and don't change the other elements."}
{"Origin": "Returns the LValue of the assignment.", "Reference": "Returns the LHS of the assignment.", "NNUpdater": "It is called after has (recursively) been extended with a value assignment for ."}
{"Origin": "timed invokeAll(null) throws NPE", "Reference": "timed invokeAll(null) throws NullPointerException", "NNUpdater": "timed invokeAll(empty collection) returns empty list"}
{"Origin": "For the specified list of table ids, return the number of mispartitioned rows using the provided hashinator and hashinator config", "Reference": "For the specified list of table ids, return the number of mispartitioned rows using the provided hashinator config", "NNUpdater": "Add the given tokens to the ring and generate the new hashinator."}
{"Origin": "Checks if the addressed database can simply be opened, or needs to be (re)built.", "Reference": "Checks if the addressed database can be opened, or needs to be (re)built.", "NNUpdater": "Checks if the list contents have changed."}
{"Origin": "Extends the template type map associated with this type, merging in the keys and values of the specified map.", "Reference": "Prepends the template type map associated with this type, merging in the keys and values of the specified map.", "NNUpdater": "returns the value type for a {@link Map} type like Map}."}
{"Origin": "test all digits in different locations of strings.", "Reference": "test each individual digit in different locations of strings.", "NNUpdater": "Returns the requiredPackages."}
{"Origin": "Compute the diagonal of a bounding box.", "Reference": "Compute the square size of a bounding box.", "NNUpdater": "Returns wheter the given bounding box is contained in this bounding box."}
{"Origin": "Parses the specified options and returns the faulty key.", "Reference": "Assigns the specified options.", "NNUpdater": "Extracts options from the specified item."}
{"Origin": "Build the range store with provided {@link StorageServerClientManager}.", "Reference": "Build the range store with provided {@link RangeStoreFactory}.", "NNUpdater": "Build the range store with provided {@link StorageServerClientManager}."}
{"Origin": "Tests assert that the setting can be deleted after unlock the setting.", "Reference": "Tests assert that the setting can be deleted after clear read-only of the setting.", "NNUpdater": "Unlocks the block"}
{"Origin": "Take most frequent black local max for which key (beam thickness) is larger than about twice the main line thickness and smaller than main white gap between (large) staff lines.", "Reference": "Take most frequent black local max for which key (beam thickness) is larger than a minimum fraction of interline and smaller than main white gap between (large) staff lines.", "NNUpdater": "Report the main beam thickness."}
{"Origin": "This causes a LoadException in VERSION", "Reference": "This caused a LoadException in VERSION", "NNUpdater": "This is defined as {@code totalLoadTime / (loadSuccessCount + loadFailureCount)}."}
{"Origin": "Refreshes the transaction schema cache by reading the central schema cache is read into this transaction cache.", "Reference": "Refreshes the transaction schema cache by reading the keyspace schema cache into this transaction cache.", "NNUpdater": "Here, for JBossCache, we consider the cache to be transaction aware if the underlying cache instance has a reference to the transaction manager."}
{"Origin": "Reserve ids used by the predicates or constraints associated with some join graph.", "Reference": "Reserve ids used by the constraints for some predicate or join graph.", "NNUpdater": "Reserve the page if this is a index root page entry."}
{"Origin": "Creates a {@link MiddlemanType#ERROR_PROPAGATING_MIDDLEMAN error-propagating} middleman.", "Reference": "Creates a {@link MiddlemanType#SCHEDULING_DEPENDENCY_MIDDLEMAN scheduling dependency} middleman.", "NNUpdater": "Returns the middleman artifact on the specified attribute of the specified rule for the specified mode, or an empty set if it does not exist."}
{"Origin": "Loads the available edit groups.", "Reference": "Loads the available element views.", "NNUpdater": "Guide."}
{"Origin": "Run.", "Reference": "Execute.", "NNUpdater": "Run thread"}
{"Origin": "Tests the {@link BlockWorker#createBlock(long, long, String, long)} method with a tier other than MEM.", "Reference": "Tests the {@link BlockWorker#createBlock(long, long, String, String, long)} method with a tier other than MEM.", "NNUpdater": "Tests the {@link TieredBlockStore#createBlock(long, long, BlockStoreLocation, long)} method to work with eviction."}
{"Origin": "Creates a Cache that will only flush to a central shared cache then the TransactionOLTP is disposed off", "Reference": "Creates a Cache that will only exist within the context of a TransactionOLTP", "NNUpdater": "Flush near cache on Hazelcast member."}
{"Origin": "Use the endorsed standards override mechanism to load JAX-WS VERSION API", "Reference": "Use the standard override mechanism to load JAX-WS VERSION or newer API.", "NNUpdater": "The auth_type."}
{"Origin": "Send a pong message to the server.", "Reference": "Send a ping message to the server.", "NNUpdater": "Sends a message to the server."}
{"Origin": "Tests {@link StringUtils#capitalize(String)}.", "Reference": "Tests the {@link StringUtils#capitalize(String)} method.", "NNUpdater": "Tests the {@link CommonUtils#listToString(List)} method."}
{"Origin": "Upload screenshot file to Amazon S3 using zafira client", "Reference": "Upload screenshot file to Amazon S3 using Zafira Client", "NNUpdater": "Schedules a new transfer to upload options to Amazon S3."}
{"Origin": "Adds a qualified ``exports dynamic`` directive to the declaration.", "Reference": "Adds a qualified ``opens`` directive to the declaration.", "NNUpdater": "Adds a ``requires transitive`` directive to the declaration."}
{"Origin": "Sets the int64Value of the CounterData in the MonitoringInfo, and the appropraite type URN.", "Reference": "Sets the int64Value of the CounterData in the MonitoringInfo, and the appropriate type URN.", "NNUpdater": "Sets the value of the 'sdkToken' field."}
{"Origin": "Gets the number of documents to return per fetch.", "Reference": "Returns the number of documents to return per fetch by default.", "NNUpdater": "Assert the number of documents in a given collection"}
{"Origin": "Traces a {@link TimeSeriesPoint}.", "Reference": "Traces a {@link DiagnosticContext.TimeSeriesPoint}.", "NNUpdater": "Gets the time-series of fixings, defaulted to an empty time-series."}
{"Origin": "Configure {@link AutoDiscoverable auto-discoverables} in the instance manager.", "Reference": "Configure {@link AutoDiscoverable auto-discoverables} in the injection manager.", "NNUpdater": "Visit the {@link MailLinkNode}."}
{"Origin": "Find cites along a specific line and store them.", "Reference": "Find cites along a specific line and add them to a map.", "NNUpdater": "Decodes the contents of store-specific URIs and puts them into a {@link ServerSettings} object."}
{"Origin": "Gets the filed name.", "Reference": "Gets the field name.", "NNUpdater": "Gets the protocol handler."}
{"Origin": "If only public, module and package access are allowed, the suffix is ``/package``.", "Reference": "If public and package access are allowed, the suffix is ``/package``.", "NNUpdater": "Get the node package string."}
{"Origin": "Create a copy of this Logger that does not log exception stack traces, unless the log level is DEBUG or lower.", "Reference": "Returns a copy of this Logger that does not log exception stack traces, unless the log level is DEBUG or lower.", "NNUpdater": "Send a {@link android.util.Log#DEBUG} log message and log the exception."}
{"Origin": "See {@link #setPadding(int, int, int, int)}", "Reference": "See {@link #setPadding(float, float, float, float)}", "NNUpdater": "See {@link #logLikelihoodRatio(long, long, long, long)}."}
{"Origin": "Create insert optimize unit.", "Reference": "Create optimized insert value.", "NNUpdater": "Creates a force merge request."}
{"Origin": "Get the display name for this group, including the size of the group.", "Reference": "Get the display name for this group.", "NNUpdater": "Convert to string."}
{"Origin": "Also, you can add no more than 30 thousand custom (OOV) words to a model.", "Reference": "Also, you can add no more than 90 thousand custom (OOV) words to a model.", "NNUpdater": "The service populates the words resource for a custom model with out-of-vocabulary (OOV) words found in each corpus added to the model."}
{"Origin": "Group: producer", "Reference": "Group: consumer", "NNUpdater": "post-processor producer -> copy producer -> inputProducer"}
{"Origin": "Sets the level.", "Reference": "Set the level.", "NNUpdater": "Set Ebene."}
{"Origin": "Iterate over all the {@link KeyProperties key} by page and call {@link KeyClient#getKey(KeyProperties key properties)}.", "Reference": "Iterate over all the {@link KeyProperties key} by page and call {@link KeyClient#getKey(String, String)}.", "NNUpdater": "Iterate over all the {@link KeyProperties key} by page and call {@link KeyClient#getKey(KeyProperties key properties)}."}
{"Origin": "Returns the status code for this change.", "Reference": "Returns the server status code for this change.", "NNUpdater": "Returns the inheritance name."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "When accessing a left child, level value decrements by 1.", "Reference": "When enqueueing a left child, column decrements by 1.", "NNUpdater": "When accessing a left child, level value decrements by 1."}
{"Origin": "Sets the identifier of this action profile group.", "Reference": "Sets the ID of this action profile group.", "NNUpdater": "Sets the label"}
{"Origin": "Create Kubernetes watch for KafkaUser resources.", "Reference": "Create Kubernetes watch.", "NNUpdater": "Save user."}
{"Origin": "Encodes the commit time into a key.", "Reference": "Encodes the txId into a key.", "NNUpdater": "Returns the member version."}
{"Origin": "Generate a file (format csv) to be used by deep learning software, populated by samples features.", "Reference": "Generate a file (using CSV format) to be used by deep learning software, populated by all samples features.", "NNUpdater": "Returns additional properties used to parse CSV data (used when {@link #format()} is set to CSV)."}
{"Origin": "Configures {@link DbEntityManager} with default class path.", "Reference": "Configures {@link DbEntityManager} with specified class path.", "NNUpdater": "Configures {@link DbEntityManager} with default class path."}
{"Origin": "Performs actual Put operation for the specified record in HBase.", "Reference": "Performs actual Put/delete operation for the specified record in HBase.", "NNUpdater": "Performs the actual filter."}
{"Origin": "Create and start logging server and client thread pool.", "Reference": "Creates and starts logging server and client thread pool.", "NNUpdater": "Create a TThreadPoolServer with the given transport and processo with the default transport factory.r"}
{"Origin": "Convert selected metrics from a registry into a map, with metrics in a compact format.", "Reference": "Convert selected metrics from a registry into a map, with metrics in a compact AND simple format.", "NNUpdater": "Initialize metrics from the metrics.xml containing the base & vendor metrics metadata."}
{"Origin": "Always returns {@code DUMMY_TARGET}.", "Reference": "Always returns {@code null}.", "NNUpdater": "Provides a dummy implementation of {@link RTPConnectorInputStream#getControl(String)} that always returns null."}
{"Origin": "Return the string representations of the annotation types for the given doc.", "Reference": "Adds the annotatation types for the given Element.", "NNUpdater": "Return the string associated with the specified reply code."}
{"Origin": "Set the preventEncryptionScopeOverride property: Optional.", "Reference": "Set the encryptionScopeOverridePrevented property: Optional.", "NNUpdater": "Set the encryptionKey property: Optional."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "See Immutable Set Static Factory Methods for details.", "Reference": "See Unmodifiable Sets for details.", "NNUpdater": "VerificationTimes supports multiple static factory methods:"}
{"Origin": "Sets the command sequence number.", "Reference": "Sets the command sequence numbers.", "NNUpdater": "Sets the event sequence number."}
{"Origin": "Returns the length of this path.", "Reference": "its number of steps.", "NNUpdater": "Returns the absolute file path."}
{"Origin": "Code snippets for {@link LeaseClientBuilder#buildAsyncClient()}.", "Reference": "Code snippets for {@link BlobLeaseClientBuilder#buildAsyncClient()}.", "NNUpdater": "Code snippets for {@link PageBlobAsyncClient#create(long)}"}
{"Origin": "``Allow``, ``Accept``).", "Reference": "``Allow``, ``Accept``, etc.", "NNUpdater": "Operation fails."}
{"Origin": "query by given selectBuilder", "Reference": "Query by given selectBuilder", "NNUpdater": "Execute the select query and the update query if provided."}
{"Origin": "Sets date ranges.", "Reference": "Sets the dateRanges.", "NNUpdater": "Sets the modifiable list of ranges to return from the target resource's representation."}
{"Origin": "The client will connect to servers in the cluster according to the pattern specified by theconfigured {@link ServerSelectionStrategy}.", "Reference": "The client will connect to servers in the cluster according to the pattern specified by the configured {@link ServerSelectionStrategy}.", "NNUpdater": "Returns the set of members in the cluster."}
{"Origin": "This variant retrieves {@link Class#getDeclaredMethods()} from a local cache in order to avoid the JVM's SecurityManager check and defensive array copying.", "Reference": "Variant of {@link Class#getDeclaredMethods()} that uses a local cache in order to avoid the JVM's SecurityManager check and new Method instances.", "NNUpdater": "This variant retrieves {@link Class#getDeclaredMethods()} from a local cache in order to avoid the JVM's SecurityManager check and defensive array copying."}
{"Origin": "Return true if the given attribute name is the name of a pre-defined attribute that is not allowed in the class file.", "Reference": "Return true if the given attribute name is the name of a pre-defined attribute in JVMS VERSION that is not allowed in a module-info class.", "NNUpdater": "Returns the method parameter name."}
{"Origin": "Get the result hierarchy.", "Reference": "Get the result.", "NNUpdater": "Get a result through the tunnel."}
{"Origin": "Steinbach, M. and Karypis, G. and Kumar, V.", "Reference": "M. Steinbach, G. Karypis, V. Kumar", "NNUpdater": "Steinbach, M. and Karypis, G. and Kumar, V."}
{"Origin": "Adds a control metadata.", "Reference": "Adds a packet metadata.", "NNUpdater": "Adds a control metadata."}
{"Origin": "Returns the sync d l objects before and after the current sync d l object in the ordered set where companyId = ?", "Reference": "Returns the sync d l objects before and after the current sync d l object in the ordered set where repositoryId = ?", "NNUpdater": "Returns the sync d l object ID of this sync d l object."}
{"Origin": "Returns the distanceFunction.", "Reference": "Returns the distance.", "NNUpdater": "If the specified distance function is an instance of a {@link SpatialPrimitiveDistanceFunction} the range query is delegated to the underlying index."}
{"Origin": "Turn a toX of Eithers into a single Either with Lists of values.", "Reference": "Turn a Collection of Eithers into a single Either with Lists of values.", "NNUpdater": "By constrast with {@link Eithers#sequencePresent(IterableX)}, if any Eithers are empty the result is an empty Either"}
{"Origin": "The text of the user input example.", "Reference": "The text of a user input example.", "NNUpdater": "Examples:"}
{"Origin": "Returns a new instance of a query executor that handles the specified data type.", "Reference": "Returns a new instance of the executor using the config from the graph node.", "NNUpdater": "Returns a data instance for the first argument of the function."}
{"Origin": "Returns the ratings stats total score of this asset entry set.", "Reference": "Returns the asset entry set likes count of this asset entry set.", "NNUpdater": "Returns the payload of this asset entry set."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Symbolic links are not moved to the destination when encountered: neither the link nor the linked file is moved, and the symlink file is deleted.", "Reference": "It is also worth noting that symbolic links are not moved to the destination when encountered: neither the link nor the linked file is moved, and the symlink file is deleted.", "NNUpdater": "Gets the Point this entity moved to"}
{"Origin": "Sets the {@link IGetAndSetLocator} for the given application.", "Reference": "Sets the {@link IPropertyLocator} for the given application.", "NNUpdater": "Return a default configuration StreamManager with a {@link LocatorFile}, {@link LocatorURL}, and {@link LocatorClassLoader}"}
{"Origin": "**See also:** [Specifying a voice](URL).", "Reference": "**See also:** [Listing all available voices](URL).", "NNUpdater": "Operation fails."}
{"Origin": "Creates new {@link AggregationExpression} that returns the month of a date as a number between 1 and 12 in the factory timezone (default UTC).", "Reference": "Creates new {@link AggregationExpression} that returns the month of a date as a number between 1 and 12.", "NNUpdater": "Creates new {@link AggregationExpression} that returns the month of a date as a number between 1 and 12 in the factory timezone (default UTC)."}
{"Origin": "Get the DicomAccessor instance which is being used to read the underlying DICOM instance.", "Reference": "Get the DicomImageAccessor instance which is being used to read the underlying DICOM instance.", "NNUpdater": "Gets the instance name."}
{"Origin": "Construct the NBT representation of the channel list, for use during login handshaking", "Reference": "Construct the Map representation of the channel list, for use during login handshaking", "NNUpdater": "Perform the handshake."}
{"Origin": "Creates a reference to an already declared or referenced function.", "Reference": "Creates a call to an already declared or referenced function.", "NNUpdater": "Set the derived type."}
{"Origin": "Build mongo template mongo template.", "Reference": "Build mongo template.", "NNUpdater": "Configures the {@link MongoOperations} to be used."}
{"Origin": "Adds a new job to the job queue to remove the specified extension from the specified namespace.", "Reference": "Adds a new job to the job queue to perform the given uninstall request.", "NNUpdater": "Adds the specified namespace to a temporary node."}
{"Origin": "Prepare project for using.", "Reference": "Prepare a project for using.", "NNUpdater": "Start server."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "The given is converted to the actual user class if necessary, @see ClassUtils#getUserClass.", "Reference": "The given is converted to the actual user class if necessary, @see ProxyUtils#getUserClass.", "NNUpdater": "From {@link Class#getClassLoader() callingClass.getClassLoader() }"}
{"Origin": "Client will automatically attempt to reconnect to the server if the connection is lost.", "Reference": "Sets whether the client will automatically attempt to reconnect to the server if the connection is lost.", "NNUpdater": "Is the connection lost for more than 3 minutes, the user will be removed (within 3 minutes the user can reconnect)"}
{"Origin": "This method must only be used for type references whose sort is {@link #THROWS THROWS}.", "Reference": "This method must only be used for type references whose sort is {@link #THROWS}.", "NNUpdater": "A {@link UserException} is throws when:"}
{"Origin": "Indicate to associated {@link ExportGeneration}s to become masters for the given partition id", "Reference": "Indicate to associated {@link ExportGeneration}s to become leaders for the given partition id", "NNUpdater": "Shutdown the BlobStore with given {@link PartitionId} {@code id}."}
{"Origin": "Writes a collection of values to an output stream.", "Reference": "Writes a sequence of values to an output stream.", "NNUpdater": "Copies an input stream to an output stream."}
{"Origin": "null, vertical tab, formfeed, etc.)", "Reference": "null, vertical tab, form-feed, etc.)", "NNUpdater": "Set Register."}
{"Origin": "Resources ending in ``{@code .class}`` or where the package name is not a Java identifier are resources that can never be encapsulated.", "Reference": "Resources ending in ``{@code .class}`` or where the package name is not a legal package name can not be encapsulated.", "NNUpdater": ")*(Java identifier)([])* URL"}
{"Origin": "Stores the parsed complete object.", "Reference": "Stores the parsed zone.", "NNUpdater": "Stores the parsed complete object."}
{"Origin": "Save a fileEntry and return to the the path.", "Reference": "Save a fileEntry.", "NNUpdater": "Return the URL of the XML descriptor for this context."}
{"Origin": "Decorates and binds the specified {@link ServiceWithRoutes} at multiple {@link Route}s of the default {@link VirtualHost}.", "Reference": "Decorates and binds the specified {@link HttpServiceWithRoutes} at multiple {@link Route}s of the default {@link VirtualHost}.", "NNUpdater": "Decorates and binds the specified {@link ServiceWithRoutes} at multiple {@link Route}s of the default {@link VirtualHost}."}
{"Origin": "Key keys} with key material included of the specified versions.", "Reference": "KeyVaultKey keys} with key material included of the specified versions.", "NNUpdater": "KeyImportOptions#getKeyMaterial() key material} cannot be null."}
{"Origin": "Enriches an environment with new/modified properties and returns the new instance.", "Reference": "Enriches an environment with new/modified properties or views and returns the new instance.", "NNUpdater": "Return a new {@link StandardEnvironment}."}
{"Origin": "Code snippets for {@link LeaseClientBuilder#buildAsyncClient()}.", "Reference": "Code snippets for {@link BlobLeaseClientBuilder#buildAsyncClient()}.", "NNUpdater": "Code snippets for {@link PageBlobAsyncClient#create(long)}"}
{"Origin": "Returns an immutable set containing an arbitrary number of elements.", "Reference": "Returns an unmodifiable set containing an arbitrary number of elements.", "NNUpdater": "Return the list of all field names."}
{"Origin": "The revision string.", "Reference": "Initialise output layer.", "NNUpdater": "Set the value of update."}
{"Origin": "Unregisters a previously registered listener to be called when the primitive's status changes.", "Reference": "Unregisters a previously registered listener to be called when the primitive's state changes.", "NNUpdater": "Unregisters a previously registered VM shutdown hook."}
{"Origin": "Attaches an application created from a WADL description document to the component.", "Reference": "Attaches an application created from a Swagger description document to the component.", "NNUpdater": "Returns a WADL description of the current resource."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Sort a subset of an array of number primitives.", "Reference": "Sort a subset of an array using the given comparator", "NNUpdater": "a primitive or an array"}
{"Origin": "or throws a {@link com.liferay.mail.NoSuchMessageException} if it could not be found.", "Reference": "or throws a {@link NoSuchMessageException} if it could not be found.", "NNUpdater": "Operation fails."}
{"Origin": "Validates the {@code item} using item validators added using {@link #withValidator(Validator)} and returns the result of the validation as a list of validation results.", "Reference": "Validates the {@code bean} using validators added using {@link #withValidator(Validator)} and returns the result of the validation as a list of validation results.", "NNUpdater": "Validates the {@code item} using item validators added using {@link #withValidator(Validator)} and returns the result of the validation as a list of validation results."}
{"Origin": "Invoked each time a given number of segments have completed and the terminal opearation has consumed all entries in the given segment", "Reference": "Invoked each time a given number of segments have completed and the terminal operation has consumed all entries in the given segment", "NNUpdater": "Sets maximum size of the segment."}
{"Origin": "Registers a callback to be invoked when the fullscreen mode should be changed.", "Reference": "Sets a listener to be called when the fullscreen mode should be changed.", "NNUpdater": "The listener's callback interface will be invoked when authentication events occur."}
{"Origin": "Deletes the specified variable from the configuration.", "Reference": "Deletes the specified variable from the CONFIGURATION.", "NNUpdater": "Returns the value of the specified variable."}
{"Origin": "Throws a SystemException when the http status code is outsdie of the range 200 - 300.", "Reference": "Throws SystemException when the http status code is outsdie of the 200 and 400 range", "NNUpdater": "The default is 500."}
{"Origin": "Adds a resource file to the artifact classes folder.", "Reference": "Adds a resource file to the artifact folder.", "NNUpdater": "Adds a resource file to the plugin root folder."}
{"Origin": "Calling this method will commit an open transaction, even if the new level is the same as the old one, except if the level is not supported.", "Reference": "Calling this method will commit an open transaction, even if the new level is the same as the old one.", "NNUpdater": "Compares this level against the level passed as an argument and returns true if this level is the same or is less specific.T"}
{"Origin": "Replaces existing tags of the specified {@link NamespacedEntityId} with a new set of tags.", "Reference": "Replaces existing tags of the specified {@link MetadataEntity} with a new set of tags.", "NNUpdater": "Replaces existing tags of the specified {@link NamespacedEntityId} with a new set of tags."}
{"Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}", "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveToRangeEnd }{@code >}}", "NNUpdater": "Create an instance of {@link JAXBElement }{@code <}{@link CTStrokeChild }{@code >}}"}
{"Origin": "Returns the database ID of the user to whom this permission is granted.", "Reference": "Returns the database ID of the entity to whom this permission is granted.", "NNUpdater": "Returns if the user has granted the given permission"}
{"Origin": "Allocates a byte array of the specified length in unmanaged memory.", "Reference": "Allocates a byte array of the specified length.", "NNUpdater": "Returns a byte array of the specified length."}
{"Origin": "(optional) the attribute index (1-based), otherwise all attributes except class are changed", "Reference": "(optional) the attribute index (1-based), otherwise all attributes except class are changed Assumption: last attribute is class attribute", "NNUpdater": "Sets index of the attribute used."}
{"Origin": "Receives all emails that matches given {@link EmailFilter filter} and mark all messages as 'seen' and 'deleted'.", "Reference": "Receives all emails that matches given {@link EmailFilter} and mark all messages as 'seen' and 'deleted'.", "NNUpdater": "{@link Filter#getDocIdSet}."}
{"Origin": "Code snippets for {@link LeaseClientBuilder#buildAsyncClient()}.", "Reference": "Code snippets for {@link BlobLeaseClientBuilder#buildAsyncClient()}.", "NNUpdater": "Code snippets for {@link PageBlobAsyncClient#create(long)}"}
{"Origin": "The meta-property for the {@code price} property.", "Reference": "The meta-property for the {@code tradedPrice} property.", "NNUpdater": "The meta-property for the {@code initialPrice} property."}
{"Origin": "Tests if this string ends with any specified suffixes.", "Reference": "Tests if this CharSequence ends with any specified suffixes.", "NNUpdater": "Ends the session."}
{"Origin": "Returns the parent folder to the resource from the root site.", "Reference": "Returns the parent folder of this resource from the root site.", "NNUpdater": "Returns the name of a resource with the complete site root name, (e.g."}
{"Origin": "The state of playback should be updated to {@link SessionPlayer2#PLAYER_STATE_PAUSED} after the prefetch is done.", "Reference": "The state of playback should be updated to {@link SessionPlayer2#PLAYER_STATE_PAUSED} after the prepare is done.", "NNUpdater": "The state of playback should be updated to {@link SessionPlayer2#PLAYER_STATE_PAUSED} after the prefetch is done."}
{"Origin": "Test method for {@link org.infinispan.spring.provider.SpringRemoteCacheManager#stop()}.", "Reference": "Test method for {@link org.infinispan.spring.remote.provider.SpringRemoteCacheManager#stop()}.", "NNUpdater": "Operation fails."}
{"Origin": "The option is a: type.", "Reference": "The option will be converted to a type.", "NNUpdater": "Returns the {@link OptionsBase} class the defines the given option, null if the option isn't recognized."}
{"Origin": "Returns the first sync d l object in the ordered set where companyId = ?", "Reference": "Returns the first sync d l object in the ordered set where repositoryId = ?", "NNUpdater": "Finds the last article in the ordered set where resourcePrimKey = ?"}
{"Origin": "Gets the confidence.", "Reference": "Set the value.", "NNUpdater": "This is measured from the bottom, thus equal to {@code 1 - confidence level}."}
{"Origin": "If {@code labels = ````}, settings without any label are returned.", "Reference": "If {@code labelFilter = ````}, settings without any label are returned.", "NNUpdater": "If {@code labels = ``\\0``}, settings without any label are returned."}
{"Origin": "Get the content of this element.", "Reference": "Gets the value of the content property.", "NNUpdater": "Removes all child content from this parent."}
{"Origin": "Check if the resource is an http resource and apply filter.", "Reference": "Check if the resource is an http resource and inject ParamOrderConfig annotation.", "NNUpdater": "Check if a resource name is available."}
{"Origin": "Fire WNA OPEN/CLOSE metrics and update the actual state after a state change is received.", "Reference": "Fire WNA metrics and update the actual state after a state change is received.", "NNUpdater": "Change the {@link TxServiceRunState}."}
{"Origin": "If {@code labels = ``abc1234``}, settings with a label equal to ``abc1234`` are returned.", "Reference": "If {@code labelFilter = ``abc1234``}, settings with a label equal to ``abc1234`` are returned.", "NNUpdater": "If {@code labels = ``abc1234``}, settings with a label equal to ``abc1234`` are returned."}
{"Origin": "Main method to invoke this demo about how to extract key phrases of a text input.", "Reference": "Main method to invoke this demo about how to extract the key phrases of an input text.", "NNUpdater": "Starts the application."}
{"Origin": "Client will automatically attempt to reconnect to the server if the connection is lost.", "Reference": "Sets whether the client will automatically attempt to reconnect to the server if the connection is lost.", "NNUpdater": "Is the connection lost for more than 3 minutes, the user will be removed (within 3 minutes the user can reconnect)"}
{"Origin": "Try to process recorded events for 'maxtime' miliseconds.", "Reference": "Try to process recorded events for 'maxDuration' miliseconds.", "NNUpdater": "Clears all the events recorded by this Event Bus as well as all subscribed clusters."}
{"Origin": "Returns true if the class has the specified annotation class.", "Reference": "Returns true if the class has the specified annotation type.", "NNUpdater": "Returns true if the class has the specified annotation type."}
{"Origin": "Sets the value of the sourceFileName property.", "Reference": "Sets the value of the componentName property.", "NNUpdater": "Sets the value of the type property."}
{"Origin": "Implements {@link PacketFilter}.", "Reference": "Implements {@link StanzaFilter}.", "NNUpdater": "Get head packet."}
{"Origin": "Gets the tag message of a logging event", "Reference": "Gets the logcat tag string of a logging event", "NNUpdater": "Verify a logging event at the error level with the given message."}
{"Origin": "Read the parameter meta data from the transfer object.", "Reference": "Read the parameter meta data from the out object.", "NNUpdater": "The meta-data of the Dataframe are updated."}
{"Origin": "Sets {@link CommitContext.ValidationType} for associated commit.", "Reference": "Sets {@link CommitContext.ValidationMode} for associated commit.", "NNUpdater": "IndexWriter#commit(Map)} for this commit."}
{"Origin": "Default method - returns ``input``", "Reference": "Default method - returns ``success``", "NNUpdater": "Returns Lagarto lexer."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Get the map of all processed certificates until now.", "Reference": "Get the set of all processed certificates until now.", "NNUpdater": "Get Verarbeitet."}
{"Origin": "Corresponds to `hex.tree.drf.DrfMojoModel.score0()`", "Reference": "Corresponds to `hex.tree.gbm.GbmMojoModel.score0()`", "NNUpdater": "Operation fails."}
{"Origin": "Code Samples {@codesnippet com.azure.security.keyvault.secretclient.getSecret#secretProperties}", "Reference": "{@codesnippet com.azure.security.keyvault.secretclient.deleteSecret#string}", "NNUpdater": "Code Samples {@codesnippet com.azure.security.keyvault.secretclient.getSecret#secretProperties}"}
{"Origin": "Checks if the given type id is of the edit group type.", "Reference": "Checks if the given type id is of the element view type.", "NNUpdater": "Checks if the given type name is a known field type."}
{"Origin": "Writes the node to the specified output stream.", "Reference": "Finalizes the index and writes the node to the specified output stream.", "NNUpdater": "Writes the node to the specified output stream."}
{"Origin": "Fits a CRF.", "Reference": "Fits a CRF model.", "NNUpdater": "Return end of the time slice into which the metric fits."}
{"Origin": "Asserts that all channels of the processor channel combination, processed the correct number of messages", "Reference": "Asserts that source channel, processed the correct number of messages", "NNUpdater": "Asserts that the expected minimum number of messages were processed by the modules in the stream and that no errors occurred."}
{"Origin": "Example: [30, 60, 70, 90], the 75 percentile is 30 (i.e.", "Reference": "Example: [30, 60, 70, 90], the 75 percentile is VERSION (i.e.", "NNUpdater": "For example, if the field is specified as minuteOfHour and the time is 12:30:45, the value printed is 75."}
{"Origin": "Adds a new document to this collection with the specified POJO as contents, assigning it a document ID automatically.", "Reference": "Adds a new document to this collection with the specified data, assigning it a document ID automatically.", "NNUpdater": "Add the document."}
{"Origin": "Tests assert that the setting can not be deleted after lock the setting.", "Reference": "Tests assert that the setting can not be deleted after set the setting to read-only.", "NNUpdater": "Test setting the setup file."}
{"Origin": "User can use the returned value to control when to enter the scope of this span.", "Reference": "User can control when to enter the scope of this span.", "NNUpdater": "Set the properties value."}
{"Origin": "Returns the definition with the primary key or throws a {@link com.liferay.ams.NoSuchDefinitionException} if it could not be found.", "Reference": "Returns the definition with the primary key or throws a {@link NoSuchDefinitionException} if it could not be found.", "NNUpdater": "The undefined lazy value is by definition empty and throws a {@code NoSuchElementException} on {@code get()}."}
{"Origin": "Returns the sync d l objects before and after the current sync d l object in the ordered set where companyId = ?", "Reference": "Returns the sync d l objects before and after the current sync d l object in the ordered set where repositoryId = ?", "NNUpdater": "Returns the sync d l object ID of this sync d l object."}
{"Origin": "Builds a new {@link CheckInDialogFragment} setting all values based on the given episode TVDb id.", "Reference": "Builds and shows a new {@link CheckInDialogFragment} setting all values based on the given episode TVDb id.", "NNUpdater": "Converts a release time from trakt (e.g."}
{"Origin": "Adds new units to an existing TypeOracle.", "Reference": "Adds new units to an existing TypeOracle and indexes their type hierarchy.", "NNUpdater": "Oracle"}
{"Origin": "The default behavior of this method is to return {@link HttpServletRequest#getPushBuilder()} on the wrapped request object.", "Reference": "The default behavior of this method is to return {@link HttpServletRequest#newPushBuilder()} on the wrapped request object.", "NNUpdater": "The default behavior of this method is to return {@link HttpServletRequest#upgrade(HttpUpgradeHandler)} on the wrapped request object."}
{"Origin": "Integers 0 ... n.", "Reference": "Integers 0 ... n - 1.", "NNUpdater": "Creates a sequence with the specified items."}
{"Origin": "Registers a connection status listener and attempts a connection.", "Reference": "Registers a connection status listener and attempts a connection if there is none so far.", "NNUpdater": "Returns Connected."}
{"Origin": "Set the incoming binding sets associated with the optimized query plan (after running the optimizers).", "Reference": "Set the incoming binding sets associated with the optimized AST.", "NNUpdater": "Sets the state."}
{"Origin": "Suitable surface metadata can be created using {@link Surfaces#swaptionNormalExpiryTenor(String, DayCount, FixedIborSwapConvention)}.", "Reference": "Suitable surface metadata can be created using {@link Surfaces#swaptionNormalExpiryTenor(String, DayCount)}.", "NNUpdater": "Operation fails."}
{"Origin": "Default prarmeters will be overrided if a their names are containd in the given -map.", "Reference": "Default parameters will be overridden if a their names are contained in the given -map.", "NNUpdater": "Test on a mapping from Overridden Enum to Overridden Enum."}
{"Origin": "Also, puts the new names->nodes map in the TsurgeonPattern that called copy.", "Reference": "Also, puts the new names->nodes map in the TsurgeonMatcher that called copy.", "NNUpdater": "2014-09-09-Holiday"}
{"Origin": "Convert strings to a collection of {@link Node Nodes}.", "Reference": "Convert a collection of strings to a set of {@link Node Nodes}.", "NNUpdater": "Returns the cluster name."}
{"Origin": "Lookup an ephemeral or persistent access key.", "Reference": "Lookup an ephemeral or persistent access key with caching.", "NNUpdater": "Returns a new anonymous cluster member."}
{"Origin": "Gets a Map mapping IInventories to the amount of items of the type passed in that exist", "Reference": "Gets a Map mapping IInventories to the number of matching items.", "NNUpdater": "Gets the value of the 'requestMapping' field"}
{"Origin": "Set value of the Cosmos DB resource throughput.", "Reference": "Set the resource value.", "NNUpdater": "Setting the throughput for a table helps you manage performance and is part of the provisioned throughput feature of DynamoDB."}
{"Origin": "Computes the minimum for each pixel across all bands in the {@link Planar} image.", "Reference": "Computes the average for each pixel across all bands in the {@link Planar} image.", "NNUpdater": "Computes the average for each pixel across all bands in the {@link Planar} image."}
{"Origin": "Returns the next available packet.", "Reference": "Returns the next available stanza.", "NNUpdater": "Returns the next Restlet if available."}
{"Origin": "The default implementation returns {@link AttributeFactory#DEFAULT_ATTRIBUTE_FACTORY}.", "Reference": "The default implementation returns {@link TokenStream#DEFAULT_TOKEN_ATTRIBUTE_FACTORY}.", "NNUpdater": "(Default: false)"}
{"Origin": "Computes the minimum for each pixel across all bands in the {@link Planar} image.", "Reference": "Computes the minimum for each pixel across selected bands in the {@link Planar} image.", "NNUpdater": "Computes the average for each pixel across all bands in the {@link Planar} image."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Flat the linked hashmap of profiles into a single optional profile.", "Reference": "Flat the list of profiles into a single optional profile.", "NNUpdater": "Puts a header given an ID into the hashmap."}
{"Origin": "Combine (raw) data for reducible annotations (those that use raw data in gVCFs)", "Reference": "Combine (raw) data for reducible annotations (those that use raw data in gVCFs) according to their primary raw key", "NNUpdater": "If the user wants to see the raw data, use {@link #rawPeersOnTracker()}."}
{"Origin": "Appends the information about the given handle to {@link #buf buf}.", "Reference": "Appends a string representation of the given handle to {@link #stringBuilder}.", "NNUpdater": "Writes rec file position to given {@code buf}."}
{"Origin": "Save basic clusters.", "Reference": "Save cluster basic configuration.", "NNUpdater": "Classifies a given instance."}
{"Origin": "Report the target export file if present on the CLI", "Reference": "Report the output folder if present on the CLI", "NNUpdater": "Report the export folder if present on the CLI"}
{"Origin": "make a=b to a=b,c), please use the {@link KarafDistributionConfigurationFileExtendOption}", "Reference": "make a=b to a=b,c) please make use of the {@link KarafDistributionConfigurationFileExtendOption}.", "NNUpdater": "Operation fails."}
{"Origin": "This allows additional information to be attached to the trade.", "Reference": "This allows additional information to be attached.", "NNUpdater": "This allows an attribute about a security to be obtained if available."}
{"Origin": "Two {@code Requires} objects are compared by comparing their module name lexicographically.", "Reference": "Two {@code Requires} objects are compared by comparing their module names lexicographically.", "NNUpdater": "Returns if the two documents corresponds to the same data by first comparing if their parents are the same and then comparing if they have the same value on their {@code id} property."}
{"Origin": "The {@code onErrorResumeNext} method changes this behavior.", "Reference": "The {@code onErrorResumeWith} method changes this behavior.", "NNUpdater": "Must be the first call in {@link Activity#onResume()} method, even before super.onResume call."}
{"Origin": "If an element from the given annotation is not in the mapping, it is ignored.", "Reference": "If an element from the given annotation is not a key in the map, it is ignored.", "NNUpdater": "If an element found in the given list is not of type , it is ignored."}
{"Origin": "Returns a snapshot of all instances", "Reference": "Returns a snapshot of all applications", "NNUpdater": "Returns list of all registered SnapshotCategory instances."}
{"Origin": "Switches to the requested site.", "Reference": "Changes to the given site and path.", "NNUpdater": "A method which switches the displayed container"}
{"Origin": "Authenticate the user to this UserContext.", "Reference": "Authenticate user with the provided credentials.", "NNUpdater": "Authenticates the user and returns a new client {@link Context} instance."}
{"Origin": "Sets the bootstrap locations.", "Reference": "Sets the bootstrap nodes.", "NNUpdater": "Sets the multicast address."}
{"Origin": "Sets the selection listener that will be notified.", "Reference": "Sets the wakeup listener that will be notified.", "NNUpdater": "Sets the listener for control selection."}
{"Origin": "Sets the specified value to the {@code favorDecSpeed} field.", "Reference": "Sets the specified value to the {@code autoFlush} field.", "NNUpdater": "Sets the specified value to the {@code printUsesContext} field."}
{"Origin": "return the DataFlavors for this", "Reference": "Return the DataFlavors for this", "NNUpdater": "Return the DataFlavors for this ."}
{"Origin": "when two configurations are the same, prefer the one with less alignments, or less summed mismatches if still tie.", "Reference": "when two configurations are the same, put the one with less alignments, or less summed mismatches if still tie first", "NNUpdater": "Optionally invalidates configurations too."}
{"Origin": "Tested Methods: copy(vector), TOIMPL: copy(Matrix), columPackedCopy(Matrix), rowPackedcCopy(Matrix)", "Reference": "Tested Methods: copy(vector), copy(Matrix), columPackedCopy(Matrix), rowPackedcCopy(Matrix)", "NNUpdater": "Creates a copy-on-append copy of an object."}
{"Origin": "Tests if this string ends with any specified suffixes.", "Reference": "Tests if this CharSequence ends with any specified suffixes.", "NNUpdater": "Ends the session."}
{"Origin": "The default implementation does nothing and is intended to be overridden.", "Reference": "This behavior is intended to be overridden.", "NNUpdater": "The default implementation throws an exception."}
{"Origin": "Returns an adjusted date-time based on this date-time.", "Reference": "Returns an adjusted copy of this date-time.", "NNUpdater": "This returns a {@code ZonedDateTime}, based on this one, with the date-time adjusted."}
{"Origin": "Initiate {@code CLIENT LIST} on all connections and return the {@link Requests}.", "Reference": "Initiate {@code INFO CLIENTS} on all connections and return the {@link Requests}.", "NNUpdater": "Returns the client submitter."}
{"Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}", "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveFromRangeEnd }{@code >}}", "NNUpdater": "Create an instance of {@link JAXBElement }{@code <}{@link CTStrokeChild }{@code >}}"}
{"Origin": "Get BlobStoreType from BlobStoreConfig class", "Reference": "Get BlobStoreType from BlobStoreInfo class", "NNUpdater": "Returns the {@link BlobInfo} for the target blob."}
{"Origin": "Returns the descriptor corresponding to this Java type.", "Reference": "Returns the descriptor corresponding to this type.", "NNUpdater": "Returns the descriptor corresponding to this type."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Set values of managed limits.", "Reference": "Set values of managed resource limits.", "NNUpdater": "Converts {@link MachineRuntimeInfo} to {@link MachineRuntimeInfoDto}."}
{"Origin": "Compares two strings based not on the strings themselves, but on an encoding of the two strings using the StringEncoder this Comparator was created with.", "Reference": "Compares two strings based not on the strings themselves, but on an encoding of the two strings using the", "NNUpdater": "Converts list of strings to nullable array of strings."}
{"Origin": "Generate sync point information from the thrift representation.", "Reference": "Generate sync point information from the proto representation.", "NNUpdater": "Converts an Alluxio exception from status and message representation to native representation."}
{"Origin": "The {@code mark()} method does nothing, and the {@code reset()} method throws {@code IOException}.", "Reference": "The {@code mark()} and {@code reset()} methods throw an {@code IOException}.", "NNUpdater": "Operation fails."}
{"Origin": "The default implementation replaces any combination of leading '/' and control characters (00-1F and 7F) with a single ``/`` or ````.", "Reference": "Any combination of leading slash and control characters (00-1F and 7F) with a single ``/`` or ````.", "NNUpdater": "-8:00 -> -7:00 See details why confusion happens during this change: URL"}
{"Origin": "Dump binlog.", "Reference": "Start dump binlog.", "NNUpdater": "Get the next row within the event at the {@link #nextBinlogPosition() position} within the {@link #binlogFilename() binary log file} ."}
{"Origin": "base type @extends @implements @lend @param @return @template @this @throws @type", "Reference": "@extends @implements @lend @param @return @template @this @throws @type", "NNUpdater": "Returns an {@link Excerpt} of ``implements/extends {@code type}``."}
{"Origin": "Adds a {@link TemporalMemory} to this {@code Layer}", "Reference": "Adds a {@link OldTemporalMemory} to this {@code Layer}", "NNUpdater": "Returns the {@code Module} with the given name in this layer, or if not in this layer, the {@linkplain #parent parent} layer."}
{"Origin": "Getter Parameter Value for currencyTypeId", "Reference": "Getter Parameter Value for Currency Type", "NNUpdater": "Setter Parameter Value for Payroll Process"}
{"Origin": "If you specify a SourceType but do not specify a SourceIdentifier, you will receive notice of the events for that source type for all your RDS sources.", "Reference": "SourceType but do not specify a SourceIdentifier, you will receive notice of the events for that source type for all your RDS sources.", "NNUpdater": "constraints?"}
{"Origin": "Utility method for creation of CandidateURIs found extracting links from this CrawlURI.", "Reference": "Utility method for creation of CrawlURIs found extracting links from this CrawlURI.", "NNUpdater": "Finally, this method delegates to {@link #innerExtract(ExtractorURI)} and returns that result."}
{"Origin": "Tests assert that the setting can not be deleted after lock the setting.", "Reference": "Tests assert that the setting can not be deleted after set the setting to read-only.", "NNUpdater": "Test setting the setup file."}
{"Origin": "Sets the focus of the screen.", "Reference": "Sets the focus index.", "NNUpdater": "Sets the current page."}
{"Origin": "Whether to use suffix pattern matching.", "Reference": "Whether to use registered suffixes for pattern matching.", "NNUpdater": "ObjectSuffix --> SuffixLength,SuffixBytes"}
{"Origin": "Example server version string: VERSION", "Reference": "Example version string: VERSION", "NNUpdater": "Tests transformation of model from VERSION version into VERSION version."}
{"Origin": "Compute the Mahalanobis distance of a vector.", "Reference": "Compute the Mahalanobis distance from the centroid for a given vector.", "NNUpdater": "Return the distance between vector and ."}
{"Origin": "Equality comparison is performed with this object's {@link #sameKeys} method.", "Reference": "Equality comparison is performed with this object's {@link #equals(Object, Object)} method.", "NNUpdater": "A type-safe equivalence comparison"}
{"Origin": "This method will first search the class loader of the context class for the resource before searching all other {@link ClassLoader}s.", "Reference": "This method will first search the class loader of the context class for the resource before searching all other {@code ClassLoader}s.", "NNUpdater": "ClassLoader used to load the {@link Configuration} class will be used as the parent ClassLoader of the created ClassLoader."}
{"Origin": "Retrieves the LDAP configuration if exists and adds it to services.json", "Reference": "Retrieves the Ambari configuration if exists and adds it to services.json", "NNUpdater": "Get the configuration filename from the command-line (if it exists) and create a configuration for it."}
{"Origin": "Access Control Using AWS Identity and Access Management (IAM) .", "Reference": "For more information, see Access Control Using AWS Identity and Access Management (IAM).", "NNUpdater": "Access Management (IAM) user account."}
{"Origin": "Returns if there are changed inherit properties.", "Reference": "Returns if there are changed properties.", "NNUpdater": "Returns the properties of the sitemap root's parent."}
{"Origin": "Gets the list of {@link ConfigurationSetting ConfigurationSettings} on this page.", "Reference": "Gets the iterable stream of {@link ConfigurationSetting ConfigurationSettings} on this page.", "NNUpdater": "Returns the value of the {@link KEY_FORCE_HTTP} setting."}
{"Origin": "Custom code can use or change all the local variables, but should not change state of the stack.", "Reference": "Subclasses can use or change all the local variables, but should not change state of the stack.", "NNUpdater": "Note: This should NOT change the state of the graph parameter."}
{"Origin": "Sets the tooling.", "Reference": "Set the tooling.", "NNUpdater": "Sets the valueText."}
{"Origin": "Generates a code sample for using {@link ShareDirectoryAsyncClient#deleteSubDirectoryWithResponse(String)} ()}", "Reference": "Generates a code sample for using {@link ShareDirectoryAsyncClient#deleteSubdirectoryWithResponse(String)} ()}", "NNUpdater": "Generates a code sample for using {@link DirectoryClient#deleteSubDirectoryWithResponse(String, Context)}"}
{"Origin": "Ensures that {@code component} is present in the manifest as an exported and enabled launcher activity.", "Reference": "Ensures that {@code component} is present in the manifest as an exported and enabled activity.", "NNUpdater": "Gets the manifest as a JSON template."}
{"Origin": "Get mail server settings ### Functional Description: DRACOON email server configuration entry point.", "Reference": "Get mail server settings ## \u26a0 Deprecated since version VERSION ### Functional Description: DRACOON email server configuration entry point.", "NNUpdater": "Get Mail Host."}
{"Origin": "Sets the identifier of this action profile group.", "Reference": "Sets the ID of this action profile group.", "NNUpdater": "Sets the label"}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "invokeAll(empty collection) returns empty collection", "Reference": "invokeAll(empty collection) returns empty list", "NNUpdater": "invokeAll(empty collection) returns empty list"}
{"Origin": "All the following mouse and key events apply to the given modifiers.", "Reference": "All the following mouse and key events apply to the given modifiersEx.", "NNUpdater": "Processes modifiers."}
{"Origin": "To get the proper rectangle it must be first reset to orginal image rectangle.", "Reference": "To get the proper rectangle it must be first reset to original image rectangle.", "NNUpdater": "Draws the contents of a single rectangle."}
{"Origin": "This method is slow, cancelling existing and adding a new timer yield better performance.", "Reference": "This method is slow, canceling existing and adding a new timer yield better performance.", "NNUpdater": "NOTE: this is slow!"}
{"Origin": "With this HMM as the initial model, learn an HMM by the Baum-Welch algorithm.", "Reference": "Updates the HMM by the Baum-Welch algorithm.", "NNUpdater": "Returns the initial SearchState."}
{"Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}", "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveToRangeEnd }{@code >}}", "NNUpdater": "Create an instance of {@link JAXBElement }{@code <}{@link CTStrokeChild }{@code >}}"}
{"Origin": "Set the IterationListeners for the ComputationGraph (and all layers in the network)", "Reference": "Set the trainingListeners for the ComputationGraph (and all layers in the network)", "NNUpdater": "Load a computation graph from a InputStream"}
{"Origin": "Returns a random temporary name for the specified database name.", "Reference": "Creates a random database directory and returns its name.", "NNUpdater": "Returns the tab bar height."}
{"Origin": "Counts empty lines before given.", "Reference": "Counts empty lines between given parameters.", "NNUpdater": "Build the preview from the loaded lines"}
{"Origin": "Encrypt message locally using an 'RSA_DECRYPT_OAEP_2048_SHA256' public key retrieved from Cloud KMS", "Reference": "Encrypt data locally using an 'RSA_DECRYPT_OAEP_2048_SHA256' public key retrieved from Cloud KMS", "NNUpdater": "GenerateDataKey"}
{"Origin": "Obtains an instance of {@code ZoneChronoDateTime} from an {@code ChronoOffsetDateTime}.", "Reference": "Obtains an instance of {@code ZoneChronoDateTime} from an {@code Instant}.", "NNUpdater": "Obtains an instance of {@code ChronoLocalDateTime} from a date and time."}
{"Origin": "Retrieves all the properties for the specified {@link NamespacedEntityId}.", "Reference": "Retrieves all the properties for the specified {@link MetadataEntity}.", "NNUpdater": "Retrieves all the properties for the specified {@link NamespacedEntityId}."}
{"Origin": "Tests for the {@link BaseFileSystem#createDirectory(AlluxioURI, CreateDirectoryOptions)} method.", "Reference": "Tests for the {@link BaseFileSystem#createDirectory(AlluxioURI, CreateDirectoryPOptions)} method.", "NNUpdater": "Tests for the {@link BaseFileSystem#createDirectory(AlluxioURI, CreateDirectoryOptions)} method."}
{"Origin": "Whether this codec is capable of decoding the given CQL type.", "Reference": "Whether this codec is capable of processing the given CQL type.", "NNUpdater": "Sets {@link ImageScaleType decoding type} for image loading task."}
{"Origin": "If not, it will be wrapped by a new {@link AnnotationEventListenerAdapter}.", "Reference": "If not, it will be wrapped by a new {@link AnnotationEventHandlerAdapter}.", "NNUpdater": "Is responsible for calling {@link EventSource#onEvent(InboundEvent)} and all registered {@link EventListener} instances."}
{"Origin": "Check if the browser is IE6,7,8,9.", "Reference": "Check if the browser is IE8,9.", "NNUpdater": "Test method for {@link com.crawljax.browser.EmbeddedBrowser#getStrippedDom()}."}
{"Origin": "Sets the interval.", "Reference": "Handle interval change.", "NNUpdater": "Gets the overlap where this interval and that specified."}
{"Origin": "Creates a flux of {@link PagedResponse} starting from the next page associated with the given continuation token.", "Reference": "Creates a Flux of {@link PagedResponse} starting from the next page associated with the given continuation token.", "NNUpdater": "Creates a LiveData of PagedLists, given the NullPaddedList.Config."}
{"Origin": "Deletes the specified variable from the configuration.", "Reference": "Deletes the specified variable from the CONFIGURATION.", "NNUpdater": "Returns the value of the specified variable."}
{"Origin": "To prevent excessive polling on all sources it is preferable to do the majority of polling on a single source.", "Reference": "it is preferable to do the majority of polling on a single source.", "NNUpdater": "Handle the response from polling the {@link NetworkClient}."}
{"Origin": "Set the value for some metadata on a collection alias.", "Reference": "Set the value for some properties on a collection alias.", "NNUpdater": "Sets a metadata."}
{"Origin": "line string key is measurement + tag values", "Reference": "line string key is measurement + tag values + measurement keys", "NNUpdater": "Constructs a {@link MeasurementMap} from the given {@link Measure}'s and associated values."}
{"Origin": "Checks if the type of worklet is same as that of wfdesc Json.", "Reference": "Checks the schema of workflow data.", "NNUpdater": "Checks if the type is the same, and if the matched states are the same."}
{"Origin": "Creates an audit entry for the 'service updated' event.", "Reference": "Creates an audit entry for the 'API updated' event.", "NNUpdater": "Adds an event."}
{"Origin": "Test that the given Module reads all module in the given Layer and its parent Layers.", "Reference": "Test that the given Module reads all module in the given layer and its parent layers.", "NNUpdater": "Test that the given Module reads all module in the given Layer and its parent Layers."}
{"Origin": "Returns whether or not image pixel at the specified X and Y coordinates is fully transparent.", "Reference": "Returns whether or not specified {@link BufferedImage} pixel is fully transparent.", "NNUpdater": "Gets the matrix that transforms image-relative coordinates to view-absolute coordinates."}
{"Origin": "All bindable types have been collected, do the actual processing.", "Reference": "All bindable types have been collected for this round, do the actual processing.", "NNUpdater": "Collect changes if needed."}
{"Origin": "Start building a new factory instance-based service binding.", "Reference": "Start building a new supplier instance-based service binding.", "NNUpdater": "Start building a new DELETE query that deletes the provided names."}
{"Origin": "Returns the pivot of a view on a specific axis, when it is swiped.", "Reference": "Returns the pivot of an item on a specific axis, when it is swiped.", "NNUpdater": "Returns the pivot of a view on a specific axis, when it is swiped."}
{"Origin": "If the wrapping fails, then null is returned.", "Reference": "If wrapping fails, returns null.", "NNUpdater": "If any input fails, the returned future fails immediately."}
{"Origin": "Channel number or timeslot for this message", "Reference": "Timeslot / Channel number for this message", "NNUpdater": "Indicates the state of the next inbound frame for this timeslot, IDLE or BUSY"}
{"Origin": "Handles all the tags with the given handler.", "Reference": "Handles all the semantic tokens of the JavaDoc.", "NNUpdater": "Set the firewallRules value."}
{"Origin": "Prints message to the terminal at {@code verbosity} level, without a newline.", "Reference": "Prints message to the terminal's standard output at {@code verbosity} level, without a newline.", "NNUpdater": "Prints the given message to System.err if isDebugEnabled() is true."}
{"Origin": "If not found, look for ``dspace.dir`` initial context parameter.", "Reference": "If not found, use value provided in ``dspace.dir`` in Spring Environment", "NNUpdater": "Set the {@link ContextSource}"}
{"Origin": "Sets the value of the 'dec' field.", "Reference": "Sets the value of the 'ts' field.", "NNUpdater": "Sets the value of the 'paramName' field."}
{"Origin": "KeyCreateOptions#getNotBefore() notBefore} values are optional.", "Reference": "CreateKeyOptions#getNotBefore() notBefore} values are optional.", "NNUpdater": "2) The method is not annotated with @Test, @Before, @After, @BeforeClass, or @AfterClass."}
{"Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}", "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveFromRangeEnd }{@code >}}", "NNUpdater": "Create an instance of {@link JAXBElement }{@code <}{@link CTStrokeChild }{@code >}}"}
{"Origin": "Generates a random transaction with a random hash.", "Reference": "Generates a transaction with a hash.", "NNUpdater": "Generates a random bar."}
{"Origin": "Perform basica validation, and pass on.", "Reference": "Perform basic validation, and pass on.", "NNUpdater": "Throw RuntimeException if query does not pass validation."}
{"Origin": "Create a {@link PooledConnectionImpl.PStmtKey} for the given arguments.", "Reference": "Creates a {@link PooledConnectionImpl.PStmtKey} for the given arguments.", "NNUpdater": "Return the pooled connection to its pool."}
{"Origin": "Convert wiki name in database/schema name.", "Reference": "Convert wiki name in database name.", "NNUpdater": "Set the name value."}
{"Origin": "Gets the value of the cryptAlgorithmType property.", "Reference": "Gets the value of the algorithmName property.", "NNUpdater": "Gets the value of the float property."}
{"Origin": "The {@link Flux} will contain one or several feed response of the read cosmos items.", "Reference": "The {@link CosmosContinuablePagedFlux} will contain one or several feed response of the read cosmos items.", "NNUpdater": "The {@link Flux} will contain one or several feed response pages of the read cosmos trigger properties."}
{"Origin": "Returns the last jid that the party with the specified address contacted us from or null if we don't have a jid for the specified address yet.", "Reference": "Returns the last jid that the party with the specified address contacted us from or null(or bare jid) if we don't have a jid for the specified address yet.", "NNUpdater": "Returns true if a component is associated to the specified address."}
{"Origin": "String representation of ``this`` with packagename and the path.", "Reference": "String representation of ``this`` with elementname and the path.", "NNUpdater": "Gets the string representation of this component."}
{"Origin": "Checks a filename to see if it matches the specified wildcard matcher using the case rules of the system.", "Reference": "Checks a fileName to see if it matches the specified wildcard matcher using the case rules of the system.", "NNUpdater": "Checks a filename to see if it matches the specified wildcard matcher, always testing case-sensitive."}
{"Origin": "Sets the value of the 'BloomFilter' field.", "Reference": "Sets the value of the 'bloomFilter' field.", "NNUpdater": "Determines whether a given bloom filter is compatible with this bloom filter."}
{"Origin": "ModifiedAccessConditions, BlobAccessConditions, Duration, Context)}", "Reference": "ModifiedAccessConditions, BlobAccessConditions, Duration)}", "NNUpdater": "ContainerAccessConditions, Duration, Context)}"}
{"Origin": "Get the {@linkplain ExecutionEvent execution events} as a {@link Stream}.", "Reference": "Get the {@linkplain Event events} as a {@link Stream}.", "NNUpdater": "Returns the serialized {@link ExecutionConfig}."}
{"Origin": "/api/v1/topology/:id/profiling/dumpheap/:host-port/:timeout -> dump heap.", "Reference": "/api/v1/topology/:id/profiling/dumpheap/:host-port -> dump heap.", "NNUpdater": "Operation fails."}
{"Origin": "Get {@link Repo} from event", "Reference": "Get {@link Repository} from event", "NNUpdater": "Get base."}
{"Origin": "Provide configuration in the form of {@link RSocketStrategies} instance which can also be re-used to initialize a client-side {@link RSocketRequester}.", "Reference": "Configure this handler through an {@link RSocketStrategies} instance which can be re-used to initialize a client-side {@link RSocketRequester}.", "NNUpdater": "Operation fails."}
{"Origin": "Use full publisher confirms, with correlation data and a callback for each message.", "Reference": "Use full (correlated) publisher confirms, with correlation data and a callback for each message.", "NNUpdater": "Get endpoint context of sent message."}
{"Origin": "After setting the connection proxy locally, propagates it through the dependant connections.", "Reference": "After setting the connection proxy locally, propagates it through the dependent connections.", "NNUpdater": "Returns the route used by this connection."}
{"Origin": "Set the {@link MongoDbFactory} that this instance should manage transactions for.", "Reference": "Set the {@link MongoDatabaseFactory} that this instance should manage transactions for.", "NNUpdater": "Will use the {@link MongoClient} instance configured in {@link #mongo()}."}
{"Origin": "Creates a temporary snapshot directory for the given path.", "Reference": "Creates a local temporary snapshot directory for the given path.", "NNUpdater": "Constructs a temporary file resource given the temporary directory and a filename."}
{"Origin": "Retrieves all the tags for the specified {@link NamespacedEntityId}.", "Reference": "Retrieves all the tags for the specified {@link MetadataEntity}.", "NNUpdater": "Retrieves all the tags for the specified {@link NamespacedEntityId}."}
{"Origin": "Returns an adapter which converts a {@link MultimapSideInputHandlerFactory} to a {@link", "Reference": "Returns an adapter which converts a {@link SideInputHandlerFactory} to a {@link", "NNUpdater": "Converts a {@link Frame} to an {@link REnvironment}, which necessarily requires the frame to be materialized."}
{"Origin": "Get Valid Level Instance of MFMDunning", "Reference": "Get Valid Level for dunning, all", "NNUpdater": "Get Mahnstufe."}
{"Origin": "Creates a temporary snapshot directory for the given path.", "Reference": "Creates a local temporary snapshot directory for the given path.", "NNUpdater": "Constructs a temporary file resource given the temporary directory and a filename."}
{"Origin": "Method to insert code snippets for {@link SecretClient#getSecret(SecretProperties)}", "Reference": "Method to insert code snippets for {@link SecretClient#getSecret(String, String)}", "NNUpdater": "Method to insert code snippets for {@link SecretClient#getSecret(SecretProperties)}"}
{"Origin": "API base URL.", "Reference": "Set a fixed API base URL.", "NNUpdater": "The base API URL."}
{"Origin": "Retrieves the Session needed to open the Transaction.", "Reference": "Creates a Session needed to open Transactions.", "NNUpdater": "Retrieves the {@link Session} needed to open the {@link Transaction}."}
{"Origin": "Gets the sentenceLocation.", "Reference": "Gets the sentenceLocations.", "NNUpdater": "Set the sentenceLocation."}
{"Origin": "Creates a new ImgPlus with specified dimensions and axes.", "Reference": "Creates a new {@link ImgPlus} with specified dimensions and axes.", "NNUpdater": "Sets pixels of ImgPlus to user specified hyperplane within original ImgPlus data."}
{"Origin": "Returns the int value if this primitive value is of type int.", "Reference": "Returns the int value if this primitive value is of size 4", "NNUpdater": "If you need access to the primitive {@code int} value then the enum provides the {@link Month#getValue() int value}."}
{"Origin": "Hit the test servlet to see if getUniqueGroupIdsForUser works when supplied with a invalid user(EntityOutOfRealmScope).", "Reference": "Hit the test servlet to see if getUniqueGroupIdsForUser works when supplied with a invalid user (EntityNotInRealmScopeException).", "NNUpdater": "Example: ``userName`` returns ``getUserName``."}
{"Origin": "Although ImageDecoder was added in Android O a bug prevents it from scaling images with exif orientations until P.", "Reference": "Although ImageDecoder was added in Android O a bug prevents it from scaling images with exif orientations until Q.", "NNUpdater": "By default, delegate to the decoder if it is an instance of {@link HttpMessageDecoder}."}
{"Origin": "Count the number of children of the given PLSQL node.", "Reference": "Count the number of children of the given node.", "NNUpdater": "getNodeCount the number of direct subnodes in this node"}
{"Origin": "Add object to the array, deletes the old one if it exists", "Reference": "Add object, deletes the old one if it exists", "NNUpdater": "Deletes a query if exists."}
{"Origin": "Return the HTTP response.", "Reference": "Return the native HTTP response.", "NNUpdater": "Sets the HTTP response body."}
{"Origin": "The input file must be a list of tab-separated verb-POS pairs, one verb per line.", "Reference": "The input file must be a list of whitespace-separated verb-lemma-POS triples, one verb form per line.", "NNUpdater": "Get method's http verbs."}
{"Origin": "Report the potential key signature in this measure for the specified staff index.", "Reference": "Report the potential key signature in this measure for the specified staff index in part.", "NNUpdater": "Report the potential time signature in this measure for the related staff"}
{"Origin": "Add component to be presented in the ScrollPane viewport", "Reference": "Set component to be presented in the ScrollPane viewport", "NNUpdater": "Sets the scroll offset so the specified rectangle is fully in view, if possible."}
{"Origin": "Prefixes are used to enrich the mappings of every {@code @RequestMapping} method whose controller type is matched by the corresponding {@link HandlerTypePredicate}.", "Reference": "Prefixes are used to enrich the mappings of every {@code @RequestMapping} method whose controller type is matched by the corresponding {@code Predicate}.", "NNUpdater": "Set custom {@link ModelAndViewResolver}s to use to handle the return values of {@link RequestMapping} methods."}
{"Origin": "Sends a message to all connected members.", "Reference": "Sends a message to all connected clients.", "NNUpdater": "Sends an internal message."}
{"Origin": "Returns the tuple of parameter default values of this function value.", "Reference": "Returns the optional tuple of default values for optional parameters.", "NNUpdater": "Returns the number of tuple values read (1, 2 or 4)."}
{"Origin": "Subclasses content with this format may add additional details in {@link #explain(List, BasicStats, int, double, double)}.", "Reference": "Subclasses content with this format may add additional details in {@link #explain(List, BasicStats, double, double)}.", "NNUpdater": "Subclasses content with this format may add additional details in {@link #explain(List, BasicStats, int, float, float)}."}
{"Origin": "Retrieves the ticket corresponding to the client/server principal pair from the Subject in the specified AccessControlContext.", "Reference": "Retrieves the initial TGT corresponding to the client principal from the Subject in the specified AccessControlContext.", "NNUpdater": "Validates and parses the given ID ticket, returning the Credentials object derived from the parameters provided by the CAS server in the ticket."}
{"Origin": "Set the preventEncryptionScopeOverride property: The preventEncryptionScopeOverride property.", "Reference": "Set the encryptionScopeOverridePrevented property: The encryptionScopeOverridePrevented property.", "NNUpdater": "Set the encryptionKey property: Optional."}
{"Origin": "Updates the number of bytes read, error count, startTime and elapsedTime", "Reference": "Updates the number of bytes read and sent, error count, startTime and elapsedTime", "NNUpdater": "Check and maybe get the time elapsed since startTime."}
{"Origin": "Sets the base section paint and sends a {@link PlotChangeEvent} to all registered listeners.", "Reference": "Sets the default section paint and sends a {@link PlotChangeEvent} to all registered listeners.", "NNUpdater": "Sets the default paint and sends a {@link RendererChangeEvent} to all registered listeners."}
{"Origin": "Returns the {@code Platform} of the given OS name specified in the {@code ModuleTarget} attribute.", "Reference": "Returns the {@code Platform} derived from the target platform in the {@code ModuleTarget} attribute.", "NNUpdater": "Returns the {@code ModuleReference} for the given named module or {@code null} if a module of the given name is not in this configuration."}
{"Origin": "Skip lines that only contain {@code TokenTypes.ANNOTATION}s.", "Reference": "Skip all {@code TokenTypes.ANNOTATION}s to the first non-annotation.", "NNUpdater": "Equivalent to {@code annotation(annotationType.getName(), emptyMap())}."}
{"Origin": "An alternative to this method is to print/parse the instant as a single epoch-seconds value.", "Reference": "An alternative to this method is to format/parse the instant as a single epoch-seconds value.", "NNUpdater": "Compare row to Timestamp."}
{"Origin": "This creates an empty object based on a specific parser implementation.", "Reference": "This creates an empty object based on the current JAXP parser implementation.", "NNUpdater": "The default implementation returns an instance of {@link WordBasedParserBase}."}
{"Origin": "Reverses the order of all elements in the given interval.", "Reference": "Reverses the order of all entries in the given interval.", "NNUpdater": "Gets a comparator that reverses the order of the given comparator."}
{"Origin": "Creates an instance from another byte source.", "Reference": "Obtains an instance from another byte source.", "NNUpdater": "Creates an instance from typed strings."}
{"Origin": "Get name of the Cosmos DB table.", "Reference": "Get the resource value.", "NNUpdater": "Get table token length."}
{"Origin": "Returns the j i r a issue with the primary key or throws a {@link com.liferay.socialcoding.NoSuchJIRAIssueException} if it could not be found.", "Reference": "Returns the j i r a issue with the primary key or throws a {@link NoSuchJIRAIssueException} if it could not be found.", "NNUpdater": "For [databindREF]"}
{"Origin": "AND o onto v inplace, i.e.", "Reference": "AND o onto v in-place, i.e.", "NNUpdater": "Sets the supported {@link Value}s onto this {@link DataManipulator}."}
{"Origin": "Populates the given {@link BasicDBList} with values from the given {@link Collection}.", "Reference": "Populates the given {@link Collection sink} with converted values from the given {@link Collection source}.", "NNUpdater": "Populates the given {@link BasicDBList} with values from the given {@link Collection}."}
{"Origin": "This method assumes that it is already in an array context.", "Reference": "This method assumes that it is already in an object context.", "NNUpdater": "This convenience method assumes that the return value is an integer"}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Getter accessor for attribute 'description'.", "Reference": "Getter accessor for attribute 'evaluationStrategy'.", "NNUpdater": "Getter accessor for attribute 'action'."}
{"Origin": "Returns the function that has a media type whose quality factor matches the HTTP request best.", "Reference": "Returns the functions with media type whose quality factors match best.", "NNUpdater": "Returns the function that has a media type whose quality factor matches the HTTP request best."}
{"Origin": "Returns the set of all compilation unit type names (both regular and super sourced).", "Reference": "Returns the set of all compilation unit type source names (both regular and super sourced).", "NNUpdater": "Gets the value of the sourcedItems property."}
{"Origin": "Expands the given item.", "Reference": "Expands the given items.", "NNUpdater": "Expands the specified leaf nodes."}
{"Origin": "Destroys all the keys created during this test run.", "Reference": "Destroys all the key versions created during this test run.", "NNUpdater": "Destroys an instance of the bean"}
{"Origin": "Negative test, when a CORS request arrives, with a null origin.", "Reference": "Negative test, when a CORS request arrives, with no origin header.", "NNUpdater": "TkCORS can handle connections without origin in the request."}
{"Origin": "The string passed in is assumed to be a canonical name - it is not checked.", "Reference": "The string passed in is assumed to be a class name - it is not checked.", "NNUpdater": "It is assumed to be the last object in the collection."}
{"Origin": "Starts a resumable upload to a share.", "Reference": "Starts a resumable (chunked) upload to a share.", "NNUpdater": "Set a {@link ResumableListener}"}
{"Origin": "Get the sqrt-normalized mutual information (normalized, 0 = unequal)", "Reference": "Get the geometric mean normalized mutual information (using the square root).", "NNUpdater": "Return the optimized Value of {@code value}."}
{"Origin": "See {@link MethodVisitor#visitTryCatchAnnotation}.", "Reference": "MethodVisitor#visitTryCatchAnnotation}.", "NNUpdater": "Equivalent to {@code transform(``transform``, func)}."}
{"Origin": "The {@link #getProductType() product type} must be {@link EtdProductType#FUTURE} otherwise an exception will be thrown.", "Reference": "The {@link #getType() type} must be {@link EtdType#FUTURE} otherwise an exception will be thrown.", "NNUpdater": "Get Produkt."}
{"Origin": "Adds a column/value pair to the values inserted by this INSERT statement.", "Reference": "Adds a column/value pair to the values inserted by this {@code INSERT} statement.", "NNUpdater": "Get insert optimize result."}
{"Origin": "Collects all load statements.", "Reference": "Checks all load statements.", "NNUpdater": "Collects paths from all load statements"}
{"Origin": "The {@link EcKeyCreateOptions#isEnabled() enabled} field is set to true by Azure Key Vault, if not specified.", "Reference": "The {@link CreateEcKeyOptions#isEnabled() enabled} field is set to true by Azure Key Vault, if not specified.", "NNUpdater": "The {@link Secret#isEnabled() enabled} field is set to true by key vault, if not specified."}
{"Origin": "- (optional bool) when true then additional detailed metrics will be collected.", "Reference": "- (optional bool, default false) when true then additional detailed metrics will be collected.", "NNUpdater": "Required."}
{"Origin": "Validate environment.", "Reference": "Validates environment.", "NNUpdater": "validateSignature."}
{"Origin": "By default this is set to {@link ServerCodecConfigurer} with defaults.", "Reference": "By default this is set to the {@link ServerCodecConfigurer}'s defaults.", "NNUpdater": "Invokes {@link ServiceCodec#codecAdded(ServiceConfig)}."}
{"Origin": "If not in position swap it with A[A[p]-1]", "Reference": "If not in position swap it with nums[nums[p]-1]", "NNUpdater": "Operation fails."}
{"Origin": "Returns {@link SessionToken2} so that developers create their own {@link androidx.media2.MediaController2} instance.", "Reference": "Returns {@link SessionToken} so that developers create their own {@link androidx.media2.MediaController} instance.", "NNUpdater": "Gets {@link Set} of {@link SessionToken2} for {@link MediaSessionService2} regardless of their activeness."}
{"Origin": "Apply the rotation transformation of the given {@link Quaterniond} to this matrix while using (ox, oy, oz) as the rotation origin.", "Reference": "Apply the rotation transformation of the given {@link Quaterniondc} to this matrix while using (ox, oy, oz) as the rotation origin.", "NNUpdater": "Apply the rotation transformation of the given {@link Quaternionfc} to this matrix while using (ox, oy, oz) as the rotation origin."}
{"Origin": "Sets the database ID of the user to whom this permission is granted.", "Reference": "Sets the database ID of the entity to whom this permission is granted.", "NNUpdater": "Returns if the user has granted the given permission"}
{"Origin": "create a working, portable runtime of MultiBit in a temporary directory", "Reference": "Create a working, portable runtime of MultiBit in a temporary directory.", "NNUpdater": "create a working dir using temporaryFolder."}
{"Origin": "Loop over the {@link KeyProperties key} and call {@link KeyClient#getKey(KeyProperties key properties)}.", "Reference": "Loop over the {@link KeyProperties key} and call {@link KeyClient#getKey(String, String)}.", "NNUpdater": "Loop over the {@link KeyProperties key} and call {@link KeyClient#getKey(KeyProperties key properties)}."}
{"Origin": "The meta-property for the {@code bondGroup} property.", "Reference": "The meta-property for the {@code repoGroup} property.", "NNUpdater": "The meta-property for the {@code curveGroupName} property."}
{"Origin": "Set Search Key.", "Reference": "Set Token Value.", "NNUpdater": "Search All cases"}
{"Origin": "Test an {@link Array} used as a LIFO stack.", "Reference": "Test an {@link XQArray} used as a LIFO stack.", "NNUpdater": "Gets the {@link Value.Mutable} for the represented {@link ItemStack} as an {@link ItemStackSnapshot}."}
{"Origin": "If {@code labels = ``abc*``}, settings with a label starting with ``abc`` are returned.", "Reference": "If {@code labelFilter = ``abc*``}, settings with a label starting with ``abc`` are returned.", "NNUpdater": "If {@code labels = ``abc*``}, settings with a label starting with ``abc`` are returned."}
{"Origin": "Pre-multiply the rotation transformation of the given {@link Quaterniond} to this matrix and store the result in .", "Reference": "Pre-multiply the rotation transformation of the given {@link Quaterniondc} to this matrix and store the result in .", "NNUpdater": "Pre-multiply the rotation transformation of the given {@link Quaternionfc} to this matrix and store the result in ."}
{"Origin": "Shows roles - manager user.", "Reference": "Shows role permissions.", "NNUpdater": "Gets the roles for the given user"}
{"Origin": "This method wraps raw in the character provided by {@link #getNameEscape()}.", "Reference": "This method escapes raw using method {@link #escapeName(String)}.", "NNUpdater": "Like {@link #URLEnc(String, Charset)} but doesn't escape the slash character ({@code /})."}
{"Origin": "This method uses a ConcurrentHashMap for caching method lookups.", "Reference": "This method uses a ConcurrentReferenceHashMap for caching method lookups.", "NNUpdater": "Determines whether the given cache can be converted to a LocalCacheAsMap by {@link #toLocalCacheAsMap} without throwing an exception."}
{"Origin": "Removes all metadata (including properties and tags) for the specified {@link NamespacedEntityId}.", "Reference": "Removes all metadata (including properties and tags) for the specified {@link MetadataEntity}.", "NNUpdater": "Removes all metadata (including properties and tags) for the specified {@link NamespacedEntityId}."}
{"Origin": "Returns the default SelectorProvider.", "Reference": "Returns the default SelectorProvider implementation.", "NNUpdater": "Returns the IO controller."}
{"Origin": "Resets the PRNG back to the creation state.", "Reference": "Set the seed value of the PRNG.", "NNUpdater": "Reset the internal state of the emulator."}
{"Origin": "Returns the election ID last used in a MasterArbitrationUpdate message sent by the client to the server.", "Reference": "Returns the election ID last used in a MasterArbitrationUpdate message sent by the client to the server for the given P4Runtime-internal device ID.", "NNUpdater": "Returns the cluster service."}
{"Origin": "Tries to find a DOI inside the given text.", "Reference": "Tries to find a DOI/Short DOI inside the given text.", "NNUpdater": "Tries to find the index of element with the given value."}
{"Origin": "Returns true if field ttlActionNotUsed is set (has been assigned a value) and false otherwise", "Reference": "Returns true if field ttlAction is set (has been assigned a value) and false otherwise", "NNUpdater": "Returns true if field ttlAction is set (has been assigned a value) and false otherwise"}
{"Origin": "Keep persistent copies of all pages, by default on disk.", "Reference": "Keep persistent copies of all pages on disk.", "NNUpdater": "Copies a resource."}
{"Origin": "Anything less than 2 would close the cursor so that is the minimum batchSize and `Integer.MAX_VALUE` is the maximum batchSize.", "Reference": "When using requested demand, values less than 2 would close the cursor so that is the minimum batchSize and `Integer.MAX_VALUE` is the maximum.", "NNUpdater": "Returns the packet size."}
{"Origin": "The negative of {@code startsWith} is {@link #startsNotWith}.", "Reference": "The negative of {@code startsWith} is {@link #notStartingWith}.", "NNUpdater": "BytesRef (term text) of the matches, corresponding with {@link #getMatchStarts()}."}
{"Origin": "By default this is set to {@link ServerCodecConfigurer} with defaults.", "Reference": "By default this is set to {@link ServerCodecConfigurer}'s readers with defaults.", "NNUpdater": "Invokes {@link ServiceCodec#codecAdded(ServiceConfig)}."}
{"Origin": "By default it will be setup/teardown per test (per test method).", "Reference": "By default it will be setup/teardown per test method.", "NNUpdater": "Test of teardown method, of class KafkaInputStream."}
{"Origin": "Queries this contact source for the given queryString.", "Reference": "Creates query for the given queryString.", "NNUpdater": "Queries this ContactSourceService for SourceContacts which match a specific query Pattern."}
{"Origin": "Locks a policy for execution.", "Reference": "Locks a policy to prevent concurrent execution.", "NNUpdater": "Locks a resource."}
{"Origin": "Writer for genotypes of arbitrary chromosomes.", "Reference": "Create a writer for genotypes of arbitrary chromosomes.", "NNUpdater": "Create a new Genotype from a given array of {@code Chromosomes}."}
{"Origin": "Creates an instance of a {@code CatalogResolver} using the specified feature settings and path to one or more catalog files.", "Reference": "Creates an instance of a {@code CatalogResolver} using the specified feature settings and uri(s) to one or more catalog files.", "NNUpdater": "Creates an instance of a {@code CatalogResolver} using the specified feature settings and path to one or more catalog files."}
{"Origin": "Gets whether the user can sort this column or not.", "Reference": "Gets whether sorting is enabled for this column.", "NNUpdater": "AddColumn throws an exception if the cell added does not sort after the last cell in the map."}
{"Origin": "This method iteratively calls {@link #doFeatureIteration(TrainingEstimator, Collection, Vector, Vector, double)} to train the feature.", "Reference": "This method iteratively calls {@link #doFeatureIteration(TrainingEstimator, Collection, RealVector, RealVector, double)} to train the feature.", "NNUpdater": "This method iteratively calls {@link #doFeatureIteration(TrainingEstimator, Collection, Vector, Vector, double)} to train the feature."}
{"Origin": "Chops the path and the file suffix of the specified filename and returns the database name.", "Reference": "Chops the path, file suffix and special characters from the specified filename and returns the database name.", "NNUpdater": "Chops the path and the XML suffix of the specified filename and returns the database name."}
{"Origin": "Reads boolean type system property.", "Reference": "Reads a system property.", "NNUpdater": "Get the operationResult value."}
{"Origin": "Sets the border size that defines the attack range for a {@link robocode.BorderSentryRobot SentryRobot}.", "Reference": "Returns the sentry border size for a {@link robocode.BorderSentry BorderSentry}.", "NNUpdater": "Builds and sends an {@link Event} to the Sentry server using the statically stored {@link SentryClient} instance."}
{"Origin": "Final implementation of the Button's onSubmit.", "Reference": "This method will be called before the form's onSubmit method.", "NNUpdater": "If that is the case, that component's onSubmit is called first."}
{"Origin": "Sets a new value by changing the offset and docID.", "Reference": "Sets a new value by changing the offset.", "NNUpdater": "Sets the time Offset in seconds."}
{"Origin": "Must be larger than the last successfully claimed key.", "Reference": "Must be larger than the last attempted key.", "NNUpdater": "Returns the closest base 2 number (2^x) which is larger than the 2*input"}
{"Origin": "Test of local method, of class ABITracer.", "Reference": "Test of URL method, of class ABITracer.", "NNUpdater": "Initialize sharding tracer."}
{"Origin": "Execute tests for a given {@link EngineDiscoveryRequest} using the provided {@link TestEngine}.", "Reference": "Execute tests for the given {@link EngineDiscoveryRequest} using the supplied {@link TestEngine}.", "NNUpdater": "Execute tests via a {@link EngineDiscoveryRequest} using the provided {@link TestEngine}, then return the recorded {@link ExecutionResults} to the caller."}
{"Origin": "Client Initiated - no data - alternate close code", "Reference": "Client Initiated - no data - server supplied alternate close code", "NNUpdater": "Close the HTTP tcpHelper."}
{"Origin": "{@codesnippet com.azure.security.keyvault.certificates.CertificateClient.listIssuers#context}", "Reference": "{@codesnippet com.azure.security.keyvault.certificates.CertificateClient.listPropertiesOfIssuers#context}", "NNUpdater": "{@codesnippet com.azure.security.keyvault.certificates.CertificateClient.listIssuers#context}"}
{"Origin": "This Function will set the HCat token to jobconf", "Reference": "This Function will set the HCat token to configuration", "NNUpdater": "Test HCat tableIn and tableOut EL functions (phase 3) which returns the HCat table from URI"}
{"Origin": "This method must only be used for type references whose sort is {@link #METHOD_FORMAL_PARAMETER METHOD_FORMAL_PARAMETER}.", "Reference": "This method must only be used for type references whose sort is {@link #METHOD_FORMAL_PARAMETER}.", "NNUpdater": "(The method {@link Population#populationSort()} is called by this method.)"}
{"Origin": "Returns the response body as a byte array.", "Reference": "Return the response body as a byte array.", "NNUpdater": "Return the response body as a string."}
{"Origin": "Produces a CCProcessed SemanticGraph with no extras.", "Reference": "Produces a CCProcessed SemanticGraph.", "NNUpdater": "Set the semanticRoles."}
{"Origin": "Set body of the User Defined Function.", "Reference": "Set the resource value.", "NNUpdater": "Read a user defined function."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Returns the asset with the primary key or throws a {@link com.liferay.ams.NoSuchAssetException} if it could not be found.", "Reference": "Returns the asset with the primary key or throws a {@link NoSuchAssetException} if it could not be found.", "NNUpdater": "Returns the for a given asset path, or null if no such asset exists."}
{"Origin": "Servlet VERSION based implementations will receive {@link WriteListener#onError(Throwable)} event.", "Reference": "Servlet VERSION based implementations will receive {@code javax.servlet.WriteListener#onError(Throwable)} event.", "NNUpdater": "Create a new {@link MockHttpServletRequest} based on the given {@link ServletContext}."}
{"Origin": "Returns the query parameters as map.", "Reference": "Returns query parameters.", "NNUpdater": "Returns an immutable map with all query parameters."}
{"Origin": "Wait for this task to meet the expected number of records as defined by {@code expectedRecords}.", "Reference": "Wait up to the specified timeout for this task to meet the expected number of records as defined by {@code expectedRecords}.", "NNUpdater": "Records a failed call."}
{"Origin": "Set the value of statusBefore, used in parameter comment.", "Reference": "Set the value of clustername, used in parameter comment.", "NNUpdater": "Gets a comment by the specified id."}
{"Origin": "Returns the currently selected accountDeviceInstances", "Reference": "Returns the currently selected nodes", "NNUpdater": "Sets selected date."}
{"Origin": "Returns split button icon.", "Reference": "Returns menu icon.", "NNUpdater": "Returns the resource type name."}
{"Origin": "Returns all instances of a tenant", "Reference": "Returns a snapshot of all applications of a tenant", "NNUpdater": "Returns a {@link RoleDefinition#tenantOperator} for the current system and given tenant."}
{"Origin": "Writes {@code value} followed by newline character.", "Reference": "Writes {@code value} followed by the delimiter byte sequence.", "NNUpdater": "Writes {@code value} followed by a newline character if {@code value} is not null."}
{"Origin": "Creates a {@link PropertyMatcher} to match against a slot position.", "Reference": "Creates a {@link KeyValueMatcher} to match against a slot position.", "NNUpdater": "Constructs a new builder to construct a {@link BlockStateMatcher}."}
{"Origin": "An Exception occured which may be retrieved from the arguments., FAILED_TRUNCATED -", "Reference": "An Exception occured which may be retrieved from the arguments., FAILED_TRUNCATED - Parsing failed.", "NNUpdater": "Returns the UIContactDescriptor for which this event occured."}
{"Origin": "Embeds the tag regions into an image (represented as an AbstractFile).", "Reference": "Embeds the tag regions into an image.", "NNUpdater": "Embeds a group of apps into an existing parent context"}
{"Origin": "Get name of the Cosmos DB Cassandra keyspace.", "Reference": "Get the resource value.", "NNUpdater": "Returns the keyspace of the first occurence of {@code name} in this metadata."}
{"Origin": "Invoke Builder.newRequires(Set mods, String mn)", "Reference": "Invoke Builder.newRequires(Set mods, String mn, String compiledVersion)", "NNUpdater": "Obtains a {@code Period} from a text string such as {@code PnYnMnD}."}
{"Origin": "If this lookup object has private access, then the caller class is the lookupClass.", "Reference": "If this lookup object has full privilege access, then the caller class is the lookupClass.", "NNUpdater": "Set Lookup ClassName."}
{"Origin": "Merges this frame with the given frame.", "Reference": "Merges the given frame into this frame.", "NNUpdater": "Computes the final size of this frame."}
{"Origin": "Sets the delimiter.", "Reference": "Set the delimiter.", "NNUpdater": "Get start delimiter."}
{"Origin": "Clears the value of the 'BloomFilter' field", "Reference": "Clears the value of the 'bloomFilter' field.", "NNUpdater": "Clears the value of the 'paramName' field"}
{"Origin": "Creates new {@link DayOfYear} in UTC.", "Reference": "Creates new {@link DayOfYear}.", "NNUpdater": "Creates new {@link DayOfYear} in UTC."}
{"Origin": "If keys = ``abc*``, settings with a key starting with ``abc`` are returned.", "Reference": "If {@code keyFilter = ``abc*``}, settings with a key starting with ``abc`` are returned.", "NNUpdater": "If keys = ``abc*``, settings with a key starting with ``abc`` are returned."}
{"Origin": "Makes a copy of this offset and removes any added terms that are accesses to the length of the listed arrays.", "Reference": "Makes a copy of this offset and removes any added terms that are accesses to the length of the listed sequences.", "NNUpdater": "Makes a copy of the SessionContext."}
{"Origin": "This method will interpolate between each two successive quaternions via {@link #slerp(Quaterniond, double)} using their relative interpolation weights.", "Reference": "This method will interpolate between each two successive quaternions via {@link #slerp(Quaterniondc, double)} using their relative interpolation weights.", "NNUpdater": "Creates a new {@link Weights} object that contains all weights with {@link Function} applied."}
{"Origin": "Update current starting address in the data store.", "Reference": "Update current head segment in the data store.", "NNUpdater": "Return the current starting address."}
{"Origin": "Construct XML data source from the underneath byte channel which is associated with the entity struct.", "Reference": "Construct XML data source from the underneath byte channel which is associated with the entity object.", "NNUpdater": "Wrap the byte channel associated with the given entity as the EntityBodyStream."}
{"Origin": "Gets the value of the sourceFileName property.", "Reference": "Gets the value of the componentName property.", "NNUpdater": "Gets the value of the type property."}
{"Origin": "If --interface is specified, --entity and --defaultSearchResult will be visible", "Reference": "If --entity is specified, --interface and --defaultSearchResult will be visible", "NNUpdater": "The default is {@link XPathEvaluationType#STRING_RESULT}."}
{"Origin": "Indicates to the user interface whether the history logging is enabled for the supplied MetaContact.", "Reference": "Indicates to the user interface whether the history logging is enabled for the supplied id (id for metacontact or for chat room).", "NNUpdater": "This method is deprecated."}
{"Origin": "This function implements a subset of quoted-printable encoding specification (rule REF and rule REF) as defined in RFC 1521.", "Reference": "This function fully implements the quoted-printable encoding specification (rule REF through rule REF) as defined in RFC 1521.", "NNUpdater": "Shortcut for {@code new Reference(ruleSupplier)}."}
{"Origin": "RsaKeyCreateOptions#isEnabled() enabled} field is set to true by Azure Key Vault, if not specified.", "Reference": "CreateRsaKeyOptions#isEnabled() enabled} field is set to true by Azure Key Vault, if not specified.", "NNUpdater": "The {@link Secret#isEnabled() enabled} field is set to true by key vault, if not specified."}
{"Origin": "Returns a new Task that, when this task completes normally, executes the given action using the supplied Scheduler.", "Reference": "Returns a new Task that, when this task completes normally, executes the given action using the supplied Executor.", "NNUpdater": "Returns a new Task that, when this task completes normally, is executed using the default Scheduler."}
{"Origin": "Gets the list of {@link DeletedCertificate deletedSecrets} on this page.", "Reference": "Gets the iterable stream of {@link DeletedCertificate deletedSecrets} on this page.", "NNUpdater": "The list deleted secrets operation returns the secrets that have been deleted for a vault enabled for soft-delete."}
{"Origin": "Stop the executor, no longer allowing tasks to be submitted through {@link #submit(Task)}.", "Reference": "Stop the executor, no longer allowing works to be submitted through {@link #submit(WorkSet)}.", "NNUpdater": "A shortcut to {@link #stop() stop().syncUninterruptibly()}."}
{"Origin": "Sets the specified value to the {@code bitfield} field.", "Reference": "Sets the specified value to the {@code baselineUsesContext} field.", "NNUpdater": "Sets the specified value to the {@code printUsesContext} field."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Converts the provided outcome to a message describing the outcome.", "Reference": "Converts the provided error to a message describing the error.", "NNUpdater": "Sets the {@link BaseOperationOutcome} resource to return to the client."}
{"Origin": "Write the task state to the {@link ProvisionerDataset}, retrying if any exception is caught.", "Reference": "Write the task state to the {@link ProvisionerStore}, retrying if any exception is caught.", "NNUpdater": "Get a {@link TaskState} instance for the task."}
{"Origin": "Bind contract provider model to a provider instance using the supplied instance manager.", "Reference": "Bind contract provider model to a provider instance using the supplied injection manager.", "NNUpdater": "Set the contract default provider priority."}
{"Origin": "The {@link EcKeyCreateOptions#getCurve() key curve} can be optionally specified.", "Reference": "The {@link CreateEcKeyOptions#getCurveName() key curve} can be optionally specified.", "NNUpdater": "The {@link EcKeyCreateOptions#getCurve() key curve} can be optionally specified."}
{"Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}", "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveToRangeEnd }{@code >}}", "NNUpdater": "Create an instance of {@link JAXBElement }{@code <}{@link CTStrokeChild }{@code >}}"}
{"Origin": "TkFallback can throw an IOException when no fallback is available.", "Reference": "TkFallback can throw an Exception when no fallback is available.", "NNUpdater": "Finds the best fallback for the given exception type and apply it to the exception or throw the original error if no fallback found."}
{"Origin": "Set the incoming binding sets associated with the optimized query plan (after running the optimizers).", "Reference": "Set the incoming binding sets associated with the optimized AST.", "NNUpdater": "Sets the state."}
{"Origin": "Produces a Collapsed SemanticGraph with no extras.", "Reference": "Produces a Collapsed SemanticGraph.", "NNUpdater": "Set the semanticRoles."}
{"Origin": "Process the given resource path to be used.", "Reference": "Process the given resource path.", "NNUpdater": "Set the contextPath to be used."}
{"Origin": "As a special case, resources ending with ``{@code .class}`` are never encapsulated.", "Reference": "If the resource name ends with ``{@code .class}`` then it is not encapsulated.", "NNUpdater": "Corner case:"}
{"Origin": "Register a HealthCheck to the Set of HealthChecks based on appName.", "Reference": "Register a HealthCheck to the Set of HealthChecks based on appName to execute when performHealthChecks is called.", "NNUpdater": "Check the health of all registered nodes"}
{"Origin": "Search for a partial match of the pattern at the start of the data.", "Reference": "Search for a possibly partial match of the pattern at the start of the data.", "NNUpdater": "Match a pattern element."}
{"Origin": "Creates new {@link AggregationExpression} that returns the day of the year for a date as a number between 1 and 366 in the factory timezone (default UTC).", "Reference": "Creates new {@link AggregationExpression} that returns the day of the year for a date as a number between 1 and 366.", "NNUpdater": "Creates new {@link AggregationExpression} that returns the day of the year for a date as a number between 1 and 366 in the factory timezone (default UTC)."}
{"Origin": "Get Discount Amount.", "Reference": "Get Skonto.", "NNUpdater": "Get Skonto."}
{"Origin": "Produce the evaluation result for a particular clustering.", "Reference": "Estimate the confidence probability of a clustering.", "NNUpdater": "Note that a table defined without any particular clustering order is equivalent to one for which all the clustering keys are in ascending order."}
{"Origin": "Returns active {@code HierarchyMapper}", "Reference": "Returns the {@code HierarchyMapper} used by this data communicator.", "NNUpdater": "The {@code ObjectMapper} parameter must be a {@link XmlMapper} instance."}
{"Origin": "Update current starting address in the data store.", "Reference": "Update current head segment in the data store.", "NNUpdater": "Return the current starting address."}
{"Origin": "Log access to a target class by a caller class.", "Reference": "Log access by a caller.", "NNUpdater": "The class can be retrieved by invoking {@link #getClass(String, Class, ClassLoader)} if it is in the scope of the class loader on the caller."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Total runtime size is 1296 bytes", "Reference": "Total runtime size is 14048 bytes", "NNUpdater": "Total runtime size is 13952 bytes"}
{"Origin": "Determines whether a character is a letter according to {@linkplain Character#isLetter(char)", "Reference": "Determines whether a character is a BMP letter according to {@linkplain Character#isLetter(char) Java's definition}.", "NNUpdater": "Collects only characters which satisfy {@link Character#isLetter(int)}."}
{"Origin": "Tests that when an etag is passed to set it will only set if the current representation of the setting has the etag.", "Reference": "Tests that when an ETag is passed to set it will only set if the current representation of the setting has the ETag.", "NNUpdater": "Set the routeFilter value."}
{"Origin": "Each type will be instantiated by Bootique and added to the Guice DI container.", "Reference": "Each type will be instantiated by Bootique and added to the DI container.", "NNUpdater": "Bootique core module."}
{"Origin": "Wraps a loaded value to add the refresh value.", "Reference": "Wraps a loaded value to add the refreshed value.", "NNUpdater": "Position."}
{"Origin": "Get the preferences for given project.", "Reference": "Get the FindBugs core preferences for given project.", "NNUpdater": "Get Projekt."}
{"Origin": "Return the locked state of this parameter map.", "Reference": "Get the locked state of this parameter map.", "NNUpdater": "Return the topic."}
{"Origin": "Sets the journal serializer, returning the builder for method chaining.", "Reference": "Sets the journal namespace, returning the builder for method chaining.", "NNUpdater": "Sets the default resource entry serializer, returning the configuration for method chaining."}
{"Origin": "Unregisters the given MBeans (untracked).", "Reference": "Unregisters the MBeans that were registered on start.", "NNUpdater": "Closes a session."}
{"Origin": "Determines whether a room is created for each user that is created by automatic import (like a home folder).", "Reference": "DEPRECATED, will be ignored Determines whether a room is created for each user that is created by automatic import (like a home folder).", "NNUpdater": "Sets the create."}
{"Origin": "Get all Pinot offline table names", "Reference": "Get all offline table names.", "NNUpdater": "Get profile of the player."}
{"Origin": "Set Untergruppe.", "Reference": "Set Unterregister.", "NNUpdater": "Add result set."}
{"Origin": "Contet for these types was not logged.", "Reference": "Content for these types was not logged.", "NNUpdater": "Returns the date/time that the event was logged."}
{"Origin": "the property of this node", "Reference": "The property of this node.", "NNUpdater": "Sets the value of the list property."}
{"Origin": "Get the application-configured instance manager.", "Reference": "Get the application-configured injection manager.", "NNUpdater": "Get the applications configured for a given command."}
{"Origin": "Get service locator.", "Reference": "Get instance manager.", "NNUpdater": "Get Lagerort."}
{"Origin": "Get the record field completion itmes.", "Reference": "Get the record field completion items.", "NNUpdater": "Get the y axis upper left field for the Legend record."}
{"Origin": "If the value is null, then the default value is returned.", "Reference": "If the value is null, then an", "NNUpdater": "Default value is 4."}
{"Origin": "within the chart's domain and range) represented by the given pixel coordinates, if that pixel is within the chart region described by {@link #contentRectMinusAllMargins}.", "Reference": "within the chart's domain and range) represented by the given pixel coordinates, if that pixel is within the chart region described by {@link #contentRect}.", "NNUpdater": "within the chart's domain and range) represented by the given pixel coordinates, if that pixel is within the chart region described by {@link #contentRect}."}
{"Origin": "Gets the entityName.", "Reference": "Gets the entity.", "NNUpdater": "Gets the entityName."}
{"Origin": "Creates an audit entry for the 'service version created' event.", "Reference": "Creates an audit entry for the 'API version created' event.", "NNUpdater": "Adds an event."}
{"Origin": "Print scored parse trees for one sentence in format used by charniak parser", "Reference": "Print scored parse trees for one sentence in format used by Charniak parser.", "NNUpdater": "Set Druck - Format."}
{"Origin": "May be null if the inetAddress is unknown or explicitly omitted.", "Reference": "May be null if the host name/IP is unknown or explicitly omitted.", "NNUpdater": "If this is not known, use {@link #inetAddress(InetAddress)} instead."}
{"Origin": "Validates that the client is properly configured for using cpk.", "Reference": "Validates that the client is properly configured to use https.", "NNUpdater": "Validate the given ."}
{"Origin": "Collects data how often components are created", "Reference": "Collects data how often a resource reference is created", "NNUpdater": "Record how many files are created successfully."}
{"Origin": "Returns a range of all the sync d l objects where parentFolderId = ?.", "Reference": "Returns a range of all the sync d l objects where modifiedTime > ?", "NNUpdater": "Returns the number of sync d l objects where type = ?"}
{"Origin": "Equivalent to {@code load(file, true)}.", "Reference": "Equivalent to {@code load(module, true)}.", "NNUpdater": "The result is equivalent to {@code this & pow(2, n) != 0}."}
{"Origin": "Report the algebraic area between function and x axis, from x1 to x2.", "Reference": "Report the area between function and y line, from x1 to x2.", "NNUpdater": "Draws a line from (u1,v1) to (u2,v2)."}
{"Origin": "Getter Parameter Value for statementdate", "Reference": "Getter Parameter Value for Statement date", "NNUpdater": "Getter Parameter Value for D-U-N-S"}
{"Origin": "Whether there is currently a bound execution.", "Reference": "Whether there is currently an active bound execution.", "NNUpdater": "Gets the namespace URI currently bound by the given prefix."}
{"Origin": "Creates an {@code FxSwap} using forward points, specifying a date adjustment.", "Reference": "Creates an {@code FxSwap} using decimal forward points, specifying a date adjustment.", "NNUpdater": "The FX rate at the far date is equal to {@code nearRate + forwardPoints}"}
{"Origin": "Recursively perform a depth-first search of jar interdependencies, breaking cycles if necessary, to determine the final classpath element order.", "Reference": "Recursively perform a depth-first traversal of child classpath elements, breaking cycles if necessary, to determine the final classpath element order.", "NNUpdater": "The classpath element URL (classpath root dir or jar) that this class was found within."}
{"Origin": "Sets the timeline on this fake player, which notifies listeners with the changed timeline and the given timeline change reason.", "Reference": "Sets the timeline on this fake player, which notifies listeners with the changed timeline.", "NNUpdater": "Returns a {@link CastTimeline} that represents the state of the given {@code remoteMediaClient}."}
{"Origin": "Sets the forbidden context map.", "Reference": "Sets the allowed contexts.", "NNUpdater": "Sets the name of the context client."}
{"Origin": "Calculate Sum of squares of all elements in the Matrix", "Reference": "Calculate Sum of squares of all elements in the DRM.", "NNUpdater": "Sums elements of a SET sum{i | i in set} = SUM"}
{"Origin": "Binds views for the given {@link KindSectionData} list.", "Reference": "Binds views for the given {@link KindSectionData}.", "NNUpdater": "Insert a new child of kind {@link DataKind} into the given {@link EntityDelta}."}
{"Origin": "Copies the specified {@link PointerBuffer} to the {@code data.l} field.", "Reference": "Copies the specified {@link CLongBuffer} to the {@code data.l} field.", "NNUpdater": "Copies the specified {@link YGValue.Buffer} to the {@code resolvedDimensions} field."}
{"Origin": "Visit all of the SqlExpressableTypes associated with this this Writeable.", "Reference": "Visit all of the SqlExpressableTypes associated with this this Bindable.", "NNUpdater": "Check if this resource should is writeable."}
{"Origin": "Binds the specified {@link Service} under the specified directory.", "Reference": "Binds the specified {@link HttpService} under the specified directory.", "NNUpdater": "Binds the specified {@link Service} at the specified {@link Route}."}
{"Origin": "Creates a {@code outcome} tag based on the status of the given {@code response}.", "Reference": "Creates an {@code outcome} tag based on the status of the given {@code response}.", "NNUpdater": "Sets the response status code."}
{"Origin": "Checks whether replacing array with replacementArray in this qualifier creates replacementArray's entry in other.", "Reference": "Checks whether replacing sequence with replacementSequence in this qualifier creates replacementSequence entry in other.", "NNUpdater": "NOTE: This method is an alternative for ."}
{"Origin": "Obtains an instance from the specified unique name.", "Reference": "Obtains an instance from the specified name.", "NNUpdater": "Obtains the type from a unique name."}
{"Origin": "Copy bytes from an to an .", "Reference": "Copies bytes from an to an .", "NNUpdater": "Copy and convert bytes from an to chars on a , using the specified encoding."}
{"Origin": "Add insert optimize result unit.", "Reference": "Add optimized insert value.", "NNUpdater": "Creates a force merge request."}
{"Origin": "Block for a collection of futures, with an optional timeout for each future.", "Reference": "Block for a collection of futures, with optional timeout.", "NNUpdater": "Returns a future that wraps the given future for obtaining the debug bridge with a timeout."}
{"Origin": "If an empty ItemStack, or none of the type {{@link Material#FIREWORK}} was given, a new Firework ItemStack will be created.", "Reference": "If an empty ItemStack, or none of the type {{@link Material#FIREWORK_ROCKET}} was given, a new Firework ItemStack will be created.", "NNUpdater": "Gets a copy of the {@link FireworkEffectData} for this firework."}
{"Origin": "Converts an array of bytes into an array of characters representing the hexidecimal values of each byte in order.", "Reference": "Converts an array of bytes into an array of characters representing the hexadecimal values of each byte in order.", "NNUpdater": "Converts a big-endian byte array into an array of doubles."}
{"Origin": "Simple test -- dump and execute appJar with the given appClasses in classlist.", "Reference": "Simple test -- dump and execute appJar with the given classList in classlist.", "NNUpdater": "Returns the {@link App app}'s {@link JobManager}"}
{"Origin": "Creates the {@link com.univocity.parsers.fixed.FixedWidthFieldLengths} instance based on the headers and field lengths.", "Reference": "Creates the {@link com.univocity.parsers.fixed.FixedWidthFields} instance based on the headers and field lengths.", "NNUpdater": "Modifies the length of a given field"}
{"Origin": "Must hold {@code }, {@code }", "Reference": "Must hold {@code }, {@code }, {@code }", "NNUpdater": "A {@code null} CharSequence will return {@code -1}."}
{"Origin": "Resolution for each tick of the timer wheel for scheduling deadlines.", "Reference": "Resolution in nanoseconds for each tick of the timer wheel for scheduling deadlines.", "NNUpdater": "Interval of a tick of the wheel in nanoseconds."}
{"Origin": "If the JAR file has a {@code Main-Class} attribute in its main manifest then its value is the {@link", "Reference": "If the JAR file has a {@code Main-Class} attribute in its main manifest then its value is the module {@link", "NNUpdater": "Sets the main class."}
{"Origin": "Colors and labels that will be appended to the end of the auto calculated colors and labels arrays after calculating the legend.", "Reference": "Entries that will be appended to the end of the auto calculated entries after calculating the legend.", "NNUpdater": "Colors and labels that will be appended to the end of the auto calculated colors and labels arrays after calculating the legend."}
{"Origin": "create an AccessLogElement implementation which needs header string", "Reference": "create an AccessLogElement implementation which needs an element name", "NNUpdater": "The element needs to be that of a field."}
{"Origin": "So we call {@link Utils#rSuicide(String)} instead.", "Reference": "So we call {@link RSuicide#rSuicide(String)} instead.", "NNUpdater": "Tests the {@link CommonUtils#listToString(List)} method."}
{"Origin": "Note that this method doesn't serialize the CharSequence of the TokenStream - the caller has to take care of serializing this if necessary.", "Reference": "Note that this method doesn't serialize the CharSequence of the TwitterTokenStream - the caller has to take care of serializing this if necessary.", "NNUpdater": "Take care of the first sequence, at the given section/run, checking links to the next sequence runs that overlap this run."}
{"Origin": "Monitoring of beans methods having the {@link Scheduled} or {@link Schedules} annotations, only if is added in application.yml.", "Reference": "Monitoring of beans methods having the {@link Scheduled} or {@link Schedules} annotations.", "NNUpdater": "Monitoring of beans methods having the {@link Scheduled} or {@link Schedules} annotations, only if is added in application.yml."}
{"Origin": "Discard the peaks that are too light compared with the others, unless they are distant enough from immediate neighbors.", "Reference": "Discard the peaks that are too light compared with the others and have a close neighbor.", "NNUpdater": "Sets the value of the id property."}
{"Origin": "Acquire a SAXParser from the pool; create one if it doesn't exist.", "Reference": "Acquire a SAXParser from the pool.", "NNUpdater": "Test if newSAXParser() method returns SAXParser."}
{"Origin": "Get all supported realms", "Reference": "Get all supported providers", "NNUpdater": "Sets the security service."}
{"Origin": "Loads the class defined by the specified name and path.", "Reference": "Loads and returns the class defined by the specified name and path.", "NNUpdater": "Loads the class with the specified binary name defined by this class loader."}
{"Origin": "Creates query for the given queryString.", "Reference": "Queries this contact source for the given queryString.", "NNUpdater": "-D"}
{"Origin": "Implementations of SkylarkValue may define their own behavior of {@code repr}.", "Reference": "Implementations of StarlarkValue may define their own behavior of {@code repr}.", "NNUpdater": "Like {@link #convert(Object, String, Object)}, but converts skylark {@code None} to given {@code defaultValue}."}
{"Origin": "With this HMM as the initial model, learn an HMM by the Baum-Welch algorithm.", "Reference": "Updates the HMM by the Baum-Welch algorithm.", "NNUpdater": "Returns the initial SearchState."}
{"Origin": "Checks if secondary package, i.e.", "Reference": "Checks if a secondary package, i.e.", "NNUpdater": "Get the accountName value."}
{"Origin": "Runs the java launcher with the given arguments.", "Reference": "Runs the java launcher with the given arguments, expecting a 0 exit code", "NNUpdater": "Returns the loader class instance for the given loader id."}
{"Origin": "Returns a new Task that, when this task completes normally, is executed using the supplied Scheduler, with this task's result as the argument to the supplied action.", "Reference": "Returns a new Task that, when this task completes normally, is executed using the supplied Executor, with this task's result as the argument to the supplied action.", "NNUpdater": "Returns a new Task that, when this task completes normally, is executed using the default Scheduler."}
{"Origin": "Adds continuous task object.", "Reference": "Adds local continuous task object.", "NNUpdater": "Gets the version."}
{"Origin": "Test of var method, of class ShiftedGeometricDistribution.", "Reference": "Test of variance method, of class ShiftedGeometricDistribution.", "NNUpdater": "Test of geometric method, of class DiscreteDistributions."}
{"Origin": "Gets the service either from the cache or from ES.", "Reference": "Gets the api either from the cache or from ES.", "NNUpdater": "Gets a value from the cache and moves it to top."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Get the list of statuses concerning the given events and the current user.", "Reference": "Get the list of statuses concerning the given composite events and the current user.", "NNUpdater": "GET /rest/statuses/domain_timeline -> get the latest statuses from the domain"}
{"Origin": "Builds a JFreeChart time series from a Ta4j time series and an indicator.", "Reference": "Builds a JFreeChart time series from a Ta4j bar series and an indicator.", "NNUpdater": "Gets the time-series of fixings, defaulted to an empty time-series."}
{"Origin": "Serialize the given object.", "Reference": "Serialize the given object using the given instance.", "NNUpdater": "Returns the revision number for the given ."}
{"Origin": "Checks the consistency of the transactions.", "Reference": "Check the consistency of the transactions.", "NNUpdater": "Checks the consistency of the files and directories in the subtree under the path."}
{"Origin": "Set Lieferdatum.", "Reference": "Set Bewegungsdatum.", "NNUpdater": "Add result set."}
{"Origin": "Called by objects that are traversing the nodes of the tree implicitely defined by the contents of a Java class.", "Reference": "Called by objects that are traversing the nodes of the tree implicitly defined by the contents of a Java class.", "NNUpdater": "Traverses the Tree in pre-order."}
{"Origin": "Set the URL of the framework as a String (for example a file).", "Reference": "Sets the URL of the framework as a String (for example a file).", "NNUpdater": "Examples:"}
{"Origin": "Wraps up any pending operations for the current phase and switches to the next phase.", "Reference": "Wraps up any pending operations for the current phase and switches to the given phase.", "NNUpdater": "Sets phase filed."}
{"Origin": "Other method on {@link Descriptor} will be ignored.", "Reference": "Other method on {@link Binding} will be ignored.", "NNUpdater": "A {@code null} in the set of method names will be ignored."}
{"Origin": "Returns all the unique combinations of dimension values which have values set reachable from this profile.", "Reference": "Returns all the unique combinations of dimension values which have values reachable from this profile.", "NNUpdater": "Valid Values: |"}
{"Origin": "For EL need to unquote everything but no need to convert anything.", "Reference": "Once inside EL, no need to unquote or convert anything.", "NNUpdater": "Get Value Need to convert to String"}
{"Origin": "Returns the index for this dimension, or empty if it is not a number", "Reference": "Returns the index expression for this dimension, or empty if it is not a number", "NNUpdater": "Returns the value in the specified dimension as double."}
{"Origin": "Returns the module with the given name in this layer, or if not in this layer, the {@linkplain #parent parent} layer.", "Reference": "Returns the module with the given name in this layer, or if not in this layer, the {@linkplain #parents parents} layers.", "NNUpdater": "Returns the {@code Module} with the given name in this layer, or if not in this layer, the {@linkplain #parent parent} layer."}
{"Origin": "Check predicate for field which has simple char array type (byte[]).", "Reference": "Check predicate for field which has simple byte array type (byte[]).", "NNUpdater": "Serialize {@code char} into byte array with following scheme: [{@link #CHAR_FLAG}] + [char_bytes]."}
{"Origin": "Returns {@link MadvocConfig Madvoc config} once web application is started.", "Reference": "Configures the {@link MadvocConfig}.", "NNUpdater": "Action classes are annotated with {@link jodd.madvoc.meta.MadvocAction} annotation or extends a class annotated with the same annotation."}
{"Origin": "Returns true if the given port exists in the given ports list.", "Reference": "Returns {@code true} if the given port exists in the given ports list.", "NNUpdater": "Returns true if the given key exists (has a corresponding value) in the current language."}
{"Origin": "Test ModuleFinder.of with a file path to a directory containing a file starting with ``.", "Reference": "Test ModuleFinder.of with a file path to a directory containing a file that will not be recognized as a module.", "NNUpdater": "Test ModuleFinder.of with one directory of modules"}
{"Origin": "Checks that the given service type is accessible to types in the given module, and check that the module declare that it uses the service type.", "Reference": "Checks that the given service type is accessible to types in the given module, and check that the module declares that it uses the service type.", "NNUpdater": "Returns the set of type names that are service interfaces that this module uses."}
{"Origin": "This method has no effect if the package is already exported to the given module.", "Reference": "This method has no effect if the package is already exported (or open) to the given module.", "NNUpdater": "This method has no effect if the package is already exported (or exported all) to the given module."}
{"Origin": "Handles listing of shallow metric representations.", "Reference": "Lists metric resources.", "NNUpdater": "Returns a deep copy of this zip entry."}
{"Origin": "If Main Branch = 100 LOCs and the ``largest long-lived branch`` is 80 LOCs, I'm expecting to consider the value 100.", "Reference": "If Main Branch = 100 LOCs and the ``largest branch`` is 80 LOCs, I'm expecting to consider the value 100.", "NNUpdater": "Creates reference to the new branch with {@code branch} from default branch."}
{"Origin": "If the string argument is a configuration short-cut, then the short-cut is parsed and used to configure the returned Titan graph.", "Reference": "If the string argument is a configuration short-cut, then the short-cut is parsed and used to configure the returned JanusGraph graph.", "NNUpdater": "Short cut for ``xml.child(tag).text()``"}
{"Origin": "Resolve host part of the given URI to the bottom A-Record or the latest available CNAME", "Reference": "Resolve host name to the bottom A-Record or the latest available CNAME", "NNUpdater": ": The CNAME is available."}
{"Origin": "Creates a new HTTP authorization {@link Service} decorator using the specified {@link Authorizer}s.", "Reference": "Creates a new HTTP authorization {@link HttpService} decorator using the specified {@link Authorizer}s.", "NNUpdater": "Creates a new HTTP authorization {@link Service} decorator using the specified {@link Authorizer}s."}
{"Origin": "Returns the set of points whose data values are within the range of interest.", "Reference": "Returns the set of points whose data values are less than the range of interest.", "NNUpdater": "Returns all of data points in order."}
{"Origin": "or throws a {@link com.liferay.socialcoding.NoSuchSVNRepositoryException} if it could not be found.", "Reference": "or throws a {@link NoSuchSVNRepositoryException} if it could not be found.", "NNUpdater": "Operation fails."}
{"Origin": "The prefix for the first matching predicate is used, assuming the input map has predictable order.", "Reference": "The prefix for the first matching predicate is used.", "NNUpdater": "For each predicate, the result will contain a list holding all elements of the input collection matching the predicate."}
{"Origin": "The returned login is not validated.", "Reference": "The returned uuid is not validated.", "NNUpdater": "The message of the exception is ``The validated object is null``."}
{"Origin": "Opens a Titan graph with the previously configured options.", "Reference": "Opens a JanusGraph graph with the previously configured options.", "NNUpdater": "Sets options."}
{"Origin": "{@link Keys#EGG_TIMER}", "Reference": "{@link Keys#EGG_TIME}", "NNUpdater": "The user-defined function in the operator spec needs to implement {@link ScheduledFunction#onCallback(Object, long)} for timer notifications."}
{"Origin": "An Encog division by zero exception can occur.", "Reference": "a/b An Encog division by zero exception can occur.", "NNUpdater": "Convert regular Encog MLData into the ``sparse`` data needed by an SVM."}
{"Origin": "The {@link EcKeyCreateOptions#getCurve() key curve} can be optionally specified.", "Reference": "The {@link CreateEcKeyOptions#getCurveName() key curve} can be optionally specified.", "NNUpdater": "The {@link EcKeyCreateOptions#getCurve() key curve} can be optionally specified."}
{"Origin": "Primitive operation which removes and returns the node at the head of the frontier.", "Reference": "Removes and returns the node at the head of the frontier.", "NNUpdater": "Retrieves and removes the head of this queue."}
{"Origin": "This method sets the value of the database column m_monitor_item.user", "Reference": "This method sets the value of the database column m_monitor_item.username", "NNUpdater": "This method sets the value of the database column m_monitor_item.createdTime"}
{"Origin": "SemaphoreBasedRateLimiter is totally blocking by it's nature.", "Reference": "Semaphores are totally blocking by it's nature.", "NNUpdater": "Set a new {@link PayloadTransformer} to this builder."}
{"Origin": "Checks {@link JTree} and {@link TreeModel} support.", "Reference": "Checks {@link TreeModel} for {@link FilterableNodes} support.", "NNUpdater": "Initializes the main tree."}
{"Origin": "Generate combination position by position.", "Reference": "Generate combinations position by position.", "NNUpdater": "Moves the item placed at position {@code fromPosition} to the position {@code toPosition}."}
{"Origin": "Returns true if the server has a cluster.", "Reference": "Returns true if the local server has the requested cluster.", "NNUpdater": "Returns true if the method has a JSecurity RolesRequired or"}
{"Origin": "Listen for WebSocket on the passed path to be used as a routing condition.", "Reference": "Listens for websocket on the passed path to be used as a routing condition.", "NNUpdater": "Listen SQL routing event."}
{"Origin": "Atomically updates the current lo value with the results of applying the given delta, returning the updated value.", "Reference": "Atomically adds the given delta to the current lo value, returning the updated lo value.", "NNUpdater": "Atomically sets the element at position {@code i} to the given updated value if the current value {@code ==} the expected value."}
{"Origin": "or throws a {@link com.liferay.marketplace.NoSuchAppException} if it could not be found.", "Reference": "or throws a {@link NoSuchAppException} if it could not be found.", "NNUpdater": "Operation fails."}
{"Origin": "RxRatpack.promise(", "Reference": "RxRatpack.promiseAll(", "NNUpdater": "import static ratpack.rx.RxRatpack.asPromise;"}
{"Origin": "### \u24d8 Further Information: The removal of deleted nodes from the Recycle Bin is irreversible.", "Reference": "### \u24d8 Further Information: The removal of deleted nodes from the recycle bin is irreversible.", "NNUpdater": "API to check if the recycle bin feature is active recycle bin is activated in xwiki.cfg or in the XWiki"}
{"Origin": "See {@link #setPadding(int, int, int, int)}", "Reference": "See {@link #setPadding(float, float, float, float)}", "NNUpdater": "See {@link #logLikelihoodRatio(long, long, long, long)}."}
{"Origin": "Call KeyFactory.keyToString() on the underlying Key.", "Reference": "Call toUrlSafe() on the underlying Key.", "NNUpdater": "Loop over the {@link KeyProperties key} and call {@link KeyClient#getKey(KeyProperties key properties)}."}
{"Origin": "Creates new {@link IsoDayOfWeek} in the UTC timezone.", "Reference": "Creates new {@link IsoDayOfWeek}.", "NNUpdater": "Creates new {@link IsoDayOfWeek} in the UTC timezone."}
{"Origin": "Test of var method, of class GeometricDistribution.", "Reference": "Test of variance method, of class GeometricDistribution.", "NNUpdater": "Test of geometric method, of class DiscreteDistributions."}
{"Origin": "Computes the average for each pixel across all bands in the {@link Planar} image.", "Reference": "Computes the average for each pixel across selected bands in the {@link Planar} image.", "NNUpdater": "Computes the average for each pixel across all bands in the {@link Planar} image."}
{"Origin": "Prepare project for using.", "Reference": "Prepare a project for using.", "NNUpdater": "Start server."}
{"Origin": "If it's successfully completed, {@link BrowserResult#getMediaItems()} will return the list of children.", "Reference": "If it's successfully completed, {@link LibraryResult#getMediaItems()} will return the list of children.", "NNUpdater": "Operation fails."}
{"Origin": "Index rewritings in nested XPath expressions (GH-1210).", "Reference": "Index rewritings in nested XPath expressions.", "NNUpdater": "To create a repository in an organization, see {@link GHOrganization#createRepository(String, String, String, GHTeam, boolean)}"}
{"Origin": "The meta-property for the {@code sensitivity} property.", "Reference": "The meta-property for the {@code zeroRateSensitivity} property.", "NNUpdater": "The meta-property for the {@code sensitivityType} property."}
{"Origin": "Test for {@link ArrayBuilder#append(Array)}.", "Reference": "Test for {@link ArrayBuilder#append(XQArray)}.", "NNUpdater": "For example, consider {@code builder.appendValue(YEAR).appendValue(MONTH_OF_YEAR, 2);}"}
{"Origin": "Execute an accumulation along one or more dimensions", "Reference": "Execute an reduceOp along one or more dimensions", "NNUpdater": "Set Anwenden auf."}
{"Origin": "Returns the session string for admin user", "Reference": "Returns the translations for rubrics", "NNUpdater": "Returns the context of this session."}
{"Origin": "Gets an ordered list of all of the upgrade checks.", "Reference": "Gets a list of all of the built-in upgrade checks.", "NNUpdater": "Return an ordered list of all registered backward rules."}
{"Origin": "Returns the Jaas Module entry of the specified realm, named as moduleName.", "Reference": "Returns the JAAS Module entry of the specified realm, identified by the given name.", "NNUpdater": "Returns the {@code ModuleReference} for the given named module or {@code null} if a module of the given name is not in this configuration."}
{"Origin": "Sends a message to all connected members except to the one with the given id.", "Reference": "Sends a message to all connected clients except to the one with the given id.", "NNUpdater": "Sends an internal message."}
{"Origin": "Sets the minimum standard deviation.", "Reference": "Sets the phi factor.", "NNUpdater": "testStandardDeviation2"}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Checks the dirty status of the 'stmPriority' field.", "Reference": "Checks the dirty status of the 'reprUrl' field.", "NNUpdater": "Get the media type priority."}
{"Origin": "save transcrption into file", "Reference": "save transcription into file", "NNUpdater": "Save vector image as spark file."}
{"Origin": "IMPORTANT:Workers should set their client side socket timeout to at least 70 seconds (10 seconds higher than the maximum time service may hold the poll request).", "Reference": "Workers should set their client side socket timeout to at least 70 seconds (10 seconds higher than the maximum time service may hold the poll request).", "NNUpdater": "Set the timeout in milliseconds"}
{"Origin": "When true the cookie should only be sent using a secure protocol (https).", "Reference": "When {@code true} the cookie should only be sent using a secure protocol (https).", "NNUpdater": "Use the default setting (true), and inspect cookie to see that it happened."}
{"Origin": "set caching to maximum available duration", "Reference": "Sets caching to maximum available duration.", "NNUpdater": "Returns the caching options for this table."}
{"Origin": "TaskManagerOptions#NETWORK_BUFFERS_MEMORY_MAX}.", "Reference": "NetworkEnvironmentOptions#NETWORK_BUFFERS_MEMORY_MAX}.", "NNUpdater": "Operation fails."}
{"Origin": "Also determince if there is a class initializer (step 6).", "Reference": "Also determine if there is a class initializer (step 6).", "NNUpdater": "Also determine if there is a class initializer (step 6)."}
{"Origin": "Returns the width of the specified column, or 0 if the table layout has not been validated.", "Reference": "Returns the width of the specified column.", "NNUpdater": "Gets the pixel width of column"}
{"Origin": "Creates a {@code For}-comprehension of two Iterables.", "Reference": "Creates a {@code For}-comprehension of two Options.", "NNUpdater": "{@code Stream} equivalent: {@link Stream#flatMap} (using a function that produces streams, not iterables)."}
{"Origin": "Creates a ModuleReference to a module packaged as a JMOD.", "Reference": "Creates a ModuleReference to a module in a JMOD file.", "NNUpdater": "Creates the ModuleReference."}
{"Origin": "{@codesnippet com.azure.storage.blob.specialized.BlobAsyncClientBase.setHTTPHeaders#BlobHTTPHeaders}", "Reference": "{@codesnippet com.azure.storage.blob.specialized.BlobAsyncClientBase.setHTTPHeaders#BlobHttpHeaders}", "NNUpdater": "{@codesnippet com.azure.storage.blob.specialized.BlobClientBase.Builder.buildAsyncClient}"}
{"Origin": "Loop over the {@link IssuerProperties issuerProperties} and call {@link CertificateClient#getIssuer(IssuerProperties issuerProperties)} .", "Reference": "Loop over the {@link IssuerProperties issuerProperties} and call {@link CertificateClient#getIssuer(String)}.", "NNUpdater": "Loop over the {@link IssuerProperties issuerProperties} and call {@link CertificateClient#getIssuer(IssuerProperties issuerProperties)} ."}
{"Origin": "Part size does not match The size of each part except the last must match the size specified in the corresponding", "Reference": "Part size does not matchThe size of each part except the last must match the size specified in the corresponding", "NNUpdater": "Gets the size of the cluster."}
{"Origin": "Ack message in SQS", "Reference": "Ack message", "NNUpdater": "Returns the current ConfirmkListener."}
{"Origin": "Getter for {@link #allowMethods}", "Reference": "Getter for {@link #allowedHeaders}", "NNUpdater": "Set the HTTP methods to allow, e.g."}
{"Origin": "JAX-WS VERSION API is loaded from {0}, But JAX-WS runtime requires JAX-WS VERSION API.", "Reference": "JAX-WS VERSION API is loaded from {0}, But JAX-WS runtime requires JAX-WS VERSION or newer API.", "NNUpdater": "Add custom JAX-RS provider to the list of providers"}
{"Origin": "This will attempt to forcibly terminate currently executing tasks, and will remove pending tasks from the queue.", "Reference": "This will attempt to forcibly terminate currently executing works, and will remove pending works from the queue.", "NNUpdater": "Any tasks that are successfully assigned to a worker will be moved from pendingTasks to runningTasks."}
{"Origin": "Expected 2 barriers for the Serial GC and 4 for G1 (2 pre + 2 post).", "Reference": "Expected 2 barriers for the card mark GCs and 4 for G1 (2 pre + 2 post).", "NNUpdater": "Create New GPIO Controller instance"}
{"Origin": "Handle spawning chicks when the egg breaks.", "Reference": "Handle spawning entities when the egg breaks.", "NNUpdater": "Finds a spawning point."}
{"Origin": "Fetch objects to a local disk up to {@link PrefetchConfig#maxFetchCapacityBytes}.", "Reference": "Fetch objects to a local disk up to {@link FetchConfig#maxFetchCapacityBytes}.", "NNUpdater": "Fetch objects to a local disk up to {@link PrefetchConfig#maxFetchCapacityBytes}."}
{"Origin": "Create a new {@link MongoClient} with defaults suitable for replica set usage.", "Reference": "Create a new {@link com.mongodb.MongoClient} with defaults suitable for replica set usage.", "NNUpdater": "Will use the {@link Mongo} instance configured in {@link #reactiveMongoClient()}."}
{"Origin": "Expected: IOException is thrown", "Reference": "IllegalArgumentException is thrown", "NNUpdater": "Expected:"}
{"Origin": "Returns a Flowable that emits the results of a specified combiner function applied to combinations of n items emitted, in sequence, by the n Publishers emitted by a specified Publisher.", "Reference": "Returns a Flowable that emits the results of a specified combiner function applied to combinations of items emitted, in sequence, by an Iterable of other Publishers.", "NNUpdater": "Returns a Single that emits a list that contains the items emitted by the source Publisher, in a sorted order based on a specified comparison function."}
{"Origin": "This is a mutually exclusive option to {@link #samlServiceProvider(ServiceProviderConfigurationResolver)}", "Reference": "This is a mutually exclusive option to {@link #saml2Login(ServiceProviderConfigurationResolver)}", "NNUpdater": "Mutually exclusive with {@link #fromSubscription(String)}."}
{"Origin": "Stips aux and mark edges when we are splitting into a clause.", "Reference": "Strips aux and mark edges when we are splitting into a clause.", "NNUpdater": "Gets the map containing the aux data for this stack"}
{"Origin": "Returns the set of service ids that can transfered for the given {@code transferDataType}.", "Reference": "Returns the set of service ids that can transferred for the given {@code transferDataType}.", "NNUpdater": "Set the 'to' data type name."}
{"Origin": "This method does no checking that the provides Schema is nullable.", "Reference": "This method does no checking that the provided Schema is nullable.", "NNUpdater": "Create a {@link Schema} for the given type."}
{"Origin": "The bound resource instance is internally cached to make sure any sub-sequent attempts to bind the class are silently ignored.", "Reference": "The bound resource instance is internally cached to make sure any sub-sequent attempts to service the class are silently ignored.", "NNUpdater": "Returns the key bound by a {@link Binds} method."}
{"Origin": "Write out this workbook to an Outputstream.", "Reference": "Write out this workbook to an OutputStream.", "NNUpdater": "Write out the bytes into the given OutputStream."}
{"Origin": "Get request parameter ``response_type``.", "Reference": "Returns the value of the request parameter ``response_type``.", "NNUpdater": "Get Anfrageart."}
{"Origin": "Sets the {@link IpRange} which determines the IP ranges that are allowed to use the SAS.", "Reference": "Sets the {@link SasIpRange} which determines the IP ranges that are allowed to use the SAS.", "NNUpdater": "Sets the {@link IpRange} which determines the IP ranges that are allowed to use the SAS."}
{"Origin": "Scenario successful connection to the back end service via basic auth.", "Reference": "Scenario successful connection to the back end API via basic auth.", "NNUpdater": "Sets the http auth."}
{"Origin": "Returns either namePrimary or nameAlternative based on the {@link ContactsPreferences}.", "Reference": "Returns either namePrimary or nameAlternative based on the value of sortOrderPreference", "NNUpdater": "Returns either namePrimary or nameAlternative based on the value of sortOrderPreference"}
{"Origin": "The hash code for a module directive is computed as using {@code int} arithmetic.", "Reference": "using {@code int} arithmetic.", "NNUpdater": "Parses a module directive and returns it as a ModuleDirective."}
{"Origin": "Opens a {@link TitanGraph} database configured according to the provided configuration.", "Reference": "Opens a {@link JanusGraph} database configured according to the provided configuration.", "NNUpdater": "Creates a new {@link Graph} instance using the default {@link Configuration} from {@link #standardGraphConfiguration()}."}
{"Origin": "Queries this ContactSourceService for SourceContacts which match a specific query String.", "Reference": "Creates query that searches for SourceContacts which match a specific query String.", "NNUpdater": "Queries this ContactSourceService for SourceContacts which match a specific query Pattern."}
{"Origin": "Sets the CPU status (free or busy).", "Reference": "Sets the CPU status (free or busy since some ms).", "NNUpdater": "Returns whether node childs are loaded or not."}
{"Origin": "KeyImportOptions#getKeyMaterial() key material} cannot be null.", "Reference": "ImportKeyOptions#getKey() key material} cannot be null.", "NNUpdater": "KeyImportOptions#getKeyMaterial() key material} cannot be null."}
{"Origin": "A {@code DateTimeAccessor} represents some form of date and time information.", "Reference": "A {@code TemporalAccessor} represents some form of date and time information.", "NNUpdater": "Checks if the instant of this date-time is after that of the specified date-time."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "The action MUST set one of the {@code id}, {@code event}, {@code data}.", "Reference": "The action MUST set one of {@code id}, {@code event}, {@code data} or {@code comment}.", "NNUpdater": "Set the {@literal value} of a hash {@literal field}."}
{"Origin": "Computes the maximum for each pixel across all bands in the {@link Planar} image.", "Reference": "Computes the maximum for each pixel across selected bands in the {@link Planar} image.", "NNUpdater": "Computes the average for each pixel across all bands in the {@link Planar} image."}
{"Origin": "check if the schema provided is a valid schema: schema is not indicated (only one element in the names list)", "Reference": "Checks if the schema provided is a valid schema: schema is not indicated (only one element in the names list)", "NNUpdater": "Schema found for given schemaPath is a root schema."}
{"Origin": "Returns an SslContextFactory that should be used by a jetty server based on the specified SSLConfig param which may be null.", "Reference": "Returns an SslContextFactory.Server that should be used by a jetty server based on the specified SSLConfig param which may be null.", "NNUpdater": "Returns an SslContextFactory that should be used by a jetty server based on the specified SSLConfig param which may be null."}
{"Origin": "Gets a data URI for this image.", "Reference": "Gets the raw data of the image.", "NNUpdater": "Given an IRI, returns a IRI."}
{"Origin": "Updates IJ2 options dialog settings to reflect values set by IJ1 plugins.", "Reference": "Updates modern ImageJ options dialog settings to reflect values set by legacy ImageJ plugins.", "NNUpdater": "Updates user profiles."}
{"Origin": "Executes random mutator and accessor operations on {@link AsynchronousDataStore} validating that the used data structures can be used simultaneously.", "Reference": "Executes random mutator and accessor operations on {@link AsynchronousPageStore} validating that the used data structures can be used simultaneously.", "NNUpdater": "Sets the data reference."}
{"Origin": "and repositoryId = ?.", "Reference": "and parentFolderId = ?.", "NNUpdater": "Engine."}
{"Origin": "Receive a message as a String.", "Reference": "Receive a message as a String with the default Charset.", "NNUpdater": "Get the message"}
{"Origin": "Extracts an LTPA sso cookie from the subject of current thread and builds a ltpa cookie out of it for use on downstream web invocations.", "Reference": "Extracts an LTPA sso cookie from the subject of current thread and builds a ltpa cookie out of it without a list of attributes for use on downstream web invocations.", "NNUpdater": "Response text includes JWT cookie and principal information"}
{"Origin": "When the client is opened, it will attempt to connect to and register a session with each unique configured server {@link Address}.", "Reference": "When the client is connected, it will attempt to connect to and register a session with each unique configured server {@link Address}.", "NNUpdater": "Set the port that the tcpHelper will attempt to connect to on the server to {@code port}."}
{"Origin": "If the channel is released or currently does not need extra buffers, the buffer should be recycled to the buffer pool.", "Reference": "If the channel is released or currently does not need extra buffers, the buffer should be returned to the buffer pool.", "NNUpdater": "Releases the specified buffer to buffer pool."}
{"Origin": "Otherwise, the results returned match the parameters given in {@code options}.", "Reference": "Otherwise, the results returned match the parameters given in {@code selector}.", "NNUpdater": "Sets the {@code data} property in the builder."}
{"Origin": "Create renew check decision state.", "Reference": "Create renew check state.", "NNUpdater": "Renew sharding rule."}
{"Origin": "out shield note more than 10", "Reference": "out shield note more than 2", "NNUpdater": "(required)."}
{"Origin": "Note that this method does only allow DNS names and not IP addresses.", "Reference": "This method takes DNS names and IP addresses.", "NNUpdater": "Returns the set of interface IP addresses."}
{"Origin": "Sets the value of the 'cf_name' field.", "Reference": "Sets the value of the 'cfName' field.", "NNUpdater": "Sets the value of the 'paramName' field."}
{"Origin": "Returns the {@link Tab} (metadata) for a component.", "Reference": "Returns the {@link Tab} (metadata) with the given index.", "NNUpdater": "If the component is already present in the tab sheet, changes its caption and icon and returns the corresponding (old) tab, preserving other tab metadata like the position."}
{"Origin": "Security attributes, provide the ability to associate arbitrary information with a security contract specification in a key-value map.", "Reference": "Attributes provide the ability to associate arbitrary information with a security contract specification in a key-value map.", "NNUpdater": "Gets the information about the security price."}
{"Origin": "Set the URL of the framework as a Maven URL reference.", "Reference": "Sets the URL of the frameworks as a maven reference.", "NNUpdater": "See URL()"}
{"Origin": "Creates an OSM turn relation out of an unspecified OSM relation", "Reference": "Creates turn relations out of an unspecified OSM relation", "NNUpdater": "Stores the relation in the relation database."}
{"Origin": "Traverse the OCSP certificate.", "Reference": "Traverse a certificate.", "NNUpdater": "Sets the OCSP responses."}
{"Origin": "Sets the {@link PlatformConnectionManager} managing the connections to the AxonServer platform.", "Reference": "Sets the {@link AxonServerConnectionManager} managing the connections to the AxonServer platform.", "NNUpdater": "- The platform."}
{"Origin": "Get isManualImport.", "Reference": "Get IsManualImport.", "NNUpdater": "Get Manuell."}
{"Origin": "Enqueues a task to be run.", "Reference": "Enqueues a event to be run.", "NNUpdater": "Enqueues an envelope to be sent later."}
{"Origin": "adds a new bag out of the given data and adds it to the output", "Reference": "adds a new bag out of the given data to the output", "NNUpdater": "Adds a function"}
{"Origin": "Get data form from stanza.", "Reference": "Get data form from a stanza.", "NNUpdater": "The client authentication stanza needs to include the digest-uri of the form: xmpp/serviceName"}
{"Origin": "By constrast with {@link Optionals#sequencePresent(CollectionX)} if any Optional types are zero the return type will be an zero Optional", "Reference": "By constrast with {@link Optionals#sequencePresent(IterableX)} if any Optional types are zero the return type will be an zero Optional", "NNUpdater": "Required."}
{"Origin": "Convert to object types, returning null if text is null.", "Reference": "Convert to object types, returning null if text is null or empty.", "NNUpdater": "IsNullOrEmpty {is null or empty}."}
{"Origin": "Check if cluster permissions allow for the given action, also checks whether the limited by role allows the given actions", "Reference": "Check if cluster permissions allow for the given action, also checks whether the limited by role allows the given actions in the context of given authentication.", "NNUpdater": "Checks if the given user has the given role in the given organizational unit."}
{"Origin": "This method should only be used for steps whose value is {@link #TYPE_ARGUMENT TYPE_ARGUMENT}.", "Reference": "This method should only be used for steps whose value is {@link #TYPE_ARGUMENT}.", "NNUpdater": "This method should only be used for an object or array type."}
{"Origin": "Returns the default ValueFormatter that has been determined by the chart considering the provided minimum and maximum values.", "Reference": "Returns the default IValueFormatter that has been determined by the chart considering the provided minimum and maximum values.", "NNUpdater": "Calculates the minimum, maximum, granularity and range values of the YAxis with the given minimum and maximum values from the chart data."}
{"Origin": "Sets the actionType.", "Reference": "Set the type.", "NNUpdater": "The id of the action."}
{"Origin": "Return an ordered collection of SQL statements that need to be run to create a table.", "Reference": "Return an list of SQL statements that need to be run to create a table.", "NNUpdater": "Return the {@link Table} corresponding to the specified TableModel class"}
{"Origin": "Decreases by one the incoming reference count for this resource, and notifies the owner if said count reached zero as a result of this operation.", "Reference": "Decreases by one the reference count for this resource, and notifies the owner if said count reached zero as a result of this operation.", "NNUpdater": "Expert: decreases the refCount of this IndexReader instance."}
{"Origin": "Resolution for each tick of the timer wheel for scheduling deadlines.", "Reference": "Resolution in nanoseconds for each tick of the timer wheel for scheduling deadlines.", "NNUpdater": "Interval of a tick of the wheel in nanoseconds."}
{"Origin": "Getter for the URL of the content review icon associated with this item", "Reference": "Getter for the css class of the content review icon associated with this item", "NNUpdater": "Initializes this list item."}
{"Origin": "Returns a zoned date-time formed from this date-time and the specified time-zone.", "Reference": "Returns a zoned date-time formed from this date-time and the specified zone ID.", "NNUpdater": "Returns a ChronoLocalDateTime formed from this date at the specified time."}
{"Origin": "directories with .class files or empty directories).", "Reference": "directories with .class files or empty directories) will cause exception in running log.", "NNUpdater": "Delete empty parent directories."}
{"Origin": "Returns a newly-created {@link LoggingService} decorating {@code delegate} based on the properties of this builder.", "Reference": "Returns a newly-created {@link LoggingService} decorating {@link HttpService} based on the properties of this builder.", "NNUpdater": "Returns a newly created {@link DistalDendrite}"}
{"Origin": "When the config has been successfully retrieved it must be put in the cache.", "Reference": "When the config has been successfully retrieved it must be updated in cache.", "NNUpdater": "If the cover image has already been retrieved, put it in the passed view."}
{"Origin": "Set the value of password for the default user.", "Reference": "Sets the value of password for the default user.", "NNUpdater": "Resets the password for a specified user."}
{"Origin": "If the etag's value is equal to the wildcard character ({@code ``*``}), the setting will always be updated.", "Reference": "If the ETag's value is equal to the wildcard character ({@code ``*``}), the setting will always be updated.", "NNUpdater": "If {@link ConfigurationSetting#getETag() etag} is specified, the configuration value is updated if the current setting's etag matches."}
{"Origin": "Returns whether the template node is stateful (has at least one @state variable).", "Reference": "Returns whether the template node is stateful (has at least one @prop variable).", "NNUpdater": "Return true if there is at least one node with connection in the READY state and not throttled."}
{"Origin": "Given a {@link Tab}, selects the corresponding mode in the {@link SplitEditor}, i.e.", "Reference": "Given a {@link Tab}, selects the corresponding mode in the {@link DesignToolsSplitEditor}, i.e.", "NNUpdater": "Operation fails."}
{"Origin": "Trading Strategy - we expect the engine to shutdown.", "Reference": "Exception from Trading Strategy - we expect the engine to shutdown.", "NNUpdater": "Trading Strategy - we expect the engine to shutdown."}
{"Origin": "Starts zookeeper up on the configured port.", "Reference": "Starts zookeeper up on an ephemeral port.", "NNUpdater": "Gets a value indicating the Zookeeper URL."}
{"Origin": "If this happens, a configuration {@link ConfigurationEvent event} will be sent to all registered listeners.", "Reference": "If this happens, a CONFIGURATION {@link ConfigurationEvent event} will be sent to all registered listeners.", "NNUpdater": "Returns Event Processing Configuration defined in this Configuration."}
{"Origin": "Process the server section, if any, of a configuration file.", "Reference": "Find the server resource in a configuration file.", "NNUpdater": "Returns the server-specific section of the configuration file."}
{"Origin": "Convert a raw value to an Avro object to serialize in Avro type system.", "Reference": "Convert a raw value to an Avro object to serialize in Avro type system, using the provided character set when necessary.", "NNUpdater": "Create a Avro schema type with schema definition"}
{"Origin": "Get a map of data source Ids to their string names for the current case.", "Reference": "Get a map of data source Ids to their string names (data source file name only) for the current case.", "NNUpdater": "Parses site names and their configuration (e.g."}
{"Origin": "Returns the Java type corresponding to the given type descriptor.", "Reference": "Returns the {@link Type} corresponding to the given type descriptor.", "NNUpdater": "Returns the {@link Type} corresponding to the given type descriptor."}
{"Origin": "Sets the typing.", "Reference": "Set the typing.", "NNUpdater": "The first is to uses reflection to create the instance typing the generated Object based upon the factory instance object."}
{"Origin": "Tests that a suspended checkpoint coordinator calls suspend on the store and counter.", "Reference": "Tests that the checkpoint coordinator is shut down if the execution graph is suspended.", "NNUpdater": "Is the given service suspending or already suspended?"}
{"Origin": "Action that allows to display the view on image (or binary table)", "Reference": "Action that allows to display the view on initial image.", "NNUpdater": "Table macro that returns a view."}
{"Origin": "Returns an immutable list containing eight elements.", "Reference": "Returns an unmodifiable list containing eight elements.", "NNUpdater": "The returned List is immutable."}
{"Origin": "Removes a variable scope from the stack.", "Reference": "Removes and returns the current variable scope.", "NNUpdater": "Removes the final variable candidate from the Stack."}
{"Origin": "derive initial vector by PBKDF2 algorithm (1000 iterations of SHA256)", "Reference": "Derive initial vector by PBKDF2 algorithm (10 iterations of SHA256)", "NNUpdater": "-I iterations"}
{"Origin": "Set the sort mode for the context", "Reference": "Get the sort mode from the state", "NNUpdater": "Set the XStream mode to use."}
{"Origin": "Set UPC/EAN.", "Reference": "Set CU-UPC.", "NNUpdater": "Add result set."}
{"Origin": "Find all ChildGlideModules", "Reference": "Find all LibraryGlideModules", "NNUpdater": "Returns a full set of module adapters, including module adapters for child modules."}
{"Origin": "Clears the value of the 'zk_Quorum' field", "Reference": "Clears the value of the 'zkQuorum' field.", "NNUpdater": "Clears the value of the 'paramName' field"}
{"Origin": "A is built when the JAR is created.", "Reference": "A class is built when the JAR is created.", "NNUpdater": "The main method executed when this class is run."}
{"Origin": "Tests l7dlog(Priority, String, Object[], Throwable).", "Reference": "Tests l7dlog(FQN, Priority, String, Object[], Throwable) log.", "NNUpdater": "Tests the {@link IndexedSet#getByField(IndexDefinition, Object)} method."}
{"Origin": "Tests resilency when D2 device is down.", "Reference": "Tests resiliency when D2 device is down.", "NNUpdater": "Tests resiliency when D2 device is down."}
{"Origin": "NOTE:This operation is eventually consistent.", "Reference": "This operation is eventually consistent.", "NNUpdater": "Sets the request action."}
{"Origin": "Returns a new {@link RouterOptions} with default settings.", "Reference": "Create a {@link Builder} using the options configured in this instance.", "NNUpdater": "Allows customizing the {@link XFrameOptionsHeaderWriter}."}
{"Origin": "IMPORTANT:Deciders should set their client-side socket timeout to at least 70 seconds (10 seconds higher than the timeout).", "Reference": "Deciders should set their client-side socket timeout to at least 70 seconds (10 seconds higher than the timeout).", "NNUpdater": "Set the timeout in milliseconds"}
{"Origin": "Perform checks on the packet represented by this instance and return true if it is found to be invalid.", "Reference": "Perform checks on the RTP/RTCP packet represented by this instance and return true if it is found to be invalid.", "NNUpdater": "Checks if the value is valid for the rule, throwing an exception if invalid."}
{"Origin": "If {@code cursor#getNext()} is {@code null}, this method adds all the scalar values in current array to the result.", "Reference": "If {@code pathCursor#getNext()} is {@code null}, this method adds all the scalar values in current array to the result.", "NNUpdater": "If {@code cursor#getNext()} is {@code null}, this method adds all the scalar values in current array to the result."}
{"Origin": "Notify listeners at the end of activation.", "Reference": "Notify listeners on node start.", "NNUpdater": "Sets the flow definition."}
{"Origin": "Returns a new instance of {@link io.bootique.BQModule.Builder} initialized with module for this provider.", "Reference": "Returns a new instance of {@link BQModuleMetadata.Builder} initialized with module for this provider.", "NNUpdater": "Expected format: {@code appList: app (| app)*}"}
{"Origin": "Creates a ModuleReference to a module packaged as a modular JAR.", "Reference": "Creates a ModuleReference to a possibly-patched module in a modular JAR.", "NNUpdater": "Returns a {@code ModuleReference} to a module in modular JAR file on the file system."}
{"Origin": "Return all querys in the {@link Playlist}", "Reference": "Return all queries in the {@link Playlist}", "NNUpdater": "Return all querys in the {@link Playlist}"}
{"Origin": "/api/v1/topology/:id/profiling/restartworker/:host-port/:timeout -> restart worker.", "Reference": "/api/v1/topology/:id/profiling/restartworker/:host-port -> restart worker.", "NNUpdater": "Operation fails."}
{"Origin": "set duration specifications according to 'rate' requirements", "Reference": "To set duration specifications according to 'rate' requirements", "NNUpdater": "Set Wechselkurs."}
{"Origin": "Returns a wrapped instance of {@link ClientConnectionManager} to capture the necessary performance metrics.", "Reference": "Returns a wrapped instance of {@link HttpClientConnectionManager} to capture the necessary performance metrics.", "NNUpdater": "Start callback."}
{"Origin": "Appends {@link UserDefinedFunctionInfo} protos to a {@link ModuleInfo.Builder}.", "Reference": "Appends {@link StarlarkFunctionInfo} protos to a {@link ModuleInfo.Builder}.", "NNUpdater": "Returns a builder for a {@code DatasetInfo} object given it's user-defined id."}
{"Origin": "Returns the connecting client ID.", "Reference": "Returns the connection ID.", "NNUpdater": "Sets the name of the container that contains the blob."}
{"Origin": "Test of setParams method, of class OldAgentConnector.", "Reference": "Test of addMetric method, of class OldAgentConnector.", "NNUpdater": "Set Alter Wert."}
{"Origin": "See {@link #setIgnoreGestureInsetBottom(boolean)}.", "Reference": "See {@link #setGestureInsetBottomIgnored(boolean)}.", "NNUpdater": "See {@link #streaming(boolean)}"}
{"Origin": "Updates the current packet.", "Reference": "Updates the current chunk.", "NNUpdater": "Get head packet."}
{"Origin": "Gets dimensions based on relationships and attributes from {@link EntityProjection}.", "Reference": "Gets dimensions except time dimensions based on relationships and attributes from {@link EntityProjection}.", "NNUpdater": "Identifies entities in the string {@code text}."}
{"Origin": "Test of var method, of class FDistribution.", "Reference": "Test of variance method, of class FDistribution.", "NNUpdater": "This method returns the index of the maximum probability as provided by {@link #classDistribution(O) classDistribution(M)}."}
{"Origin": "Converting {@code ws} and URIs to their HTTP equivalent", "Reference": "Converting {@code ws} and {@code wss} URIs to their HTTP equivalent", "NNUpdater": "The result is equivalent to {@code this ^ pow(2, n)}."}
{"Origin": "Maps all index descriptors according to {@link #indexReferenceNoLocking(IndexDescriptor)}.", "Reference": "Maps all index descriptors according to {@link #indexReferenceNoLocking(IndexDescriptor2)}.", "NNUpdater": "E.g setZIndex() becomes ``zIndex``."}
{"Origin": "The max size of the file path data is 255 bytes while the max size of the file contents is 10KB.", "Reference": "The max size of the file path data is 255 bytes while the max size of the file contents is determined by provider quotas(default size is 10KB).", "NNUpdater": "Max Inlinee Size --"}
{"Origin": "Returns true if the class has the specified annotation class.", "Reference": "Returns true if the class has the specified annotation type.", "NNUpdater": "Returns true if the class has the specified annotation type."}
{"Origin": "Handles an iterate commit.", "Reference": "Handles an iterator next commit.", "NNUpdater": "Handles a log write."}
{"Origin": "return all SysProc durable plan fragments that needs to be registered", "Reference": "return all SysProc plan fragments that needs to be registered", "NNUpdater": "testDeserializeSingleSiteStatement"}
{"Origin": "Gets passed through to the base learner if it implements BatchPrecitor.", "Reference": "Gets passed through to the base learner if it implements BatchPredictor.", "NNUpdater": "Gets the classifier specification string, which contains the class name of the classifier and any options to the classifier"}
{"Origin": "When enabled, SMTP socket factory class will be not set, and Plaintext Authentication over TLS will be enabled.", "Reference": "When enabled, will be not set, and Plaintext Authentication over TLS will be enabled.", "NNUpdater": "The {@link Secret#isEnabled() enabled} field is set to true by key vault, if not specified."}
{"Origin": "Will only return non-null for fields that have constant initializers, which is usually only fields of primitive type, or String constants.", "Reference": "Will only return non-null for fields that have constant initializers, which is usually only fields of primitive type, or", "NNUpdater": "Gets all fields including hidden fields."}
{"Origin": "This method both takes into account the ordering of known qualifiers as well as lexical ordering for unknown qualifiers.", "Reference": "This method takes into account the ordering of known qualifiers then unknown qualifiers with lexical ordering.", "NNUpdater": "Returns the least upper bound of two types."}
{"Origin": "Returns all the arguments.", "Reference": "Returns all the remaining arguments.", "NNUpdater": "Ensure that all arguments are String or String[]"}
{"Origin": "Normally this is one of the strings listed in {@link Protocols}.", "Reference": "Normally this is one of the strings listed in {@link HttpProtocolNames}.", "NNUpdater": "If provided, this will override the list of protocols set by {@link #setApplicationProtocols(SSLSocket, String[])}."}
{"Origin": "Retrieve the {@code ExchangeResult} for the given ``request-id`` header value.", "Reference": "Retrieve the {@link Info} for the given ``request-id`` header value.", "NNUpdater": "Retrieve the {@code ExchangeResult} for the given ``request-id`` header value."}
{"Origin": "Creates new {@link AggregationExpression} that converts a string to a date object in the factory timezone", "Reference": "Creates new {@link AggregationExpression} that converts a date/time string to a date object.", "NNUpdater": "Creates new {@link AggregationExpression} that returns the year portion of a date in the factory timezone (default UTC)."}
{"Origin": "Constructs a immutable {@link OptionalValue} for the given {@link Key} and element.", "Reference": "Constructs an immutable {@link OptionalValue} for the given {@link Key} and element.", "NNUpdater": "Gets an {@link ImmutableSet} of {@link Value.Immutable}s for the block at the given location."}
{"Origin": "Retrieve the {@link Graph} with the specified ID from the cache.", "Reference": "Retrieve the {@link Store} with the specified ID from the cache.", "NNUpdater": "Retrieve the {@link MetadataEntry} corresponding to the specified key for the {@link NamespacedEntityId}."}
{"Origin": "If two ranges overlap, this range strictlyContains either the begin or the end of the other range.", "Reference": "If two ranges overlap, this range or the other range strictlyContains the begin or the end of the other range.", "NNUpdater": "The end_date."}
{"Origin": "Gets the label for this waypoint based on the artifact type.", "Reference": "Gets the label for this waypoint.", "NNUpdater": "Gets the text shown in the label."}
{"Origin": "Handles an {@link HttpResponseException} that occurs.", "Reference": "Handles an {@link ResponseException} that occurs.", "NNUpdater": "@throws IOException If an I/O exception occurs."}
{"Origin": "Register a CollectionStateWatcher to be called when the state of a collection changes", "Reference": "Register a CollectionStateWatcher to be called when the state of a collection changes or the set of live nodes changes.", "NNUpdater": "Called when the state of a download changes."}
{"Origin": "Setting the manifest is not allowed after a call to {@link #setMediaSource(MediaSource)}.", "Reference": "Setting the manifest is not allowed after a call to {@link #setMediaSources(MediaSource...)}.", "NNUpdater": "Calls {@link MediaSource#releaseSource(Listener)} on the playback thread."}
{"Origin": "Thus 31st January plusWrapField one day goes to the 1st January.", "Reference": "Thus 31st January addWrapField one day goes to the 1st January.", "NNUpdater": "Thus 31st January addWrapField one day goes to the 1st January."}
{"Origin": "Note: this callback may be called on the main thread, regardless of the callback executor.", "Reference": "Interoperability: this callback may be called on the main thread, regardless of the callback executor.", "NNUpdater": "No callback messages should be posted once {@code setCallback(null)} is done."}
{"Origin": "Get the maximum size of a binary message buffer (for streaming writing)", "Reference": "Get the maximum size of a binary message buffer.", "NNUpdater": "Returns the log serializer."}
{"Origin": "Annotate for coreference (statistical)", "Reference": "Annotate for coreference (statistical or hybrid)", "NNUpdater": "The method takes the Annotate object as parameter and adds an Annotate.Worker to the correct Annotate queue for later processing."}
{"Origin": "This method will create an {@link com.google.gwt.user.client.Element} for the given HTML.", "Reference": "This method will create an {@link com.google.gwt.dom.client.Element} for the given HTML.", "NNUpdater": "Operation fails."}
{"Origin": "Writes a CSV line to the underlying.", "Reference": "Writes a single CSV line to the underlying.", "NNUpdater": "Writes the entire list to a CSV file."}
{"Origin": "Writes meta data about this package if the destination directory exists, and the ``vespaversion`` property is set.", "Reference": "Writes meta data about this package if the destination directory exists.", "NNUpdater": "The meta-property for the {@code sharedData} property."}
{"Origin": "checks if there's still enough memory left by checking whether there is still a 25MB margin between getUsed() and getMax().", "Reference": "checks if there's still enough memory left by checking whether there is still a 50MB margin between getUsed() and getMax().", "NNUpdater": "The template needs to still query {@link #isCopyMethodOnValueInstance()} to determine whether to use {@code [expression]."}
{"Origin": "Returns a default credential for the application.", "Reference": "Returns the Application Default Credentials.", "NNUpdater": "Set the name value."}
{"Origin": "Verify the validity of an 'RSA_SIGN_PSS_2048_SHA256' signature for the specified plaintext message", "Reference": "Verify the validity of an 'RSA_SIGN_PSS_2048_SHA256' signature for the specified message", "NNUpdater": "- {@link #KEY_SIGNATURE}: value specified by {@link #setCreator(String)}."}
{"Origin": "Gets the list of {@link KeyProperties KeyProperties} on this page.", "Reference": "Gets the iterable stream of {@link KeyProperties KeyProperties} on this page.", "NNUpdater": "Gets the list of properties."}
{"Origin": "Sets the statistic repository with the specified statistic repository.", "Reference": "Sets the option repository with the specified option repository.", "NNUpdater": "Returns this statistic's {@link StatisticCategory}."}
{"Origin": "Creates query for the given queryString.", "Reference": "Queries this search source for the given queryString.", "NNUpdater": "-D"}
{"Origin": "Builds a channel to the given server URI with the first supported channel creds config.", "Reference": "Builds a channel to one of the provided management servers.", "NNUpdater": "Start a channel with a specified program ID."}
{"Origin": "Deletes a question by its auto-generated ID.", "Reference": "Deletes a feedback question cascade its responses and comments.", "NNUpdater": "Deletes a question by its auto-generated ID."}
{"Origin": "Put attribute consent enabled.", "Reference": "Put service into flashscope.", "NNUpdater": "Build consent attribute names string."}
{"Origin": "Returns the {@code Platform} of the given OS name specified in the {@code ModuleTarget} attribute.", "Reference": "Returns the {@code Platform} derived from the target platform in the {@code ModuleTarget} attribute.", "NNUpdater": "Returns the {@code ModuleReference} for the given named module or {@code null} if a module of the given name is not in this configuration."}
{"Origin": "Initialise a new {@link Keyspace} by opening and closing a transaction on it.", "Reference": "Initialise a new Keyspace by opening and closing a transaction on it.", "NNUpdater": "Returns the index of the opening parenthesis, i.e."}
{"Origin": "Return the location of a dataset if it is backed by TDB, else null", "Reference": "Tes whether a dataset is backed by TDB or not.", "NNUpdater": "Return the location of a DatasetGraph if it is backed by TDB, else null"}
{"Origin": "Returns a literal for the {@link Reference} availability.", "Reference": "Returns a literal for the {@link ScrService.Reference} availability.", "NNUpdater": "memory, scale)."}
{"Origin": "Caches the promise result and provides it to all future subscribers, if it satisfies the predicate.", "Reference": "Caches the promise result eternally and provide it to all future subscribers, if it satisfies the predicate.", "NNUpdater": "Creates a promise for the given item."}
{"Origin": "Return a scalar {@code Codec} for the given range.", "Reference": "Return a scalar {@code Encodec} for the given range.", "NNUpdater": "Returns a {@link CodecDescriptor} for the given type or null if none found."}
{"Origin": "Test to make sure that field names are not interned.", "Reference": "Test to make sure that field names are interned.", "NNUpdater": "Make sure we can't set commands with duplicates."}
{"Origin": "Collapses the given item.", "Reference": "Collapse the given items.", "NNUpdater": "QuickContact expands/collapses options"}
{"Origin": "Get the number of messages processed in one transaction.", "Reference": "Return the number of messages processed in one transaction.", "NNUpdater": "Get Verarbeitet."}
{"Origin": "Sets the right selection.", "Reference": "Handle interval field focus.", "NNUpdater": "Returns the paths in the selection."}
{"Origin": "The file is fully in memory only if all the blocks of the file are in memory, in other words, the in memory percentage is 100.", "Reference": "The file is fully in Alluxio only if all the blocks of the file are in Alluxio, in other words, the in-Alluxio percentage is 100.", "NNUpdater": "Return whether the inodeFile is fully in memory or not."}
{"Origin": "Gets the default type id for entry point folders.", "Reference": "Gets the default type id for subsitemap folders.", "NNUpdater": "entryPointDeclaration := ENTRY-POINT stringId annotation* END"}
{"Origin": "Attempt to transform this Monad to the same type as the supplied Monoid, using supplied function", "Reference": "Attempt to transform this Stream to the same type as the supplied Monoid, using supplied function", "NNUpdater": "Convert a Stream of Monads to a Monad with a Stream applying the supplied function in the process"}
{"Origin": "Inserts the given instruction at the begining of this list.", "Reference": "Inserts the given instruction at the beginning of this list.", "NNUpdater": "Indicate that a stream created at given source Location escapes at the given target Location."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Method to insert code snippets for {@link SecretAsyncClient#getSecret(SecretProperties)}", "Reference": "Method to insert code snippets for {@link SecretAsyncClient#getSecret(String, String)}", "NNUpdater": "Method to insert code snippets for {@link SecretAsyncClient#getSecret(SecretProperties)}"}
{"Origin": "Create client response filtering stage using the instance manager.", "Reference": "Create client response filtering stage using the injection manager.", "NNUpdater": "Marks the node as DEAD."}
{"Origin": "Get the number of outstanding Checkpoints.", "Reference": "Get the outstanding Checkpoints.", "NNUpdater": "For other values of `closeMode`, outstanding receives are discarded and the channel is closed immediately."}
{"Origin": "Evaluates a job.", "Reference": "Evaluates a query as job.", "NNUpdater": "Executes the current query."}
{"Origin": "Call the native function being represented by this object, returning a struct by value.", "Reference": "Call the native function, returning a struct by value.", "NNUpdater": "Assign a value to a field of a struct, represented by a {@link StructFieldAccessExpr}."}
{"Origin": "Creates a new tracing {@link Client} decorator using the specified {@link Tracing} instance and remote service name.", "Reference": "Creates a new tracing {@link Client} decorator using the specified {@link Tracing} instance and the remote service name.", "NNUpdater": "Creates a new tracing {@link Client} decorator using the specified {@link Tracing} instance and the remote service name."}
{"Origin": "Evaluates {@code lhs @= rhs} and returns the result, possibly mutating {@code lhs}.", "Reference": "Evaluates {@code x @= y} and returns the result, possibly mutating {@code x}.", "NNUpdater": "lhsExpression := lhsOr*"}
{"Origin": "Group: common", "Reference": "Group: security", "NNUpdater": "Returns the default number of {@linkplain CommonPools#blockingTaskExecutor() blocking task executor} threads."}
{"Origin": "If the size of the new entry is larger than the table's capacity, the dynamic table will be cleared.", "Reference": "If the size of the new entry is larger than the table's maxHeaderTableSize, the dynamic table will be cleared.", "NNUpdater": "Deletes an entry of the table."}
{"Origin": "the name will normally start with the prefix ``trace`` followed by a 9 digit number followed by a ``.log`` suffix.", "Reference": "the name will start with the prefix ``trace`` followed by a 9 digit number followed by a ``.log`` suffix.", "NNUpdater": "The comparison is based on the period unit followed by the period range followed by the rule ID."}
{"Origin": "If the item is currently expanded, does nothing.", "Reference": "If an item is currently expanded, does nothing.", "NNUpdater": "Does nothing if the task is not currently locked or not an active task."}
{"Origin": "Gets the intentName.", "Reference": "Gets the intent.", "NNUpdater": "Gets the intentName."}
{"Origin": "Are the naturals id values cached here (if any) for the given persister+pk combo the same as the given values?", "Reference": "Are the naturals id values cached here (if any) for the given descriptor+pk combo the same as the given values?", "NNUpdater": "Sets the entry ``V`` to the given values."}
{"Origin": "Convenience method for calling {@link #newGenericExecuteException(TemplateCallableModel, boolean, String)}.", "Reference": "Convenience method for calling {@link #newGenericExecuteException(String, TemplateCallableModel, boolean, Throwable)}", "NNUpdater": "Convenience method for {@link #genericMethodType(int)}."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Sets the read only state to the given value for all currently bound fields.", "Reference": "Sets the read only state to the given value for all current bindings.", "NNUpdater": "Gets the namespace URI currently bound by the given prefix."}
{"Origin": "Returns an immutable set containing seven elements.", "Reference": "Returns an unmodifiable set containing seven elements.", "NNUpdater": "Gets an {@link ImmutableSet} of {@link Value.Immutable}s for the block at the given location."}
{"Origin": "Waits during {@code timeout} until update is finished by checking that only single master pod is present and it has incremented {@code masterVersionBeforeUpdate} number in name.", "Reference": "Waits during {@code timeoutInSec} until update is finished by checking that only single master pod is present and it has incremented {@code masterVersionBeforeUpdate} number in name.", "NNUpdater": "Invoked on the master to send the member list (see {@link MembersUpdateOp}) to non-master nodes."}
{"Origin": "By default we check the attributes names of the annotation, if present.", "Reference": "By default we check the specified attribute names in the annotation value, if any.", "NNUpdater": "Get {@link Annotation} attributes"}
{"Origin": "Add a system classpath element.", "Reference": "Add a system classpath entry.", "NNUpdater": "Add the Mule libraries to the project classpath."}
{"Origin": "Converts a java object to a sequence of bytes using a ProtoStream {@link SerializationContext}.", "Reference": "Converts a java object to a sequence of bytes using a ProtoStream {@link ImmutableSerializationContext}.", "NNUpdater": "Write the String by either using the {@link PrintWriter} or {@link java.io.OutputStream}."}
{"Origin": "Obtains an instance of {@code OffsetDateTime} from an {@code Instant} and offset.", "Reference": "Obtains an instance of {@code OffsetDateTime} from an {@code Instant} and zone ID.", "NNUpdater": "Obtains an instance of {@code OffsetDateTime} from an {@code Instant}."}
{"Origin": "Contrast this behaviour to {@link #plus(int)}.", "Reference": "Contrast this behaviour to {@link #addCopy(int)}.", "NNUpdater": "This method uses {@link String#indexOf(int, int)} if possible."}
{"Origin": "Gets called by fromValueMap", "Reference": "Gets called by fromValueMapWithClass", "NNUpdater": "Gets an instance from the store"}
{"Origin": "If not missing node, {@code this} is returned to allow chaining; otherwise {@link IllegalArgumentException} is thrown.", "Reference": "If not missing node, {@code this} is returned to allow chaining; otherwise exception is thrown.", "NNUpdater": "If the property is missing an {@link ConfigurationPropertyException} is thrown"}
{"Origin": "This is the price agreed when the trade occurred.", "Reference": "This is the price agreed when the trade occurred, in decimal form.", "NNUpdater": "The meta-property for the {@code price} property."}
{"Origin": "Sets each pixel in the output image to log( 1 + input(x,y)) of the input image.", "Reference": "Sets each pixel in the output image to log( val + input(x,y)) of the input image.", "NNUpdater": "Gets input item information array."}
{"Origin": "Path parameter: endpointType (required)", "Reference": "Path parameter: path (required)", "NNUpdater": "Required: No"}
{"Origin": "Returns the builder for the settings used for calls to labelAudio.", "Reference": "Returns the builder for the settings used for calls to listEvaluationJobs.", "NNUpdater": "Gets the labels used to filter settings based on their {@link ConfigurationSetting#label() label} in the service."}
{"Origin": "If the session folder (folder that contains the file) does not exist and createSessionFolder is true, the folder will be created.", "Reference": "If the session folder (folder that contains the file) does not exist, the folder will be created.", "NNUpdater": "Marker => Point"}
{"Origin": "If {@code features} is null, it will be deduced from {@code env}.", "Reference": "If {@code features} is not null, it will be used instead of those deduced from {@code env}.", "NNUpdater": "A {@code null} CharSequence will return {@code -1}."}
{"Origin": "Returns the value of the node as an Enum value, or null if the node is undefined.", "Reference": "Returns the value of the node as an Enum value.", "NNUpdater": "Sets the node value."}
{"Origin": "Queries this search source for the given queryString.", "Reference": "Creates query for the given queryString.", "NNUpdater": "Queries this ContactSourceService for SourceContacts which match a specific query Pattern."}
{"Origin": "Set the entity ID that determines the type of entity.", "Reference": "Get the type of entity.", "NNUpdater": "Sets the entityName."}
{"Origin": "XeWhen can build XML response.", "Reference": "XeWhen can build XML response with positive condition.", "NNUpdater": "XeFlash can accept RsFlash cookie."}
{"Origin": "Calculates the set of stale types and clears their cached Js and StatementRanges.", "Reference": "Calculates the set of stale types and clears their cached Js, StatementRanges and SourceMaps.", "NNUpdater": "Clears nodes childs cached states."}
{"Origin": "Throw RuntimeException if query does not pass validation.", "Reference": "Throw exception if query does not pass validation.", "NNUpdater": "Throw RuntimeException if query does not pass validation."}
{"Origin": "Can get a bean for Script Load Balancer.", "Reference": "Can get a bean for Script Cluster Selector.", "NNUpdater": "Deletes the specified load balancer."}
{"Origin": "If true, given partial blocks are not evaluated when defined but when used.", "Reference": "If true, partial blocks will implicitly be evaluated before the partials will actually be executed.", "NNUpdater": "partial | OPEN_PARTIAL sexpr CLOSE ;"}
{"Origin": "Retrieve listing of secrets and metadata", "Reference": "Retrieve listing of secret names.", "NNUpdater": "Retrieve listing of secrets and metadata"}
{"Origin": "KeyCreateOptions#getNotBefore() notBefore} values are optional.", "Reference": "CreateKeyOptions#getNotBefore() notBefore} values are optional.", "NNUpdater": "2) The method is not annotated with @Test, @Before, @After, @BeforeClass, or @AfterClass."}
{"Origin": "This let's the deoptimization stub return to the exception handler instead of the regular return address of the deoptimization target.", "Reference": "This lets the deoptimization stub return to the exception handler instead of the regular return address of the deoptimization target.", "NNUpdater": "Reports to the instance of {@link Probe} holding this instrument, if any, that some essential state has changed that requires deoptimization."}
{"Origin": "Creates a new values list and add a value.", "Reference": "Creates a new value list and adds a value.", "NNUpdater": "Adds a value to a list of values in the map."}
{"Origin": "Returns the w s r p producer with the primary key or throws a {@link com.liferay.wsrp.NoSuchProducerException} if it could not be found.", "Reference": "Returns the w s r p producer with the primary key or throws a {@link NoSuchProducerException} if it could not be found.", "NNUpdater": "post-processor producer -> copy producer -> inputProducer"}
{"Origin": "Get the {@code DatagramSocketImpl} attached to this socket, creating it if necessary.", "Reference": "Return the {@code DatagramSocketImpl} attached to this socket.", "NNUpdater": "Creates a socket using socket factory."}
{"Origin": "property1 = value1,value2,``a quoted value``,'another quoted value'", "Reference": ": property1 = value1,value2,``a quoted value``,'another quoted value'", "NNUpdater": "Visit the {@link BlockQuoteNode}."}
{"Origin": "If {@link ConfigurationSetting#getETag() etag} is specified, the configuration value is updated if the current setting's etag matches.", "Reference": "If {@link ConfigurationSetting#getETag() ETag} is specified, the configuration value is updated if the current setting's ETag matches.", "NNUpdater": "If {@link ConfigurationSetting#getETag() etag} is specified, the configuration value is updated if the current setting's etag matches."}
{"Origin": "GeneratedRootGlideModule.", "Reference": "GeneratedAppGlideModule.", "NNUpdater": "Expected format: {@code appList: app (| app)*}"}
{"Origin": "Returns the ratings entry remote service.", "Reference": "Returns the asset entry set like local service.", "NNUpdater": "Split ratings into two parts: the training set consisting of user-item ratings where {@code numGiven} ratings are preserved for each item, and the rest are used as the testing data"}
{"Origin": "Sets departement.", "Reference": "Sets department.", "NNUpdater": "Sets the valueText."}
{"Origin": "- current OBIS identifier - current OBIS value - current OBIS data object", "Reference": "- current OBIS identifier - current OBIS value", "NNUpdater": "Return the {@link OBISMsgType} for this OBIS message"}
{"Origin": "Get the value for the given key if the entry is cached.", "Reference": "Get the value from the given entry.", "NNUpdater": "Gets cached entry for the specified key."}
{"Origin": "Returns the ECKey identified in the connected output, for either P2PKH scripts or P2PK scripts.", "Reference": "Returns the ECKey identified in the connected output, for either P2PKH, P2WPKH or P2PK scripts.", "NNUpdater": "Returns the ECKey identified in the connected output, for either pay-to-address scripts or pay-to-key scripts."}
{"Origin": "This methods sets this armature in its bind pose (aligned with the undeformed mesh)", "Reference": "This methods sets this armature in its bind pose (aligned with the mesh to deform)", "NNUpdater": "This method sets the mesh context for the given mesh old memory address."}
{"Origin": "If the variable was set, a configuration {@link ConfigurationEvent event} will be passed to all registered listeners.", "Reference": "If the variable was set, a CONFIGURATION {@link ConfigurationEvent event} will be passed to all registered listeners.", "NNUpdater": "Is responsible for calling {@link EventSource#onEvent(InboundEvent)} and all registered {@link EventListener} instances."}
{"Origin": "Sets the preference.", "Reference": "Set the preference.", "NNUpdater": "Gets the statistic."}
{"Origin": "Checks that semicolon is in empty for initializer.", "Reference": "Checks that semicolon is in empty for initializer or condition.", "NNUpdater": "annotation* field* END"}
{"Origin": "Returns the data being sent to a potential remote executor.", "Reference": "Returns the remote execution properties.", "NNUpdater": "Sets the data being sent to a potential remote executor."}
{"Origin": "Returns the line number of the source line containing the new expression.", "Reference": "Returns the line number of the source line containing the expression.", "NNUpdater": "Get prefix of given line"}
{"Origin": "Test of var method, of class Gamma.", "Reference": "Test of variance method, of class Gamma.", "NNUpdater": "Test of lgamma method, of class Gamma."}
{"Origin": "Time defaults to midnight in UTC.", "Reference": "Time defaults to midnight in default timezone.", "NNUpdater": "Converts minutes from midnight to a calendar object."}
{"Origin": "Sets the value of the 'zk_Quorum' field.", "Reference": "Sets the value of the 'zkQuorum' field.", "NNUpdater": "Sets the value of the 'paramName' field."}
{"Origin": "The children will be ordered from right to left rather than the default left to right.", "Reference": "The children will be displayed last to first.", "NNUpdater": "Moves contacts from the right list to the left."}
{"Origin": "Enables all schedules which were disabled or added between startTime and endTime in a given namespace.", "Reference": "Enables all schedules which were disabled or added between startTimeMillis and endTimeMillis in a given namespace.", "NNUpdater": "Get or create a time value."}
{"Origin": "This AABB may be enlarge and/or stale.", "Reference": "This AABB may be enlarged and/or stale.", "NNUpdater": "Purges stale entries from the cache."}
{"Origin": "Find exactly one concrete element for a key in a Map of Sets.", "Reference": "Find exactly one concrete element in a collection.", "NNUpdater": "Get the underlying key set implementation."}
{"Origin": "Send request for execution via {@link #cliIo}.", "Reference": "Send request for execution via corresponding singleIo from {@link #ios} or sticky singleIo.", "NNUpdater": "When the ``also`` command is run, it will receive all of the arguments passed to this method as {@link io.bootique.cli.Cli} instance."}
{"Origin": "Backs up the subscriptions and bookmarks databases to external storage.", "Reference": "Backs up the databases to external storage.", "NNUpdater": "Backs up database files."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Replace actual names found in a string with meaningless randomized names.", "Reference": "Replace actual names found in a string with redacted names.", "NNUpdater": "Sets the type names."}
{"Origin": "Copies the specified {@link PointerBuffer} to the {@code data.l} field.", "Reference": "Copies the specified {@link CLongBuffer} to the {@code data.l} field.", "NNUpdater": "Copies the specified {@link YGValue.Buffer} to the {@code resolvedDimensions} field."}
{"Origin": "Obtains an instance from the specified unique name.", "Reference": "Obtains an instance from the specified name.", "NNUpdater": "Obtains the type from a unique name."}
{"Origin": "Publishes an {@link AfterTestMethodEvent} to the {@code ApplicationContext} for the supplied {@link TestContext}.", "Reference": "Publish an {@link AfterTestMethodEvent} to the {@code ApplicationContext} for the supplied {@link TestContext}.", "NNUpdater": "Resolve the given {@link Parameter} for the supplied {@link TestExtensionContext}."}
{"Origin": "This method returns the value of the database column m_prj_risk.dateraised", "Reference": "This method returns the value of the database column m_prj_risk.raisedDate", "NNUpdater": "This method returns the value of the database column m_prj_risk.prjKey"}
{"Origin": "Add a record to all the accumulators.", "Reference": "Add a record to the full accumulator.", "NNUpdater": "Called by the default implementation of {@link #readRecord} to set a record fields value to a record instance."}
{"Origin": "Return the rack for which an endpoint resides in", "Reference": "Return the rack for which an node resides in", "NNUpdater": "Returns the directory associated with this index."}
{"Origin": "Returns the appropriate {@link ActionContext} to execute the given {@link Spawn} with.", "Reference": "Returns a list of appropriate {@link ActionContext}s to execute the given {@link Spawn} with.", "NNUpdater": "Returns the associated {@link ActionTemplate}"}
{"Origin": "Deletes the specified variable from the configuration.", "Reference": "Deletes the specified variable from the CONFIGURATION.", "NNUpdater": "Returns the value of the specified variable."}
{"Origin": "Rotate this vector the specified radians about the given rotation axis.", "Reference": "Rotate this vector the specified radians around the given rotation axis.", "NNUpdater": "Apply a rotation to quaternion rotating the given radians about the specified axis."}
{"Origin": "Pre-multiply the rotation transformation of the given {@link Quaterniond} to this matrix while using (ox, oy, oz) as the rotation origin.", "Reference": "Pre-multiply the rotation transformation of the given {@link Quaterniondc} to this matrix while using (ox, oy, oz) as the rotation origin.", "NNUpdater": "Pre-multiply the rotation transformation of the given {@link Quaternionfc} to this matrix while using (ox, oy, oz) as the rotation origin."}
{"Origin": "Sets the id attribute of this Media to id", "Reference": "Sets the id attribute of this Media's element to id", "NNUpdater": "Sets the identifier"}
{"Origin": "If session is not created, default one will be used.", "Reference": "If {@link Session} is not created, default one will be used.", "NNUpdater": "If there is no session, no action is taken unless the {@code alwaysCreateSession} property is set, in which case a session will be created if one doesn't already exist."}
{"Origin": "After all member accounts accept the handshake, you finalize the migration by accepting the handshake that contains .", "Reference": "After all invited member accounts accept the handshake, you finalize the feature set change by accepting the handshake that contains .", "NNUpdater": "Returns a {@link Future} that will get notified once the handshake completes."}
{"Origin": "Create client request filtering stage using the service locator.", "Reference": "Create client request filtering stage using the instance manager.", "NNUpdater": "Set Lagerort."}
{"Origin": "Gets a string representation of this charset.", "Reference": "Returns a string describing this charset.", "NNUpdater": "Returns value of this charset"}
{"Origin": "Objects of the following type(s) are allowed in the list {@link CTGroupShape } {@link CTShape }", "Reference": "Objects of the following type(s) are allowed in the list {@link CTShape } {@link CTGroupShape }", "NNUpdater": "Create an instance of {@link NvPr }"}
{"Origin": "A typical use case would be to convert index names to curve names valid for an underlying system.", "Reference": "A typical use case would be to normalize parameter metadata tenors to be valid for an underlying system.", "NNUpdater": "Set the index name list"}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Report all Java ClassFile files available available from the specified files and/or directories, including sub directories.", "Reference": "Report all Java ClassFile files available from the specified files and/or directories, including sub directories.", "NNUpdater": "Builds a list of .java files in a directory including all its sub-directories."}
{"Origin": "Returns {@code true} if this method is the first JsMethod in the method hierarchy that exposes an existing non-JsMethod inside a class.", "Reference": "Returns {@code true} if this method is the first JsMember in the method hierarchy that exposes an existing non-JsMember inside a class.", "NNUpdater": "Calls the /assets/js/Bridge.js#getFirstVisibleSpan(boolean)"}
{"Origin": "Validates the given @Asynchronous annotation.", "Reference": "Validates the given {@link Asynchronous} annotation.", "NNUpdater": "Validate the given ."}
{"Origin": "Removes the specified tags from the {@link NamespacedEntityId}", "Reference": "Removes the specified tags from the {@link MetadataEntity}", "NNUpdater": "Removes the specified tags from the {@link NamespacedEntityId}"}
{"Origin": "Ensures that the service referenced by the Contract at the head of the iterator actually exists (is published).", "Reference": "Ensures that the api referenced by the Contract at the head of the iterator actually exists (is published).", "NNUpdater": "Store the subItem."}
{"Origin": "Creates a new ClassLoader and a new class inside that ClassLoader.", "Reference": "Creates a new ClassLoader and a new {@link Serializable} class inside that ClassLoader.", "NNUpdater": "ClassLoader used to load the {@link Configuration} class will be used as the parent ClassLoader of the created ClassLoader."}
{"Origin": "Authorized the given DDLWork2.", "Reference": "Authorized the given DDLWork.", "NNUpdater": "Execute DDL statement on client node."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Utilization of database statistics (GH-1202).", "Reference": "Utilization of database statistics.", "NNUpdater": "Set % Utilization."}
{"Origin": "Creates a global symbol of the form {@code ``JVM`` + container name}.", "Reference": "Creates a global symbol of the form {@code ``A`` + container name}.", "NNUpdater": "The resource key must be of the form: [form-name].[component-name].[validator-class]."}
{"Origin": "Type strategy that maps an {@link InputTypeValidator} to a {@link TypeStrategy} if the validator matches.", "Reference": "Type strategy that maps an {@link InputTypeStrategy} to a {@link TypeStrategy} if the input strategy infers identical types.", "NNUpdater": "Create an empty {@link ValidationOptions}."}
{"Origin": "- java.lang.StringLatin1.inflate([BI[CII)V", "Reference": "Intrinsic for {@code java.lang.StringLatin1.inflate([BI[CII)V}.", "NNUpdater": "Test method for {@link java.sql.ResultSet#getBytes(String)}."}
{"Origin": "Gets the list of {@link DeletedKey deletedSecrets} on this page.", "Reference": "Gets the iterable stream of {@link DeletedKey deletedSecrets} on this page.", "NNUpdater": "The list deleted secrets operation returns the secrets that have been deleted for a vault enabled for soft-delete."}
{"Origin": "Cleans the sequences in this schema.", "Reference": "Cleans the objects of these types in this schema.", "NNUpdater": "Generate the statements to clean the tables in this schema."}
{"Origin": "Gets the edit data for all cms-editable elements in the page.", "Reference": "Gets the edit data for all oc-editable elements in the page.", "NNUpdater": "Returns the sitemap data."}
{"Origin": "Converts a Swagger parameter to an instance of {@link Entity}.", "Reference": "Converts a Swagger parameter to an instance of {@link PayLoad}.", "NNUpdater": "Sets the Swagger Parameter collection format."}
{"Origin": "Returns the storage serializer.", "Reference": "Returns the storage namespace.", "NNUpdater": "Returns the log segment size."}
{"Origin": "Scheduler: {@code onErrorResumeNext} does not operate by default on a particular {@link Scheduler}.", "Reference": "Scheduler: {@code onErrorResumeWith} does not operate by default on a particular {@link Scheduler}.", "NNUpdater": "Scheduler: {@code onErrorReturnItem} does not operate by default on a particular {@link Scheduler}."}
{"Origin": "Gets metadata information about the specified table.", "Reference": "Gets the Table by tableId", "NNUpdater": "Get metadata about keyspace by its name"}
{"Origin": "Sets whether or not resources in the root (WEB-INF) folder can be accessed.", "Reference": "Sets whether or not resources in the web root folder can be accessed.", "NNUpdater": "generates web.xml to WEB-INF."}
{"Origin": "Sets the member location provider.", "Reference": "Sets the membership provider.", "NNUpdater": "Returns the member address."}
{"Origin": "If no mock can be assigned to a field, skip it silently", "Reference": "If no mock can be assigned to a field, skip the field silently", "NNUpdater": "If it has no fake, does nothing."}
{"Origin": "Returns a stream of trace events.", "Reference": "Returns a trace reader for the access events.", "NNUpdater": "Retrieves a list of all events."}
{"Origin": "Register a CollectionStateWatcher to be called when the state of a collection changes", "Reference": "Register a CollectionStateWatcher to be called when the state of a collection changes or the set of live nodes changes.", "NNUpdater": "Called when the state of a download changes."}
{"Origin": "The supplied function is invoked for each market data name in this sensitivities.", "Reference": "The supplied function is invoked for each parameter metadata in this sensitivities.", "NNUpdater": "Adds market data wrapped in a box."}
{"Origin": "Retrieves whether the permission of the given type has been granted to the given user.", "Reference": "Retrieves whether the permission of the given type has been granted to the given entity.", "NNUpdater": "Returns if the user has granted the given permission"}
{"Origin": "Given a bunch of NodeRefs, create SimpleFeatures from the results.", "Reference": "Given a bunch of NodeRefs, create Features from the results.", "NNUpdater": "Set the features."}
{"Origin": "Asserts that the cache contains the given data for {@code uriString}.", "Reference": "Asserts that the cache contains necessary data for the {@code requestSet}.", "NNUpdater": "Asserts that the given {@code Collection} contains the given values, in any order."}
{"Origin": "Creates an UnicastProcessor with the given internal buffer capacity hint, delay error flag and a callback for the case when the single Subscriber cancels its subscription.", "Reference": "Creates an UnicastProcessor with the given internal buffer capacity hint, delay error flag and a callback for the case when the single Subscriber cancels its subscription or the processor is terminated.", "NNUpdater": "Creates a cached Flowable with the given capacity hint."}
{"Origin": "The annotation is sorted by array and then offset.", "Reference": "The annotation is sorted by sequence and then offset.", "NNUpdater": "annotation* SEMICOLON"}
{"Origin": "Note this method creates a HotStream that starts emitting data immediately.", "Reference": "Note this method creates a Connectable that starts emitting data immediately.", "NNUpdater": "Tests starts from stream."}
{"Origin": "Computes the average for each pixel across all bands in the {@link Planar} image.", "Reference": "Computes the average for each pixel across selected bands in the {@link Planar} image.", "NNUpdater": "Computes the average for each pixel across all bands in the {@link Planar} image."}
{"Origin": "Creates query for the given queryString.", "Reference": "Queries this contact source for the given queryString.", "NNUpdater": "-D"}
{"Origin": "Deleted by user info", "Reference": "Deleted by user", "NNUpdater": "Sets URI user-info."}
{"Origin": "Applies an action to this value, if this option is defined, otherwise does nothing.", "Reference": "Applies an action to this value if this is defined, otherwise nothing happens.", "NNUpdater": "UnInitializes COM library."}
{"Origin": "If rententionMs is set then we add additionalRetentionMs to work out the desired retention when cleanup.policy=compact,delete", "Reference": "If retentionMs is set then we add additionalRetentionMs to work out the desired retention when cleanup.policy=compact,delete", "NNUpdater": "Return a boolean indicating whether the DeleteRetentionPolicy is enabled."}
{"Origin": "Return the {@link VarNode} associated with the optional {@link Annotations#FAST_RANGE_COUNT} property.", "Reference": "Return the {@link VarNode} associated with the optional {@link Annotations#FAST_RANGE_COUNT_VAR} property.", "NNUpdater": "Operation fails."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "After that, the binding lease status is active.", "Reference": "After that, the binding lease status is leased.", "NNUpdater": "Data for the current leaseRequest, or null if there is no active leaseSet request."}
{"Origin": "By default, it returns the {@link Finder} class.", "Reference": "By default, it returns the {@link org.restlet.resource.Finder} class.", "NNUpdater": "Returns standard root finder configuration, using the {@code DEFAULT} constants from this class."}
{"Origin": "Constructs a immutable {@link Value} of the appropriate type based on the given {@link Key} and the element.", "Reference": "Constructs an immutable {@link Value} of the appropriate type based on the given {@link Key} and the element.", "NNUpdater": "Gets an {@link ImmutableSet} of {@link Value.Immutable}s for the block at the given location."}
{"Origin": "Standard setter for the rightwardLabel String for this RelationshipType", "Reference": "Standard setter for the rightwardType String for this RelationshipType", "NNUpdater": "Sets the value(s) for identifier (An identifier for the person as this patient)"}
{"Origin": "Initializes the {@link DecryptionStatusTracker}", "Reference": "Initializes the {@link CryptoJobStatusTracker}", "NNUpdater": "Running for both {@link SimpleOperationTracker} and {@link AdaptiveOperationTracker}, with and without encryption"}
{"Origin": "Returns builtin the operator table for this environment.", "Reference": "Returns builtin the operator table and external the operator for this environment.", "NNUpdater": "This is a beta feature Register an operator state for this operator by the given name."}
{"Origin": "Traverses this Multimap sequentially, mapping the (key, value) pairs to elements.", "Reference": "Iterates this Multimap sequentially, mapping the (key, value) pairs to elements.", "NNUpdater": "Creates a {@link HashMultimap} of the given list of key-value pairs with {@link Seq} as values container."}
{"Origin": "This should be called before specifying the data source", "Reference": "This should be called before specifying the videos uri or path", "NNUpdater": "Must only be called if {@link #next} has not be called before."}
{"Origin": "Returns a rule that restricts access according to the IP address of the request's client.", "Reference": "Adds a rule that restricts access according to the IP address of the request's client.", "NNUpdater": "Returns the host name."}
{"Origin": "Test of npara method, of class HyperGeometricDistribution.", "Reference": "Test of length method, of class HyperGeometricDistribution.", "NNUpdater": "Test of geometric method, of class DiscreteDistributions."}
{"Origin": "{@link NewObject} example, large structure", "Reference": "{@link ObjectRemoved} example", "NNUpdater": "Create a new {@link Example} using the given {@link ExampleMatcher}."}
{"Origin": "The algorithm looks for requested table in following paths in that order:", "Reference": "The algorithm looks for requested table in the following paths in that order:", "NNUpdater": "Lists matching paths in descending modified time order."}
{"Origin": "If mapRepetition is enabled the map repeats in every direction and scrolling wraps around the edges.", "Reference": "If horizontalMapRepetition is enabled the map repeats in top/bottom direction and scrolling wraps around the edges.", "NNUpdater": "Get the direction vector."}
{"Origin": "Returns an iterator of all of the registered {@code SaslClientFactory}s where the order is based on the order of the Provider registration and/or class path order.", "Reference": "Returns a collection of all of the registered {@code SaslClientFactory}s where the order is based on the order of the Provider registration and/or class path order.", "NNUpdater": "Returns a new {@link Order} with the given {@link Direction}."}
{"Origin": "Return a scalar {@code Codec} for the given range.", "Reference": "Return a scalar {@code Encodec} for the given range.", "NNUpdater": "Returns a {@link CodecDescriptor} for the given type or null if none found."}
{"Origin": "Gets the user name and group name from the user id.", "Reference": "Gets the group name from the user id.", "NNUpdater": "Example: ``userName`` returns prefix + ``UserName``."}
{"Origin": "Note, the default is MapReduceCommand.OutputType.REPLACE", "Reference": "Note, the default is {@link MapReduceAction#REPLACE}.", "NNUpdater": "Calls the {@link MapReduce#beforeSubmit(MapReduceContext)} method and also setup the Input/Output within the same transaction."}
{"Origin": "Returns the {@link Query} at the given position but does not update the internal {@link", "Reference": "Returns the {@link PlaylistEntry} at the given position but does not update the internal {@link PlaylistEntry} iterator.", "NNUpdater": "Returns the {@link Query} at the given position but does not update the internal {@link"}
{"Origin": "Chosen bits are [8, 6, 7]", "Reference": "Chosen bits are [11, 6, 4]", "NNUpdater": "Chosen bits are [11, 6, 4]"}
{"Origin": "Method setTuple sets the tuple of this TupleEntry object.", "Reference": "Method setTuple sets the tuple of this TupleEntry object, no copy will be performed.", "NNUpdater": "Sets the object stored"}
{"Origin": "Creates a new Jetty connection factory.", "Reference": "Creates new internal Jetty connection factories.", "NNUpdater": "Velocity."}
{"Origin": "{@codesnippet com.azure.data.appconfiguration.ConfigurationClient.addSettingWithResponse#ConfigurationSetting-Context}", "Reference": "{@codesnippet com.azure.data.appconfiguration.ConfigurationClient.addConfigurationSettingWithResponse#ConfigurationSetting-Context}", "NNUpdater": "{@codesnippet com.azure.data.appconfiguration.ConfigurationClient.setSettingWithResponse#ConfigurationSetting-boolean-Context}"}
{"Origin": "Report the algebraic area between function and x axis.", "Reference": "Report the area above x axis.", "NNUpdater": "Report the collection of glyphs within the system area"}
{"Origin": "Creates a new adapter for an object of class '{@link org.bimserver.models.ifc4.ListOfEInt List Of EInt}'.", "Reference": "Creates a new adapter for an object of class '{@link org.bimserver.models.ifc4.ListOfELong List Of ELong}'.", "NNUpdater": "Creates a new adapter for an object of class '{@link org.bimserver.models.store.PluginBundleUpdateInformation Plugin Bundle Update Information}'."}
{"Origin": "Makes a text component using strings from a locale and supports passing an undefined number of variables to the LocaleLoader", "Reference": "Makes a text component using strings from a locale and supports passing an undefined number of variables to the LocaleManager", "NNUpdater": "Set the locale for this session."}
{"Origin": "Is the value with this qualifier less than the length of array?", "Reference": "Is the value with this qualifier less than the length of sequence?", "NNUpdater": "TransferInput, CFStore)} for details."}
{"Origin": "Copies the specified element values from the given annotation, using the specified name mapping.", "Reference": "Copies the specified element values from the given annotation, using the specified renaming map.", "NNUpdater": "Returns the element at the specified position."}
{"Origin": "Returns the status of the global rotation assigned to this.", "Reference": "Returns the status of the global rotation(s) assigned to this", "NNUpdater": "Returns the global rotation id of this, if present"}
{"Origin": "Checks whether two filenames are equal using the case rules of the system.", "Reference": "Checks whether two fileNames are equal using the case rules of the system.", "NNUpdater": "Checks whether two filenames are equal exactly."}
{"Origin": "The documentation of {@link FCPPluginClientTracker#getClient(UUID)} applies to this function.", "Reference": "The documentation of {@link FCPPluginClientTracker#getConnection(UUID)} applies to this function.", "NNUpdater": "The client message handler is available as the passed {@link ClientSideFCPMessageHandler} client."}
{"Origin": "Returns the group name used as a publisher group name for authentication on the target endpoint.", "Reference": "Returns the cluster name used as a publisher cluster name for authentication on the target endpoint.", "NNUpdater": "Convert to string."}
{"Origin": "Get user keypair ### Functional Description: Retrieve the user's keypair.", "Reference": "Get user's key pair ### Functional Description: Retrieve the user's key pair.", "NNUpdater": "matches name of the given key pair"}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Stop managing a location.", "Reference": "Stop managing a DatasetGraph.", "NNUpdater": "Closes."}
{"Origin": "Obtains an instance from the specified unique name.", "Reference": "Obtains an instance from the specified name.", "NNUpdater": "Obtains the type from a unique name."}
{"Origin": "In case all entries are invalid, the resolver will return as no mapping is found.", "Reference": "Any resolution operation using the resolver therefore will return as no mapping is found.", "NNUpdater": "Returns null if no mapping found."}
{"Origin": "Adds one more acceptable indentation level.", "Reference": "Combines 2 acceptable indentation level classes.", "NNUpdater": "Set the basic offset."}
{"Origin": "If a {@link #getCipher() cipher} is available, it will be used to first decrypt the byte array.", "Reference": "If a {@link #getCipherService() cipherService} is available, it will be used to first decrypt the byte array.", "NNUpdater": "Test of decrypt method, of class RecordBlockCipher, for TLS10."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Decorates {@link Service}s whose {@link Route} matches the specified {@link Route}.", "Reference": "Decorates {@link HttpService}s whose {@link Route} matches the specified {@link Route}.", "NNUpdater": "Finds the {@link Service} whose {@link Router} matches the {@link RoutingContext}."}
{"Origin": "Morewover, said statement must use bind variables since it is those bind variables that will be bound to values by the resulting writer.", "Reference": "Moreover, said statement must use bind variables since these variables will be bound to values by the resulting writer.", "NNUpdater": "Returns the key bound by a {@link Binds} method."}
{"Origin": "Returns if this resource is a folder.", "Reference": "Sets the publish resource info.", "NNUpdater": "Creates database folder resource."}
{"Origin": "When transforming a vector by the resulting matrix the rotation transformation will be applied first and then the translation.", "Reference": "When transforming a vector by the resulting matrix the rotation - and possibly scaling - transformation will be applied first and then the translation.", "NNUpdater": "So when transforming a vector with the new matrix by using , the translation will be applied first!"}
{"Origin": "The width of the output fraction can be controlled.", "Reference": "The width of the printed fraction can be controlled.", "NNUpdater": "Sets the width of a usage line."}
{"Origin": "Get the transcripts as a of transcripts in order.", "Reference": "Get the transcripts as a set, but preserve the order.", "NNUpdater": "Get Auftrag."}
{"Origin": "Upsert the blob metadata document in the CosmosDB collection, retrying as necessary.", "Reference": "Upsert the blob metadata document in the CosmosDB collection.", "NNUpdater": "Performs the {@link #upsert(String, String, Map)} operation via Key/Value (``upsert``)."}
{"Origin": "Calls to {@code register} are idempotent; adding the same annotated class more than once has no additional effect.", "Reference": "Calls to {@code register} are idempotent; adding the same component class more than once has no additional effect.", "NNUpdater": "Calls to {@code register} are idempotent; adding the same annotated class more than once has no additional effect."}
{"Origin": "Determine if a specific piece of text appears in log output.", "Reference": "Determine if a specific pattern appears in log output.", "NNUpdater": "Hashes the given file piece by piece using the default Torrent piece length (see {@link #DEFAULT_PIECE_LENGTH}) and returns the concatenation of these hashes, as a string."}
{"Origin": "Code snippets for {@link BlobAsyncClient#downloadWithResponse(BlobRange, ReliableDownloadOptions,", "Reference": "Code snippets for {@link BlobAsyncClient#downloadWithResponse(BlobRange, DownloadRetryOptions,", "NNUpdater": "String, BlobRange, ParallelTransferOptions, ReliableDownloadOptions, BlobAccessConditions, boolean)}"}
{"Origin": "Truncates log entries with indexes {@code >= entryIndex}.", "Reference": "Deletes all log entries with {@code index >= entryIndex}.", "NNUpdater": "The index entry hashing method used for entries in explicit indexes."}
{"Origin": "Ping ### Functional Description: Test connection to DRACOON Server (while authenticated).", "Reference": "(authenticated) Ping ### Functional Description: Test connection to DRACOON Server (while authenticated).", "NNUpdater": "Creates a new instance of {@link org.spongepowered.api.event.server.ClientPingServerEvent}."}
{"Origin": "Gets the value of the egBlockLevelElts property.", "Reference": "Gets the value of the content property.", "NNUpdater": "Gets the value of the egBlockLevelElts property."}
{"Origin": "or throws a {@link com.liferay.wsrp.NoSuchConsumerPortletException} if it could not be found.", "Reference": "or throws a {@link NoSuchConsumerPortletException} if it could not be found.", "NNUpdater": "Operation fails."}
{"Origin": "Clears the value of the 'cf_name' field", "Reference": "Clears the value of the 'cfName' field.", "NNUpdater": "Clears the value of the 'paramName' field"}
{"Origin": "Use {@link HostAccessPolicy#EXPLICIT} or {@link HostAccessPolicy#ALL}.", "Reference": "Use {@link HostAccess#EXPLICIT} or {@link HostAccess#ALL}.", "NNUpdater": "Code snippet for {@link ContainerClient#setAccessPolicyWithResponse(PublicAccessType, List,"}
{"Origin": "Gets the value of the paragraphContent property.", "Reference": "Gets the value of the content property.", "NNUpdater": "Get the content of this element."}
{"Origin": "Creates an UnicastProcessor with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription.", "Reference": "Creates an UnicastProcessor with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription or the processor is terminated.", "NNUpdater": "Creates a cached Flowable with the given capacity hint."}
{"Origin": "Check if the container size if valid.", "Reference": "Check if the container size is valid.", "NNUpdater": "Checks if the handler is valid."}
{"Origin": "Currently only ever returns true for default constructors added by the compiler.", "Reference": "Returns true for default constructors added by the compiler.", "NNUpdater": "This will only only ever return true if client affinity is turned on."}
{"Origin": "Returns the item with weight calculation.", "Reference": "Returns the item with an enriched score value.", "NNUpdater": "Returns the weight of the connection, or a default of 1 if the weight is undefined."}
{"Origin": "If endIndex > this.seriesEndIndex+1 the new TimeSeries will end at the last available Bar of this TimeSeries", "Reference": "If endIndex > this.seriesEndIndex+1 the new BaseBarSeries will end at the last available Bar of this BaseBarSeries", "NNUpdater": "Gets the time-series of fixings, defaulted to an empty time-series."}
{"Origin": "Deletes a single document from the Solr server.", "Reference": "Deletes a single document from the Solr client.", "NNUpdater": "Create a new solr client."}
{"Origin": "Tests similarity transform on the example provided in the EPSG projection guide, page 99", "Reference": "Tests similarity transform on the example provided in the EPSG projection guide, page 140", "NNUpdater": "Developer Guide."}
{"Origin": "Sets the client transport.", "Reference": "Sets the client protocol.", "NNUpdater": "Sets the client and server transport."}
{"Origin": "Returns the long value if this primitive value is of type long.", "Reference": "Returns the long value if this primitive value is of size 8", "NNUpdater": "Returns a long value from the specified array."}
{"Origin": "If --interface parameter has been specified, --all parameter will not be visible to prevent conflicts.", "Reference": "If --entity parameter has been specified, --all parameter will not be visible to prevent conflicts.", "NNUpdater": "< pluginName/pluginVersion/${parameter} > to < parameterValue >"}
{"Origin": "The transition from native in {@link CFunctionEpilogueNode#cFunctionEpilogue()} might block if a safepoint is in progress when I reach that call.", "Reference": "The transition from native in {@link CFunctionEpilogueNode#cFunctionEpilogue(int)} might block if a safepoint is in progress when I reach that call.", "NNUpdater": "Creates an {@code avg(x)} built-in function call."}
{"Origin": "Creates a new Document at the DocumentReference location.", "Reference": "Creates a new Document at the DocumentReference's location.", "NNUpdater": "Add the document."}
{"Origin": "Remove all NOPs from the instruction list (if possible) and update every object refering to them, i.e., branch instructions, local variables and exception handlers.", "Reference": "Remove all NOPs from the instruction list (if possible) and update every object referring to them, i.e., branch instructions, local variables and exception handlers.", "NNUpdater": "Array."}
{"Origin": "does not exist) an IntrospectionError is thrown.", "Reference": "does not exist) an {@link IntrospectionError} is thrown.", "NNUpdater": "An exception is thrown if the attribute does not exist."}
{"Origin": "This can be used to perform simply scoping of the on next failure strategy or to override the the inherited strategy in a sub-stream for example in a flatMap.", "Reference": "It can be used for easier scoping of the on next failure strategy or to override the inherited strategy in a sub-stream (for example in a flatMap).", "NNUpdater": "Map from {@link DBObject} to strategy."}
{"Origin": "Returns split button part hitbox.", "Reference": "Returns menu button part hitbox.", "NNUpdater": "Returns {@link UIInputListener} for the button."}
{"Origin": "Gets the value of the saltData property.", "Reference": "Gets the value of the spinValue property.", "NNUpdater": "Gets the value of the links property."}
{"Origin": "Set the HTTP {@code Accept:} header used to when making a SPARQL Protocol query.", "Reference": "Set the HTTP {@code Accept:} header used to when making a SPARQL Protocol query if no query type specific setting available.", "NNUpdater": "Returns the first {@code ``Accept``} header or {@code null} for none."}
{"Origin": "Initializes the inter-cluster distance matrix and the prototypes of possible merges", "Reference": "Initializes the inter-cluster distance matrix of possible merges", "NNUpdater": "Report the list of AbstractChordInter instances (rests & heads) in the neighborhood of the specified Inter."}
{"Origin": "Sets the {@literal PING} before activate connection flag.", "Reference": "Sets the {@link ProtocolVersion} to use.", "NNUpdater": "Returns sBit."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Publishes a {@link BeforeTestExecutionEvent} to the {@code ApplicationContext} for the supplied {@link TestContext}.", "Reference": "Publish a {@link BeforeTestExecutionEvent} to the {@code ApplicationContext} for the supplied {@link TestContext}.", "NNUpdater": "Resolve the given {@link Parameter} for the supplied {@link TestExtensionContext}."}
{"Origin": "Requests that the player prefetch a media item with the specific {@link Uri} for playback.", "Reference": "Requests that the player prepare a media item with the specific {@link Uri} for playback.", "NNUpdater": "Requests that the player prefetch a media item with the specific {@link Uri} for playback."}
{"Origin": "This method will interpolate between each two successive quaternions via {@link #nlerp(Quaterniond, double)} using their relative interpolation weights.", "Reference": "This method will interpolate between each two successive quaternions via {@link #nlerp(Quaterniondc, double)} using their relative interpolation weights.", "NNUpdater": "Creates a new {@link Weights} object that contains all weights with {@link Function} applied."}
{"Origin": "Returns the (biased) kurtosis excess of all the values within a {@link Dataset}", "Reference": "Returns the (biased) skew of all the values within a {@link Dataset}", "NNUpdater": "Returns a read-only Iterable on the values of the Dataset."}
{"Origin": "Track the height of previous added key point.", "Reference": "Return a list of key points.", "NNUpdater": "Return the getHeight of a node."}
{"Origin": "However, the problem with exposing the information is that people running from an IDE can observe stale data from old class files left from a previous build of a JAR.", "Reference": "However, people running from an IDE will observe stale data from old class files left from a previous build of a JAR.", "NNUpdater": "Delete the all dependency files from a given application."}
{"Origin": "Returns true if field traceIdList is set (has been assigned a value) and false otherwise", "Reference": "Returns true if field localTraceIdList is set (has been assigned a value) and false otherwise", "NNUpdater": "Returns true if field traceTransactionSequence is set (has been assigned a value) and false otherwise"}
{"Origin": "Decreases the reference count by {@code decrement} and de-allocates this object if the reference count reaches {@code 0}", "Reference": "Decreases the reference count by {@code decrement} and deallocates this response if the count reaches {@code 0}.", "NNUpdater": "Sets the number of occurrences of {@code element} to {@code newCount}, but only if the count is currently {@code expectedOldCount}."}
{"Origin": "IMPORTANT:If the type already exists, then a TypeAlreadyExists fault is returned.", "Reference": "If the type already exists, then a fault is returned.", "NNUpdater": "If a logger of that name already exists, then it will be returned."}
{"Origin": "Obtains an instance from the curve currency, date, bond group and value.", "Reference": "Obtains an instance from the curve currency, date, group and value.", "NNUpdater": "Obtains an instance from the observation and reference currency."}
{"Origin": "Example:", "Reference": "Example: f4e0e692208520203de05557244e573e981f6c72", "NNUpdater": "Examples:"}
{"Origin": "Get the conflict resolution policy for the graph.", "Reference": "Get the resource value.", "NNUpdater": "Gets the options for the the conflict resolution policy."}
{"Origin": "Returns a lightweight, low-level preceding axis iterator.", "Reference": "Returns a light-weight, low-level preceding axis iterator.", "NNUpdater": "Returns the low-level HTTP call."}
{"Origin": "Add listeners to the checkbox/list set.", "Reference": "Add listeners to the checkbox/list set if listeners have not already been added.", "NNUpdater": "Create the checkbox button"}
{"Origin": "Calculates stats based on the calculated course grade values", "Reference": "Calculates stats based on the calculated course grade values, excluding any empty grades", "NNUpdater": "Updates the values used for sorting on any course grade record where a letter grade has been explicitly set."}
{"Origin": "To add/remove/change points, you must call setPoints again.", "Reference": "To remove/change points, you must call setPoints again.", "NNUpdater": "Returns all of data points in order."}
{"Origin": "Error units is pixels squared.", "Reference": "Error units are pixels squared.", "NNUpdater": "Returns the residual sum of squares."}
{"Origin": "Configure HK2 binders in the HK2 service locator and enable JAX-RS features.", "Reference": "Configure binders in the instance manager and enable JAX-RS features.", "NNUpdater": "Register new {@link Binder HK2 binders} in the {@code ResourceConfig}."}
{"Origin": "Convert wiki name in database/schema name.", "Reference": "Convert wiki name in database name.", "NNUpdater": "Set the name value."}
{"Origin": "The scheduler that decides how this task runs.", "Reference": "The executor that decides how this task runs.", "NNUpdater": "Runs tasks."}
{"Origin": "The offset is not part of the calculation and will be unchanged in the result.", "Reference": "In this case, the offset is not part of the calculation and will be unchanged.", "NNUpdater": "Build the part-list as the sequence of Result/LogicalPart instances, and map each of them to a Part."}
{"Origin": "This method returns a URL for a cover query for the Spotify API.", "Reference": "This method returns a URL for a cover query for the", "NNUpdater": "Data type can cover and ."}
{"Origin": "Sets the secure value of a cookie.", "Reference": "Sets the secure status of the cookie.", "NNUpdater": "Use the default setting (true), and inspect cookie to see that it happened."}
{"Origin": "checking if we can avoid Serialization - relevant to RDDs.", "Reference": "Check if we can avoid Serialization.", "NNUpdater": "same as (String) Space.rdp (key)"}
{"Origin": "Shiro's {@code BlowfishCipher} already has a configured symmetric key to use for encryption and decryption, but it is recommended to provide your own for added security.", "Reference": "This {@code RememberMeManager} implementation already has a configured symmetric key to use for encryption and decryption, but it is recommended to provide your own for added security.", "NNUpdater": "Performs cryptographic operations (en/de)cryption using JCE Cipher."}
{"Origin": "Whether the decoder supports the given {@code codec}.", "Reference": "Whether the decoder supports the codec of the given {@code format}.", "NNUpdater": "Returns all {@link MediaCodecDecoderInfo}s for the given mime type, in the order given by {@link MediaCodecList}."}
{"Origin": "Applies to all URLs requested by the client.", "Reference": "Applies to all URLs requested by the builder.", "NNUpdater": "Parses the classpath into an array of URLs"}
{"Origin": "Set this {@link AxisAngle4f} to be equivalent to the rotational component of the given {@link Matrix4x3f}.", "Reference": "Set this {@link AxisAngle4f} to be equivalent to the rotational component of the given {@link Matrix4x3fc}.", "NNUpdater": "Set this {@link AxisAngle4f} to be equivalent to the rotational component of the given {@link Matrix4fr}."}
{"Origin": "Please note that Netscape draft specification does not fully conform to the HTTP header format.", "Reference": "Please note that the Netscape draft specification does not fully conform to the HTTP header format.", "NNUpdater": "This method will remove query parameters if present."}
{"Origin": "String, BlobRange, ParallelTransferOptions, ReliableDownloadOptions, BlobRequestConditions, boolean)}", "Reference": "String, BlobRange, ParallelTransferOptions, DownloadRetryOptions, BlobRequestConditions, boolean)}", "NNUpdater": "String, BlobRange, ParallelTransferOptions, ReliableDownloadOptions, BlobAccessConditions, boolean)}"}
{"Origin": "Configure a {@link Command} for RSocket request type.", "Reference": "Configure a {@link Command} for the RSocket request type.", "NNUpdater": "Returns the resource configuration."}
{"Origin": "This method receives the {@link android.support.v4.app.TaskStackBuilder} with the constructed series of", "Reference": "This method receives the {@link androidx.core.app.TaskStackBuilder} with the constructed series of", "NNUpdater": "Operation fails."}
{"Origin": "{@link Query#rx()}.", "Reference": "{@link Query#__InternalRx()}.", "NNUpdater": "Operation fails."}
{"Origin": "Sets the {@code eventListeners} this {@link EventHandlerInvoker} will forward all its events to.", "Reference": "Sets the {@code eventHandlers} this {@link EventHandlerInvoker} will forward all its events to.", "NNUpdater": "Returns a {@link MediaSourceEventListener.EventDispatcher} which dispatches all events to the registered listeners with the specified media period id and time offset."}
{"Origin": "The object is unlocked on commit or rollback.", "Reference": "Table is unlocked on commit or rollback.", "NNUpdater": "Rollback or Commit for query only transaction."}
{"Origin": "ID of the room in which the individual rooms for users will be created.", "Reference": "DEPRECATED, will be ignored ID of the room in which the individual rooms for users will be created.", "NNUpdater": "Returns a List of HostedRooms where each HostedRoom has the XMPP address of the room and the room's name."}
{"Origin": "Construct the CordovaWebView object.", "Reference": "Construct the default web view object.", "NNUpdater": "WebView."}
{"Origin": "Group: producer", "Reference": "Group: consumer", "NNUpdater": "post-processor producer -> copy producer -> inputProducer"}
{"Origin": "Decodes the given object using the configured {@link #serializer()}.", "Reference": "Decodes the given object using the configured {@link #userSerializer}.", "NNUpdater": "Decodes the input {@link ByteBuf} into a {@link RPCUfsBlockReadRequest} object and returns it."}
{"Origin": "Helper Method : Concept by range from-to in periods from a different payroll (Old Compatibility)", "Reference": "Helper Method : Concept by range from-to in periods from a different payroll periods with values 0 -1 1, etc.", "NNUpdater": "Getter Parameter Value for Global Payroll Concept"}
{"Origin": "See Immutable List Static Factory Methods for details.", "Reference": "See Unmodifiable Lists for details.", "NNUpdater": "The returned List is immutable."}
{"Origin": "If the block is a procedure block, this getProcedureArguments{@code getProcedureArguments} returns the argument list.", "Reference": "If the block is a procedure block, this {@code getProcedureArguments} returns the argument list.", "NNUpdater": "Gets the value of the param property."}
{"Origin": "If more than one stream has a message it decides which message to return using the {@link #comparator}.", "Reference": "If more than one stream has a message it decides which message to return using the {@link #trackedEventComparator}.", "NNUpdater": "Append one or more records to the stream {@code key}."}
{"Origin": "Loads configuration from meta master.", "Reference": "Loads configuration from meta master in one RPC.", "NNUpdater": "Load properties from a configuration file in the file system."}
{"Origin": "Queries this search source for the given queryString.", "Reference": "Creates query for the given queryString.", "NNUpdater": "Queries this ContactSourceService for SourceContacts which match a specific query Pattern."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Gets the warningId.", "Reference": "Gets the message.", "NNUpdater": "Gets the classifierId."}
{"Origin": "But that is okay because {@link #constructState(Map)} will give priority to collections in the shared collection state over this map.", "Reference": "But that is okay because {@link #constructState(Set)} will give priority to collections in the shared collection state over this map.", "NNUpdater": "This method delegates to {@link #fast(VectorEntry.State)} with state {@link VectorEntry.State#SET}."}
{"Origin": "Respond with provided message in reply to each intercepted outbound message.", "Reference": "Respond with provided message in response to each intercepted outbound message.", "NNUpdater": "Create a message with outbound and invocation properties."}
{"Origin": "Returns the int label of this dimension, or -1 if no label is specified for it", "Reference": "Returns the numeric label of this dimension, or -1 if no label is specified for it", "NNUpdater": "label1 and label2 in X.Y.Z-label1-lable2."}
{"Origin": "The meta-property for the {@code index} property.", "Reference": "The meta-property for the {@code volatilitiesName} property.", "NNUpdater": "The meta-property for the {@code observation} property."}
{"Origin": "Blocks until stopped in a timely fashion (see {@link org.sonar.process.StopperThread})", "Reference": "Blocks until stopped in a timely fashion (see {@link HardStopperThread})", "NNUpdater": "See {@link #createOneTaskTestProcess()}."}
{"Origin": "Sets the selector.", "Reference": "Set the selector.", "NNUpdater": "Returns the IO controller."}
{"Origin": "Encode hi and lo int values into a long", "Reference": "Encodes hi and lo values into a long.", "NNUpdater": "Scales each column of a matrix to range [lo, hi]."}
{"Origin": "Provide a {@link Mutate} {@link PTransform} to delete data to a Cassandra database.", "Reference": "Provide a {@link Write} {@link PTransform} to delete data to a Cassandra database.", "NNUpdater": "Returns a new {@link ParDo} {@link PTransform} that's like this {@link PTransform} but with the specified additional side inputs."}
{"Origin": "Creation method for ne calender instances.", "Reference": "Creation method for new calender instances.", "NNUpdater": "Used when moving in the calendar with the keyboard."}
{"Origin": "Parses a length with an allowed metric unit (px, in, cm, mm, pc, em or ex) or numeric value (e.g.", "Reference": "Parses a length with an allowed metric unit (px, pt, in, cm, mm, pc, em or ex) or numeric value (e.g.", "NNUpdater": "{@link TimeUnit#MILLISECONDS} {@code PX} {@link TimeUnit#SECONDS} {@code EX}"}
{"Origin": "Check if the event is one that kicks off the flow", "Reference": "Determine if this event is one that starts a feed flow", "NNUpdater": "Returns the scheduled flow for the scheduleId"}
{"Origin": "Create a new {@link MergedAnnotation} instance from the specified annotation type and attributes map.", "Reference": "Create a new {@link MergedAnnotation} instance of the specified annotation type with attributes values supplied by a map.", "NNUpdater": "Get {@link Annotation} attributes"}
{"Origin": "Checks for internet connection and then initializes the recycler view with 25 categories of the searched query", "Reference": "Checks for internet connection and then initializes the recycler view with all(max 500) categories of the searched query", "NNUpdater": "Constructor."}
{"Origin": "Checks if the specified expression is a valid database name.", "Reference": "Checks if the specified expression contains valid database patterns.", "NNUpdater": "Checks if the specified name is a valid enum for the class."}
{"Origin": "Find DSpace's ``home`` directory.", "Reference": "Find DSpace's ``home`` directory (from current environment)", "NNUpdater": "Otherwise, the user's home directory (defined in {@code ``user.home``}) is chosen."}
{"Origin": "Returns the color that has been set as {@code colorPrimary} on the current Theme of this", "Reference": "Returns the color id that has been set as {@code colorPrimary} on the current Theme of this", "NNUpdater": "Updates the current theme with the specified color."}
{"Origin": "Generates a random transaction.", "Reference": "Generates a transaction.", "NNUpdater": "Generates a random bar."}
{"Origin": "***** Property SXEXTENSIONS *****", "Reference": "***** Property EXTENSIONSFOLDER *****", "NNUpdater": "Operation fails."}
{"Origin": "convert orders map (proce -> amount) to a list of limit orders", "Reference": "convert orders map (price -> amount) to a list of limit orders", "NNUpdater": "Adapts a List of virtexOrders to a List of LimitOrders"}
{"Origin": "Checks whether the extension of the filename is that specified.", "Reference": "Checks whether the extension of the fileName is that specified.", "NNUpdater": "Checks whether the extension of the filename is that specified."}
{"Origin": "Computes the median for each pixel across all bands in the {@link Planar} image.", "Reference": "Computes the median for each pixel across selected bands in the {@link Planar} image.", "NNUpdater": "Computes the average for each pixel across all bands in the {@link Planar} image."}
{"Origin": "Adds the given context to the registry.", "Reference": "Adds the executor graph to the registry.", "NNUpdater": "A handler that simply calls {@link Context#next(Registry)} with the given registry."}
{"Origin": "The calibration is defined using {@link CurveGroupDefinition}.", "Reference": "The calibration is defined using {@link RatesCurveGroupDefinition}.", "NNUpdater": "This stores the calibration information in the additional information map using the key {@link CurveInfoType#JACOBIAN}."}
{"Origin": "Does not close the channel when the flux is terminated, but does {@linkplain #release(DataBuffer) release} the data buffers in the source.", "Reference": "Does not close the channel when the flux is terminated, and does not {@linkplain #release(DataBuffer) release} the data buffers in the source.", "NNUpdater": "Attempt to look up the {@code DataSource} by type and the {@linkplain #DEFAULT_DATA_SOURCE_NAME default data source name}."}
{"Origin": "Test of var method, of class LogisticDistribution.", "Reference": "Test of variance method, of class LogisticDistribution.", "NNUpdater": "Test of train method, of class LogisticRegressionDCD."}
{"Origin": "Reduce a collection of {@link DataTable}s to selection rows for selection queries without .", "Reference": "Reduces a collection of {@link DataTable}s to selection rows for selection queries without .", "NNUpdater": "Reduce a collection of {@link DataTable}s to selection rows for selection queries without ."}
{"Origin": "The {@link KeyCreateOptions#isEnabled() enabled} field is set to true by Azure Key Vault, if not specified.", "Reference": "The {@link CreateKeyOptions#isEnabled() enabled} field is set to true by Azure Key Vault, if not specified.", "NNUpdater": "The {@link Secret#isEnabled() enabled} field is set to true by key vault, if not specified."}
{"Origin": "Attempt to parse a {@link Repo} from the given {@link Uri}", "Reference": "Attempt to parse a {@link Repository} from the given {@link Uri}", "NNUpdater": "Attempt to parse a {@link Repo} from the given {@link Uri}"}
{"Origin": "Creates a {@code TypescriptFormatExtension} using the specified npm package versions.", "Reference": "Creates a {@code TypescriptFormatExtension} using exactly the specified npm packages.", "NNUpdater": "Converts the specified {@code String str} from this format to the specified {@code format}."}
{"Origin": "A {@code DateTimeAccessor} represents some form of date and time information.", "Reference": "A {@code TemporalAccessor} represents some form of date and time information.", "NNUpdater": "Checks if the instant of this date-time is after that of the specified date-time."}
{"Origin": "Creates new {@link AggregationExpression} that returns the week number in ISO 8601-2018 format, ranging from 1 to 53 in the factory timezone (default UTC).", "Reference": "Creates new {@link AggregationExpression} that returns the week number in ISO 8601-2018 format, ranging from 1 to 53.", "NNUpdater": "Creates new {@link AggregationExpression} that returns the week number in ISO 8601-2018 format, ranging from 1 to 53 in the factory timezone (default UTC)."}
{"Origin": "Returns an immutable map containing four mappings.", "Reference": "Returns an unmodifiable map containing four mappings.", "NNUpdater": "Returns an immutable map of named bindings."}
{"Origin": "Returns the j i r a project with the primary key or throws a {@link com.liferay.socialcoding.NoSuchJIRAProjectException} if it could not be found.", "Reference": "Returns the j i r a project with the primary key or throws a {@link NoSuchJIRAProjectException} if it could not be found.", "NNUpdater": "Operation fails."}
{"Origin": "Gets the value of the spid property.", "Reference": "Gets the value of the pic property.", "NNUpdater": "Gets the value of the links property."}
{"Origin": "Extracts the expressions from a selection query, expands {@code 'SELECT *'} to all physical columns if applies.", "Reference": "Extracts the expressions from a selection order-by query, expands {@code 'SELECT *'} to all physical columns if applies.", "NNUpdater": "If it is not star query, sorts out columns into three categories: 1. table columns 2. partition columns 3. implicit file columns"}
{"Origin": "Scheduler: {@code onErrorResumeNext} does not operate by default on a particular {@link Scheduler}.", "Reference": "Scheduler: {@code onErrorResumeWith} does not operate by default on a particular {@link Scheduler}.", "NNUpdater": "Scheduler: {@code onErrorReturnItem} does not operate by default on a particular {@link Scheduler}."}
{"Origin": "Write a line of the CoNLL output.", "Reference": "Produce a line of the CoNLL output.", "NNUpdater": "Write the subscription options part of the line (including the #!)."}
{"Origin": "Read an optional Long value form a JSON value.", "Reference": "Read an optional Date value form a JSON value.", "NNUpdater": "Returns a long value from the specified array."}
{"Origin": "Throw a multiexception.", "Reference": "Throw a MultiException.", "NNUpdater": "Otherwise, returns empty."}
{"Origin": "Checks if the current user has write permissions on the given resource.", "Reference": "Checks if the current user has view permissions on the given resource.", "NNUpdater": "Checks if the current user has write permissions for the specified database."}
{"Origin": "NOTE: You don't need to know the size of the archive when you start a multipart upload because Amazon Glacier does not require you to specify the overall archive size.", "Reference": "You don't need to know the size of the archive when you start a multipart upload because Amazon Glacier does not require you to specify the overall archive size.", "NNUpdater": "The {@link ArchiveMarkFile} for the Archive."}
{"Origin": "Reset this stub to its BINARY step.", "Reference": "Reset this stub to end of its BINARY step.", "NNUpdater": "{@code mock}"}
{"Origin": "If you specify both tag keys and tag values in the same request,", "Reference": "If you specify both tag keys and tag values in the same request, Amazon", "NNUpdater": "Returns a tag or attribute name."}
{"Origin": "Process the potential key signature of the underlying staff.", "Reference": "Process the potential key signature of the underlying staff in isolation.", "NNUpdater": "Report the potential time signature in this measure for the related staff"}
{"Origin": "Set the time this object was last used to the current time in ms.", "Reference": "Sets the time this object was last used to the current time in milliseconds.", "NNUpdater": "Set the creationTime value."}
{"Origin": "Generates a code sample for using {@link FileClient#createWithResponse(long, FileHTTPHeaders, FileSmbProperties,", "Reference": "Generates a code sample for using {@link FileClient#createWithResponse(long, FileHttpHeaders, FileSmbProperties,", "NNUpdater": "Generates a code sample for using {@link FileClient#setProperties(long, FileHTTPHeaders, FileSmbProperties,"}
{"Origin": "Obtains an instance of {@code WeekDefinition} from the first day-of-week and minimal days.", "Reference": "Obtains an instance of {@code WeekFields} from the first day-of-week and minimal days.", "NNUpdater": "Obtains an instance of {@code DayOfWeek} from a date-time object."}
{"Origin": "Tests for the {@link BaseFileSystem#unmount(AlluxioURI, UnmountOptions)} method.", "Reference": "Tests for the {@link BaseFileSystem#unmount(AlluxioURI, UnmountPOptions)} method.", "NNUpdater": "Tests for the {@link BaseFileSystem#unmount(AlluxioURI, UnmountOptions)} method."}
{"Origin": "This test will take a little over a second per reservoir", "Reference": "This test will take a little over a second", "NNUpdater": "Given target reservoir size k, computes the smallest representable reservoir size that can hold k entries and returns it in a 16-bit fixed-point format as a short."}
{"Origin": "get LoadBalancer.Factory for etcd client.", "Reference": "get the load balancer policy for etcd client.", "NNUpdater": "Deletes the specified load balancer."}
{"Origin": "Builds a {@code TransitiveOptionDetails} for the given set of options.", "Reference": "Builds a {@code TransitiveOptionDetails} for the given set of native and Starlark options.", "NNUpdater": "Creates a level style map where values are ANSI escape sequences given configuration options in {@code option[1]}."}
{"Origin": "Returns true if field isAcid is set (has been assigned a value) and false otherwise", "Reference": "Returns true if field isTransactional is set (has been assigned a value) and false otherwise", "NNUpdater": "Returns true if field eB is set (has been assigned a value) and false otherwise"}
{"Origin": "Find out possible longest length...", "Reference": "Find out possible longest length, capped by available memory.", "NNUpdater": "Returns the command option."}
{"Origin": "WorkflowExecutionCancelRequested event is recorded in the history of the current open workflow execution with the specified workflowId in the domain.", "Reference": "If the runId is not specified, the event is recorded in the history of the current open workflow execution with the specified workflowId in the domain.", "NNUpdater": "Get gets the reference to workflow version."}
{"Origin": "The file should contain an X.509 certificate chain in PEM format.", "Reference": "The file should contain an X.509 certificate collection in PEM format.", "NNUpdater": "Returns the X.509 certificate chain header parameter contains the X.509 public key certificate or corresponding to the key used to digitally sign the JWS or {@code null} for none."}
{"Origin": "Test {@link SubunitCluster#divideInternally(double, double, int)}", "Reference": "Test {@link SubunitCluster#divideInternally(SubunitClustererParameters)}", "NNUpdater": "C(type)=float"}
{"Origin": "Output a description of the current annotation configuration to standard error.", "Reference": "Output a description of the current annotation configuration.", "NNUpdater": "Get the current out."}
{"Origin": "Adds an existing job to the pending jobs queue.", "Reference": "Adds an auto ingest job to the pending jobs queue.", "NNUpdater": "Adds a new job to the pending jobs queue."}
{"Origin": "Send action request and check execution result with assert function and specific grid instances count.", "Reference": "Send action request and check execution result with assert function.", "NNUpdater": "Count all data set test cases."}
{"Origin": "Returns the value of the {@code bitfield} field.", "Reference": "Returns the value of the {@code baselineUsesContext} field.", "NNUpdater": "Returns the value of the {@code to_cache} field."}
{"Origin": "Returns the value of the given manifest attribute with consideration to the capsule's mode.", "Reference": "Returns the value of the given capsule manifest attribute with consideration to the capsule's mode.", "NNUpdater": "This capsule's current mode."}
{"Origin": "Gets the parent object in the object tree representing the unmarshalled xml document.", "Reference": "Gets the value of the ignorable property.", "NNUpdater": "Set the expected root object for the unmarshaller, into which the source will be unmarshalled."}
{"Origin": "Appends the name of the given label to {@link #buf buf}.", "Reference": "Appends the name of the given label to {@link #stringBuilder}.", "NNUpdater": "Writes rec file position to given {@code buf}."}
{"Origin": "Gets a {@link Set} of directories containing the symbol files corresponding to the architecture of the session currently selected.", "Reference": "Gets a {@link List} of directories containing the symbol files corresponding to the architecture of the session currently selected.", "NNUpdater": "Gets a {@link Set} of directories containing the symbol files corresponding to the architecture of the process currently selected."}
{"Origin": "Test for {@link Array#cons(Value)} and {@link Array#snoc(Value)}.", "Reference": "Test for {@link XQArray#cons(Value)} and {@link XQArray#snoc(Value)}.", "NNUpdater": "Operation fails."}
{"Origin": "Setter of publicationDateMax.", "Reference": "Setter of publicationDateMin.", "NNUpdater": "Setter of id."}
{"Origin": "Obtains an instance from the specified unique name.", "Reference": "Obtains an instance from the specified name.", "NNUpdater": "Obtains the type from a unique name."}
{"Origin": "Gets the value of the 'cf_name' field", "Reference": "Gets the value of the 'cfName' field.", "NNUpdater": "Gets the value of the 'paramName' field."}
{"Origin": "Returns a new Task that, when this task completes normally, executes the given action using the supplied Scheduler.", "Reference": "Returns a new Task that, when this task completes normally, executes the given action using the supplied Executor.", "NNUpdater": "Returns a new Task that, when this task completes normally, is executed using the default Scheduler."}
{"Origin": "Insert a clone of the given entry.", "Reference": "Insert a clone of each given entry.", "NNUpdater": "Creates a copy of the request."}
{"Origin": "Also figures out the name of android/android.bat so that it can be called explicitly.", "Reference": "Also figures out the name of android/android.bat/android.exe so that it can be called explicitly.", "NNUpdater": "Creates an AndroidDataSet from a list of DependencyAndroidData instances."}
{"Origin": "This will cause the {@link Sets2#of(Object) Set.of(E)} method to be invoked instead.", "Reference": "This will cause the {@link Sets2#of(Object) Sets2.of(E)} method to be invoked instead.", "NNUpdater": "Operation fails."}
{"Origin": "{@codesnippet com.azure.data.applicationconfig.configurationclient.setReadOnlyWithResponse#ConfigurationSetting-Context}", "Reference": "{@codesnippet com.azure.data.applicationconfig.configurationclient.setReadOnlyWithResponse#ConfigurationSetting-boolean-Context}", "NNUpdater": "{@codesnippet com.azure.data.applicationconfig.configurationclient.getSettingWithResponse#ConfigurationSetting-boolean-Context}"}
{"Origin": "Note that the order of extracted values is consistent with the iteration order of the array under test.", "Reference": "Note that the order of extracted values is consistent with the order of given extractor functions.", "NNUpdater": "Note that the order of extracted field/property values is consistent with the order of the array under test."}
{"Origin": "Convert to primitive types, returning default value if text is null.", "Reference": "Convert to duration, returning default value if text is inconvertible.", "NNUpdater": "Convert all types, both reference and primitive, to {@code Object}."}
{"Origin": "This method finds index of selected world from array list.", "Reference": "Looks for the index of a selected world from the given list.", "NNUpdater": "Get the extent."}
{"Origin": "Get Bewegungsdatum.", "Reference": "Get Inventurdatum.", "NNUpdater": "Get Movement Date."}
{"Origin": "Retrieve all ports attached to a server.", "Reference": "Retrieve all ports attached to a device.", "NNUpdater": "Gets any attached files."}
{"Origin": "Waits during {@code timeout} until attribute with specified {@code attributeName} has {@code expectedValue}.", "Reference": "Waits during {@code timeout} until attribute with specified {@code attributeName} has {@code expected} value.", "NNUpdater": "Returns the singleton instance of the {@link AttributeKey} which has the specified {@code name}."}
{"Origin": "Configure the the maximum size of a file part.", "Reference": "Configure the maximum amount of disk space allowed for file parts.", "NNUpdater": "Returns the log serializer."}
{"Origin": "Test of var method, of class ChiSquareDistribution.", "Reference": "Test of variance method, of class ChiSquareDistribution.", "NNUpdater": "This method returns the index of the maximum probability as provided by {@link #classDistribution(O) classDistribution(M)}."}
{"Origin": "Aggregates the service, app, and plan policies into a single ordered list.", "Reference": "Aggregates the api, app, and plan policies into a single ordered list.", "NNUpdater": "Delete an App Service plan."}
{"Origin": "Get Discount Amount.", "Reference": "Get Skonto.", "NNUpdater": "Get Skonto."}
{"Origin": "outputs the simple name of the type", "Reference": "Outputs the simple name of the type.", "NNUpdater": "Returns all the output expressions of this indexed by name."}
{"Origin": "Get system defaults ### Functional Description: DRACOON system defaults configuration entry point.", "Reference": "Get system defaults ### \ud83d\ude80 Since version VERSION ### Functional Description: DRACOON system defaults configuration entry point.", "NNUpdater": "Defaults to ``AUTO``."}
{"Origin": "Get the set of default providers registered for the given service provider contract in the underlying {@link ServiceLocator HK2 service locator} container.", "Reference": "Get the set of default providers registered for the given service provider contract in the underlying {@link InstanceManager instance manager} container.", "NNUpdater": "Get the iterable of all providers (custom and default) registered for the given service provider contract in the underlying {@link ServiceLocator HK2 service locator} container."}
{"Origin": "Tests that after initialization, reinitialize with a different URI should fail.", "Reference": "Tests that after initialization, reinitialize with a different URI.", "NNUpdater": "Test with FileInputStream null, parsing should fail and throw"}
{"Origin": "SourceIdentifier, you will be notified of events generated from all RDS sources belonging to your customer account.", "Reference": "If you do not specify either the SourceType nor the SourceIdentifier, you will be notified of events generated from all RDS sources belonging to your customer account.", "NNUpdater": "The customer ID will be the same as {@link Registrar#getClientId()}."}
{"Origin": "Special case where we want to do the issue tracking with the merge branch, and copy matched issue to the current branch.", "Reference": "Special case where we want to do the issue tracking with the reference branch, and copy matched issue to the current branch.", "NNUpdater": "Get the tracking branch for the given branch, or null if the given branch doesn't track anything."}
{"Origin": "Returns an immutable set containing four elements.", "Reference": "Returns an unmodifiable set containing four elements.", "NNUpdater": "Gets an {@link ImmutableSet} of {@link Value.Immutable}s for the block at the given location."}
{"Origin": "Return ``t.foo`` from ``region__t__foo``", "Reference": "Return ``t.foo`` from ``/region__/t__foo``", "NNUpdater": "Return ``t.foo`` from ``region__t__foo``"}
{"Origin": "Creates a new instance of {@link Address} from thrift representation.", "Reference": "Creates a new instance of {@link Address} from proto representation.", "NNUpdater": "Creates a new instance of from the given {@link BaseStream}."}
{"Origin": "Get the embeded SSlideLayoutAtom", "Reference": "Get the embedded SSlideLayoutAtom", "NNUpdater": "slide <-- slideLayout <-- slideMaster"}
{"Origin": "Updates the various repositories and configurations for services participating in the upgrade or downgrade.", "Reference": "Updates the various mpack associations and configurations for services participating in the upgrade or downgrade.", "NNUpdater": "This method is used to get a {@link Module} participating in {@link RuleTemplate}"}
{"Origin": "Access Control Using AWS Identity and Access Management (IAM) .", "Reference": "For more information, see Access Control Using AWS Identity and Access Management (IAM).", "NNUpdater": "Access Management (IAM) user account."}
{"Origin": "Checks to see if the current sequence number should be send to the channel, or whether the channel must wait for a new sequence number to arrive.", "Reference": "Checks to see if the current sequence should be send to the channel, or whether the channel must wait for a new sequence number to arrive.", "NNUpdater": "Sets the current request sequence number."}
{"Origin": "Detects if the requested time falls into a non-existent time range due to local time advancing into daylight savings time.", "Reference": "Detects if the requested time falls into a non-existent time range due to local time advancing into daylight savings time or is ambiguous due to going out of daylight savings.", "NNUpdater": "Returns the daylight savings offset in milliseconds for this time zone."}
{"Origin": "Returns all the sync d l objects where companyId = ?", "Reference": "Returns all the sync d l objects where modifiedTime > ?", "NNUpdater": "Returns the feed where userId = ?"}
{"Origin": "If --controller parameter has been specified, --all parameter will not be visible to prevent conflicts.", "Reference": "If --entity parameter has been specified, --all parameter will not be visible to prevent conflicts.", "NNUpdater": "< pluginName/pluginVersion/${parameter} > to < parameterValue >"}
{"Origin": "{@codesnippet com.azure.storage.file.share.ShareDirectoryAsyncClient.deleteSubDirectoryWithResponse#string}", "Reference": "{@codesnippet com.azure.storage.file.share.ShareDirectoryAsyncClient.deleteSubdirectoryWithResponse#string}", "NNUpdater": "{@codesnippet com.azure.storage.file.shareClient.deleteDirectoryWithResponse#string-duration-context}"}
{"Origin": "Writes this to {@code directory} the standard directory structure.", "Reference": "Writes this to {@code directory} as UTF-8 using the standard directory structure.", "NNUpdater": "Returns the directory path."}
{"Origin": "Returns the identifying name for the audio properties.", "Reference": "Returns a string containing all identifying audio properties.", "NNUpdater": "Returns a string containing all identifying audio properties."}
{"Origin": "Add the opcodes for numeric operations to a context.", "Reference": "Add the opcodes for numeric operations to a context, do not use protected division.", "NNUpdater": "Sets numeric range."}
{"Origin": "Obtains an instance from the specified unique name.", "Reference": "Obtains an instance from the specified name.", "NNUpdater": "Obtains the type from a unique name."}
{"Origin": "Returns the {@link View.OnClickListener} of the {@code CarMenuItem}.", "Reference": "Returns the {@link OnClickListener} of the {@code CarMenuItem}.", "NNUpdater": "Operation fails."}
{"Origin": "The {@link KeyCreateOptions} is required.", "Reference": "The {@link CreateKeyOptions} is required.", "NNUpdater": "The {@link RsaKeyCreateOptions#getKeySize() keySize} can be optionally specified."}
{"Origin": "Returns the base URI of the resource function.", "Reference": "Returns the base URI of the request.", "NNUpdater": "Returns the static base URI."}
{"Origin": "{@codesnippet com.azure.security.keyvault.certificates.CertificateClient.getCertificateWithResponse#String}", "Reference": "{@codesnippet com.azure.security.keyvault.certificates.CertificateClient.getCertificateWithResponse#String-Context}", "NNUpdater": "{@codesnippet com.azure.security.keyvault.certificates.CertificateClient.getIssuerWithResponse#string-context}"}
{"Origin": "Creates an introspected table implementation that is only usable for validation (i.e.", "Reference": "Creates an introspected table implementation that is only usable for validation .", "NNUpdater": "Inspects the target class."}
{"Origin": "List recording descriptors from a recording id with a limit of record count for a given channel and stream id.", "Reference": "List recording descriptors from a recording id with a limit of record count for a given channelFragment and stream id.", "NNUpdater": "Get the active recording id for a given counter id."}
{"Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}", "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveToRangeEnd }{@code >}}", "NNUpdater": "Create an instance of {@link JAXBElement }{@code <}{@link CTStrokeChild }{@code >}}"}
{"Origin": "Adds many members to this action profile group.", "Reference": "Adds all members to this action profile group with default weight.", "NNUpdater": "Adds the {@link RoleAssignee} to {@code this} group."}
{"Origin": "The current thread might be already in any request scope and in that case the scope will be changed to the scope defined by the {@link RequestScope.Instance scope instance}.", "Reference": "The current thread might be already in any request scope and in that case the scope will be changed to the scope defined by the {@link RequestContext scope context}.", "NNUpdater": "Maps a {@link Scope} instance to a given annotation."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "construct an object from a byte stream (similar semantically to previous method, we are deciding which one to support)", "Reference": "Construct an object from a byte stream (similar semantically to previous method, we are deciding which one to support)", "NNUpdater": "Similar to the Win32 API"}
{"Origin": "Gets the edit group configuration resource type.", "Reference": "Gets the element view configuration resource type.", "NNUpdater": "Returns the sitemap data."}
{"Origin": "Returns a range of all the push notifications devices where platform = ?.", "Reference": "Returns a range of all the push notifications devices where userId = any ?", "NNUpdater": "Returns the children push notifications entries count of this push notifications entry."}
{"Origin": "Returns the string up to but not including any delimiter characters.", "Reference": "Reads the value up to but not including any delimiter characters.", "NNUpdater": "Get start delimiter."}
{"Origin": "Sets the record's sequence number.", "Reference": "Update the record's sequence number.", "NNUpdater": "Sets the session operation sequence number."}
{"Origin": "HmRqBody can describe in readable way.", "Reference": "HmBody can describe in readable way.", "NNUpdater": "HmRqHeader can test whether multiple headers are available."}
{"Origin": "Gets the default SSLHostConfig name.", "Reference": "Gets the default SslHostConfig name.", "NNUpdater": "Get the slotSwapStatus value."}
{"Origin": "Retrieve a user userprofile.", "Reference": "Retrieve a user profile.", "NNUpdater": "Requests to retrieve the application info."}
{"Origin": "Gets the Certificate Information of the last Signature.", "Reference": "Gets the certificate information of a signature.", "NNUpdater": "Gets information about the certificate which represents the {@link CertificateProperties} from the key vault."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "***** Property SYSAPP *****", "Reference": "***** Property SYSAPPDATA *****", "NNUpdater": "Operation fails."}
{"Origin": "Renders this vertex into the given {@link VertexBuffer}, assuming that the {@link VertexFormat} is {@link DefaultVertexFormats#BLOCK}.", "Reference": "Renders this vertex into the given {@link BufferBuilder}, assuming that the {@link VertexFormat} is {@link DefaultVertexFormats#BLOCK}.", "NNUpdater": "If it is an {@code instanceof Vertex}, then replace it in the map with {@link Vertex#id()}."}
{"Origin": "Get the joint-normalized mutual information (normalized, 0 = unequal)", "Reference": "Get the joint-normalized mutual information.", "NNUpdater": "Return the optimized Value of {@code value}."}
{"Origin": "Services incoming range write calls.", "Reference": "Services incoming multi write calls.", "NNUpdater": "Sets the internal client router."}
{"Origin": "This year will be passed to the formatter {@link DateTimeFormatter#print(TemporalAccessor) print method}.", "Reference": "This year will be passed to the formatter {@link DateTimeFormatter#format(TemporalAccessor) print method}.", "NNUpdater": "This time will be passed to the formatter {@link DateTimeFormatter#format(TemporalAccessor) format method}."}
{"Origin": "If all field level validators pass, and {@link #bind(Object)} has been used to bind to an item, item level validators are run for that bean.", "Reference": "If all field level validators pass, and {@link #bind(Object)} has been used to bind to a bean, bean level validators are run for that bean.", "NNUpdater": "To achieve that, use {@link #bind(BEAN)}."}
{"Origin": "Sometimes we need to be able to avoid this happening if it will lead to a circular reference.", "Reference": "Sometimes we need to be able to avoid this happening, e.g.", "NNUpdater": "This test demonstrates that if the user throws a ProvisionException, we wrap it to add context."}
{"Origin": "Get Stop Function Snippet Block.", "Reference": "Get Graceful Stop Function Snippet Block.", "NNUpdater": "Get Object Initializer Snippet Block."}
{"Origin": "Test of var method, of class Poisson.", "Reference": "Test of variance method, of class Poisson.", "NNUpdater": "Test of poisson method, of class DiscreteDistributions."}
{"Origin": "This method iteratively calls {@link #doFeatureIteration(TrainingEstimator, Collection, RealVector, RealVector, double)} to train the feature.", "Reference": "This method iteratively calls {@link #doFeatureIteration(TrainingEstimator, List, RealVector, RealVector, double)} to train the feature.", "NNUpdater": "This method iteratively calls {@link #doFeatureIteration(TrainingEstimator, FastCollection, Vector, Vector, double)} to train the feature."}
{"Origin": "Get the score for all movesets, in either defence or attack score.", "Reference": "Get the score for all movesets, in either defence or attack score from an online database.", "NNUpdater": "Sets the sentiment."}
{"Origin": "The timestamp for the last update to the example.", "Reference": "The timestamp for the most recent update to the object.", "NNUpdater": "Query for the last update time of a given ."}
{"Origin": "Evaluates {@code lhs @ rhs}, where {@code @} is the operator, and returns the result.", "Reference": "Evaluates {@code x @ y}, where {@code @} is the operator, and returns the result.", "NNUpdater": "lhs and rhs contain only the annotations, not the"}
{"Origin": "If just need to do additional things before firing the drop event, then you should override {@link #onDrop(String, DropEffect)} instead.", "Reference": "If just need to do additional things before firing the drop event, then you should override {@link #onDrop(List, Map, DropEffect)} instead.", "NNUpdater": "Creates a new instance of {@link org.spongepowered.api.event.inventory.DropItemEvent.Dispense}."}
{"Origin": "Gets the {@link Value.Mutable} for the {@link ParrotVariant} of this {@link Parrot}.", "Reference": "Gets the {@link Value.Mutable} for the {@link ParrotType} of this {@link Parrot}.", "NNUpdater": "Gets the {@link Value.Mutable} for the {@link ParrotVariant} of this {@link Parrot}."}
{"Origin": "Extracts geometry information from the instance, if present.", "Reference": "Extracts geometry information from the given xpath path in the given instance.", "NNUpdater": "Removes the duplicates geometry by polygon."}
{"Origin": "Adds one member to this action profile group.", "Reference": "Adds one member to this action profile group with default weight.", "NNUpdater": "Adds the {@link RoleAssignee} to {@code this} group."}
{"Origin": "This does NOT close or release datasets or graphs held by client code.", "Reference": "All release datasets or graphs held by client code are no longer valid.", "NNUpdater": "Close the HTTP tcpHelper."}
{"Origin": "Indicates if the current variant is equal to the given variant.", "Reference": "Indicates if the current variant is equal to the given object.", "NNUpdater": "Represents the resource using a given media type."}
{"Origin": "Gets the value of the category property.", "Reference": "Gets the value of the item property.", "NNUpdater": "Gets the value of the links property."}
{"Origin": "The maximum number of file path/content pairs that can be supplied is 5.", "Reference": "The maximum number of file path/content pairs that can be supplied is determined by provider quotas(default is 5).", "NNUpdater": "Asserts that the contained set of records is equal to the set of records of the given {@link TestPairs}."}
{"Origin": "The file should contain an X.509 certificate chain in PEM format.", "Reference": "The file should contain an X.509 certificate collection in PEM format.", "NNUpdater": "Returns the X.509 certificate chain header parameter contains the X.509 public key certificate or corresponding to the key used to digitally sign the JWS or {@code null} for none."}
{"Origin": "This method should be called before reusing same instructions list between several s.", "Reference": "This method should be called before reusing an instruction list between several s.", "NNUpdater": "This method can be called several times and will always return the same representation instance."}
{"Origin": "Gets the confidence.", "Reference": "New builder.", "NNUpdater": "This is measured from the bottom, thus equal to {@code 1 - confidence level}."}
{"Origin": "See {@link GlobalCheckpointTracker#updateFromMaster(long, Set, Set, Set)} for details.", "Reference": "See {@link GlobalCheckpointTracker#updateFromMaster(long, Set, IndexShardRoutingTable, Set)} for details.", "NNUpdater": "See {@link GlobalCheckpointTracker#updateAllocationIdsFromMaster(long, Set, Set)} for details."}
{"Origin": "Evaluate if a feature is toggled based on the information in store and current execution context (key/value as threadLocal).", "Reference": "Evaluate if a feature is toggled based on the information in store and provided execution context (key/value)", "NNUpdater": "Add {@link Context} to current execution."}
{"Origin": "Get authentication settings ### Functional Description: Retrieve the settings of authentication configuration.", "Reference": "Get authentication settings ## \u26a0 Deprecated since version VERSION ### Functional Description: Retrieve the settings of authentication configuration.", "NNUpdater": "The default is to use any authentication mechanisms registered by {@link #configure(AuthenticationManagerBuilder)}."}
{"Origin": "Add the record to repair int the map of records and cluster.", "Reference": "Adds the record to repair int the map of records and cluster.", "NNUpdater": "Repair"}
{"Origin": "Gets the receiver (sequence) of a length access node, or null if lengthNode is not a length access.", "Reference": "Gets the receiver sequence of a length access node, or null if {@code lengthNode} is not a length access.", "NNUpdater": "Gets the contentLength of the file."}
{"Origin": "Obtains an instance of {@code LocalDate} from a date-time object.", "Reference": "Obtains an instance of {@code LocalDate} from a temporal object.", "NNUpdater": "Obtains an instance of {@code LocalDateTime} from a date-time object."}
{"Origin": "Return all elements until specified time period has elapsed", "Reference": "Skip all elements until specified time period has passed", "NNUpdater": "Reads until {@code in} is exhausted or the deadline has been reached."}
{"Origin": "Collect capabilities of an index.", "Reference": "Collect the field capabilities for an index.", "NNUpdater": "Returns the {@code GLCapabilities} instance that describes the capabilities of this context."}
{"Origin": "Returns the paramConsolescript.", "Reference": "Returns the web server script parameter.", "NNUpdater": "Get the param value."}
{"Origin": "If only public access and unconditional access are allowed, the suffix is ``/publicLookup``.", "Reference": "If only unconditional access is allowed, the suffix is ``/publicLookup``.", "NNUpdater": "If publicOnly is true, filter by 'visibleToPublicUsers' flag"}
{"Origin": "Returns the {@link ImageCapture.CaptureMode}.", "Reference": "Returns the {@link CaptureMode}.", "NNUpdater": "Set Capture Sequence."}
{"Origin": "Example:", "Reference": "Examples:", "NNUpdater": "Examples:"}
{"Origin": "Tests the getCompactLongLength() method.", "Reference": "Tests the getCompactIntLength() method.", "NNUpdater": "Tests the {@link PathUtils#temporaryFileName(long, String)} method."}
{"Origin": "It will cause the service to transition from {@link State#STOPPING} to {@link State#TERMINATED}.", "Reference": "It will cause the service to transition from {@link State#STARTING} or {@link State#STOPPING} to {@link", "NNUpdater": "used to transition from the {@link TaskSchedulingState#ACTIVE} to the {@link TaskSchedulingState#WAITING} state"}
{"Origin": "The option will be converted to a type.", "Reference": "The option will be converted to a", "NNUpdater": "Later, the collection will be converted into the target type."}
{"Origin": "The command is ignored if an update operation takes place.", "Reference": "Commands are ignored if an update operation takes place.", "NNUpdater": "The command is ignored if an update operation takes place."}
{"Origin": "Tests assert that the setting can be deleted after unlock the setting.", "Reference": "Tests assert that the setting can be deleted after clear read-only of the setting.", "NNUpdater": "Unlocks the block"}
{"Origin": "Index roll dates are 20th March and September.", "Reference": "The semiannual roll dates are 20th March and September.", "NNUpdater": "Index roll dates are the 20th of March and September."}
{"Origin": "Perform the ``enhanced key schedule`` step described by Provos and Mazieres in ``A Future-Adaptable Password Scheme`` URL", "Reference": "Provos and Mazieres in ``A Future-Adaptable Password Scheme`` URL", "NNUpdater": "List all yaml configurations as JSON enhanced with detection config id, isActive and createBy information."}
{"Origin": "Send request to gracefully stop to the process (via ipc shared memory)", "Reference": "Send request to quickly stop to the process (via ipc shared memory)", "NNUpdater": "No graceful stop by calling stop() on a"}
{"Origin": "Set the parameter expression at the given index.", "Reference": "Adds the parameter expression.", "NNUpdater": "Gets value at the given index as an object."}
{"Origin": "Getter for bookModified property", "Reference": "Getter for bookModifiedOrUpgraded property", "NNUpdater": "Getter for property type."}
{"Origin": "Tokenize a CharSequence based on the given CharSequence delimiter.", "Reference": "Tokenize a CharSequence based on the given CharSequence.", "NNUpdater": "Return the lines of a CharSequence as a List of String."}
{"Origin": "Efficient version of {@link #lockChild(InodeView, LockPattern)} for when the child path components are already known.", "Reference": "Efficient version of {@link #lockChild(Inode, LockPattern)} for when the child path components are already known.", "NNUpdater": "Returns the related Lock."}
{"Origin": "Updates the underlying schema based on the schema description.", "Reference": "Initializes the underlying schema based on the schema description.", "NNUpdater": "Sets the metadata."}
{"Origin": "Remove a cache entry for a sentence", "Reference": "Remove a cache entries for a sentence", "NNUpdater": "Set the sentenceLocation."}
{"Origin": "The option is a: type.", "Reference": "The option is a:", "NNUpdater": "Returns the {@link OptionsBase} class the defines the given option, null if the option isn't recognized."}
{"Origin": "Get id of a partition to offload on disk", "Reference": "Get id of a partition to offload to disk.", "NNUpdater": "Test get DiskManager with given {@link PartitionId}."}
{"Origin": "Returns true if Wifi calling is enabled for at least one phone.", "Reference": "Returns true if Wifi calling is enabled for at least one subscription.", "NNUpdater": "Return whether wifi is enabled."}
{"Origin": "Invokes parent.resolveRequires to resolve the given root modules.", "Reference": "Invokes parent.resolve to resolve the given root modules.", "NNUpdater": "Resolve the given modules, by name, and returns the resulting"}
{"Origin": "Client will automatically attempt to reconnect to the server if the connection is lost.", "Reference": "Sets whether the client will automatically attempt to reconnect to the server if the connection is lost.", "NNUpdater": "Is the connection lost for more than 3 minutes, the user will be removed (within 3 minutes the user can reconnect)"}
{"Origin": "Check equality of two String objects.", "Reference": "Check equality of two CharSequence objects.", "NNUpdater": "Determines the equality of two objects."}
{"Origin": "Returns the default pivot of a view on a specific axis.", "Reference": "Returns the default pivot of an item on a specific axis.", "NNUpdater": "Returns the pivot of a view on a specific axis, when it is swiped."}
{"Origin": "Returns the {@code Cipher} to use for encrypting and decrypting serialized identity data to prevent easy inspection of Subject identity data.", "Reference": "Returns the {@code CipherService} to use for encrypting and decrypting serialized identity data to prevent easy inspection of Subject identity data.", "NNUpdater": "Returns the principal value."}
{"Origin": "This method returns a collector allowing streams to be gathered into an {@link ImmutableMap}.", "Reference": "This method returns a collector allowing streams to be gathered into an {@link ImmutableMap}, retaining insertion order.", "NNUpdater": "Gets an {@link ImmutableSet} of {@link Value.Immutable}s for the block at the given location."}
{"Origin": "Effectively clones the original proxy object and it adds the ConstantAnnotationMarker interface.", "Reference": "Effectively clones the original proxy object and it adds the constant-annotation-marker interface.", "NNUpdater": "adds a sign to the map"}
{"Origin": "Inspects the value of a K entry and stores all meaningful StructureItem objects that are encountered.", "Reference": "Inspects the value of the K entry of a structure element and stores all meaningful StructureItem objects that are encountered.", "NNUpdater": "Returns the id of the structure record of this resource."}
{"Origin": "Returns the console script.", "Reference": "Returns the web server script.", "NNUpdater": "Returns the script for a given Locale."}
{"Origin": "This method is not thread-safe for the {@code insertionOrderUnits} and should be called atomically relative to the {@code insertionOrderUnits}.", "Reference": "This method is not thread-safe for the {@code indexedRemainingUnits} and should be called atomically relative to the {@code indexedRemainingUnits}.", "NNUpdater": "The method is thread-safe."}
{"Origin": "Add --adminport and --instanceport options with proper default values.", "Reference": "Add options with port with proper default values.", "NNUpdater": "Add --adminport and --instanceport options with proper default values."}
{"Origin": "Returns map of {@link StatisticsKind} and statistics values obtained from specified {@link DrillStatsTable}.", "Reference": "Returns list of {@link StatisticsKind} and statistics values obtained from specified {@link DrillStatsTable}.", "NNUpdater": "Returns the statistics for the specified key id."}
{"Origin": "Gets the dataset with the specified id and applies the specified changes.", "Reference": "Gets the dataset with the specified id.", "NNUpdater": "Returns the node represented by the specified identifier."}
{"Origin": "Get the time a publication will linger in nanoseconds after being drained.", "Reference": "Get the time a network publication will linger in nanoseconds after being drained.", "NNUpdater": "Returns the measured execution time in milliseconds and reinitializes the timer."}
{"Origin": "Merges this frame with the given frame (case of a RET instruction).", "Reference": "Merges the given frame into this frame (case of a subroutine).", "NNUpdater": "Computes the final size of this frame."}
{"Origin": "You cannot use to restore a table with the same name as an existing table in an Amazon", "Reference": "You cannot use to restore a table with the same name as an existing table in an Amazon Redshift cluster.", "NNUpdater": "Returns the table with the specified logical table name."}
{"Origin": "Copies a file to folder with specified copy params and returns copied destination.", "Reference": "Copies a {@link File} to directory with specified copy params and returns copied destination.", "NNUpdater": "Copies a file to folder with specified copy params and returns copied destination."}
{"Origin": "Checks if ast is the default token of an annotation field.", "Reference": "Checks if ast is in an annotation field.", "NNUpdater": "Sets the default annotations."}
{"Origin": "Adds a {@link TemporalMemory} to this {@code Layer}", "Reference": "Adds a {@link OldTemporalMemory} to this {@code Layer}", "NNUpdater": "Returns the {@code Module} with the given name in this layer, or if not in this layer, the {@linkplain #parent parent} layer."}
{"Origin": "The module name (```` for the unnamed module).", "Reference": "The module name ({@code ````} for the unnamed module).", "NNUpdater": "Returns {@code true} if this module is a named module."}
{"Origin": "Get Manufacturing Order.", "Reference": "Get Produktionsauftrag.", "NNUpdater": "Get Manufacturing Cost Collector."}
{"Origin": "Marks {@code type}, throwing if it is explicitly excluded, or if any of its members are also specifically included.", "Reference": "Marks {@code type}, throwing if it is explicitly excluded.", "NNUpdater": "Returns the accepted media types."}
{"Origin": "In case nodes are added from within a class-level or cross-parameter constraint, the node representing the constraint element will be dropped.", "Reference": "In case nodes are added from within a class-level constraint, the node representing the constraint element will be dropped.", "NNUpdater": "Return all constraint validator descriptors (either generic or cross-parameter) which are registered for the constraint of this descriptor."}
{"Origin": "Gets the value as a long in the {@link MetricsTable} of a given key.", "Reference": "Gets the value as a byte array in the {@link MetricsTable} of a given key.", "NNUpdater": "Returns the key's ID (as {@link Long}) or name (as {@link String})."}
{"Origin": "Returns a set of unshifted IP addresses.", "Reference": "Returns an unshifted IP address.", "NNUpdater": "Returns the set of interface IP addresses."}
{"Origin": "Return the ``Cache-Control`` header value.", "Reference": "Return the ``Cache-Control`` header value, if any.", "NNUpdater": "Returns the first {@code ``Cache-Control``} header or {@code null} for none."}
{"Origin": "Returns the {@code Platform} of the given OS name specified in the {@code ModuleTarget} attribute.", "Reference": "Returns the {@code Platform} derived from the target platform in the {@code ModuleTarget} attribute.", "NNUpdater": "Returns the {@code ModuleReference} for the given named module or {@code null} if a module of the given name is not in this configuration."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Returns a progress notification for the given download states.", "Reference": "Returns a progress notification for the given downloads.", "NNUpdater": "Returns a progress notification for the given download states."}
{"Origin": "Sets an attribute on the given element.", "Reference": "Sets a property on the given element.", "NNUpdater": "Parsed an attribute of an element"}
{"Origin": "This method looks at the authority of a metadata.", "Reference": "This method looks at the authority of a metadata value.", "NNUpdater": "Sets the {@link PseudoHeaderName#AUTHORITY} header."}
{"Origin": "Device-General Information reports have 2 key value pairs for every attribute.", "Reference": "Device-General Information reports generally have 2 key value pairs for every blackboard attribute.", "NNUpdater": "Populate tags from key/value pairs"}
{"Origin": "Create a pool key from the provided parameters.", "Reference": "Creates a pool key from the provided parameters.", "NNUpdater": "Returns:"}
{"Origin": "Returns the sample l a r booking with the primary key or throws a {@link com.liferay.samplelar.NoSuchBookingException} if it could not be found.", "Reference": "Returns the sample l a r booking with the primary key or throws a {@link NoSuchBookingException} if it could not be found.", "NNUpdater": "Operation fails."}
{"Origin": "Cookie data is signed it using .", "Reference": "Session data is signed it using .", "NNUpdater": "Gets the notional amount."}
{"Origin": "Sets the item separator.", "Reference": "Prints an item separator.", "NNUpdater": "Sets separator painter."}
{"Origin": "Use {@link HostAccess#EXPLICIT} or {@link HostAccess#PUBLIC}.", "Reference": "Use {@link HostAccessPolicy#EXPLICIT} or {@link HostAccessPolicy#PUBLIC}.", "NNUpdater": "Handles PUT /clusters/{clusterID}/hosts/{hostID}/host_components/{hostComponentID}"}
{"Origin": "Construts a redirect url that should switch the user to the specified {@code scheme}", "Reference": "Constructs a redirect url that should switch the user to the specified {@code scheme}", "NNUpdater": "Get the redirect status code to use."}
{"Origin": "Before initializing any WebModule we call each WebModule's prepare method to allow for a WebModule to leave information useful for other modules on the shared ServletContext.", "Reference": "Before initializing any WebModule we call each WebModule's prepare method to allow for a WebModule to leave information useful for other modules on the shared WebModuleContext.", "NNUpdater": "Expected format: {@code appList: app (| app)*}"}
{"Origin": "NOTE: If the specified workflow execution is not open, this method fails with UnknownResource.", "Reference": "If the specified workflow execution is not open, this method fails with .", "NNUpdater": "Returns the {@link WorkflowProgramInfo} if it is running inside Workflow or {@code null} if not."}
{"Origin": "Indicates whether an optional content group is enabled.", "Reference": "Indicates whether at least one optional content group with this name is enabled.", "NNUpdater": "This method is deprecated."}
{"Origin": "Returns the flow table for specified device.", "Reference": "Returns the flow table for a specific device.", "NNUpdater": "Returns the group store eventual consistent id map."}
{"Origin": "Check that removing enum fields requires migration", "Reference": "Check that removing enum fields makes the snapshot incompatible", "NNUpdater": "Return true if the migration exists."}
{"Origin": "Create renew check decision state.", "Reference": "Create renew check state.", "NNUpdater": "Renew sharding rule."}
{"Origin": "Sedec the value of the 'dec' field.", "Reference": "Sets the value of the 'dec' field.", "NNUpdater": "The readers removed will also be decZoieRef()."}
{"Origin": "Invokes {@link #createServiceProvider}, but checks against recursive calls.", "Reference": "Invokes {@link #createFactory(Class, Class, Hints)}, but checks against recursive calls.", "NNUpdater": "Invokes {@link Service#serviceAdded(ServiceConfig)}."}
{"Origin": "When executing as part of a monolithic compilation there will likely only be a moduleDef available.", "Reference": "There will likely only be a moduleDef available.", "NNUpdater": "Finds the def package or namespace from a reader for a def-file."}
{"Origin": "Converts this module to a strict module with the given dependences", "Reference": "Converts this module to a normal module with the given dependences", "NNUpdater": "Examines the module dependences of the given module and computes the hash of any module that matches the pattern {@code dependenciesToHash}."}
{"Origin": "Method that overrides waitUntilPageIsLoaded() and waits also for the Groups livetable to load.", "Reference": "Method that overrides waitUntilPageIsLoaded() and waits also for the groups live table to load.", "NNUpdater": "Does not verify the new page."}
{"Origin": "Set runtime HK2 locator.", "Reference": "Set runtime DI locator.", "NNUpdater": "Set Lagerort."}
{"Origin": "Make sure that cell.setCellType(CellType.BLANK) preserves the cell style", "Reference": "Make sure that cell.setBlank() preserves the cell style", "NNUpdater": "Make sure that cell.setCellType(CellType.BLANK) preserves the cell style"}
{"Origin": "This implementation exposes the SavepointManager interface of the underlying transaction object, if any.", "Reference": "This implementation exposes the {@link SavepointManager} interface of the underlying transaction object, if any.", "NNUpdater": "Returns the current implementation of the ConfigurationWindow interface."}
{"Origin": "Tests the engine starts up, executes 1 trade cycle successfully, but then receives TradingApiException from", "Reference": "Tests the engine starts up, executes 1 trade cycle successfully, but then receives", "NNUpdater": "Called once by the Trading Engine when the bot starts up; it's a bit like a servlet init() method."}
{"Origin": "This version avoids certain types of overflow.", "Reference": "This version avoids any possibility of overflow.", "NNUpdater": "This method returns an {@link Overflow} instance with the result of the subtraction and any overflow in days."}
{"Origin": "Gets the regularization lambda.", "Reference": "Get the regularization lambda.", "NNUpdater": "Get weight regularization from Keras weight regularization configuration."}
{"Origin": "Get the ``global`` CORS configuration.", "Reference": "Get the ``global`` CORS configurations.", "NNUpdater": "Global Defaults"}
{"Origin": "Only included for SyncClient", "Reference": "Only avaialable for SyncClient", "NNUpdater": "Sync if provided."}
{"Origin": "See Immutable List Static Factory Methods for details.", "Reference": "See Unmodifiable Lists for details.", "NNUpdater": "The returned List is immutable."}
{"Origin": "Formats the sequence number.", "Reference": "Formats the sequence number into a file name.", "NNUpdater": "set term offset field"}
{"Origin": "The {@link EcKeyCreateOptions#getKeyType() keyType} indicates the type of key to create.", "Reference": "The {@link CreateEcKeyOptions#getKeyType() keyType} indicates the type of key to create.", "NNUpdater": "Get the Type of {@link IN}."}
{"Origin": "Test of npara method, of class LogisticDistribution.", "Reference": "Test of length method, of class LogisticDistribution.", "NNUpdater": "Test of train method, of class LogisticRegressionDCD."}
{"Origin": "Defaults to running before {@link Form#onSubmit()}.", "Reference": "This method will be called after {@link Form#onSubmit()}.", "NNUpdater": "Defaults to ``AUTO``."}
{"Origin": "Add a subscription to the list of subscriptions to be subscribed at cancellation time.", "Reference": "Add a disposable to the list of disposables to be disposed at cancellation time.", "NNUpdater": "Returns a list of channels that the user subscribed to."}
{"Origin": "testGetProcedure", "Reference": "testGetVoltProcedure", "NNUpdater": "testGetWriteWriteConflicts"}
{"Origin": "Sends NX-API request message to the device.", "Reference": "Sends NX-API request message to the device with CLI command.", "NNUpdater": "Sends an internal message."}
{"Origin": "gets all tv show seasons from database", "Reference": "SYNCHRONOUSLY gets all tv show seasons from database", "NNUpdater": "Get show details from TVDb and trakt."}
{"Origin": "Linear algebraic matrix multiplication, aT * B * c", "Reference": "Matrix multiplication, v1T * m2 * v3", "NNUpdater": "Performs a matrix multiplication and stores the result in the output matrix."}
{"Origin": "If the {@code null} is returned, {@link ControllerResult#RESULT_CODE_UNKNOWN_ERROR} will be returned.", "Reference": "If the {@code null} is returned, {@link SessionResult#RESULT_CODE_UNKNOWN_ERROR} will be returned.", "NNUpdater": "See also {@link #hasErrors()}, which will be true if a {@link PathValidator.Status#ERROR} is returned."}
{"Origin": "If it contains a single exception that is thrown, otherwise the this multi exception is thrown.", "Reference": "If it contains a single exception then that is thrown, otherwise the this multi exception is thrown.", "NNUpdater": "If not, a parameter exception is thrown."}
{"Origin": "Writes a compilation unit to the currently open file, if any.", "Reference": "Writes an entry to the currently open file, if any.", "NNUpdater": "compilationUnit := packageStatement?"}
{"Origin": "For more information about specifying an audio format, including additional details about some of the formats, see [Specifying an audio format](URL).", "Reference": "For more information about specifying an audio format, including additional details about some of the formats, see [Audio formats](URL).", "NNUpdater": "Set the contentType."}
{"Origin": "Stips aux and mark edges when we are splitting into a clause.", "Reference": "Strips aux and mark edges when we are splitting into a clause.", "NNUpdater": "Gets the map containing the aux data for this stack"}
{"Origin": "Returns a default credential for the application.", "Reference": "Returns the Application Default Credentials.", "NNUpdater": "Set the name value."}
{"Origin": "Same as {@link #testModuleWithWorkQueue(KeyFactory, Optional)} but with default task store and key factory.", "Reference": "Same as {@link #testModuleWithWorkQueue(KeyFactory)} but with default task store and key factory.", "NNUpdater": "Operation fails."}
{"Origin": "generic method for untyped messages.", "Reference": "generic method for untyped remoting.", "NNUpdater": "Sets the default annotation for unannotated elements."}
{"Origin": "Returns an immutable set containing ten elements.", "Reference": "Returns an unmodifiable set containing ten elements.", "NNUpdater": "Gets an {@link ImmutableSet} of {@link Value.Immutable}s for the block at the given location."}
{"Origin": "Sets the paramSitetitle.", "Reference": "Sets the site name.", "NNUpdater": "Get the param value."}
{"Origin": "Method setLocator sets an instance of a SourceLocator object that specifies where an error occured.", "Reference": "Method setLocator sets an instance of a SourceLocator object that specifies where an error occurred.", "NNUpdater": "Set Lagerort."}
{"Origin": "Returns value of network address cache ttl property.", "Reference": "Returns value of network address cache ttl property if not Android environment.", "NNUpdater": "Sets the value of the url property."}
{"Origin": "Propagate CDI context across completion stages.", "Reference": "Propagate CDI context to a completion stage.", "NNUpdater": "Propagate information of current tracing context."}
{"Origin": "Tests the {@link SecurityUtils#getGroupFromThriftClient()} ()} method.", "Reference": "Tests the {@link SecurityUtils#getGroupFromGrpcClient()} ()} method.", "NNUpdater": "Tests the {@link Permission#setUserFromThriftClient()} method."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Are we a file and a json file?", "Reference": "Are we a file and a JSON or YAML file?", "NNUpdater": "Returns the resource."}
{"Origin": "This first tries to use {@code sun.misc.Unsafe} to load a class.", "Reference": "This first tries to use {@code java.lang.invoke.MethodHandle} to load a class.", "NNUpdater": "Run class path application that uses jdk.internal.misc.Unsafe"}
{"Origin": "Unsafe version of {@link #data_l(PointerBuffer) data_l}.", "Reference": "Unsafe version of {@link #data_l(CLongBuffer) data_l}.", "NNUpdater": "DSA version of {@link GL15C#glBufferData BufferData}."}
{"Origin": "{@codesnippet com.azure.security.keyvault.certificates.CertificateClient.getCertificate#CertificateProperties}", "Reference": "{@codesnippet com.azure.security.keyvault.certificates.CertificateClient.getCertificateOperation#String}", "NNUpdater": "{@codesnippet com.azure.security.keyvault.certificates.CertificateClient.getCertificate#CertificateProperties}"}
{"Origin": "Based on vmchk/checkthreads.c r1.5", "Reference": "Based on runtime/vmchk/checkthreads.c", "NNUpdater": "Operation fails."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "if last-modified and date are defined, freshness lifetime is coefficient*(date-lastModified), else freshness lifetime is defaultLifetime", "Reference": "The algorithm is as follows: if last-modified and date are defined, freshness lifetime is coefficient*(date-lastModified), else freshness lifetime is defaultLifetime", "NNUpdater": "Create a LifetimeType object given a created + expires Dates"}
{"Origin": "Convert an uploaded file to HTML.", "Reference": "Converts a document to HTML.", "NNUpdater": "Convert the Classes in the given Package to an HTML file."}
{"Origin": "This can be used to change any field, for example to set the year, month of day-of-month.", "Reference": "This can be used to change any supported field, such as the year, month or day-of-month.", "NNUpdater": "{Year}-{MonthOfYear}-{DayOfMonth}"}
{"Origin": "Returns a new Lint that has the given LintCategory suppressed.", "Reference": "Returns a new Lint that has the given LintCategorys suppressed.", "NNUpdater": "Test the product the plugin is currently executed in."}
{"Origin": "Put create value of a key", "Reference": "Create value of a key", "NNUpdater": "put key-value in object into this encode = false;"}
{"Origin": "Test sendEmail() with parameter list.", "Reference": "Test EmailInfoBuilder.create() with parameter list.", "NNUpdater": "Send an email"}
{"Origin": "Test that a JAR file with a Main-Class attribute that is not a valid", "Reference": "Test that a JAR file with a Main-Class attribute that is not a qualified type name.", "NNUpdater": "Generates a JAR file that contains zero or more classes with a static main method."}
{"Origin": "If {@code options} is {@code null}, then all the {@link ConfigurationSetting ConfigurationSettings} are fetched in their current state.", "Reference": "If {@code selector} is {@code null}, then all the {@link ConfigurationSetting ConfigurationSettings} are fetched in their current state.", "NNUpdater": "{@codesnippet com.azure.data.appconfiguration.ConfigurationClient.setSettingWithResponse#ConfigurationSetting-boolean-Context}"}
{"Origin": "This method is always invoked after {@link #dnsStart(Call, String)}.", "Reference": "This method is invoked after {@link #dnsStart}.", "NNUpdater": "Otherwise, {@link #call(Object)} is invoked."}
{"Origin": "If the new lookup class is in a different package than the old one, protected and default (package) members will not be accessible.", "Reference": "If the new lookup class is in a different package than the old one, protected and default (package) members will not be accessible, i.e.", "NNUpdater": "Get the node package string."}
{"Origin": "Appends the name of the given label to {@link #buf buf}.", "Reference": "Appends the name of the given label to {@link #stringBuilder}.", "NNUpdater": "Writes rec file position to given {@code buf}."}
{"Origin": "{@codesnippet com.azure.storage.blob.specialized.BlobClientBase.startCopyFromURL#URL}", "Reference": "{@codesnippet com.azure.storage.blob.specialized.BlobClientBase.startCopyFromURL#String}", "NNUpdater": "{@codesnippet com.azure.storage.blob.specialized.BlobClientBase.Builder.buildClient}"}
{"Origin": "Creates a list of arguments to pass to the compiler, including the list of source files to compile.", "Reference": "Creates a list of arguments to pass to the compiler.", "NNUpdater": "Creates a call with an array of arguments."}
{"Origin": "Purge head notes in very short ending measure (courtesy measure) if any.", "Reference": "Remove head notes in very short ending measure (courtesy measure) if any.", "NNUpdater": "Unsafe version of {@link #measure_noContext(YGMeasureFuncI) measure_noContext}."}
{"Origin": "runs the initializers defined via @Initializer annotation", "Reference": "finds the initializers defined via @RegisterInitializer annotation", "NNUpdater": "annotation* SEMICOLON"}
{"Origin": "Get Lieferdatum.", "Reference": "Get Bewegungsdatum.", "NNUpdater": "Get OrderType."}
{"Origin": "Evaluates the {@code buildFileAST} into a {@link Package}.", "Reference": "Evaluates the {@code filename} into a {@link Package}.", "NNUpdater": "Parses and evaluates {@code buildFile} with custom {@code eventHandler} and returns the resulting {@link Package} instance."}
{"Origin": "Returns the provider's public no-arg constructor.", "Reference": "Returns the public no-arg constructor of a class.", "NNUpdater": "Constructs an instance of the given class, which must have a no-arg or default constructor."}
{"Origin": "Creates a ModuleReference to an exploded module.", "Reference": "Creates a ModuleReference to a possibly-patched exploded module.", "NNUpdater": "Returns a {@code ModuleReference} to an exploded module on the file system."}
{"Origin": "In other words, the returned {@link BasicGraph} will not be updated after modifications to {@code graph}.", "Reference": "In other words, the returned {@link Graph} will not be updated after modifications to {@code graph}.", "NNUpdater": "In other words, the returned {@link BasicGraph} will not be updated after modifications to {@code graph}."}
{"Origin": "Retrieves the conflict status of the current row of this {@code SyncResolver}, which indicates the operationthe {@code RowSet} object was attempting when the conflict occurred.", "Reference": "Retrieves the conflict status of the current row of this {@code SyncResolver}, which indicates the operation the {@code RowSet} object was attempting when the conflict occurred.", "NNUpdater": "allowed object is {@link DeclarableType }"}
{"Origin": "Starts the service if not started already and stops all downloads.", "Reference": "Starts the service if not started already and pauses all downloads.", "NNUpdater": "Signals all downloads to stop."}
{"Origin": "Fork the {@code routine} to a separate JVM process and return the result locally.", "Reference": "Fork the {@code routine} to a separate JVM process and block until the result can be returned locally.", "NNUpdater": "Set the parameter IN value to the routine"}
{"Origin": "Get Global ID.", "Reference": "Get Data import.", "NNUpdater": "Get a reference set by ID"}
{"Origin": "Generate byte code for constants", "Reference": "Generates byte code for constants.", "NNUpdater": "Constructs java code exit."}
{"Origin": "Creates an instance of {@link RowFactory} using {@link DefaultRowTypeFactory} and {@link GeneratedGetterFactory}.", "Reference": "Creates an instance of {@link RowFactory} using {@link DefaultSchemaFactory} and {@link GeneratedGetterFactory}.", "NNUpdater": "Creates a {@link Row} from the list of values and {@link #getSchema()}."}
{"Origin": "Returns the entry with the primary key or throws a {@link com.liferay.chat.NoSuchEntryException} if it could not be found.", "Reference": "Returns the entry with the primary key or throws a {@link NoSuchEntryException} if it could not be found.", "NNUpdater": "Returns the {@code ZipEntry} for the given base entry name or {@code null} if not found."}
{"Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}", "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveFromRangeEnd }{@code >}}", "NNUpdater": "Create an instance of {@link JAXBElement }{@code <}{@link CTStrokeChild }{@code >}}"}
{"Origin": "See Immutable List Static Factory Methods for details.", "Reference": "See Unmodifiable Lists for details.", "NNUpdater": "The returned List is immutable."}
{"Origin": "The negative of {@code startsNotWith} is {@link #startsWith}.", "Reference": "The negative of {@code startsNotWith} is {@link #startingWith}.", "NNUpdater": "BytesRef (term text) of the matches, corresponding with {@link #getMatchStarts()}."}
{"Origin": "Return the specified key generator to use, if any.", "Reference": "Return the specified key generator to use.", "NNUpdater": "Build default key generator."}
{"Origin": "Returns the space-separated OAuth scopes to use with the the service account flow or {@code null} if not using the service account flow.", "Reference": "Returns a collection of OAuth scopes to use with the the service account flow or {@code null} if not using the service account flow.", "NNUpdater": "Deletes a program specified by {@code FlowIdentifier}."}
{"Origin": "Sets the input prompt - a textual prompt that is displayed when the field would otherwise be empty, to prompt the user for input.", "Reference": "The placeholder is text that is displayed when the field would otherwise be empty, to prompt the user for input.", "NNUpdater": "Prompt dirs dialog to user to input file name"}
{"Origin": "Validates whether {@code modulus} is at least 2048-bit.", "Reference": "Validates whether {@code modulusSize} is at least 2048-bit.", "NNUpdater": "The modulus must be positive."}
{"Origin": "The encoding format of a single exception with its cause is:", "Reference": "The encoding format of a single exception is:", "NNUpdater": "The cause of {@link Throwable}"}
{"Origin": "Returns the {@link UUID} of the request.", "Reference": "Returns the {@link RequestId}.", "NNUpdater": "Returns a {@link SchemaBuilder} for a Point field."}
{"Origin": "This option won't be visible is `--entityFormatMessage` has been specified.", "Reference": "This option won't be visible if `--entity` has not already been specified.", "NNUpdater": "Operation fails."}
{"Origin": "Get condition values.", "Reference": "Get values.", "NNUpdater": "Valid Values: |"}
{"Origin": "Iterating with two Progenius for a draw", "Reference": "Servant is in play Iterating with two Progenius for a draw", "NNUpdater": "Draw PNG image with build stats."}
{"Origin": "Maven coordinates: org.apache.camel:camel-spark-rest", "Reference": "Maven coordinates: org.apache.camel:camel-spark", "NNUpdater": "A helper method to return the StreamCaching instance for a given {@link org.apache.camel.CamelContext} if one is enabled"}
{"Origin": "Subclasses might decide on different approaches to creating local temporaries.", "Reference": "Subclasses might decide on different approaches to naming local temporaries.", "NNUpdater": "Different implementations of the {@code RateObservation} interface have different approaches to observing the rate, including averaging, overnight and interpolation."}
{"Origin": "This method logs a warning if the class cannot be registered.", "Reference": "This method LOGs a warning if the class cannot be registered.", "NNUpdater": "This method returns {@code null} if the class cannot be found or not defined in the specified module."}
{"Origin": "In case of failure the {@link Flux} will error.", "Reference": "In case of failure the {@link CosmosContinuablePagedFlux} will error.", "NNUpdater": "Get the id of the {@link CosmosContainer}"}
{"Origin": "Clear out the cache.", "Reference": "Clear out all of internal caches.", "NNUpdater": "Clears memory cache"}
{"Origin": "Convert to WebSocket {@code ws} or scheme URIs", "Reference": "Convert to WebSocket {@code ws} or {@code wss} scheme URIs", "NNUpdater": "Forcibly closes the {@link WebSocketChannel}."}
{"Origin": "Returns the {@link ServletContext} to be injected or {@code null}.", "Reference": "Returns the {@link ServletConfig} to be injected or {@code null}.", "NNUpdater": "StandardServletEnvironment#SERVLET_CONTEXT_PROPERTY_SOURCE_NAME ``servletContextInitParams``} and so on."}
{"Origin": "Converts an entity (POJO) to a DBObject.", "Reference": "Converts an entity (POJO) to a Document.", "NNUpdater": "Converts an object to a datastore Entity with the appropriate Key type."}
{"Origin": "Build a Map with projection field names and ``path`` field names and adds it to the typesFieldMaps Map.", "Reference": "Build a Map with field names and ``path`` field names and adds it to the typesFieldMaps Map.", "NNUpdater": "Returns the set of field names."}
{"Origin": "The difference in seconds is calculated using {@link Temporal#periodUntil(Temporal, TemporalUnit)}.", "Reference": "The difference in seconds is calculated using {@link Temporal#until(Temporal, TemporalUnit)}.", "NNUpdater": "Verifies that the actual {@link Temporal} is close to the other according to the given {@link TemporalOffset}."}
{"Origin": "Adds a style for the HTML tag.", "Reference": "Sets the style for the HTML tag.", "NNUpdater": "Adds metadata to the node."}
{"Origin": "Convert the data provider to use a different filter type.", "Reference": "Wraps this data provider to create a data provider that uses a different filter type.", "NNUpdater": "Set the 'to' data type name."}
{"Origin": "Sets the maximal number of results returned by Solr indexes.", "Reference": "Sets the maximal number of results processed for a query to a Solr index.", "NNUpdater": "Create a SolrClient based on the type of Solr specified."}
{"Origin": "Deletes all the students in the course.", "Reference": "Deletes all the students in the course cascade their associated responses and comments.", "NNUpdater": "Randomly creates students for a particular course."}
{"Origin": "FilterEvaluator should return {@link Optional#absent()} when the link doesn't match any filters", "Reference": "FilterEvaluator should return {@link Optional.empty()} when the link doesn't match any filters", "NNUpdater": "Optional#empty() Optional.empty()}."}
{"Origin": "tries to advance the start of the queue by one element and returns the removed element in case of success, {@code null} otherwise.", "Reference": "Tries to advance the start of the queue by one element and returns the removed element in case of success, {@code null} otherwise.", "NNUpdater": "Identifies the element, e.g."}
{"Origin": "Sets the partition data directory.", "Reference": "Sets the compaction configuration.", "NNUpdater": "Sets the system partition group."}
{"Origin": "Tests the {@link FileSystemMaster#delete(AlluxioURI, DeleteOptions)} method with a non-empty directory.", "Reference": "Tests the {@link FileSystemMaster#delete(AlluxioURI, DeleteContext)} method with a non-empty directory.", "NNUpdater": "Tests the {@link FileSystemMaster#delete(AlluxioURI, DeleteOptions)} method with a non-empty directory."}
{"Origin": "Test to convert between a thrift type and a wire type.", "Reference": "Test to convert between a proto type and a wire type.", "NNUpdater": "Type: Complex"}
{"Origin": "Adapts the arguments according to the properties of the {@link TypeInferenceUtil.Result}.", "Reference": "Adapts the arguments according to the properties of the {@link Result}.", "NNUpdater": "The type set to {@link Type#result IQ.Type.result}."}
{"Origin": "Whether to expose and manage the global Reactor Netty resources from the {@link HttpResources} holder.", "Reference": "Whether to use global Reactor Netty resources via {@link HttpResources}.", "NNUpdater": "Returns whether the given {@link Resources} instance matches the given {@link ResolvableType}."}
{"Origin": "Calculate A'x (where x is an in-core Vector)", "Reference": "Perform A'x operation with a DRM and an in-core Vector to create a new DRM.", "NNUpdater": "If the vector is the 0-Vector (ignoring y), this method returns {@link #NONE}."}
{"Origin": "Creates a new log writer.", "Reference": "Returns the log writer.", "NNUpdater": "Creates a new state log."}
{"Origin": "This method must only be used for type references whose sort is {@link #THROWS THROWS}.", "Reference": "This method must only be used for type references whose sort is {@link #THROWS}.", "NNUpdater": "A {@link UserException} is throws when:"}
{"Origin": "Usually this is called at the end of a web request.", "Reference": "Usually this is called at the end of a web request or the end of some processing unit.", "NNUpdater": "- The end date of the request."}
{"Origin": "Multiply this Vector3d component-wise by another Vector3d.", "Reference": "Multiply this Vector3d component-wise by another Vector3dc.", "NNUpdater": "In order to store the result in another vector, use {@link #transformPoint(Vector3d, Vector3d)}."}
{"Origin": "Conditionally update the {@link #serviceTable} iff it does not exist or is empty.", "Reference": "Conditionally update the {@link #serviceTableRef} iff it does not exist or is empty.", "NNUpdater": "This data structure is not valid (Exist (OR (A B)"}
{"Origin": "Logs collection, string and throws {@link java.lang.AssertionError}, if not.", "Reference": "Logs collection, element and throws {@link java.lang.AssertionError}, if not.", "NNUpdater": "Creates a String of {@code CharSequence}."}
{"Origin": "Sets the additional data used for creating new pages.", "Reference": "Sets the create parameter used for new pages.", "NNUpdater": "Sets the default factory to be used when creating pages."}
{"Origin": "Founds the contact corresponding this HistoryID.", "Reference": "Founds the contact or chat room corresponding this HistoryID.", "NNUpdater": "Returns the corresponding UIContact."}
{"Origin": "checks if there's still enough memory left by checking whether there is still a 25MB margin between getUsed() and getMax().", "Reference": "checks if there's still enough memory left by checking whether there is still a 50MB margin between getUsed() and getMax().", "NNUpdater": "The template needs to still query {@link #isCopyMethodOnValueInstance()} to determine whether to use {@code [expression]."}
{"Origin": "Get JDBC driver class name.", "Reference": "Get JDBC driver URL recognizer.", "NNUpdater": "Find a JDBC driver class name based on given JDBC URL"}
{"Origin": "The xpathNodeSet is treated as a list of XPath nodes, not as a list of subtrees.", "Reference": "The {@code xpathNodeSet} is treated as a list of XPath nodes, not as a list of subtrees.", "NNUpdater": "Gets the list of nodes that use this node (i.e., as an input)."}
{"Origin": "Uses tombstones to handle put-remove reorder.", "Reference": "Uses tombstones to handle put-remove conflicts.", "NNUpdater": "You can add/remove/reorder your Overlays using the List of {@link Overlay}."}
{"Origin": "Generates a code sample for using {@link FileClient#setProperties(long, FileHTTPHeaders, FileSmbProperties,", "Reference": "Generates a code sample for using {@link FileClient#setProperties(long, FileHttpHeaders, FileSmbProperties,", "NNUpdater": "Generates a code sample for using {@link FileClient#setProperties(long, FileHTTPHeaders, FileSmbProperties,"}
{"Origin": "Returns true if the session is closed within the past hour of calling this function.", "Reference": "Checks if the session closed some time in the last one hour from calling this function.", "NNUpdater": "If the server is not already stopped, it will be stopped upon calling this method."}
{"Origin": "Multiply this Vector3d component-wise by another Vector3f.", "Reference": "Multiply this Vector3d component-wise by another Vector3fc.", "NNUpdater": "Multiply this Vector3f component-wise by another Vector3fr."}
{"Origin": "Makes the given module visitor visit this open declaration.", "Reference": "Makes the given module visitor visit this opened package.", "NNUpdater": "Makes the given visitor visit the Java class of this Class Reader."}
{"Origin": "Returns the full name of the given table path, this name may be padded with current catalog/database name based on the {@code paths} length.", "Reference": "Returns the full name of the given table path, this name may be padded with current catalog/database name based on the {@code identifier's} length.", "NNUpdater": "Get the full name of a collection, with the database name as a prefix."}
{"Origin": "``AppenderName`` : ``MASTER_LOG``.", "Reference": "``ProcessType`` : ``MASTER``.", "NNUpdater": "Creates an {@link AsyncAppenderFactory} of type {@link IAccessEvent} that prepares events for deferred processing"}
{"Origin": "The implementation here sets the header (if needed and not already set), the header and the header.", "Reference": "The implementation here sets the header (if needed and not already set), the header (if not already set), the header and the header.", "NNUpdater": "Adds header parameter."}
{"Origin": "The {@link Flux} will contain one or several feed response of the obtained users.", "Reference": "The {@link CosmosContinuablePagedFlux} will contain one or several feed response of the obtained users.", "NNUpdater": "The {@link Flux} will contain one or several feed response of the obtained containers."}
{"Origin": "Sets the left border for a region of cells by manipulating the cell style of the individual cells on the left", "Reference": "Sets the left border style for a region of cells by manipulating the cell style of the individual cells on the left", "NNUpdater": "Sets the left border for a region of cells by manipulating the cell style of the individual cells on the left"}
{"Origin": "**See also:** * [Working with corpora](URL) * [Add corpora to the custom language model](URL).", "Reference": "**See also:** * [Working with corpora](URL) * [Add a corpus to the custom language model](URL).", "NNUpdater": "Test list corpora."}
{"Origin": "Adds/Updates {@link ConfigHelper#CLUSTER_ENV_STACK_SELECT_PACKAGES_PROPERTY} from stack", "Reference": "Adds/Updates {@link ConfigHelper#CLUSTER_ENV_STACK_PACKAGES_PROPERTY} from stack", "NNUpdater": "Operation fails."}
{"Origin": "Stips aux and mark edges when we are splitting into a clause.", "Reference": "Strips aux and mark edges when we are splitting into a clause.", "NNUpdater": "Gets the map containing the aux data for this stack"}
{"Origin": "If it's successfully completed, {@link BrowserResult#getMediaItem()} will return the media item.", "Reference": "If it's successfully completed, {@link LibraryResult#getMediaItem()} will return the media item.", "NNUpdater": "Gets the duration of the current media item, or {@link MediaPlayerConnector#UNKNOWN_TIME} if unknown or not connected."}
{"Origin": "It will replace the previously assigned MediaControlView instance if any.", "Reference": "It will replace the previously assigned {@link MediaControlView} instance if any.", "NNUpdater": "Setting this value will replace any previously configured converters."}
{"Origin": "@Bean public SecurityWebFilterChain springSecurityFilterChain(ServerHttpSecurity http) throws Exception { http ... .csrf(csrf -> csrf", "Reference": "@Bean public SecurityWebFilterChain springSecurityFilterChain(ServerHttpSecurity http) { http ... .csrf(csrf -> csrf", "NNUpdater": "Specify the XSRF token header name."}
{"Origin": "The formally correct mechanism of disconnecting the returned {@link FCPPluginClient} is to null out the strong reference to it.", "Reference": "The formally correct mechanism of disconnecting the returned {@link FCPPluginConnection} is to null out the strong reference to it.", "NNUpdater": "The client message handler is available as the passed {@link FredPluginFCPClient} client."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Bind all providers contained in {@code p roviderBag} (classes and instances) using instance manager.", "Reference": "Bind all providers contained in {@code p roviderBag} (classes and instances) using injection manager.", "NNUpdater": "This method is a shortcut for {@code new BoundStatement(this).bind(...)}."}
{"Origin": "Element.getTextContet() is java5 specific, so we need to use this until we drop VERSION support.", "Reference": "Element.getTextContent() is java5 specific, so we need to use this until we drop VERSION support.", "NNUpdater": "We need to test both on different environments."}
{"Origin": "Creates a new Jetty connection factory.", "Reference": "Creates new internal Jetty connection factories.", "NNUpdater": "Velocity."}
{"Origin": "Returns the {@link MatcherBuilder} representing the set of characters that can be matched by this {@link CharacterClass}.", "Reference": "Returns the {@link CharSet} representing the set of characters that can be matched by this {@link CharacterClass}.", "NNUpdater": "Constructs a new builder to construct a {@link BlockStateMatcher}."}
{"Origin": "Parse card number as int (support base [123] and alternative numbers [123b]).", "Reference": "Parse card number as int (support base [123] and alternative numbers [123b], [U123]).", "NNUpdater": "Parse a plain list of numbers."}
{"Origin": "This method superposes y onto x, so it transforms the coordinates of y.", "Reference": "This method superposes x onto y, so it transforms the coordinates of x.", "NNUpdater": "Converts the given screen coordinates to stage coordinates."}
{"Origin": "Get binded side.", "Reference": "Get the currently bound side.", "NNUpdater": "(Inner segment)"}
{"Origin": "Gets a Map mapping IInventories to the amount of items of the type passed in that exist", "Reference": "Gets a Map mapping IInventories to the number of matching items.", "NNUpdater": "Gets the value of the 'requestMapping' field"}
{"Origin": "See Immutable List Static Factory Methods for details.", "Reference": "See Unmodifiable Lists for details.", "NNUpdater": "The returned List is immutable."}
{"Origin": "Return a {@link JettyRemoteRepositoryManager} for talking to the {@link NanoSparqlServer} instance associated with an {@link HAGlue} interface.", "Reference": "Return a {@link RemoteRepositoryManager} for talking to the {@link NanoSparqlServer} instance associated with an {@link HAGlue} interface.", "NNUpdater": "Operation fails."}
{"Origin": "Returns if the ``IS_MESSAGE_HISTORY_ENABLED`` property is true for the contact, otherwise - returns .", "Reference": "Returns if the ``IS_MESSAGE_HISTORY_ENABLED`` property is true for the id, otherwise - returns .", "NNUpdater": "Otherwise, returns ``No Response``."}
{"Origin": "Match statement against pattern for create schedule", "Reference": "Match statement against pattern for create task", "NNUpdater": "Match a pattern element."}
{"Origin": "Prepare task event for execution on agent.", "Reference": "Prepare exe params for send REST request on node.", "NNUpdater": "Start server."}
{"Origin": "Sets the expected behaviour for tasks in case that they encounter an error in their checkpointing procedure.", "Reference": "Sets the expected behaviour for tasks in case that they encounter an error when checkpointing.", "NNUpdater": "Encounter pokemon"}
{"Origin": "Returns a {@link ResolvingConverter} for the given attribute definition", "Reference": "Returns a {@link Converter} for the given attribute definition", "NNUpdater": "This method returns the value of the database column profile_definition_attribute.extend_id"}
{"Origin": "This method will populate oioGroups with owner OIO Node as key and list of corresponding OIO nodes which will run in its thread as value", "Reference": "Populates oioGroups with owner OIO Node as key and list of corresponding OIO nodes which will run in its thread as value", "NNUpdater": "Start the thread which will populate the Strategies List"}
{"Origin": "{@code n} cannot be valid unless its token is in this set.", "Reference": "If {@code n} is a pseudoexpression, it will be considered invalid unless its token is in this set.", "NNUpdater": "Sets the token bytes, which can be 0--8 bytes."}
{"Origin": "See {@link #withChrono(Chronology)} for more details on overriding.", "Reference": "See {@link #withChronology(Chronology)} for more details on overriding.", "NNUpdater": "See {@link Messages#format(String, Object...)} for more details."}
{"Origin": "This is used to make sure no existing shard will recovery from this index using ops based recovery.", "Reference": "This is used to make sure no existing shard will recover from this index using ops based recovery.", "NNUpdater": "This is used to make sure no existing shard will recover from this index using ops based recovery."}
{"Origin": "Returns a detailed string representation of this Pronunication.", "Reference": "Returns a detailed string representation of this Pronunciation.", "NNUpdater": "Builds a string representation of the specified value."}
{"Origin": "Indicate whether this {@code MediaType} includes the given media type.", "Reference": "Indicate whether this MIME Type includes the given MIME Type.", "NNUpdater": "Indicate whether this {@code MediaType} includes the given media type."}
{"Origin": "This stores a complete object that has been parsed.", "Reference": "This stores the zone that has been parsed.", "NNUpdater": "This stores a complete object that has been parsed."}
{"Origin": "Group: reset", "Reference": "Group: producer", "NNUpdater": "Guide."}
{"Origin": "Returns profile and level (as defined by {@link CodecProfileLevel}) corresponding to the given codec description string (as defined by RFC 6381).", "Reference": "Returns profile and level (as defined by {@link CodecProfileLevel}) corresponding to the codec description string (as defined by RFC 6381) of the given format.", "NNUpdater": "Invokes {@link ServiceCodec#codecAdded(ServiceConfig)}."}
{"Origin": "Represent a zone with a fake email and defaul ttl of 86400.", "Reference": "Represent a zone with a fake email.", "NNUpdater": "Represent a zone without a {@link #qualifier() qualifier}."}
{"Origin": "Store last collected and watchlisted timestamps.", "Reference": "Store last collected, watchlisted and watched timestamps.", "NNUpdater": "Returns the digest for map entries."}
{"Origin": "Optional.absent().", "Reference": "Optional.empty().", "NNUpdater": "Optional#empty() Optional.empty()}."}
{"Origin": "The input file must be a list of tab-separated verb-POS pairs, one verb per line.", "Reference": "The input file must be a list of whitespace-separated verb-lemma-POS triples, one verb form per line.", "NNUpdater": "Get method's http verbs."}
{"Origin": "Checks if the groupby is a supported one, that is, if it's possible to turn to SQL the various {@link Expression} it's using", "Reference": "Checks if the groupBy is a supported one, that is, if it's possible to turn to SQL the various {@link Expression} it's using", "NNUpdater": "Checks if the provided {@link Value} is supported."}
{"Origin": "Return an empty list for no search result, and return {@code null} for the error.", "Reference": "Return an empty list for no search result rather than using result code for error.", "NNUpdater": "If the given {@code Iterable} is empty or {@code null}, this method will return an empty {@code List}."}
{"Origin": "Unsubscribe from all channel.", "Reference": "Unsubscribe from all channels.", "NNUpdater": "Unsubscribe from all channel and channel groups."}
{"Origin": "Sets the specified value to the {@code autoFlush} field.", "Reference": "Sets the specified value to the {@code favorDecSpeed} field.", "NNUpdater": "Sets the specified value to the {@code printUsesContext} field."}
{"Origin": "The name of the default CRAN mirror.", "Reference": "The CRAN mirror to use.", "NNUpdater": "Get the position value from a @Test annotation mirror."}
{"Origin": "Expands all child nodes until the specified structure depth is reached.", "Reference": "Expands all tree nodes.", "NNUpdater": "Expands the specified leaf nodes."}
{"Origin": "Deletes a deployment model from storage", "Reference": "Deletes a web service from db", "NNUpdater": "Deletes a custom translation model."}
{"Origin": "Schedules a move media item action to be executed.", "Reference": "Schedules a new source preparation action to be executed.", "NNUpdater": "Prepares the {@code request} to be executed at some point in the future."}
{"Origin": "Sort the input data.", "Reference": "Sort the input data and returns an iterator.", "NNUpdater": "Array."}
{"Origin": "Returns true if the resource is a simple resource that can never be encapsulated.", "Reference": "Returns true if the resource is a simple resource.", "NNUpdater": "Returns the structure id."}
{"Origin": "Returns the properties of this resource in a map.", "Reference": "Returns the direct properties of this resource in a map.", "NNUpdater": "Returns the configured properties."}
{"Origin": "Returns a suitable content for the argument file given to dx with --main-dex-list.", "Reference": "This can be passed to dx as a file with --main-dex-list.", "NNUpdater": "Opens an input file, which could be a .dex or a .jar/.apk with a classes.dex inside."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Setter for {@link #exposeOnlyRequestedHeader}", "Reference": "Setter for {@link #allowOnlyRequestedHeader}", "NNUpdater": "Add a response header to expose."}
{"Origin": "The minimum coverage of the sequence alignment between two subunits to be clustered together.", "Reference": "The minimum coverage of the structure alignment between two subunits to be clustered together.", "NNUpdater": "MultipleAlignment of the repeats in order to use the methods to score"}
{"Origin": "Add the given {@link HandlerMethodArgumentResolver}s.", "Reference": "Add the given {@link HandlerMethodArgumentResolver HandlerMethodArgumentResolvers}.", "NNUpdater": "Add the given {@link HandlerMethodArgumentResolver}."}
{"Origin": "Construct JsonDataSource from the underneath byte channel which is associated with the entity struct.", "Reference": "Construct JsonDataSource from the underneath byte channel which is associated with the entity object.", "NNUpdater": "Wrap the byte channel associated with the given entity as the EntityBodyStream."}
{"Origin": "The start within a native image heap section (e.g., read-only or writable).", "Reference": "Otherwise, this returns the offset of the object within a native image section (e.g., read-only or writable).", "NNUpdater": "Operation fails."}
{"Origin": "Default implementation of a complete execution of this operation.", "Reference": "Default implementation of a complete execution of this operation against the primary index.", "NNUpdater": "Drop operation completion."}
{"Origin": "If you specify both tag keys and tag values in the same request,", "Reference": "If you specify both tag keys and tag values in the same request, Amazon", "NNUpdater": "Returns a tag or attribute name."}
{"Origin": "Reads from bytes serialized in TBinaryProtocol", "Reference": "Reads from buffer serialized in TBinaryProtocol", "NNUpdater": "Returns the serialized size of a given {@link Message}, in bytes."}
{"Origin": "returns the number of 64 bit words it would take to hold numBits", "Reference": "Returns the number of 64 bit words it would take to hold numBits", "NNUpdater": "Returns the capacity in bits of the array implementing this {@code BitSet}."}
{"Origin": "If the mapped keys may have duplicates, use {@link #toMap(Function, Function, BinaryOperator)} instead.", "Reference": "If the mapped keys might have duplicates, use {@link #toMap(Function, Function, BinaryOperator)} instead.", "NNUpdater": "Test method for the binary-to-string() function."}
{"Origin": "Returns if the provided key is an ``empty slot`` marker.", "Reference": "Returns if the provided value is an ``empty slot`` marker.", "NNUpdater": "Returns a given slot in the bucket, given a slot number"}
{"Origin": "Get all Pinot raw table names.", "Reference": "Get all raw table names.", "NNUpdater": "Creates table names for given types."}
{"Origin": "Save the configuration of this tunnel only", "Reference": "Remove the configuration of this tunnel only", "NNUpdater": "Notifies bound listeners that a tunnel is to be closed."}
{"Origin": "Set schema of the Cosmos DB Cassandra table.", "Reference": "Set the resource value.", "NNUpdater": "Set tableName value."}
{"Origin": "The hash code implementation simply returns the unique type id of this resource type.", "Reference": "The hash code implementation uses the type name to generate a hash code.", "NNUpdater": "Returns the list of resource type ids."}
{"Origin": "Any of the input words can also be the answer if one is the parent or grandparent of other", "Reference": "Any of the input words can also be the answer if one is the parent or grandparent of other, or if the input words are the same.", "NNUpdater": "Adds an word to words."}
{"Origin": "Returns a {@link KeyManagerFactory} based on the configuration in this class.", "Reference": "Returns the {@link SSLSocketFactory} based on the latest configuration of this class.", "NNUpdater": "This method creates a task factory class based on the {@link StreamApplication}"}
{"Origin": "Returns a {@code JBIterable} that applies {@code function} to each element of this iterable and concats the produced iterables in one.", "Reference": "Returns a {@code JBIterable} that applies {@code function} to each element of this iterable and concatenates the produced iterables in one.", "NNUpdater": "Returns a {@code JBIterable} that applies {@code function} to each element of this iterable and concats the produced iterables in one."}
{"Origin": "The updated module-info.class will have a ConcealedPackages attribute with the set of module-private/non-exported packages.", "Reference": "The updated module-info.class will have a Packages attribute with the set of module-private/non-exported packages.", "NNUpdater": "The updated module-info.class will have a Packages attribute with the set of module-private/non-exported packages."}
{"Origin": "A {@code DateTimeAccessor} represents some form of date and time information.", "Reference": "A {@code TemporalAccessor} represents some form of date and time information.", "NNUpdater": "Checks if the instant of this date-time is after that of the specified date-time."}
{"Origin": "Returns a rule that limits the number of requests for a given period of time by request's host domain.", "Reference": "Adds a rule that limits the number of requests for a given period of time by request's host domain.", "NNUpdater": "Sets the maximum number of requests per time period expression"}
{"Origin": "get the list of children of this trienode.", "Reference": "Get the list of children of this trienode.", "NNUpdater": "An unmodifiable view of the list of arguments (aka children) of this node."}
{"Origin": "Queries this ContactSourceService for SourceContacts which match a specific query Pattern.", "Reference": "Creates query that searches for SourceContacts which match a specific query Pattern.", "NNUpdater": "Queries this ContactSourceService for SourceContacts which match a specific query Pattern."}
{"Origin": "If true, applying this lexical relation to this word creates a sentence which is entailed by the original sentence,", "Reference": "If true, applying this lexical relation to this word creates a sentence which is negated by the original sentence", "NNUpdater": "Set the sentenceLocation."}
{"Origin": "Sets the values for the ModuleTarget attribute.", "Reference": "Sets the value for the ModuleTarget attribute.", "NNUpdater": "Updates this module to read the source module."}
{"Origin": "Returns the base section paint.", "Reference": "Returns the default section paint.", "NNUpdater": "Returns the default paint."}
{"Origin": "Reverse- transforms using the FECReceiver for the SSRC found in pkts.", "Reference": "Reverse- transforms using the AbstractFECReceiver for the SSRC found in pkts.", "NNUpdater": "Configures the {@code SsrcRewritingEngine} to rewrite an SSRC group to the target SSRC."}
{"Origin": "Sets the subtitle suffix text, and hides or displays the subtitle suffix depending on whether the text is null or not null.", "Reference": "Sets the extra info text, and hides or displays the extra info label depending on whether the text is null or not null.", "NNUpdater": "ObjectSuffix --> SuffixLength,SuffixBytes"}
{"Origin": "Key.create(webSafeString) is easier to type than new Key(webSafeString)", "Reference": "Key.create(urlSafeString) is easier to type than new Key(urlSafeString)", "NNUpdater": "Safety --"}
{"Origin": "If the key already exists, the sensitivity value will be merged.", "Reference": "Values with the same market data name and currency will be merged.", "NNUpdater": "If a key with the specified name already exists, Amazon EC2 returns an error."}
{"Origin": "In case of failure the {@link Flux} will error.", "Reference": "In case of failure the {@link CosmosContinuablePagedFlux} will error.", "NNUpdater": "Get the id of the {@link CosmosContainer}"}
{"Origin": "Test of p method, of class HMM.", "Reference": "Test of logp method, of class HMM.", "NNUpdater": "Returns the initial SearchState."}
{"Origin": "Return the location of the default deployment descriptor", "Reference": "Obtain the location of the default deployment descriptor.", "NNUpdater": "Gets the unique identifier of this deployment."}
{"Origin": "Creates a DBObject from this Shape", "Reference": "Creates a Document from this Shape", "NNUpdater": "Creates a new DB instance from a DB snapshot."}
{"Origin": "Removes a global option.", "Reference": "Removes all global options.", "NNUpdater": "Get ParamModel for long option name."}
{"Origin": "Returns an {@link InetAddress} of a client who initiated a request.", "Reference": "Returns {@link ProxiedAddresses} which were delivered through a proxy server.", "NNUpdater": "Returns all local {@link InetAddress} except the loopback address."}
{"Origin": "Return a factory for this kind of label (i.e., ).", "Reference": "Return a factory for this kind of label (i.e., {@code TaggedWord}).", "NNUpdater": "label1 and label2 in X.Y.Z-label1-lable2."}
{"Origin": "Rotate this vector the specified radians about the given rotation axis.", "Reference": "Rotate this vector the specified radians around the given rotation axis.", "NNUpdater": "Apply a rotation to quaternion rotating the given radians about the specified axis."}
{"Origin": "If {@code labels = ``abc*``}, settings with a label starting with ``abc`` are returned.", "Reference": "If {@code labelFilter = ``abc*``}, settings with a label starting with ``abc`` are returned.", "NNUpdater": "If {@code labels = ``abc*``}, settings with a label starting with ``abc`` are returned."}
{"Origin": "Returns the system's default charset.", "Reference": "Returns the default charset of this Java virtual machine.", "NNUpdater": "Shortcut for {@code new Charset(charset)}."}
{"Origin": "Sets a new job state.", "Reference": "Sends a new job state.", "NNUpdater": "Set final {@link JobState} of the given job."}
{"Origin": "Tests if this string starts with any specified prefixes.", "Reference": "Tests if this CharSequence starts with any specified prefixes.", "NNUpdater": "Starts a client."}
{"Origin": "Unsafe version of {@link #standingTrackedDevicePose}.", "Reference": "Unsafe version of {@link #trackedDevicePose}.", "NNUpdater": "Unsafe version of {@link #to_cache}."}
{"Origin": "Obtains an instance, specifying sensitivity currency.", "Reference": "Obtains an instance.", "NNUpdater": "Obtains an instance from the observation and sensitivity value, specifying the currency of the value."}
{"Origin": "Gets the value of the 'InMemory' field.", "Reference": "Gets the value of the 'inMemory' field.", "NNUpdater": "Gets the value of the 'paramName' field."}
{"Origin": "Group: common", "Reference": "Group: security", "NNUpdater": "Returns the default number of {@linkplain CommonPools#blockingTaskExecutor() blocking task executor} threads."}
{"Origin": "Obtains an instance from the specified unique name.", "Reference": "Obtains an instance from the specified name.", "NNUpdater": "Obtains the type from a unique name."}
{"Origin": "Returns whether the code is a valid/known code or not.", "Reference": "Returns whether the code is a valid/known {@code ISO 639} code or not.", "NNUpdater": "Returns the index of the {@code replica} in {@code replicas} or -1 if the {@code replica} is {@code null} or not present."}
{"Origin": "Safely sets {@link CommandOutput#multi(int)}.", "Reference": "Safely sets {@link CommandOutput#set(boolean)}.", "NNUpdater": "``String[][][]`` or ``int``) for a type reference used in an annotation parameter."}
{"Origin": "Writes a compilation unit to the disk cache.", "Reference": "Writes an entry to the cache.", "NNUpdater": "Writes the document index."}
{"Origin": "This compares the value of the identifier only.", "Reference": "This compares the type and value of the identifier only.", "NNUpdater": "Returns the id of this entry."}
{"Origin": "Sets the vault endpoint url to send HTTP requests to.", "Reference": "Sets the vault url to send HTTP requests to.", "NNUpdater": "Creates the Nagios update request to send to the cluster."}
{"Origin": "{@codesnippet com.azure.security.certificatevault.certificates.CertificateClient.recoverDeletedCertificateWithResponse#String-Context}", "Reference": "{@codesnippet com.azure.security.certificatevault.certificates.CertificateClient.beginRecoverDeletedCertificate#string}", "NNUpdater": "{@codesnippet com.azure.security.keyvault.certificates.CertificateClient.purgeDeletedCertificate#string}"}
{"Origin": "or throws a {@link com.liferay.so.NoSuchFavoriteSiteException} if it could not be found.", "Reference": "or throws a {@link NoSuchFavoriteSiteException} if it could not be found.", "NNUpdater": "Operation fails."}
{"Origin": "Defaults to 5000L (5 seconds).", "Reference": "Defaults to 5 seconds.", "NNUpdater": "Defaults to ``AUTO``."}
{"Origin": "It also re-queues the key so that the file descriptor is re-associated at the next select operation.", "Reference": "Process the polled events and re-queue the selected keys so the file descriptors are re-associated at the next select operation.", "NNUpdater": "Re-create a group instance from a textual representation."}
{"Origin": "Gets the value of the specified type.", "Reference": "Gets a value using a query.", "NNUpdater": "Gets the value of the float property."}
{"Origin": "get a copy from all member entries", "Reference": "Get a copy from all member entries.", "NNUpdater": "Get a copy of all the records with a specific tag"}
{"Origin": "Returns the (unbiased) estimate of the sample standard deviation of the values within a {@link Dataset}.", "Reference": "Returns the (unbiased) skew of all the values within a {@link Dataset}", "NNUpdater": "testStandardDeviation2"}
{"Origin": "Raises the event's class' event on the current context.", "Reference": "Raises the event's class' event on the given context.", "NNUpdater": "Returns the result of {@link EventSerializer#isEvent(Buffer, Class)} on a buffer that encodes the given event."}
{"Origin": "A is built when the JAR is created.", "Reference": "A class is built when the JAR is created.", "NNUpdater": "The main method executed when this class is run."}
{"Origin": "The comparison is based on the Unicode value of each character in the strings.", "Reference": "The comparison is based on the Unicode value of each character in the CharSequences.", "NNUpdater": "The comparison is based on the local-time and the offset."}
{"Origin": "Update a pending or active batch-processing request.", "Reference": "Updates a pending or active batch-processing job.", "NNUpdater": "and code = ?."}
{"Origin": "Checks the dirty status of the 'stmPriority' field.", "Reference": "Checks the dirty status of the 'reprUrl' field.", "NNUpdater": "Get the media type priority."}
{"Origin": "It may spin-wait for for active writer critical section code to complete.", "Reference": "It may spin-wait or for active writer critical section code to complete.", "NNUpdater": "Creates a Section, add it to this Section and returns it."}
{"Origin": "It's configured to be aligned to block, hence, it's moved to the right:", "Reference": "It's configured to be aligned to {@code 'blih'} block, hence, it's moved to the right:", "NNUpdater": "Tests when the node returns that no data was found for it, it will be moved to ignore unassigned."}
{"Origin": "Returns a range of all the push notifications devices where platform = ?.", "Reference": "Returns a range of all the push notifications devices where userId = any ?", "NNUpdater": "Returns the children push notifications entries count of this push notifications entry."}
{"Origin": "Produces a CCProcessed SemanticGraph with no extras.", "Reference": "Produces a CCProcessed SemanticGraph.", "NNUpdater": "Set the semanticRoles."}
{"Origin": "Assert that all {@linkplain ExecutionEvent execution events} contained in this {@code Events} object exactly match the provided conditions.", "Reference": "Assert that all {@linkplain Event events} contained in this {@code Events} object exactly match the provided conditions.", "NNUpdater": "Add {@link Strand} to current execution."}
{"Origin": "Returns the port that the REST server endpoint should listen on.", "Reference": "Returns the port range that the REST server endpoint should listen on.", "NNUpdater": "Returns the port range where the queryable state client proxy can listen."}
{"Origin": "Throw a , because it doesn't know how to unwrap the object.", "Reference": "Throw a {@link TemplateException}, because it doesn't know how to unwrap the object.", "NNUpdater": "Used for types where {@link ClassSanityTester} doesn't already know how to instantiate distinct values."}
{"Origin": "Set the drop target's text to either ``Remove`` or ``Cancel`` depending on the drag source.", "Reference": "Set the drop target's text to either ``Remove`` or ``Cancel`` depending on the drag item.", "NNUpdater": "This helper method should only be called by {@link VDragAndDropManager}."}
{"Origin": "Returns an instance {@link LineageDataset}.", "Reference": "Returns the {@link DatasetId} of the lineage dataset.", "NNUpdater": "Tests the {@link LineageStore#getJournalEntryIterator()}} method."}
{"Origin": "Removes counts that occured before the previous minute that finished", "Reference": "Removes counts that occurred before the previous minute that finished", "NNUpdater": "Also asserts that no errors occurred."}
{"Origin": "Maps all given field values' classes to a field type using the configured type mapping rules.", "Reference": "Maps all given field values' classes to a typeMapping object", "NNUpdater": "Return the field type for a field."}
{"Origin": "File URL shoudl be of the form {@code file:/...}.", "Reference": "File URL should be of the form {@code file:/...}.", "NNUpdater": "Get the FindBugs home directory."}
{"Origin": "Verifies resultset received to contain data classification information as set.", "Reference": "Verifies ResultSet received to contain data classification information as set.", "NNUpdater": "This method returns entire resultset with one column as a list."}
{"Origin": "**See also:** [Synthesizing text to audio](URL).", "Reference": "**See also:** [The HTTP interface](URL).", "NNUpdater": "Operation fails."}
{"Origin": "Getter for {@link #exposeOnlyRequestedHeader}", "Reference": "Getter for {@link #allowOnlyRequestedHeader}", "NNUpdater": "Add a response header to expose."}
{"Origin": "Note that both this, and {@link Polarity#maintainsTruth(NaturalLogicRelation)}} can be false.", "Reference": "Note that both this, and {@link Polarity#introducesNegation(NaturalLogicRelation)} can be false.", "NNUpdater": "Operation fails."}
{"Origin": "ContentRect is relative to chart view not the device's screen.", "Reference": "ContentRect is relative to chart view not the devide's screen.", "NNUpdater": "ContentRect is relative to chart view not the device's screen."}
{"Origin": "Removes all keys that satisfy a given predicate from the metadata of the specified {@link NamespacedEntityId}.", "Reference": "Removes all keys that satisfy a given predicate from the metadata of the specified {@link MetadataEntity}.", "NNUpdater": "Removes all keys that satisfy a given predicate from the metadata of the specified {@link NamespacedEntityId}."}
{"Origin": "Statement type is hiding in the 0 and 1 bits of the flags.", "Reference": "Statement type is hiding in the 0 and 1 and 2 bits of the flags.", "NNUpdater": "Deprecated, use getModifierStr() instead."}
{"Origin": "If the cipher is an symmetric cipher (using the same key for both encryption and decryption), you should set your key via one of the three following methods:", "Reference": "If the CipherService is a symmetric CipherService (using the same key for both encryption and decryption), you should set your key via one of the three following methods:", "NNUpdater": "Performs cryptographic operations (en/de)cryption using JCE Cipher."}
{"Origin": "Try to save the form values to the given job bean.", "Reference": "Try to save the form values to the edited bean.", "NNUpdater": "Adds the bean after the given item id."}
{"Origin": "or throws a {@link com.liferay.knowledgebase.NoSuchFolderException} if it could not be found.", "Reference": "or throws a {@link NoSuchFolderException} if it could not be found.", "NNUpdater": "Operation fails."}
{"Origin": "Build node path, parent, next, prev relation", "Reference": "Build node path and parent, next, prev relation", "NNUpdater": "Gets the parent node."}
{"Origin": "If true, applying this lexical relation to this word creates a sentence which is negated by the original sentence", "Reference": "If true, applying this lexical relation to this word creates a sentence which is entailed by the original sentence,", "NNUpdater": "Set the sentenceLocation."}
{"Origin": "Use this call to customize the log-on form.", "Reference": "Use this call to customize the login form.", "NNUpdater": "Customizes an Exchange."}
{"Origin": "Decorates {@link Service}s with the specified {@link Route}.", "Reference": "Decorates {@link HttpService}s with the specified {@link Route}.", "NNUpdater": "Decorates and binds the specified {@link ServiceWithRoutes} at multiple {@link Route}s of the default {@link VirtualHost}."}
{"Origin": "or throws a {@link com.liferay.contacts.NoSuchEntryException} if it could not be found.", "Reference": "or throws a {@link NoSuchEntryException} if it could not be found.", "NNUpdater": "Operation fails."}
{"Origin": "Map empty treatment for forwarding block to nop action.", "Reference": "Map empty treatment for routing v4 table.", "NNUpdater": "Builds a forwarding objective from the given selector, treatment and nextId."}
{"Origin": "Obtains an instance from the specified unique name.", "Reference": "Obtains an instance from the specified name.", "NNUpdater": "Obtains the type from a unique name."}
{"Origin": "Sets {@link #createoverview} field to true.", "Reference": "Sets {@link HtmlOptions#createOverview} field to true.", "NNUpdater": "Sets the {@link ValueType} for this field."}
{"Origin": "The curves themselves are provided in {@link ScenarioMarketData} using {@link CurveId} as the identifier.", "Reference": "The curves themselves are provided in {@link ScenarioMarketData} using {@link RatesCurveId} as the identifier.", "NNUpdater": "The curves themselves are provided in {@link CalculationMarketData} using {@link CurveId} as the identifier."}
{"Origin": "Goes through the tree by left-center-right (then back to root).", "Reference": "Goes through the tree by child1-child2 order (then back to root).", "NNUpdater": "Same applies to 'All'."}
{"Origin": "Suitable surface metadata can be created using {@link Surfaces#swaptionBlackExpiryTenor(String, DayCount, FixedIborSwapConvention)}.", "Reference": "Suitable surface metadata can be created using {@link Surfaces#swaptionBlackExpiryTenor(String, DayCount)}.", "NNUpdater": "Operation fails."}
{"Origin": "Fetches the current value of the property encryption key.", "Reference": "Fetches the current property encryptor.", "NNUpdater": "Set the encryptionKeySha256 property: The SHA-256 hash of the provided encryption key."}
{"Origin": "Sets the identifier of the action profile.", "Reference": "Sets the ID of the action profile.", "NNUpdater": "Sets the label"}
{"Origin": "Test affinity awareness Sql cache size property.", "Reference": "Test Partition Awareness Sql cache size property.", "NNUpdater": "Get the current awareness as list of cognitions."}
{"Origin": "Range does not align The byte range value in the request does not align with the part size specified in the corresponding initiate request.", "Reference": "Range does not alignThe byte range value in the request does not align with the part size specified in the corresponding initiate request.", "NNUpdater": "Adds {@link Align#right} and clears {@link Align#left} for the alignment of the logical table within the table actor."}
{"Origin": "Exchange Adapter on the 2nd cycle.", "Reference": "Exception from Exchange Adapter on the 2nd cycle.", "NNUpdater": "Fetches other config for the exchange adapter."}
{"Origin": "You can only call this method if the {@link #getInt getXxx} method has returned 0.", "Reference": "You only need to call this method if the {@link #getInt getXxx} method has returned 0.", "NNUpdater": "A helper method that returns {@link Long#intValue()} on the return of {@link #get(char)}, if present."}
{"Origin": "Enables the use of {@link com.google.cloud.Timestamp Timestamps} for timestamp fields in {@link DocumentSnapshot DocumentSnapshots}.", "Reference": "Specifies whether to use {@link com.google.cloud.Timestamp Timestamps} for timestamp fields in {@link DocumentSnapshot DocumentSnapshots}.", "NNUpdater": "The (in process) {@link ITransactionService}."}
{"Origin": "Add the type parameters for the executable member.", "Reference": "Add all the parameters for the executable member.", "NNUpdater": "Get the type parameters for the executable member."}
{"Origin": "Returns an SslContextFactory that should be used by a jetty server based on this SSLConfig instance, or null if SSL should not be used.", "Reference": "Returns an SslContextFactory.Server that should be used by a jetty server based on this SSLConfig instance, or null if SSL should not be used.", "NNUpdater": "Returns an SslContextFactory that should be used by a jetty server based on the specified SSLConfig param which may be null."}
{"Origin": "Converts the given item into a long value.", "Reference": "Converts the given value to a long primitive.", "NNUpdater": "Converts the evaluated expression to a string."}
{"Origin": "Action remove hop exiting this step", "Reference": "Action remove hop from this step", "NNUpdater": "Method getStepDisplayName returns the stepDisplayName of this FlowStep object."}
{"Origin": "Return that one RDFNode or throw an exception", "Reference": "RDFNode or throw an exception.", "NNUpdater": "Extracts the IRI of the resource from rdf:ID, rdf:nodeID or rdf:about attribute."}
{"Origin": "Getting Information about a Search Domain in the Amazon CloudSearch Developer Guide .", "Reference": "Amazon CloudSearch Developer Guide.", "NNUpdater": "For more information, see Sorting Results in the Amazon CloudSearch Developer Guide."}
{"Origin": "Registers a listener to be called when the primitive's status changes.", "Reference": "Registers a listener to be called when the primitive's state changes.", "NNUpdater": "Changes the status icon left to the contact name."}
{"Origin": "Sets the right border for a region of cells by manipulating the cell style of the individual cells on the right", "Reference": "Sets the right border style for a region of cells by manipulating the cell style of the individual cells on the right", "NNUpdater": "Sets the left border for a region of cells by manipulating the cell style of the individual cells on the left"}
{"Origin": "Polling operation to poll on create delete certificate operation status.", "Reference": "Polling operation to poll on create recover certificate operation status.", "NNUpdater": "The Get Create Operation Status operation returns the status of the specified create operation."}
{"Origin": "Default name used for various components.", "Reference": "Sets default Joy application name used for various components.", "NNUpdater": "Gets this component's path."}
{"Origin": "If {@code keys = ``*abc*``}, settings with a key containing ``abc`` are returned.", "Reference": "If {@code keyFilter = ``*abc*``}, settings with a key containing ``abc`` are returned.", "NNUpdater": "If {@code keys = ``*abc*``}, settings with a key containing ``abc`` are returned."}
{"Origin": "See Immutable Set Static Factory Methods for details.", "Reference": "See Unmodifiable Sets for details.", "NNUpdater": "VerificationTimes supports multiple static factory methods:"}
{"Origin": "Gets the path from a full filename, which excludes the prefix, and also excluding the final directory separator.", "Reference": "Gets the path from a full fileName, which excludes the prefix, and also excluding the final directory separator.", "NNUpdater": "Get the directory that contains the user's NodeBox library directory."}
{"Origin": "Sets each pixel in the output image to sgn*log( 1 + sgn*input(x,y)) of the input image.", "Reference": "Sets each pixel in the output image to sgn*log( val + sgn*input(x,y)) of the input image.", "NNUpdater": "Retrieves {@link InputStream} of image by URI."}
{"Origin": "Get the Date that this Token expires", "Reference": "Get the ZonedDateTime that this Token expires", "NNUpdater": "Returns when this token expires."}
{"Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}", "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveFromRangeEnd }{@code >}}", "NNUpdater": "Create an instance of {@link JAXBElement }{@code <}{@link CTStrokeChild }{@code >}}"}
{"Origin": "Finishes a drag to the given coordinate with no-op afterwards.", "Reference": "Finishes a drag to the given coordinate and executes a callback when doing so.", "NNUpdater": "Default implementation is a no-op"}
{"Origin": "Sets the current data source for this DataCommunicator.", "Reference": "Sets the current data provider for this DataCommunicator.", "NNUpdater": "Adds a {@link TypedDataGenerator} for the {@link DataCommunicator} of this Listing component."}
{"Origin": "Sets the base section paint.", "Reference": "Sets the default section paint.", "NNUpdater": "Returns the default paint."}
{"Origin": "Creates a {@code For}-comprehension of 4 Iterables.", "Reference": "Creates a {@code For}-comprehension of 4 Options.", "NNUpdater": "{@code Stream} equivalent: {@link Stream#flatMap} (using a function that produces streams, not iterables)."}
{"Origin": "Takes SPIR-V as a sequence of 32-bit words, validates it, then compiles to GLSL.", "Reference": "Takes SPIR-V as a sequence of 32-bit words, validates it, then creates the internal compiler for translating to GLSL and performing reflection.", "NNUpdater": "Test method for {@link BitArray#toArray()}."}
{"Origin": "The {@link MultimapSideInputHandlerFactory} is required to handle all multimap side inputs contained within the {@link ExecutableProcessBundleDescriptor}.", "Reference": "The {@link SideInputHandlerFactory} is required to handle all side inputs contained within the {@link ExecutableProcessBundleDescriptor}.", "NNUpdater": "Creates a {@link HashMultimap} of the given entries with {@link Seq} as values container."}
{"Origin": "Invoking this method from the transport thread is not a good idea.", "Reference": "Invoking this method from a transport thread is not a good idea.", "NNUpdater": "It is also a good idea to call {@link #close()} on the queue before calling this."}
{"Origin": "Gets the type id for a type name.", "Reference": "Gets the type for a type name.", "NNUpdater": "Gets the fieldType."}
{"Origin": "Use the given {@link Function}s to extract the values from the object under test into an array, this new array becoming the object under test.", "Reference": "Use the given {@link Function}s to extract the values from the object under test into a list, this new list becoming the object under test.", "NNUpdater": "Obtain a single bean of the given type from the application context (or ancestors), the bean becoming the object under test."}
{"Origin": "Diff a watermark based on watermark type", "Reference": "Adjust a watermark based on watermark type by diff", "NNUpdater": "Returns the output watermark,"}
{"Origin": "Get extra information for a given realm", "Reference": "Get extra information for a given provider", "NNUpdater": "Extract extra dynamic information specific for this server handle."}
{"Origin": "Sets default lifetime in seconds to be used if heuristic freshness calculation is not possible.", "Reference": "Sets default lifetime to be used if heuristic freshness calculation is not possible.", "NNUpdater": "Sets default lifetime in seconds to be used if heuristic freshness calculation is not possible."}
{"Origin": "Returns the RedeemData identified in the connected output, for either P2PKH scripts, P2PK or P2SH scripts.", "Reference": "Returns the RedeemData identified in the connected output, for either P2PKH, P2WPKH, P2PK or P2SH scripts.", "NNUpdater": "Returns the ECKey identified in the connected output, for either pay-to-address scripts or pay-to-key scripts."}
{"Origin": "This method creates a list of all properties (Field or Method) in dependency order, where dependencies are specified using the dependsUpon specifier of the Property annotation.", "Reference": "This method creates a list of all properties (field or method) in dependency order, where dependencies are specified using the dependsUpon specifier of the Property annotation.", "NNUpdater": "Add dependencies and all of their dependencies."}
{"Origin": "Determines and sets the direction that a stream, which has been place on hold by the remote party, would need to go back to after being re-activated.", "Reference": "Determines and sets the direction that a stream, which has been placed on hold by the remote party, would need to go back to after being re-activated.", "NNUpdater": "Determines and sets the direction that a stream, which has been place on hold by the remote party, would need to go back to after being re-activated."}
{"Origin": "Add the given {@link HandlerMethodArgumentResolver}s.", "Reference": "Add the given {@link HandlerMethodArgumentResolver HandlerMethodArgumentResolvers}.", "NNUpdater": "Add the given {@link HandlerMethodArgumentResolver}."}
{"Origin": "Creates {@code DatasetTrainer} with same training logic, but able to accept labels of given new type of labels.", "Reference": "Creates {@link DatasetTrainer} with same training logic, but able to accept labels of given new type of labels.", "NNUpdater": "No-op implementation of the {@link Span#addAttributes(Attributes)} method."}
{"Origin": "The time as the number of millseconds since the epoch.", "Reference": "The time as the number of milliseconds since the epoch start.", "NNUpdater": "Return number of seconds since the epoch based on the given number of seconds after midnight on this ServiceDay"}
{"Origin": "Sets up the {@link HASendService} or the {@link HAReceiveService} as appropriate depending on whether or not this service is the first in the pipeline order.", "Reference": "This implementation sets up the {@link HASendService} or the {@link HAReceiveService} as appropriate depending on whether or not this service is the first in the pipeline order.", "NNUpdater": "Invokes {@link Service#serviceAdded(ServiceConfig)}."}
{"Origin": "SlotsChurn: How frequently slots of this size are re-allocated (SlotsRecycled/SlotsAllocated)", "Reference": "SlotsChurn: A measure of how frequently slots of this size are re-allocated provided by totalAllocations/reservedSlots", "NNUpdater": "Retrieve the current list of slots in the descriptor."}
{"Origin": "Get the fileContentMD5 property: Sets the file's MD5 hash.", "Reference": "Get the contentMD5 property: Sets the file's MD5 hash.", "NNUpdater": "Returns an MD5 hash."}
{"Origin": "Decorates all {@link Service}s with the specified {@code decorator}.", "Reference": "Decorates all {@link HttpService}s with the specified {@code decorator}.", "NNUpdater": "Invokes the service method with arguments."}
{"Origin": "Add an attribute.", "Reference": "Add an property.", "NNUpdater": "Add the given attribute if value not null and value => 0."}
{"Origin": "This option allows to extend configurations in each configuration file based on location.", "Reference": "This option allows to extend configurations in each configuration file based on the karaf.home location.", "NNUpdater": "Load configurations from stored preferences"}
{"Origin": "Parses the response body into a {@link ManifestTemplate}.", "Reference": "Parses the response body into a {@link ManifestAndDigest}.", "NNUpdater": "Translates {@link BuildableManifestTemplate} to {@link Image}."}
{"Origin": "It will no longer receive navigation events.", "Reference": "It will no longer receive callbacks.", "NNUpdater": "It will no longer receive events about changes to media routes."}
{"Origin": "Returns a new {@link Partitioner.OnVNodes} based on the partition key token.", "Reference": "Returns a new {@link Partitioner.OnVirtualNodes} based on the partition key token.", "NNUpdater": "Calls {@link PartitionerServiceOld#augmentPartitionerConfig(PartitionerConfig, List)} twice in a row, with an equal descriptor."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "The {@link #getProductType() product type} must be {@link EtdProductType#OPTION} otherwise an exception will be thrown.", "Reference": "The {@link #getType() type} must be {@link EtdType#OPTION} otherwise an exception will be thrown.", "NNUpdater": "Get Produkt."}
{"Origin": "add a child to the existing node", "Reference": "Add a child to the existing node.", "NNUpdater": "Adds a child node."}
{"Origin": "Returns an offset time formed from this time and the specified offset.", "Reference": "Returns a local date-time formed from this time at the specified date.", "NNUpdater": "Sets the time Offset in seconds."}
{"Origin": "get Local video duration", "Reference": "get Local duration", "NNUpdater": "Adds video file"}
{"Origin": "Creates a new internal Jetty connector.", "Reference": "Creates a new Jetty connection factory.", "NNUpdater": "Returns the Local Port of the jetty Server."}
{"Origin": "Returns the module with the primary key or throws a {@link com.liferay.marketplace.NoSuchModuleException} if it could not be found.", "Reference": "Returns the module with the primary key or throws a {@link NoSuchModuleException} if it could not be found.", "NNUpdater": "Expected format: {@code appList: app (| app)*}"}
{"Origin": "In that case, since there is no FuncallExpression to evaluate, stack trace mechanism cannot record this call.", "Reference": "CallExpression to evaluate, stack trace mechanism cannot record this call.", "NNUpdater": "equivalent to calling trace(``out``, message)."}
{"Origin": "The {@link EcKeyCreateOptions#getKeyType() keyType} indicates the type of key to create.", "Reference": "The {@link CreateEcKeyOptions#getKeyType() keyType} indicates the type of key to create.", "NNUpdater": "Get the Type of {@link IN}."}
{"Origin": "The same as {@link #indexReference(IndexDescriptor)}, except no schema lock is taken.", "Reference": "The same as {@link #indexReference(IndexDescriptor2)}, except no schema lock is taken.", "NNUpdater": "{@code getReference().descriptor().name()}."}
{"Origin": "(Just an alias/synonym for getJaxbElement())", "Reference": "(An alias/synonym for older getJaxbElement(), but now throws exception)", "NNUpdater": "Sets the synonymText."}
{"Origin": "Setter for {@link #allowOrigins}", "Reference": "Setter for {@link #allowedOrigins}", "NNUpdater": "Set the origins to allow, e.g."}
{"Origin": "Adds many members to this action profile group.", "Reference": "Adds all members to this action profile group with default weight.", "NNUpdater": "Adds the {@link RoleAssignee} to {@code this} group."}
{"Origin": "This method performs three checks.", "Reference": "This method performs four checks.", "NNUpdater": "This method performs two checks."}
{"Origin": "This will scramble the decoded string and eventually result in an authentication Assert.failure.", "Reference": "This will scramble the decoded string and eventually result in an IllegalArgumentException.", "NNUpdater": "Assert the response decoded as a Map of String key-value pairs."}
{"Origin": "`DEPRECATED`: Maximal total size of uploaded files (in bytes)", "Reference": "`DEPRECATED`: Maximal total size of uploaded files (in bytes) [Deprecated since version VERSION]", "NNUpdater": "Size of the environment."}
{"Origin": "Specifies the text displayed by the checkbox.", "Reference": "Specifies the text displayed by the %type%.", "NNUpdater": "Create the checkbox button"}
{"Origin": "In a nullable type, get the schema for the non-nullable type.", "Reference": "If the union schema is a nullable union, get the schema for the non-nullable type.", "NNUpdater": "Create a {@link Schema} for the given type."}
{"Origin": "Gets an abstract representation of the engine's {@link Filesystem}.", "Reference": "Gets an abstract representation of the engine's {@link FileSystem}.", "NNUpdater": "Create an instance of {@link EngineType }"}
{"Origin": "Returns the user icon image with the given identifier, or null if invalid.", "Reference": "Returns the user icon image with the given identifier, or the default image if invalid.", "NNUpdater": "Returns the user identifier as the principal name."}
{"Origin": "For more information about the vault locking process,", "Reference": "For more information about the vault locking process, Amazon Glacier Vault Lock.", "NNUpdater": "For more information, see the Amazon"}
{"Origin": "Sets mBadgeScale to 1 or 0, animating if oldCount or newCount is 0 (the badge is being added or removed).", "Reference": "Sets mBadgeScale to 1 or 0, animating if wasBadged or isBadged is false (the badge is being added or removed).", "NNUpdater": "Returns the text for the badge."}
{"Origin": "Glacier completes the job.", "Reference": "DescribeJob.", "NNUpdater": "Working with Archives in Amazon Glacier in the Amazon Glacier Developer Guide ."}
{"Origin": "Returns true if the button is active and clickable.", "Reference": "Returns true if the %type% is active and clickable.", "NNUpdater": "and code = ?."}
{"Origin": "Constructor that registers all players based on the given configuration, frame and registry.", "Reference": "Registers all players based on the given configuration, frame and registry.", "NNUpdater": "Get a list of all online players in this player's party."}
{"Origin": "Check equality between a String and a char[] object.", "Reference": "Check equality between a CharSequence and a char[] object.", "NNUpdater": "byte."}
{"Origin": "Return true if this is used in type documentation (classes or interfaces).", "Reference": "Returns true if this {@code Taglet} can be used in type documentation (classes or interfaces).", "NNUpdater": "Returns a map with all documentation tags found for this scope, or {@code null} if no documentation exists."}
{"Origin": "Registers this IQ provider into given ProviderManager.", "Reference": "Registers this IQ provider into ProviderManager.", "NNUpdater": "Returns an unmodifiable collection of all IQProvider instances."}
{"Origin": "Gets the NamedView after adding in the parameters specified.", "Reference": "Gets the View after adding in the parameters specified.", "NNUpdater": "Gets the owners."}
{"Origin": "Returns a default credential for the application.", "Reference": "Returns the Application Default Credentials.", "NNUpdater": "Set the name value."}
{"Origin": "Get Catch Weight Menge in Preiseinheit.", "Reference": "Get Abgerechnet.", "NNUpdater": "Get Bestellmenge."}
{"Origin": "The {@link Callable} passed to the guasa cache, because", "Reference": "The {@link Callable} passed to the Guava cache, because", "NNUpdater": "Gets a {@link Callable} of {@link WorkflowToken} for the {@link Program}."}
{"Origin": "Returns the last sync d l object in the ordered set where companyId = ?", "Reference": "Returns the last sync d l object in the ordered set where repositoryId = ?", "NNUpdater": "Finds the gadget where companyId = ?"}
{"Origin": "Chosen bits are [8, 6, 7]", "Reference": "Chosen bits are [11, 6, 4]", "NNUpdater": "Chosen bits are [11, 6, 4]"}
{"Origin": "Method wasStarted returns true if this job was started", "Reference": "Method isStarted returns true if this underlying job has started running", "NNUpdater": "Returns true if the control code for this LocalTransaction was actually started in the PartitionExecutor"}
{"Origin": "You definitely get them more than 10% off sometimes.", "Reference": "You definitely get them more than 30% off sometimes.", "NNUpdater": "You definitely get them more than 30% off sometimes."}
{"Origin": "This month-day will be passed to the formatter {@link DateTimeFormatter#print(TemporalAccessor) print method}.", "Reference": "This month-day will be passed to the formatter {@link DateTimeFormatter#format(TemporalAccessor) print method}.", "NNUpdater": "This time will be passed to the formatter {@link DateTimeFormatter#format(TemporalAccessor) format method}."}
{"Origin": "Provides a list of all connection wrappers corresponding to a given environment.", "Reference": "Provides a list of all connection configs corresponding to a given environment.", "NNUpdater": "Provides the legacy environment's major version number."}
{"Origin": "Returns the calendar booking with the primary key or throws a {@link com.liferay.calendar.NoSuchBookingException} if it could not be found.", "Reference": "Returns the calendar booking with the primary key or throws a {@link NoSuchBookingException} if it could not be found.", "NNUpdater": "Returns the start time of this calendar booking."}
{"Origin": "If no sld file, throws an exception", "Reference": "If no sld file, throws an appropriate exception", "NNUpdater": "validates an style document."}
{"Origin": "The endpoint type.", "Reference": "The action to do.", "NNUpdater": "Gets the currently pinned Endpoint at this Endpoint."}
{"Origin": "Walk through the jdk11 directory and create a mapping, {@link #jdk11StubFiles}, from file name to the class contained with in it.", "Reference": "Walk through the jdk directory and create a mapping, {@link #jdkStubFiles}, from file name to the class contained with in it.", "NNUpdater": "Allows {@link Files#walkFileTree} to be faked in tests."}
{"Origin": "Structural Specification for more details.", "Reference": "The OWL 2 Structural Specification for more details.", "NNUpdater": "Returns the equivalent structural type."}
{"Origin": "Remove the mapping for the field name, and notify listeners about the change including the {@link EntryEventSource}.", "Reference": "Remove the mapping for the field name, and notify listeners about the change including the {@link EntriesEventSource}.", "NNUpdater": "Sets the value of the 'requestMapping' field."}
{"Origin": "Validates failover on redeploy of a @Stateful bean containing injected resource manager connection factories", "Reference": "Validates failover on redeploy of a @Stateful bean containing injected JDBC resource manager connection factories", "NNUpdater": "Extract the {@link ConnectionWatchdog} from a {@link StatefulConnection}."}
{"Origin": "Get client socket for connection.", "Reference": "Get client endpoints for connection.", "NNUpdater": "Returns the socket of this connection object."}
{"Origin": "or throws a {@link com.liferay.marketplace.NoSuchModuleException} if it could not be found.", "Reference": "or throws a {@link NoSuchModuleException} if it could not be found.", "NNUpdater": "Operation fails."}
{"Origin": "This is primarily intended for cases where the record needs to be re-transmitted with a new sequence number.", "Reference": "Used, if record needs to be re-transmitted with a new sequence number.", "NNUpdater": "Sets the (starting) time to wait before a handshake package gets re-transmitted."}
{"Origin": "Create or obtain a {@link PreparedStatement} from my pool.", "Reference": "Creates or obtains a {@link PreparedStatement} from my pool.", "NNUpdater": "Execute a SQL statement using the given parameters."}
{"Origin": "Delete file system nodes ### Functional Description: Delete nodes (room, folder, file).", "Reference": "Delete nodes ### Functional Description: Delete nodes (room, folder or file).", "NNUpdater": "Adds/deletes a file/folder."}
{"Origin": "Casts the {@code DateTime} to the same chronology as this ChronoLocalDate.", "Reference": "Casts the {@code DateTime} to {@ChronoLocalDate} with the same chronology.", "NNUpdater": "Gets this date-time {@code ChronoLocalDate}."}
{"Origin": "Returns the microblogs entry with the primary key or throws a {@link com.liferay.microblogs.NoSuchEntryException} if it could not be found.", "Reference": "Returns the microblogs entry with the primary key or throws a {@link NoSuchEntryException} if it could not be found.", "NNUpdater": "and parentMicroblogsEntryId = ?."}
{"Origin": "Returns a database node representation of the node.", "Reference": "Creates a database node copy from this node.", "NNUpdater": "Returns node title."}
{"Origin": "Get cache affinity awareness group which is compatible with the mapping.", "Reference": "Get cache Partition Awareness group which is compatible with the mapping.", "NNUpdater": "Get the current awareness as list of cognitions."}
{"Origin": "Warining: A Class object returned by this method may not work with a security manager or a signed jar file because a protection domain is not specified.", "Reference": "Warning: A Class object returned by this method may not work with a security manager or a signed jar file because a protection domain is not specified.", "NNUpdater": "If item is a (jar) file, its parent is returned."}
{"Origin": "Checks if the specified expression provides an existing permission.", "Reference": "Checks if the specified expression contains valid permissions.", "NNUpdater": "Checks if the specified expression yields an integer."}
{"Origin": "Creates a new {@link RedisSerializationContext} using a {@link SerializationPair#raw()} serialization pair.", "Reference": "Creates a new {@link RedisSerializationContext} using a {@link SerializationPair#raw() ByteBuffer} serialization pair.", "NNUpdater": "The default JSON serialization method."}
{"Origin": "The name of algorithm used to sign EDI message.", "Reference": "The algorithm used to sign EDI message.", "NNUpdater": "Gets the shift field."}
{"Origin": "Get the map of all processed certificates until now.", "Reference": "Get the set of all processed certificates until now.", "NNUpdater": "Get Verarbeitet."}
{"Origin": "Get information about a batch-processing request with a specified ID.", "Reference": "Gets information about a batch-processing job with a specified ID.", "NNUpdater": "Updates settings for the specified application."}
{"Origin": "Finds all {@link UnderFileSystemFactory} from the extensions directory and caches.", "Reference": "Finds all {@link UnderFileSystemFactory} from the extensions directory.", "NNUpdater": "Tests the {@link UnderFileSystemFactoryRegistry#find(String)} method when using a core factory."}
{"Origin": "This method choses an interface in order of preference: 1. neither loopback nor point to point 2. point to point 3. loopback", "Reference": "This method chooses an interface in order of preference: 1. neither loopback nor point to point ( prefer interfaces with dual IP support ) 2. point to point 3. loopback", "NNUpdater": "( Dynamic Point A - Dynamic Point B )"}
{"Origin": "This is measured from the bottom, that is, the quantile estimation with the level 99% corresponds to the smallest 99% observations and 1% of the observation are above that level.", "Reference": "This is measured from the bottom, that is, Thus the quantile estimation with the level 99% corresponds to the smallest 99% observations.", "NNUpdater": "Returns the smallest (``bottom``) n values in the column, Does not change the order in this column"}
{"Origin": "Creates an exception from an service id and version.", "Reference": "Creates an exception from an API id and version.", "NNUpdater": "Create an instance of {@link ServerException }"}
{"Origin": "Returns completed style ID for the child style.", "Reference": "Returns completed style identifier for the child style.", "NNUpdater": "Returns style identifier."}
{"Origin": "Generates an in-memory key for an service, used to index the app for later quick retrieval.", "Reference": "Generates an in-memory key for an API, used to index the app for later quick retrieval.", "NNUpdater": "This allows for retrieval of application definitions in the stream by index."}
{"Origin": "Execute an {@link Action} locally, returning that {@link Task} used to track it, and linking an {@link TaskListener}.", "Reference": "Execute an {@link ActionType} locally, returning that {@link Task} used to track it, and linking an {@link TaskListener}.", "NNUpdater": "Get a {@link TaskState} instance for the task."}
{"Origin": "Create new {@link BaseEvent} with {@link org.mule.runtime.api.message.Error} instance set.", "Reference": "Create new {@link CoreEvent} with {@link org.mule.runtime.api.message.Error} instance set.", "NNUpdater": "Creates a new instance of {@link org.spongepowered.api.event.message.MessageEvent}."}
{"Origin": "Returns a string representation of the specified value.", "Reference": "Returns a chopped and quoted token representation of the specified value.", "NNUpdater": "Builds a string representation of the specified value."}
{"Origin": "So, if the given {@link Quaterniond} is the identity (does not apply any additional rotation), the reflection plane will be z=0, offset by the given .", "Reference": "So, if the given {@link Quaterniondc} is the identity (does not apply any additional rotation), the reflection plane will be z=0, offset by the given .", "NNUpdater": "So, if the given {@link Quaternionf} is the identity (does not apply any additional rotation), the reflection plane will be z=0, offset by the given ."}
{"Origin": "The specified uses maps a service type name to the modules using the service type and that may or may not be present the given modules.", "Reference": "The specified services maps a service type name to the modules using the service type which may be empty if no observable module uses that service.", "NNUpdater": "Resolve the given collection of modules (by name)."}
{"Origin": "`DEPRECATED`: Customer activation code string: * valid only for types `free` and `demo` * for `pay` customers it is empty", "Reference": "`DEPRECATED`: Customer activation code string: * valid only for types `free` and `demo` * for `pay` customers it is empty [Deprecated since version VERSION]", "NNUpdater": "A {@code null} or empty (````) CharSequence will return {@code -1}."}
{"Origin": "Process a goog.forwardDeclare() call and record the specified forward declaration.", "Reference": "Marks a goog.forwardDeclare call for removal.", "NNUpdater": "TkForward can catch RsForward throws by Response."}
{"Origin": "Returns an Intent to start the full editor for the given raw contact.", "Reference": "Returns an Intent to start the compact editor for the given raw contact.", "NNUpdater": "Returns an Intent to start the fully expanded {@link ContactEditorActivity} for a new contact."}
{"Origin": "Get the DataService for the clientId", "Reference": "Get the anonymous subclass of GrpcDataService for the clientId", "NNUpdater": "Get the client for the given ClientID"}
{"Origin": "Build a response with message and status.", "Reference": "Build a response with status.", "NNUpdater": "Set the HTTP response status."}
{"Origin": "Returns the contents of the specified node.", "Reference": "Returns textual contents for the specified node.", "NNUpdater": "Returns the contents."}
{"Origin": "{@code inetAddressList} will be null and {@code throwable} will be non-null in the case of a failed DNS lookup.", "Reference": "{@code inetAddressList} will be null and {@code ioe} will be non-null in the case of a failed DNS lookup.", "NNUpdater": "A {@code null} CharSequence will return {@code null}."}
{"Origin": "Returns partition counters page identifier, page with caches in cache group sizes.", "Reference": "Returns page identifier related to page with logical cache sizes in cache group.", "NNUpdater": "Gets the result object by the specified current page number, page size, page count, sorts, filter."}
{"Origin": "After the {@link ServiceLocator} is created, we specifically do not call any more methods on it: the locator must instantiate the Immediate service without any further prompting to the locator.", "Reference": "After the {@link InstanceManager} is created, we specifically do not call any more methods on it: the locator must instantiate the Immediate service without any further prompting to the locator.", "NNUpdater": "Set Lagerort."}
{"Origin": "Adds a new tab.", "Reference": "Adds a new tab at the end.", "NNUpdater": "Adds a new tab into TabSheet with overridden caption and icon."}
{"Origin": "Gets the list of event listener delegates.", "Reference": "Gets the list of Event Handler delegates.", "NNUpdater": "Add a event watcher"}
{"Origin": "Adds the number to the provided map under the provided field name if it's should be included.", "Reference": "Adds the string value to the provided map under the provided field name, if it should be included.", "NNUpdater": "Sets the provided value to the provided path in the document."}
{"Origin": "Get language code from internal link, especially for the zh variants, will get ``wiki`` or ``zh-*``", "Reference": "Get language variant code from a Uri, especially for the zh variants, will get ``wiki`` or ``zh-*``", "NNUpdater": "Get Sprache."}
{"Origin": "Returns true if the current thread is in any way a child of a {@link LegacyCommand} thread.", "Reference": "Returns true if the given thread is in any way a child of a {@link LegacyCommand} thread.", "NNUpdater": "returns true if join thread control is started and the supplied thread is the currently active joinThread"}
{"Origin": "Obtains an instance based on the currency pair, specifying the sensitivity currency.", "Reference": "Obtains an instance, specifying sensitivity currency.", "NNUpdater": "Obtains an instance from the observation and sensitivity value, specifying the currency of the value."}
{"Origin": "Return the SQL that led to the problem.", "Reference": "Return the SQL that led to the problem (if known).", "NNUpdater": "Return the associated SQL prepared statement for the SQL JdbcTemplate."}
{"Origin": "Group: producer", "Reference": "Group: consumer", "NNUpdater": "post-processor producer -> copy producer -> inputProducer"}
{"Origin": "Weighting is a ratio from 0 to 1, where 0 disables the feature and 1 forces the same data centre if possible.", "Reference": "Weighting is a ratio from 0 to 1, where 0 disables the feature and 1 forces the same rack if possible.", "NNUpdater": "Center."}
{"Origin": "Creates query for the given queryString.", "Reference": "Queries this contact source for the given queryString.", "NNUpdater": "-D"}
{"Origin": "Get the maximum size of a text message buffer.", "Reference": "Get the maximum size of a text message buffer (for streaming writing)", "NNUpdater": "Get Mitteilung."}
{"Origin": "Sets the value of the descrption property.", "Reference": "Sets the value of the description property.", "NNUpdater": "Sets the value of the bigint property."}
{"Origin": "Extract the values of given field or property from the array's elements under test into a new array, this new array becoming the array under test with type.", "Reference": "Extract the values of given field or property from the array's elements under test into a new list, this new list of the provided type becoming the object under test.", "NNUpdater": "The new array contains all of the element of followed by all of the elements ."}
{"Origin": "Test of contextual method, of class Grades.", "Reference": "Test of contextual method, of class GradeUtil.", "NNUpdater": "Test of getDataFile method, of class Settings."}
{"Origin": "Locks existing inodes on the specified path, in the specified {@link LockMode}.", "Reference": "Locks existing inodes on the specified path, in the specified {@link LockPattern}.", "NNUpdater": "Note: We are using nested locks (a global {@link ZLock} and a local {@link #lock})."}
{"Origin": "The meta-property for the {@code weekendDays} property.", "Reference": "The meta-property for the {@code startYear} property.", "NNUpdater": "The meta-property for the {@code curveGroupName} property."}
{"Origin": "The extra code is defined in the imagej.legacy.patches package, as described in the documentation for {@link #insertMethod(String, String)}.", "Reference": "The extra code is defined in the imagej.legacy.patches package, as described in the documentation for {@link #insertNewMethod(String, String)}.", "NNUpdater": "Performs the {@link #insert(String, String, Map)} operation via Key/Value (``INSERT``)."}
{"Origin": "KafkaMetrics of sensors which use SampledStat should be synchronized on the Sensor object to allow concurrent reads and updates.", "Reference": "KafkaMetrics of sensors which use SampledStat should be synchronized on the same lock for sensor record and metric value read to allow concurrent reads and updates.", "NNUpdater": "Get or create a sensor with the given unique name and zero or more parent sensors."}
{"Origin": "Recursively sets the env variable to this pattern and all its children", "Reference": "Recursively sets the env variable to this pattern in this and in all its children", "NNUpdater": "Pattern to traverse the children of this node"}
{"Origin": "Returns the button's text's font face as default, serif, sans serif, or monospace.", "Reference": "Returns the text font face of the %type% as default, serif, sans serif, or monospace.", "NNUpdater": "Build the filament that may represent a bracket end serif."}
{"Origin": "Default implementation returns {@link ControllerResult#RESULT_CODE_NOT_SUPPORTED}.", "Reference": "Default implementation returns {@link SessionResult#RESULT_CODE_NOT_SUPPORTED}.", "NNUpdater": "The default is {@link XPathEvaluationType#STRING_RESULT}."}
{"Origin": "This caches the original file length, and throws an IOException if the output file length is different from the current input file length.", "Reference": "This uses the original file length, and throws an IOException if the output file length is different from the current input file length.", "NNUpdater": "Gets the contentLength of the file."}
{"Origin": "We should sort by height ascending and k asceding instead.", "Reference": "We should sort by height ascending and k ascending instead.", "NNUpdater": "ascending: Sort the list of results in ascending order."}
{"Origin": "This will calculate the number of required connection for routing and request messages.", "Reference": "Calculates the number of required connections for routing and request messages.", "NNUpdater": "Calculate the storage required for an image in bytes."}
{"Origin": "Returns the name of the parent skill from the Locale file", "Reference": "Returns the name of the parent skill from the LocaleManager file", "NNUpdater": "Returns a file attribute."}
{"Origin": "Sets the quorum name for operations.", "Reference": "Sets the split brain protection name for operations.", "NNUpdater": "Sets the cluster read quorum strategy."}
{"Origin": "Configure the distribution options to use.", "Reference": "Configures which distribution options to use.", "NNUpdater": "Configure the HTTP method to use."}
{"Origin": "Returns the SSL manager wrapping the SSL context and engine.", "Reference": "Returns the engine status.", "NNUpdater": "Returns the SSL manager wrapping the SSL context and engine."}
{"Origin": "Loads a new module from the given ResourceLoader and may or may not immediately scan associated directories for resources, depending on parameters.", "Reference": "Loads a new module from the given ResourceLoader and may or may not immediately scan associated directories for resources or consider it monolithic, depending on parameters.", "NNUpdater": "Define a new module to the VM."}
{"Origin": "Return the {@code HttpClient} used for {@linkplain #createAsyncRequest(URI, HttpMethod) asynchronous execution}.", "Reference": "Return the {@code CloseableHttpAsyncClient} used for {@linkplain #createAsyncRequest(URI, HttpMethod) asynchronous execution}.", "NNUpdater": "Return a {@link MutableHttpRequest} for a {@link HttpMethod#GET} request for the given URI"}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "This method subscribes the Observable emiting {@link ViewState} over time to the passed consumer.", "Reference": "This method subscribes the Observable emitting {@code ViewState} over time to the passed consumer.", "NNUpdater": "This method delegates to {@link #fast(VectorEntry.State)} with state {@link VectorEntry.State#SET}."}
{"Origin": "Make sure we can successfully create a Job Started Event.", "Reference": "Make sure we can successfully create a Job Scheduled Event.", "NNUpdater": "Test to make sure can successfully set the process id of the job."}
{"Origin": "Set the values for some metadata keys on a collection alias.", "Reference": "Set the values for some properties keys on a collection alias.", "NNUpdater": "Sets a metadata."}
{"Origin": "Register a null channel in the given BeanDefinitionRegistry.", "Reference": "Register a null channel in the application context.", "NNUpdater": "Register a TaskScheduler in the given BeanDefinitionRegistry."}
{"Origin": "property1 = value1,value2,``a quoted value``,'another quoted value'", "Reference": ": property1 = value1,value2,``a quoted value``,'another quoted value'", "NNUpdater": "Visit the {@link BlockQuoteNode}."}
{"Origin": "Call when data read from net.", "Reference": "Call when data are read from net.", "NNUpdater": "Sets .NET type name."}
{"Origin": "Return a {@link ByteArrayInputStream} over some bytes at the beginning of the data.", "Reference": "Return a {@link HandshakeMessageInput} over some bytes at the beginning of the data.", "NNUpdater": "Returns a ByteBuffer with all bytes read from the given InputStream."}
{"Origin": "Creates a new leader {@link FileSystemMaster} from a copy of the journal along with its dependencies, and returns the master registry containing that master.", "Reference": "Creates a new leader {@link FileSystemMaster} from a copy of the journal along with its dependencies, and returns the master registry and the journal system.", "NNUpdater": "Creates a new {@link DefaultFileSystemMaster} from journal."}
{"Origin": "Gets the specific ``action`` for this activity.", "Reference": "Gets the type for this activity.", "NNUpdater": "Update a specific action definition."}
{"Origin": "The official ISO-8601 standard does not define eras, however {@code ISOChronology} does.", "Reference": "The official ISO-8601 standard does not define eras, however {@code ISOChrono} does.", "NNUpdater": "The official ISO-8601 standard does not define eras, however {@code IsoChronology} does."}
{"Origin": "Creates a SingleItemSketch on the heap given a Memory.", "Reference": "Creates a SingleItemSketch on the heap given a SingleItemSketch Memory image and a seed.", "NNUpdater": "Returns a read-only Union object that wraps off-heap data of the given memory image of a sketch."}
{"Origin": "Test blob existence check.", "Reference": "Test delete of nonexistent blob.", "NNUpdater": "Test non-existence module in --add-modules"}
{"Origin": "This check is deligated to the backendmanager which is responsible for the security configuration.", "Reference": "This check is delegated to the backendmanager which is responsible for the security configuration.", "NNUpdater": "Adds new securityScan for the specific TestStep by Security Scan Type"}
{"Origin": "Creates a new block blob, or updates the content of an existing block blob.", "Reference": "Creates a new block blob.", "NNUpdater": "Creates a new block blob, or updates the content of an existing block blob."}
{"Origin": "The {@link KeyCreateOptions#getExpires() expires} and {@link", "Reference": "The {@link CreateKeyOptions#getExpiresOn() expires} and {@link", "NNUpdater": "Set the {@link LocalDateTime expires} time value."}
{"Origin": "Report the lower bound constant", "Reference": "Report the lower bound value", "NNUpdater": "Get the region."}
{"Origin": "Parses and returns a string, delimited by a space or semicolon.", "Reference": "Parses and returns a string, delimited by a semicolon or a space.", "NNUpdater": "Parses and returns a string."}
{"Origin": "Copies or downsamples the given HLLmode sketch to tgtLgK, HLL_8.", "Reference": "Copies or downsamples the given HLLmode sketch to tgtLgK, HLL_8, on the heap.", "NNUpdater": "If you do not want the given sketch to be modified use the {@link #copyBuild(DoublesSketch)}."}
{"Origin": "Read {@link DataMap} from InputStream.", "Reference": "Read JSON encoded {@link DataMap} from InputStream.", "NNUpdater": "Read the given {@link InputStream} and parse the data into a new {@link JavaType} instance."}
{"Origin": "In case the prediction was negative but should have been positive, all entries in the weight vector that correspond to non null features in the example are halfed.", "Reference": "In case the prediction was negative but should have been positive, all entries in the weight vector that correspond to non null features in the example are halved.", "NNUpdater": "Returns the number of entries in the segment that have been released."}
{"Origin": "Tests for the {@link BaseFileSystem#delete(AlluxioURI, DeleteOptions)} method.", "Reference": "Tests for the {@link BaseFileSystem#delete(AlluxioURI, DeletePOptions)} method.", "NNUpdater": "Tests the {@link FileSystemMaster#delete(AlluxioURI, DeleteOptions)} method."}
{"Origin": "Tells if this parameter declaration is varargs.", "Reference": "Tells if this variable is a varargs parameter element", "NNUpdater": "Converts array of objects to {@code List}."}
{"Origin": "Returns a newly-created decorator that decorates a {@link Service} with a new {@link CorsService} based on the properties of this builder.", "Reference": "Returns a newly-created decorator that decorates an {@link HttpService} with a new {@link CorsService} based on the properties of this builder.", "NNUpdater": "Invokes the service method with arguments."}
{"Origin": "Creates a backup of current database contents to the directory {@link Exporter#getBackupFolderPath(String)}", "Reference": "Backs up the active book to the directory {@link Exporter#getBackupFolderPath(String)}.", "NNUpdater": "snapshotId"}
{"Origin": "The provided {@link XMPPError XMPPError}.", "Reference": "The provided {@link StanzaError XMPPError}.", "NNUpdater": "Returns the name portion of a XMPP address."}
{"Origin": "Returns the StatusSelectorMenu corresponding to the given protocolProvider.", "Reference": "Returns the StatusEntry corresponding to the given protocolProvider.", "NNUpdater": "Returns the JCheckBoxMenuItem corresponding to the given status."}
{"Origin": "Creates a {@link JobSpec} or {@link URI} from the {@link AvroJobSpec} record.", "Reference": "Creates {@link JobSpec} from the {@link AvroJobSpec} record.", "NNUpdater": "Build a {@link FlowSpec} from a {@link FlowConfig}"}
{"Origin": "Inserts the given rich-text content at the position returned from {@code getAbsolutePosition(paragraphIndex, columnIndex)}.", "Reference": "Inserts the given rich-text content at the position returned from {@code getAbsolutePosition(paragraphIndex, columnPosition)}.", "NNUpdater": "Moves the item placed at position {@code fromPosition} to the position {@code toPosition}."}
{"Origin": "Gets the appropriate value from the node and sets it on the appropriate field of the pojo.", "Reference": "Gets the appropriate value from the container and sets it on the appropriate field of the pojo.", "NNUpdater": "Gets the appropriate field value from the pojo and puts it in the container at the appropriate prop name and with the appropriate indexing."}
{"Origin": "Gets the maxPassagesPerDocument.", "Reference": "Gets the maxPerDocument.", "NNUpdater": "The max number of connections per destination, see {@link HttpClient#setMaxConnectionsPerDestination(int)}"}
{"Origin": "Obtain the default query timeout that will be used for {@link java.sql.Statement Statement}s created from this connection.", "Reference": "Gets the default query timeout that will be used for {@link java.sql.Statement Statement}s created from this connection.", "NNUpdater": "Return the associated SQL prepared statement for the SQL JdbcTemplate."}
{"Origin": "Returns registrable part of the domain for the given domain name of {@code null} if given domain represents a public suffix.", "Reference": "Returns registrable part of the domain for the given domain name or {@code null} if given domain represents a public suffix.", "NNUpdater": "Returns registrable part of the domain for the given domain name or {@code null} if given domain represents a public suffix."}
{"Origin": "registerSludgeDrop | NBTTag with an ItemStack saved on it, with the weight on the ``value`` attribute, | A ValuedItem with item and value set.", "Reference": "registerSludgeDrop | NBTTag with an @Nonnull ItemStack saved on it, with the weight on the ``value`` attribute, | A ValuedItem with item and value set.", "NNUpdater": "Gets the {@link Value.Mutable} for the represented {@link ItemStack} as an {@link ItemStackSnapshot}."}
{"Origin": "NOTE:The specified database subnet group must not be associated with any DB instances.", "Reference": "The specified database subnet group must not be associated with any DB instances.", "NNUpdater": "Deletes the specified subnet."}
{"Origin": "Stop client.", "Reference": "Stop benchmark.", "NNUpdater": "Closes."}
{"Origin": "First get priority from {@link FootFlagEncoder#handlePriority(ReaderWay, int)} then evaluate wheelchair specific tags.", "Reference": "First get priority from {@link FootFlagEncoder#handlePriority(ReaderWay, Integer)} then evaluate wheelchair specific tags.", "NNUpdater": "This is determined by the {@link #paddingPresent()} flag."}
{"Origin": "Return the OperationNames available here.", "Reference": "Return the operations available here.", "NNUpdater": "Returns the IDs of the available chronologies."}
{"Origin": "Helper Method: gets Concept value of a payroll between 2 dates (Old Compatibility)", "Reference": "Helper Method: gets Concept value of a payroll between 2 dates", "NNUpdater": "Getter Parameter Value for Global Payroll Concept"}
{"Origin": "Test class file in JAR file where the entry does not correspond to a legal package name.", "Reference": "Test class files in JAR file where the entry does not correspond to a legal package name.", "NNUpdater": "Test class files in JAR file where the entry does not correspond to a legal package name."}
{"Origin": "Creates new {@link AggregationExpression} that returns the day of the month for a date as a number between 1 and 31 in the factory timezone (default UTC).", "Reference": "Creates new {@link AggregationExpression} that returns the day of the month for a date as a number between 1 and 31.", "NNUpdater": "Creates new {@link AggregationExpression} that returns the day of the month for a date as a number between 1 and 31 in the factory timezone (default UTC)."}
{"Origin": "Will accummulate limited output from the external process.", "Reference": "Will accumulate limited output from the external process.", "NNUpdater": "Set External Line ID."}
{"Origin": "Tests that the registration request servlet can process a V2 RegistrationRequest from a VERSION-beta node.", "Reference": "Tests that the registration request servlet can process a V2 RegistrationRequest from a 3.x node.", "NNUpdater": "Show the main layout."}
{"Origin": "Parse a CSV into a list of ImportedGrade objects.", "Reference": "Parse a CSV into a list of {@link ImportedRow} objects.", "NNUpdater": "Set Importiert."}
{"Origin": "If currently visiting a method, get the method's Method object", "Reference": "If currently visiting a field, get the field's Field object", "NNUpdater": "Factory method to create a new MethodNode via reflection"}
{"Origin": "Get the maximum size of a text message buffer (for streaming writing)", "Reference": "Get the maximum size of a text message buffer.", "NNUpdater": "Get Mitteilung."}
{"Origin": "Joins two sets of geometries on 'contains' or 'intersects' relationship.", "Reference": "Inner joins two sets of geometries on 'contains' or 'intersects' relationship.", "NNUpdater": "Sets the value(s) for identifier (An identifier for the person as this patient)"}
{"Origin": "There could be cases where a field is considered as optional even if it is marked as required in the schema.", "Reference": "There could be cases where a field is considered as optional even if it is marked as non-nullable in the schema.", "NNUpdater": "(as in ) or ."}
{"Origin": "Integers 0 ... n.", "Reference": "Integers 0 ... n - 1.", "NNUpdater": "Creates a sequence with the specified items."}
{"Origin": "Applications should use the {@code with(WithAdjuster)} method on the date-time object to make the adjustment passing this as the argument.", "Reference": "Applications should use the {@code with(TemporalAdjuster)} method on the date-time object to make the adjustment passing this as the argument.", "NNUpdater": "The adjustment is equivalent to using {@link DateTime#with(DateTimeField, long)} passing {@code YEAR} as the field."}
{"Origin": "All foldable conditions that fold to FALSE should have been removed by the {@link Optimizer}.", "Reference": "All foldable conditions that fold to FALSE should have been removed by the {@link Optimizer}#SimplifyCase.", "NNUpdater": "Returns the objects that have been changed."}
{"Origin": "This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the character_set_database parameter.", "Reference": "This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the parameter.", "NNUpdater": "Uses the finder cache."}
{"Origin": "Gets or creates the power level objective on the main scoreboard.", "Reference": "Gets or creates the power level objective on the main targetBoard.", "NNUpdater": "Sets is objective."}
{"Origin": "This method returns the original edge via its traversal key.", "Reference": "This method returns the original edge via its key.", "NNUpdater": "This method should execute the traversal via {@link TraversalVertexProgram}."}
{"Origin": "Gets the classpath component containing the given class.", "Reference": "Gets the base location of the given class.", "NNUpdater": "Gets the classpath component containing the given class."}
{"Origin": "testReadEvictedTuples", "Reference": "testEvictTuples", "NNUpdater": "Since the first file is pinned, it will not be evicted, so only the second file will be evicted."}
{"Origin": "Returns {@code true} if there are properties in the processConfigDef instance.", "Reference": "Returns {@code true} if there are properties in the stepConfigDef instance.", "NNUpdater": "Any value set in the stepConfigDef will be overridden by the tap local {@code #getConfigDef} instance."}
{"Origin": "Returns an ordered range of all the sync d l objects where modifiedTime > ?", "Reference": "Returns an ordered range of all the sync d l objects where repositoryId = ?", "NNUpdater": "Returns an ordered range of all the b b b servers where active = ?."}
{"Origin": "Adds a fatal exception to the message set and throws the unit as a PhaseFailedException.", "Reference": "Adds an error to the message set and throws CompilationFailedException.", "NNUpdater": "throws a NonEmptyException exception when number > 0"}
{"Origin": "Get a reference to the currently executing job, if any.", "Reference": "Get a reference to the currently job executed.", "NNUpdater": "Keeps a reference to the future executing this job."}
{"Origin": "Add a new way-point to the track.", "Reference": "Create a new track-segment with the given points.", "NNUpdater": "Stores the way in the way database."}
{"Origin": "Test of npara method, of class Exponential.", "Reference": "Test of length method, of class Exponential.", "NNUpdater": "Test of exponentialCdf method, of class ContinuousDistributions."}
{"Origin": "Otherwise, the segment is only freed and made eligible for reclamation by the GC.", "Reference": "The segment is only freed and made eligible for reclamation by the GC.", "NNUpdater": "Checks whether this memory segment has already been freed."}
{"Origin": "(Or NaN if they're all NaN.)", "Reference": "(Or NaN if no entries or they're all NaN.)", "NNUpdater": "If key does not exist, returns [noKeyValue]."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Checks whether two filenames are equal, optionally normalizing and providing control over the case-sensitivity.", "Reference": "Checks whether two fileNames are equal, optionally normalizing and providing control over the case-sensitivity.", "NNUpdater": "Checks whether two filenames are equal exactly."}
{"Origin": "and repositoryId = ?.", "Reference": "and parentFolderId = ?.", "NNUpdater": "Engine."}
{"Origin": "Returns the timestamp when the result was created.", "Reference": "Returns the timestamp when the result was created as a formatted String.", "NNUpdater": "Set the description."}
{"Origin": "Returns the first sync d l object in the ordered set where companyId = ?", "Reference": "Returns the first sync d l object in the ordered set where repositoryId = ?", "NNUpdater": "Finds the last article in the ordered set where resourcePrimKey = ?"}
{"Origin": "Returns the k b article with the primary key or throws a {@link com.liferay.knowledgebase.NoSuchArticleException} if it could not be found.", "Reference": "Returns the k b article with the primary key or throws a {@link NoSuchArticleException} if it could not be found.", "NNUpdater": "Getter of articleList."}
{"Origin": "Read one constant from the given file, the type depends on a tag byte.", "Reference": "Read one constant from the given input, the type depends on a tag byte.", "NNUpdater": "The constant value of the type if specified"}
{"Origin": "Cancels all the subscription query {@link Registration}s which are contained by this {@link SubscriptionQueryRequestTarget}.", "Reference": "Cancels all the subscription query {@link Registration}s for the given {@code context} which are contained by this {@link SubscriptionQueryRequestTarget}.", "NNUpdater": "The default subscription mode is {@link SubscriptionMode#accept_all}."}
{"Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}", "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveToRangeEnd }{@code >}}", "NNUpdater": "Create an instance of {@link JAXBElement }{@code <}{@link CTStrokeChild }{@code >}}"}
{"Origin": "Put buffer which is not used any more back to the pool.", "Reference": "Put buffer which is not used any more back to the pool or frees direct memory if pool is full.", "NNUpdater": "Releases the specified buffer to buffer pool."}
{"Origin": "If the variable was set, a configuration {@link ConfigurationEvent event} will be passed to all registered listeners.", "Reference": "If the variable was set, a CONFIGURATION {@link ConfigurationEvent event} will be passed to all registered listeners.", "NNUpdater": "Is responsible for calling {@link EventSource#onEvent(InboundEvent)} and all registered {@link EventListener} instances."}
{"Origin": "Starts with action registration.", "Reference": "route binding.", "NNUpdater": "Starts the service."}
{"Origin": "Decorates {@link Service}s under the specified directory.", "Reference": "Decorates {@link HttpService}s under the specified directory.", "NNUpdater": "Creates a new {@link CompositeServiceEntry} whose {@link Service} is bound at the specified path pattern."}
{"Origin": "However, the problem with exposing the information is that people running from an IDE can observe stale data from old class files left from a previous build of a JAR.", "Reference": "However, people running from an IDE will observe stale data from old class files left from a previous build of a JAR.", "NNUpdater": "Delete the all dependency files from a given application."}
{"Origin": "Returns {@link Ordered#HIGHEST_PRECEDENCE}.", "Reference": "Returns {@code 10000}.", "NNUpdater": "Returns the numeric type with the highest precedence."}
{"Origin": "IMPLEMENTATION NOTE - For backwards compatibility, the reader that processes this entry will accept either or name for the username property.", "Reference": "IMPLEMENTATION NOTE - For backwards compatibility, the reader that processes this entry will accept either or for the username property.", "NNUpdater": "The token verifier has no checks defined."}
{"Origin": "Sets the executor service for this client.", "Reference": "Sets the executor services for this client.", "NNUpdater": "Sets the executor service for this client."}
{"Origin": "Send request for execution via {@link #cliIo}.", "Reference": "Send request for execution via corresponding singleIo from {@link #ios} or sticky singleIo.", "NNUpdater": "When the ``also`` command is run, it will receive all of the arguments passed to this method as {@link io.bootique.cli.Cli} instance."}
{"Origin": "The {@link KeyCreateOptions#getKeyType() keyType} indicates the type of key to create.", "Reference": "The {@link CreateKeyOptions#getKeyType() keyType} indicates the type of key to create.", "NNUpdater": "Get the Type of {@link IN}."}
{"Origin": "Returns an healthy {@link ResultBuilder}", "Reference": "Returns a new {@link ResultBuilder}", "NNUpdater": "HOST_COUNT: The minimum number of healthy instances, as an absolute value."}
{"Origin": "It is up to the Authenticator implementation processing this token if an authentication attempt without an inetAddress is valid or not.", "Reference": "It is up to the Authenticator implementation processing this token if an authentication attempt without a host is valid or not.", "NNUpdater": "If this is not known, use {@link #inetAddress(InetAddress)} instead."}
{"Origin": "Lists all dataset instances in a namespace.", "Reference": "Lists all dataset instances in a namespace having specified properties.", "NNUpdater": "Removes all instances with missing values for a particular attribute from the dataset."}
{"Origin": "Code snippets for {@link BlobClientBase#startCopyFromURLWithResponse(String, Map, AccessTier, RehydratePriority,", "Reference": "Code snippets for {@link BlobClientBase#beginCopy(String, Map, AccessTier, RehydratePriority,", "NNUpdater": "Code snippets for {@link BlobClientBase#startCopyFromURLWithResponse(URL, Map, AccessTier, RehydratePriority,"}
{"Origin": "Adds a new job to the job queue to remove the specified extension from the specified namespace.", "Reference": "Adds a new job to the job queue to perform the given uninstall plan request.", "NNUpdater": "Adds the specified namespace to a temporary node."}
{"Origin": "Adds subclusters to this cluster.", "Reference": "Adds a child cluster to this cluster.", "NNUpdater": "Adds a remote member to this cluster configuration."}
{"Origin": "test re-packing of instances", "Reference": "test re-packing with same total instances", "NNUpdater": "User Guide."}
{"Origin": "Felix constructor documentation for more information on the framework configuration options.", "Reference": "Refer to the Felix constructor documentation for more information on the framework configuration options.", "NNUpdater": "Felix constructor documentation for more information on the framework configuration options."}
{"Origin": "Obtains a failure from a reason, exception and message.", "Reference": "Obtains a failure from a reason, throwable and message.", "NNUpdater": "The failure cause."}
{"Origin": "Use the {@linkplain #addPickup(Shipment, TimeWindow)} instead.", "Reference": "Use the {@linkplain #addPickup(ShipmentJob, TimeWindow)} instead.", "NNUpdater": "Operation fails."}
{"Origin": "Main method to invoke this demo about how to analyze sentiment of a text input.", "Reference": "Main method to invoke this demo about how to recognize the PII entities of an input text.", "NNUpdater": "Add the sentiment."}
{"Origin": "Obtains an instance based on discount factors and bond group.", "Reference": "Obtains an instance based on discount factors and group.", "NNUpdater": "Obtains an instance from the observation and sensitivity value."}
{"Origin": "Returns the (biased) kurtosis of all the values within a {@link PointSet} region of a {@link Dataset}", "Reference": "Returns the (biased) estimate of the sample standard deviation of the values within a {@link PointSet} region of a {@link Dataset}.", "NNUpdater": "The class of the {@link DatasetsFinder} is read from property {@link #DATASET_PROFILE_CLASS_KEY}."}
{"Origin": "Returns the ContactDetail.SubCategory corresponding to the given label.", "Reference": "Returns the SubCategory corresponding to the given label.", "NNUpdater": "Returns the corresponding UIContact."}
{"Origin": "Trading Strategy - we expect the engine to shutdown.", "Reference": "Exception from Trading Strategy - we expect the engine to shutdown.", "NNUpdater": "Trading Strategy - we expect the engine to shutdown."}
{"Origin": "Creates a new {@link IFlexible} item.", "Reference": "Creates a {@link FlexibleItemProvider}.", "NNUpdater": "Returns a object."}
{"Origin": "Returns the type with the primary key or throws a {@link com.liferay.ams.NoSuchTypeException} if it could not be found.", "Reference": "Returns the type with the primary key or throws a {@link NoSuchTypeException} if it could not be found.", "NNUpdater": "Returns the {@code Type} of the given tree, or {@code null} if the type could not be determined."}
{"Origin": "Called when a track has been selected.", "Reference": "Called when a track is selected.", "NNUpdater": "Called back when a ready key has been selected."}
{"Origin": "Get instance manager.", "Reference": "Get injection manager.", "NNUpdater": "Get Manager value"}
{"Origin": "Is has query assisted column or not.", "Reference": "Contains query assisted column or not.", "NNUpdater": "Get sharding encryptor."}
{"Origin": "This method returns the value of the database column m_monitor_item.user", "Reference": "This method returns the value of the database column m_monitor_item.username", "NNUpdater": "This method returns the value of the database column m_monitor_item.createdTime"}
{"Origin": "Loads the repository interface contained in the given {@link RepositoryConfiguration} using the given {@link ResourceLoader}.", "Reference": "Loads the repository interface contained in the given {@link RepositoryConfiguration} using the given {@link ClassLoader}.", "NNUpdater": "Engine."}
{"Origin": "If Main Branch = 0 LOCs (provisioned but never analyzed) and the ``largest long-lived branch`` is 120 LOCs, I'm expecting to consider the value 120.", "Reference": "If Main Branch = 0 LOCs (provisioned but never analyzed) and the ``largest branch`` is 120 LOCs, I'm expecting to consider the value 120.", "NNUpdater": "Creates reference to the new branch with {@code branch} from default branch."}
{"Origin": "Checks if the path is a project repo.", "Reference": "Checks if the path is a project.", "NNUpdater": "Get base."}
{"Origin": "Division by zero results in 1.", "Reference": "a/b Division by zero results in 1.", "NNUpdater": "Multiply this Vector3f by the given matrix , perform perspective division."}
{"Origin": "Returns the test blob entry with the primary key or throws a {@link com.liferay.testblob.NoSuchEntryException} if it could not be found.", "Reference": "Returns the test blob entry with the primary key or throws a {@link NoSuchEntryException} if it could not be found.", "NNUpdater": "Returns the {@code ZipEntry} for the given base entry name or {@code null} if not found."}
{"Origin": "Extract the result of given method invocation from the array's elements under test into a new array, this new array becoming the array under test.", "Reference": "Extract the result of given method invocation from the array's elements under test into a list, this list becoming the object under test.", "NNUpdater": "Extract the result of given method invocation on the Iterable's elements under test into a new list of the given class, this new List becoming the object under test."}
{"Origin": "Sets the intents.", "Reference": "Set the intents.", "NNUpdater": "Adds an intent to intents."}
{"Origin": "Obtains an instance of {@code LocalTime} from a date-time object.", "Reference": "Obtains an instance of {@code LocalTime} from a temporal object.", "NNUpdater": "Obtains an instance of {@code LocalDateTime} from a date-time object."}
{"Origin": "Returns an access log writer.", "Reference": "Returns the access log writer.", "NNUpdater": "Returns the log storage level."}
{"Origin": "Helper method to get the number of stores configured with a changelog.", "Reference": "Helper method to get the number of persistent stores.", "NNUpdater": "Store last checksum of changelog for changelog display"}
{"Origin": "See Immutable Set Static Factory Methods for details.", "Reference": "See Unmodifiable Sets for details.", "NNUpdater": "VerificationTimes supports multiple static factory methods:"}
{"Origin": "- (optional bool) when true then additional detailed metrics will be collected.", "Reference": "- (optional bool, default false) when true then additional detailed metrics will be collected.", "NNUpdater": "Required."}
{"Origin": "This method loads an image of a specified type from the given input stream.", "Reference": "This method loads a texture which is packed into the blender file.", "NNUpdater": "Loads properties from the specified {@code File}."}
{"Origin": "Returns map of {@link StatisticsKind} and statistics values obtained from specified {@link DrillStatsTable} for specified column.", "Reference": "Returns list of {@link StatisticsKind} and statistics values obtained from specified {@link DrillStatsTable} for specified column.", "NNUpdater": "Returns the statistics for the specified key id."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Find the application id from job log by matching ``application_`` pattern.", "Reference": "Find all the application ids the job log data contains by matching ``application_`` pattern.", "NNUpdater": "Uses the given application to find a {@link ConverterFactory} or, if application is null, uses the {@link Application#getCurrent()}."}
{"Origin": "Locks a policy for execution.", "Reference": "Locks a policy to prevent concurrent execution.", "NNUpdater": "Locks a resource."}
{"Origin": "Starts new ignite node and submits computation job to it.", "Reference": "Starts computation job.", "NNUpdater": "Returns the message delivery policy."}
{"Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}", "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveFromRangeEnd }{@code >}}", "NNUpdater": "Create an instance of {@link JAXBElement }{@code <}{@link CTStrokeChild }{@code >}}"}
{"Origin": "This method converts such a string into a Java type declaration like `void _main(String[])' and throws a `ClassFormatException' when the parsed type is invalid.", "Reference": "This method converts such a string into a Java type declaration like `void main(String[])' and throws a `ClassFormatException' when the parsed type is invalid.", "NNUpdater": "public class Example { public static void main(String[] args) throws Exception {"}
{"Origin": "Test of npara method, of class ChiSquareDistribution.", "Reference": "Test of length method, of class ChiSquareDistribution.", "NNUpdater": "This method returns the index of the maximum probability as provided by {@link #classDistribution(O) classDistribution(M)}."}
{"Origin": "Returns the button's text's font size, measured in sp(scale-independent pixels).", "Reference": "Returns the text font size of the %type%, measured in sp(scale-independent pixels).", "NNUpdater": "Returns the button's text's font size, measured in sp(scale-independent pixels)."}
{"Origin": "Create a {@link ClusterLoadBalancerScript} unless one exists.", "Reference": "Create a {@link ClusterSelectorScript} unless one exists.", "NNUpdater": "Sets a custom {@link ServiceLoadBalancer} to use."}
{"Origin": "(Try to) connect this marker with a suitable barline.", "Reference": "(Try to) connect this marker with a suitable StaffBarline.", "NNUpdater": "Equivalent to {@code transform(``transform``, func)}."}
{"Origin": "Get Untergruppe.", "Reference": "Get Unterregister.", "NNUpdater": "Get OrderType."}
{"Origin": "The timestamp for creation of the dialog node.", "Reference": "The timestamp for creation of the object.", "NNUpdater": "Sets the dialogNodeId."}
{"Origin": "Generates the name of the parameter token that should be populated with the value of the given attribute.", "Reference": "Generates the name of the parameter token that should be populated with the given string.", "NNUpdater": "Returns the value of the given parameter name from the current parameter map."}
{"Origin": "Fails silently if no match found.", "Reference": "Fails silently if the student does not exist.", "NNUpdater": "If no match is found -1 will be returned."}
{"Origin": "Create a {@link PooledConnectionImpl.PStmtKey} for the given arguments.", "Reference": "Creates a {@link PooledConnectionImpl.PStmtKey} for the given arguments.", "NNUpdater": "Return the pooled connection to its pool."}
{"Origin": "Returns a context that is limited to given tenant, application", "Reference": "Returns a context that is limited to given tenant and application", "NNUpdater": "Returns a context that is limited to given tenant, application"}
{"Origin": "Save cluster.", "Reference": "Save cluster advanced configuration.", "NNUpdater": "testExport"}
{"Origin": "Consume a CSS element selector (tag name, but | instead of : for namespaces, to not conflict with :pseudo selects).", "Reference": "Consume a CSS element selector (tag name, but | instead of : for namespaces (or *| for wildcard namespace), to not conflict with :pseudo selects).", "NNUpdater": "Returns pseudo-class name from simple class name."}
{"Origin": "{@link WebConstants#HYPERLINK_VIEW}: a lightweight alternative to returning the", "Reference": "{@link WebConstants#URI_VIEW}: a lightweight alternative to returning the", "NNUpdater": "Create an instance of {@link JAXBElement }{@code <}{@link P.Hyperlink }{@code >}}"}
{"Origin": "Note that the returned {@link Bits} instance MUST be consumed in order.", "Reference": "NOTE: that the returned {@link Bits} instance MUST be consumed in order.", "NNUpdater": "Note that the returned {@link Bits} instance MUST be consumed in order."}
{"Origin": "{@link Query#rxPlain()}.", "Reference": "{@link Query#__internalRxPlain()}.", "NNUpdater": "The default value is {@link MediaType#TEXT_PLAIN}."}
{"Origin": "Returns the whitelisted class names.", "Reference": "Returns the white class names.", "NNUpdater": "Find non-blacklisted type names in the given type descriptor, and add them to the set of field types."}
{"Origin": "No processing is performed on the filenames other than comparison, thus this is merely a null-safe case-sensitive equals.", "Reference": "No processing is performed on the fileNames other than comparison, thus this is merely a null-safe case-sensitive equals.", "NNUpdater": "No validation is performed on the date-time other than ensuring it is not null."}
{"Origin": "Sets the exception associated with this operation.", "Reference": "Set the exception associated with this operation.", "NNUpdater": "Sets the BaseOperationOutcome resource associated with this exception."}
{"Origin": "Finds a class or interface given its fully-qualified name.", "Reference": "Finds a type (even nested ones) given its fully-qualified name.", "NNUpdater": "If it is null, returns the class name from a fully-qualified class name."}
{"Origin": "Verifies that the username matches the user whose connections are being managed by this factory and closes the pool if this is the case; otherwise does nothing.", "Reference": "Verifies that the user name matches the user whose connections are being managed by this factory and closes the pool if this is the case; otherwise does nothing.", "NNUpdater": "UnInitializes COM library."}
{"Origin": "If it fails due to another dumb mode having started, try again until the runnable is able to complete successfully.", "Reference": "If it fails due to another dumb mode having started, try again until the runnable can complete successfully.", "NNUpdater": "Returns true if there's another TLS version to try."}
{"Origin": "Set the force running option of the command.", "Reference": "Set the output directory for this crossfold operation.", "NNUpdater": "Find the command-line arg corresponding to the parameter {@code arg}."}
{"Origin": "Convert to object types, returning null if text is null.", "Reference": "Convert to object types, returning null if text is null or empty.", "NNUpdater": "IsNullOrEmpty {is null or empty}."}
{"Origin": "Execute a requestHandler for the given exception.", "Reference": "Process the given exception.", "NNUpdater": "Return {@link IRequestHandler} for the given exception."}
{"Origin": "In quiet mode, only the errors (dependants plugins) are printed.", "Reference": "In quiet mode, only the errors (dependents plugins) are printed.", "NNUpdater": "New plugin"}
{"Origin": "Returns an unmodifiable list of all the completers.", "Reference": "Returns the completer.", "NNUpdater": "Returns an unmodifiable list of all configured instances."}
{"Origin": "Add a classpath element.", "Reference": "Add a classpath entry.", "NNUpdater": "Add the Mule libraries to the project classpath."}
{"Origin": "Create default tokenizers.", "Reference": "Create default tokenizer factories.", "NNUpdater": "Does not have to be implemented by all tokenizers."}
{"Origin": "This method will be marked private until a cross-platform working solution can be provided.", "Reference": "No public method will be available until a working cross-platform solution can be provided.", "NNUpdater": "- The platform."}
{"Origin": "Check whether the given request match the realm for which this handler is responsible", "Reference": "Check whether the given request match the provider for which this handler is responsible", "NNUpdater": "Handle a request."}
{"Origin": "Uppercases the first character.", "Reference": "Lowercases the first character.", "NNUpdater": "The offset of the first character of a document is 0."}
{"Origin": "Optimization does *not* apply to pattern:", "Reference": "Optimization applies to pattern:", "NNUpdater": "to the optimization policy."}
{"Origin": "The of all leaf nodes is returned as a list ordered by the natural left to right order of the leaves.", "Reference": "The {@code Label} of all leaf nodes is returned as a list ordered by the natural left to right order of the leaves.", "NNUpdater": "The returned list is ordered by gateway Amazon"}
{"Origin": "Returns a readable description of this task in the form 'MethodName on AdapterName with TorrentName and AllExtras'", "Reference": "Returns a readable description of this task in the form 'MethodName on AdapterName with TorrentName and", "NNUpdater": "Returns the tab bar height."}
{"Origin": "The node flavor requested, or empty if no particular flavor is specified.", "Reference": "The node flavor requested, or empty if no legacy flavor name has been used.", "NNUpdater": "Returns a flavor by name, or empty if there is no flavor with this name and it cannot be created on the fly."}
{"Origin": "Builds a safe decorated {@link Service} by wrapping the localDecorator with exceptionHandlingDecorators.", "Reference": "Builds a safe decorated {@link HttpService} by wrapping the localDecorator with exceptionHandlingDecorators.", "NNUpdater": "Invokes the service method with arguments."}
{"Origin": "If you specify both tag keys and tag values in the same request,", "Reference": "If you specify both tag keys and tag values in the same request, Amazon", "NNUpdater": "Returns a tag or attribute name."}
{"Origin": "Gets the value of the 'RowKey' field.", "Reference": "Gets the value of the 'rowKey' field.", "NNUpdater": "Gets the row key for a row object."}
{"Origin": "Get the bibtex field name used to extension to this file type.", "Reference": "Get the bibtex field name used for this file type.", "NNUpdater": "To do this, the field specified by the key file will be searched for the provided file for every {@link BibEntry} in the database."}
{"Origin": "LUCENE-1468: once we create an output, we should see it in the dir listing and be able to open it with openInput.", "Reference": "LUCENE-1468: once we create an output, we should see it in the dir listing.", "NNUpdater": "Helper method to take care of the business needed after an ``open-type mustache`` (openBlock or openInverse)"}
{"Origin": "Getter for {@link #exposeHeaders}", "Reference": "Getter for {@link #allowHeaders}", "NNUpdater": "Getter Parameter Value for D-U-N-S"}
{"Origin": "Test to make sure command args are limitted to 10,000 characters.", "Reference": "Test to make sure command args are limited to 10,000 characters.", "NNUpdater": "Make sure we can't set commands with duplicates."}
{"Origin": "Access Control Using AWS Identity and Access Management (IAM) .", "Reference": "For more information, see Access Control Using AWS Identity and Access Management (IAM).", "NNUpdater": "Access Management (IAM) user account."}
{"Origin": "The returned controller will instantiate new processing component instances for each processing request and will not perform any caching of the processing results.", "Reference": "The returned controller will instantiate new processing component instances for each processing request.", "NNUpdater": "Collects a ``new`` token."}
{"Origin": "Transform to a SurfaceConfiguration object with cameraId, image format and size info", "Reference": "Transform to a SurfaceConfig object with cameraId, image format and size info", "NNUpdater": "Get the filters value."}
{"Origin": "Gets the value of the cryptAlgorithmSid property.", "Reference": "Gets the value of the hashValue property.", "NNUpdater": "Gets the IPv4 node SID of the router."}
{"Origin": "Set a default timeout for {@link CuratorZookeeperClient#close() }.", "Reference": "Set a timeout for {@link CuratorZookeeperClient#close(int)} }.", "NNUpdater": "Returns a new unauthenticated zookeeper client connected to the in-process zookeeper server with a custom {@code sessionTimeout}."}
{"Origin": "If not explicitly configured with an annotation, this value will be used.", "Reference": "If not explicitly configured with an annotation, or on a method element, this value will be used.", "NNUpdater": "If not explicitly configured, the default is an indefinite timeout."}
{"Origin": "It may return null if the security is not supported by QR code generator nor scanner.", "Reference": "It may return null if the security is not supported by QR code scanner.", "NNUpdater": "Used for the QR code scanner in DeviceSettingsFragment."}
{"Origin": "Closes the Lucene index searcher for this index.", "Reference": "Closes the index searcher for this index.", "NNUpdater": "Returns an Analyzer to be used when indexing."}
{"Origin": "Returns the partition data directory.", "Reference": "Returns the compaction configuration.", "NNUpdater": "Sets the system partition group."}
{"Origin": "Verify that duplicate exported packages are detected.", "Reference": "Verify that duplicate requires are detected.", "NNUpdater": "Test remove duplicate."}
{"Origin": "Return a name/value string suitable for sending in a ``Cookie`` header as defined in RFC 2109 for backward compatibility with cookie version 0", "Reference": "Return a name/value string suitable for sending in a {@code ``Cookie``} header as defined in RFC 2109 for backward compatibility with cookie version 0", "NNUpdater": "Test rejection of Set-Cookie header."}
{"Origin": "Returns whether the code is a valid/known code or not.", "Reference": "Returns whether the code is a valid/known {@code ISO 639} code or not.", "NNUpdater": "Returns the index of the {@code replica} in {@code replicas} or -1 if the {@code replica} is {@code null} or not present."}
{"Origin": "Wait for this task to meet the expected number of commits as defined by {@code expectedCommits}.", "Reference": "Wait up to the specified timeout for this task to meet the expected number of commits as defined by {@code expectedCommits}.", "NNUpdater": "Commits the transaction."}
{"Origin": "The timestamp for the last update to the entity value.", "Reference": "The timestamp for the most recent update to the object.", "NNUpdater": "Update the value of the timestamp in with ordered semantics."}
{"Origin": "This is the class name without the package prefix by default.", "Reference": "This is the class name without the package prefix by default, never null", "NNUpdater": "Returns the package name without the class."}
{"Origin": "Elements of a block must at least extend {@link Node} and implement {@link VoidElement}.", "Reference": "Elements of a block must at least extend {@link Node}.", "NNUpdater": "Assert that a collection has elements; that is, it must not be {@code null} and must have at least one element."}
{"Origin": "The option is a: type.", "Reference": "The option will be converted to a type.", "NNUpdater": "Returns the {@link OptionsBase} class the defines the given option, null if the option isn't recognized."}
{"Origin": "Shuts down the managed channel for given key.", "Reference": "Shuts down the managed channel.", "NNUpdater": "Shuts down the request worker."}
{"Origin": "{@code throwable} will be null in the case of a successful attempt to execute the call.", "Reference": "{@code ioe} will be null in the case of a successful attempt to execute the call.", "NNUpdater": "Note, that when your last remote call is unsuccessful, the mResult will still have the same value like the last successful call (or null, if no call was successful)."}
{"Origin": "Returns an ordered range of all the sync d l objects where parentFolderId = ?.", "Reference": "Returns an ordered range of all the sync d l objects where modifiedTime > ?", "NNUpdater": "Returns an ordered range of all the b b b servers where active = ?."}
{"Origin": "Parses the WSDL file in order to validate the service, port and operation, to get the SOAP Action (if defined) and to check if the operation requires input parameters or not.", "Reference": "Resolves the WSDL file in order to validate the service, port and operation, to get the SOAP Action (if defined) and to check if the operation requires input parameters or not.", "NNUpdater": "Get the SOAPBinding style for the specified WSDL Port."}
{"Origin": "Return true if the given CmsTreeItem or its children is selected.", "Reference": "Return true if at least one child of the given tree item is selected.", "NNUpdater": "Returns the selected item of this menu."}
{"Origin": "Adds a config file to the set of ``active`` config files listed in the metadata", "Reference": "Adds a file to the set of files to delete listed in the metadata", "NNUpdater": "Sets the configSets."}
{"Origin": "Returns if the given type has {@link ITokenTypeAttribute#TF_SEPARATOR_DOCUMENT} set.", "Reference": "Returns if the given type has {@link ITokenizer#TF_SEPARATOR_DOCUMENT} set.", "NNUpdater": "For example, a {@code List} return type can be specified as {@code ofType(new TypeDescriptor>(){})}."}
{"Origin": "Get RADIUS Configuration ### Functional Description: Retrieve RADIUS configuration.", "Reference": "Get RADIUS configuration ### Functional Description: Retrieve a RADIUS configuration.", "NNUpdater": "Extracts the RADIUS packet from a packet sent by the supplicant."}
{"Origin": "H2O Frame is the ``backing`` data structure behind CheckpointedDrm.", "Reference": "Frame is the backing data structure behind CheckpointedDrm.", "NNUpdater": "If {@link OnDrmConfigHelper} is registered, it will be called during preparation to allow configuration of the DRM properties before opening the DRM session."}
{"Origin": "Parses the 'Responses' annotation attachment and build swagger operation.", "Reference": "Parses the 'Responses' annotation attachment and build openApi operation.", "NNUpdater": "Set Anlage."}
{"Origin": "The {@link RsaKeyCreateOptions} is required.", "Reference": "The {@link CreateRsaKeyOptions} is required.", "NNUpdater": "The {@link RsaKeyCreateOptions#getKeySize() keySize} can be optionally specified."}
{"Origin": "Construct a {@link CxxLink} rule that builds a native linkable from top-level input objects and a dependency tree of {@link NativeLinkable} dependencies.", "Reference": "Construct a {@link CxxLink} rule that builds a native linkable from top-level input objects and a dependency tree of {@link NativeLinkableGroup} dependencies.", "NNUpdater": "Returns our {@link #getBuildDeps()}, limited to the subset of those which are {@link NativeLinkable}."}
{"Origin": "TransactionService, TargetedSweepFollower)} method before any writes can be made to the sweep queue, or before the background sweep job can run.", "Reference": "TargetedSweepFollower)} method before any writes can be made to the sweep queue, or before the background sweep job can run.", "NNUpdater": "Performs energy checks and a time-dependant filtering"}
{"Origin": "Return a {@link JettyRemoteRepositoryManager} for talking to the {@link NanoSparqlServer} instance associated with an {@link HAGlue} interface.", "Reference": "Return a {@link RemoteRepositoryManager} for talking to the {@link NanoSparqlServer} instance associated with an {@link HAGlue} interface.", "NNUpdater": "Operation fails."}
{"Origin": "Note that the saved system properties do not include the ones set by sun.misc.Version.init().", "Reference": "Note that the saved system properties do not include the ones set by java.lang.VersionProps.init().", "NNUpdater": "Furthermore, you should use the proxied receiver object immediately for one read or write access via a sun.misc.Unsafe method and not store it anywhere."}
{"Origin": "Transform a nullable value into an observable with 0 or 1 element.", "Reference": "Transform a nullable value into a Maybe", "NNUpdater": "Ensures that if the current request isn't nullable, then each contribution is also not nullable."}
{"Origin": "Gets the list of {@link DeletedSecret deletedSecrets} on this page.", "Reference": "Gets the iterable stream of {@link DeletedSecret deletedSecrets} on this page.", "NNUpdater": "The list deleted secrets operation returns the secrets that have been deleted for a vault enabled for soft-delete."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Retrieves the pid stored in the {@link CommandSession} or passed as an argument.", "Reference": "Retrieves the pid stored in the {@link Session} or passed as an argument.", "NNUpdater": "instance.name and factory.name are injected too."}
{"Origin": "Perform the tests of this quick start using the SecurityContextAssociation API to set the desired Principal.", "Reference": "Perform the tests of this quick start using a thread local in the client-side interceptor to set the desired principal name.", "NNUpdater": "Sets the user name."}
{"Origin": "Fetches the leader index metadata and history UUIDs for leader index shards from the remote cluster.", "Reference": "Fetches the remote cluster state, leader index metadata, and history UUIDs for leader index shards from the remote cluster.", "NNUpdater": "Returns the leader's global index."}
{"Origin": "Returns the default SelectorProvider.", "Reference": "Returns the default SelectorProvider implementation.", "NNUpdater": "Returns the IO controller."}
{"Origin": "This factory creates a {@code ZonedDateTime} from a date-time and time-zone.", "Reference": "Obtains an instance of {@code ZonedDateTime} from a local date-time.", "NNUpdater": "Checks if this date-time is equal to another date-time."}
{"Origin": "Saves locale to HTTP session.", "Reference": "Saves Locale to HTTP session.", "NNUpdater": "The locale is set equal to the session's locale."}
{"Origin": "Returns an immutable set containing zero elements.", "Reference": "Returns an unmodifiable set containing zero elements.", "NNUpdater": "Gets an {@link ImmutableSet} of {@link Value.Immutable}s for the block at the given location."}
{"Origin": "The timestamp for creation of the entity value.", "Reference": "The timestamp for creation of the object.", "NNUpdater": "Get the timestamp for when this {@code ReportEntry} was created."}
{"Origin": "Set Zahlwert.", "Reference": "Set Eingaberegister.", "NNUpdater": "Set Eingabegruppe."}
{"Origin": "Looks up from {@link ServicesInjector}.", "Reference": "Looks up from {@link ServiceInjector}.", "NNUpdater": "Specifies {@link jodd.madvoc.injector.RequestScopeInjector request scope injector} configuration."}
{"Origin": "Returns the query.", "Reference": "Returns the query consistency level.", "NNUpdater": "-D"}
{"Origin": "Clears the render thread for this component; call at the last opportunity before thread destruction", "Reference": "Clears the render thread for this component.", "NNUpdater": "Must not be called from a thread that is not the query thread, because this class uses a"}
{"Origin": "Clears global cache for the specified {@link IconData}.", "Reference": "Clears global cache for the specified {@link IconSource}.", "NNUpdater": "Tests that a fetched icon is added to the cache, and that the {@link GraphicCache#clearCache()} method correctly clears the cache."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "{@codesnippet com.azure.storage.blob.specialized.BlobClientBase.setHTTPHeaders#BlobHttpHeaders}", "Reference": "{@codesnippet com.azure.storage.blob.specialized.BlobClientBase.setHttpHeaders#BlobHttpHeaders}", "NNUpdater": "{@codesnippet com.azure.storage.blob.specialized.BlobClientBase.Builder.buildClient}"}
{"Origin": "Transform the results into a LinkedHashMap with abstract files.", "Reference": "Transform the results into a LinkedHashMap with result files.", "NNUpdater": "Returns LinkedHashMap with cloned values."}
{"Origin": "Sets the Script.", "Reference": "Sets the paramConsolescript.", "NNUpdater": "Set Skript."}
{"Origin": "Compares the specified item.", "Reference": "Compares the specified name.", "NNUpdater": "Compares the values in with the values in ."}
{"Origin": "Validate the input, in this case asserting that the backoff factor is positive (>= 0).", "Reference": "Validate the input, in this case asserting that the backoff factor is strictly positive (>= 1).", "NNUpdater": "Validate the input document collection."}
{"Origin": "Default value is {@code Integer.MAX_VALUE}, meaning that it's non-ordered.", "Reference": "The default value is {@code Ordered.LOWEST_PRECEDENCE}, meaning non-ordered.", "NNUpdater": "If the count would exceed {@link Long#MAX_VALUE} then the result is {@link Long#MAX_VALUE}."}
{"Origin": "Configures SSL or TLS of the default {@link VirtualHost} with an auto-generated self-signed certificate.", "Reference": "Configures SSL or TLS of the {@link Server} with an auto-generated self-signed certificate.", "NNUpdater": "Create a Listener."}
{"Origin": "Set the {@link RecordMessageConverter} to use.", "Reference": "Set the {@link MessageConverter} to use.", "NNUpdater": "Set the {@link RecordMessageConverter} to use."}
{"Origin": "Returns true if field execTime is set (has been assigned a value) and false otherwise", "Reference": "Returns true if field startTime is set (has been assigned a value) and false otherwise", "NNUpdater": "Returns true if field eB is set (has been assigned a value) and false otherwise"}
{"Origin": "Computes the average for each pixel across all bands in the {@link Planar} image.", "Reference": "Computes the average for each pixel across selected bands in the {@link Planar} image.", "NNUpdater": "Computes the average for each pixel across all bands in the {@link Planar} image."}
{"Origin": "Returns all users, or users from a specified database.", "Reference": "Returns all users, or users that have permissions for a specific database.", "NNUpdater": "Returns all available users."}
{"Origin": "If it runs out of a transaction, after the execution you will still be out of tx.", "Reference": "If the DB does not have an active transaction, after the execution you will still be out of tx.", "NNUpdater": "Check out the node and add it to the Set of checked out nodes ensureCheckout"}
{"Origin": "Resolve default name for a given reference type.", "Reference": "Resolve default reference for a given reference type.", "NNUpdater": "Resolves a simple name as a type."}
{"Origin": "Subscribe to future updates and be notified of any existing ssrc associations.", "Reference": "Subscribe to future updates and be notified of any existing SSRC associations.", "NNUpdater": "Configures the {@code SsrcRewritingEngine} to rewrite an SSRC group to the target SSRC."}
{"Origin": "Returns the current navigation URI.", "Reference": "Returns the current request URI.", "NNUpdater": "Returns the current root uri."}
{"Origin": "The candidate collection can be used for speculation, although at present it would break LOCAL_QUORUM and EACH_QUORUM to do so without further filtering", "Reference": "The candidate collection can be used for speculation, although at present it would break EACH_QUORUM to do so without further filtering", "NNUpdater": "Returns the cluster read quorum strategy."}
{"Origin": "NOTE: This method is meaningless unless you explicitly provide paths when constructing this instance", "Reference": "NOTE: This method is meaningless in SSLTestConfig.", "NNUpdater": "ResourceSets that represent available resources."}
{"Origin": "Set up both primary toolbar for navigation and search, and secondary toolbar for master switch.", "Reference": "Set up primary toolbar for navigation and search", "NNUpdater": "Adds elements to the tool bar."}
{"Origin": "Returns a new Task that, when this task completes normally, is executed using the supplied Scheduler, with this task's result as the argument to the supplied function.", "Reference": "Returns a new Task that, when this task completes normally, is executed using the supplied Executor, with this task's result as the argument to the supplied function.", "NNUpdater": "Returns a new Task that, when this task completes normally, is executed using the default Scheduler."}
{"Origin": "Returns the width of the space character.", "Reference": "Returns the x-advance of the space character.", "NNUpdater": "Returns the width of the specified codepoint."}
{"Origin": "Returns the specified codepoints as value.", "Reference": "Returns the specified characters as sequence of strings.", "NNUpdater": "Returns an array with all codepoints."}
{"Origin": "Adds one member to this action profile group.", "Reference": "Adds one member to this action profile group with default weight.", "NNUpdater": "Adds the {@link RoleAssignee} to {@code this} group."}
{"Origin": "Set the exclude filter file", "Reference": "Set the baseline bugs file", "NNUpdater": "Create an exclude filter based on the supplied tag expressions."}
{"Origin": "Retrieves the GCM registration token.", "Reference": "Retrieves the FCM registration token.", "NNUpdater": "Retrieves the GCM registration token."}
{"Origin": "If {@link ConfigurationSetting#getETag() etag} is specified, the configuration value is updated if the current setting's etag matches.", "Reference": "If {@link ConfigurationSetting#getETag() ETag} is specified, the configuration value is updated if the current setting's ETag matches.", "NNUpdater": "If {@link ConfigurationSetting#getETag() etag} is specified, the configuration value is updated if the current setting's etag matches."}
{"Origin": "This is why there is not a set method for the egBlockLevelElts property.", "Reference": "This is why there is not a set method for the content property.", "NNUpdater": "This is why there is not a set method for the egBlockLevelElts property."}
{"Origin": "Casts the {@code DateTime} to {@ChronoOffsetDateTime} with the same chronology.", "Reference": "Casts the {@code DateTime} to {@code ChronoOffsetDateTime} with the same chronology.", "NNUpdater": "Returns a new {@code ChronoLocalDateTime} with the {@code date} and {@code time}."}
{"Origin": "Main method to invoke this demo about how to extract key phrases of a text input.", "Reference": "Main method to invoke this demo about how to extract the key phrases of an input text.", "NNUpdater": "Starts the application."}
{"Origin": "Return the normalized load for the host.", "Reference": "Return the normalized availability for the host.", "NNUpdater": "Return the optimized Value of {@code value}."}
{"Origin": "Add insert optimize result uint.", "Reference": "Add insert optimize result unit.", "NNUpdater": "Sets true if conflict between int and uInt."}
{"Origin": "Returns the primitive management service.", "Reference": "Returns the primitive thread factory.", "NNUpdater": "Returns the primitives service."}
{"Origin": "Counts entries in the queue with the specified status for each specified component uuid.", "Reference": "Counts entries in the queue with the specified status for each specified main component uuid.", "NNUpdater": "Registers an address for the contact with the provided UUID."}
{"Origin": "Returns an array containing all of the instructions in this list.", "Reference": "Returns an array containing all the instructions in this list.", "NNUpdater": "Returns a list containing all the viewes of this table."}
{"Origin": "Simply create some instance of Direct Byte Buffer and try to get declared constructor.", "Reference": "Simply create some instance of direct Byte Buffer and try to get it's class declared constructor.", "NNUpdater": "Returns the IO buffer."}
{"Origin": "Return the topicPartitions for this endpoint.", "Reference": "Set the topicPartitions to use.", "NNUpdater": "Register the TopicPartitions with the proxy."}
{"Origin": "The map has weak keys so it can be expunged when the target class is GC'ed/unloaded.", "Reference": "The map has weak keys so it can be expunged when the caller is GC'ed/unloaded.", "NNUpdater": "Returns an iterable containing all combinations weakKeys and weakValues."}
{"Origin": "Tests intersecting a non-empty list with iteself.", "Reference": "Tests intersecting a non-empty list with itself.", "NNUpdater": "Constructs a non empty list from the given elements."}
{"Origin": "Currently only HTTP live streaming data URI's embedded with timed ID3 tags generates {@link TimedMetaData2}.", "Reference": "Currently only HTTP live streaming data URI's embedded with timed ID3 tags generates {@link TimedMetaData}.", "NNUpdater": "Currently only HTTP live streaming data URI's embedded with timed ID3 tags generates {@link TimedMetaData2}."}
{"Origin": "Get order by.", "Reference": "Get order by segment.", "NNUpdater": "Get Auftrag."}
{"Origin": "Gets the Chemical Oxidizer Recipe for the ItemStackInput in the parameters.", "Reference": "Gets the Chemical Oxidizer Recipe for the ItemStack in the parameters.", "NNUpdater": "Gets the Chemical Infuser Recipe of the ChemicalPairInput in the parameters."}
{"Origin": "Synchronously send a request and obtain the response.", "Reference": "Sends the request and obtain a response.", "NNUpdater": "Sends a request to a group."}
{"Origin": "Standard getter for the leftwardLabel String for this RelationshipType", "Reference": "Standard getter for the leftwardType String for this RelationshipType", "NNUpdater": "Sets the value(s) for identifier (An identifier for the person as this patient)"}
{"Origin": "Register a descriptor by name.", "Reference": "Register a named descriptor by name.", "NNUpdater": "Finds a descriptor by their {@link Descriptor#getId()}."}
{"Origin": "Match closeness is calculated as the total number of matched source to destination tokens / the total number of source and destination tokens.", "Reference": "Match closeness is calculated as the total number of matched source to destination tokens * the weight that the order of properties are matched / the total number of source and destination tokens.", "NNUpdater": "Returns the username."}
{"Origin": "Create an instance of {@link JAXBElement }{@code <}{@link CTMarkupRange }{@code >}}", "Reference": "Create an instance of {@link JAXBElement }{@code <}{@link CTMoveToRangeEnd }{@code >}}", "NNUpdater": "Create an instance of {@link JAXBElement }{@code <}{@link CTStrokeChild }{@code >}}"}
{"Origin": "The start within a native image heap section (e.g., read-only or writable).", "Reference": "Otherwise, this returns the offset of the object within a native image section (e.g., read-only or writable).", "NNUpdater": "Operation fails."}
{"Origin": "Return a new {@link Tags} instance by merging this collection and the specific key/value pairs.", "Reference": "Return a new {@code Tags} instance by merging this collection and the specified key/value pairs.", "NNUpdater": "Populate tags from key/value pairs"}
{"Origin": "Typically used for RPCs at best efforts (e.g., async cache).", "Reference": "This method is typically used for RPCs providing best efforts (e.g., async cache).", "NNUpdater": "Increments the counter of set attribute RPCs."}
{"Origin": "Update the start and end points of the line.", "Reference": "Alter the start and end.", "NNUpdater": "Construct a LineString based on external end-points and compacted int version."}
{"Origin": "Open a new file for data matching a schema.", "Reference": "Open a new file for data matching a schema with a random sync.", "NNUpdater": "Given a data schema, remove data tables that are not compatible with this data schema."}
{"Origin": "Creates new {@link AggregationExpression} that returns the minute portion of a date as a number between 0 and 59 in the factory timezone (default UTC).", "Reference": "Creates new {@link AggregationExpression} that returns the minute portion of a date as a number between 0 and 59.", "NNUpdater": "Creates new {@link AggregationExpression} that returns the minute portion of a date as a number between 0 and 59 in the factory timezone (default UTC)."}
{"Origin": "Returns the rfs name plus the default file name.", "Reference": "Returns the real file system name plus the default file name.", "NNUpdater": "Reads a file with the given name from the class loader and returns the file content."}
{"Origin": "Returns a string representation of this object; useful for testing and debugging.", "Reference": "Returns a string representation of this object.", "NNUpdater": "This returns a representation of the node, suitable for debugging."}
{"Origin": "Get Account Sign.", "Reference": "Get Kontovorzeichen.", "NNUpdater": "Get Konto."}
{"Origin": "Complexity: 6 (2 of which emulated) trigonometric functions.", "Reference": "Complexity: 6 trigonometric functions.", "NNUpdater": "The complexity constant C. (default 1)"}
{"Origin": "Sets the value of the pubBrowser property.", "Reference": "Sets the value of the target property.", "NNUpdater": "Sets the value of the bigint property."}
{"Origin": "This will open a new one {@link Session} if it hasn't been opened before", "Reference": "This will open a new one Session if it hasn't been opened before", "NNUpdater": "This will open a new one {@link Session} if it hasn't been opened before"}
{"Origin": "Sets the top border for a region of cells by manipulating the cell style of the individual cells on the top", "Reference": "Sets the top border style for a region of cells by manipulating the cell style of the individual cells on the top", "NNUpdater": "Sets the left border for a region of cells by manipulating the cell style of the individual cells on the left"}
{"Origin": "Is the counter valid for usage?", "Reference": "Is the counter active for usage?", "NNUpdater": "usage."}
{"Origin": "or throws a {@link com.liferay.calendar.NoSuchCalendarException} if it could not be found.", "Reference": "or throws a {@link NoSuchCalendarException} if it could not be found.", "NNUpdater": "Returns the {@link CalendarConstraints} in use by this {@link MaterialCalendar}."}
{"Origin": "Returns the defined response scheduler.", "Reference": "Returns the currently configured token.", "NNUpdater": "Set Ablaufsteuerung."}
{"Origin": "Returns a sampler, given a rate expressed as a percentage.", "Reference": "Returns a sampler, given a probability expressed as a percentage.", "NNUpdater": "Records a failed call and checks if the thresholds are exceeded."}
{"Origin": "Verify that a named subquery exists for each INCLUDE.", "Reference": "Verify that a named subquery of solution set exists for each INCLUDE.", "NNUpdater": "Verify that we use breadcrumb path for both #include and #include ``x/y.h`` in C and C++ (bug REF)"}
{"Origin": "A new {@link EventContext} is used instead of the existing instance referenced by the existing {@link BaseEvent}.", "Reference": "A new {@link EventContext} is used instead of the existing instance referenced by the existing {@link CoreEvent}.", "NNUpdater": "But ONLY if RequestContext.setEvent() is used."}
{"Origin": "Checks and adjusts the market data names.", "Reference": "Checks and adjusts the parameter metadata values.", "NNUpdater": "Gets the source of observable market data."}
