{"SampleId": 5075805, "Origin": "Save basic clusters.", "Reference": "Save cluster basic configuration.", "LLMCandidates": ["Save basic clusters.", "Save basic clusters. \n\nExplanation: The method signature and variable names have not changed, so no changes were made in the Javadoc comment to reflect these changes. However, the original comment is still applicable for this new version of the code as it describes the behavior of this endpoint which remains unchanged. So, we keep it as it is.", "Save basic clusters. The endpoint now only updates basic clusters without any API operation value. \n\nNote that this change does not affect the functionality of the method itself as it remains unaltered in terms of its implementation. It is solely for documentation purposes and adheres to a more minimalist Javadoc style.", "Save basic clusters.\" \n\n(No changes made to this method's Javadoc comment since there were no significant alterations in its functionality compared to the original code.)", "Save clusters."]}
{"SampleId": 668963, "Origin": "Configure a sslConfig for the server using the legacy configuration", "Reference": "Configure a SSLConfig.Builder for the server using the legacy configuration", "LLMCandidates": ["Configure a SSLConfig for the server using the legacy configuration with new builder pattern", "Configures a SSLConfig for the server using legacy configuration with SSLConfig builder.", "Configure a sslConfig for the server using the legacy configuration but with SSLConfig.Builder instead of SSLConfig.", "Configure a SSLConfig for the server using the legacy configuration, but now it builds the SSLConfig instead of directly configuring it. The new method takes an instance of SSLConfig.Builder and populates its properties based on values from DistributionConfig. This allows better control over the resulting SSLConfig object's state and more efficient memory usage.", "Configure a SSLConfig for the server using the legacy configuration but with support for builder pattern allowing more flexibility and chaining configurations. The method now accepts an instance of `SSLConfig.Builder` instead of `SSLConfig`."]}
{"SampleId": 5425047, "Origin": "If the wrapping fails,\nthen null is returned.", "Reference": "If wrapping fails, returns null.", "LLMCandidates": ["The function wraps an object into a JSONObject or JSONArray, preserving its type if it's one of these types, or transforming to one of them when possible. If the wrapping fails for any reason (such as incompatible classes), null is returned instead.", "The method `wrap` is modified to take an object as parameter and checks if it's a JSONArray or JSONObject instance directly returning the object itself. If the input object equals NULL, return NULL. It then tries to wrap different types of objects like Collection, array and Map instances into respective JSONArray and JSONObject instances. For unrecognized classes, it returns the string representation of the object if its package name starts with \"java.\" or returns null in case of any exception during wrapping process.", "The provided function takes an object of any type as input and wraps it into a JSONObject or JSONArray if possible. If the object is null, NULL constant will be returned. In case of exceptions during wrapping process, null will also be returned. \n\nThe method has been updated to include explicit checks for all basic data types and some specific classes (JSONObject, JSONArray, Collection, Array, Map). For objects of these types, the original object is returned as-is, while for other types a new instance of JSONObject or JSONArray will be created. \n\nIf no suitable wrapper can be found, an attempt to convert the object into string representation (via its .toString() method) may still succeed. But in that case, it's better to use JSON libraries directly if they are available for your environment because this way you won't have a chance to handle exceptions or unexpected types properly.", "The wrapped object if it is already a JSONArray or JSONObject instance will be returned directly. The NULL constant is also checked and if the input object equals to the NULL constant, then the same NULL object is returned. If wrapping fails for any reason (for example when trying to wrap primitive types into JSONObjects), null is returned.", "The method wraps an object into a JSONObject or JSONArray if possible and returns the input object itself otherwise. If the wrapping fails, null is returned. It also handles cases where the object instance is Boolean, Byte, Character, Double, Float, Integer, Long, Short or String. Additionally, it checks for package names starting with \"java.\" to avoid wrapping of java built-in classes and returns string representation if that is the case."]}
{"SampleId": 2217833, "Origin": "Test of npara method, of class GeometricDistribution.", "Reference": "Test of length method, of class GeometricDistribution.", "LLMCandidates": ["Test of length method, of class GeometricDistribution.", "Test of length method, of class GeometricDistribution.", "Test of length method, of class GeometricDistribution.", "Test of length method, of class GeometricDistribution.", "Test of length method, of class GeometricDistribution."]}
{"SampleId": 4708521, "Origin": "Bui (2015) \"Cachediff: Fast Random Sampling\" URL", "Reference": "Bui (2015) \"CacheDiff: Fast Random Sampling\" URL", "LLMCandidates": ["Implemented random sampling of sparse data points by Fisher-Yates shuffle with a HashMap for index tracking.", "Draws a sparse sample of n integers from 0 to N -1 with replacement using a partial Fisher-Yates shuffle and uses a HashMap to keep track of what has been moved.", "The function drawSparseSample now throws an IllegalArgumentException if the input parameters n and N do not meet the condition that 0 <= n <= N. The exception message has been updated to correctly state which parameter(s) are invalid.\r\n\r\nThe variable name \"stored_at_index_from_end\" has been renamed to \"storedIndexFromEnd\", making it clearer what the purpose of this variable is. \r\n\r\nSimilarly, the variables \"iObj\" and \"selected\" have been renamed to \"indexFromEnd\" and \"selectionCounter\", respectively, in order to make their purpose more evident.\r\n\r\nThe method signature for drawSparseSample has been updated from (int n, int N, Random r) to (int sampleSize, int totalPossibilities, Random randomSource), making it clearer what each parameter represents.\r\n\r\nIn the condition check at the start of the function, \"(n > N)\" has been replaced with \"(sampleSize > totalPossibilities)\", and similarly for the rest of the code. This was done to match up the variable names used in this comment update with those in the method signature. \r\n\r\nFinally, an example usage line at the end has also been updated to reflect these changes: it now correctly uses the new parameter names when calling drawSparseSample().", "The drawSparseSample method is updated to throw an IllegalArgumentException if n is greater than N or negative, reflecting the code changes.", "This method `drawSparseSample` throws an `IllegalArgumentException` if either argument is less than 0 or if the first one exceeds the second. The algorithm implements a partial Fisher-Yates shuffle to select random indices from a given range, keeping track of already selected indices by storing them in a HashMap for later use when elements are shifted to the left."]}
{"SampleId": 339279, "Origin": "If it's successfully completed, {@link BrowserResult#getMediaItems()} will return the search\nresult.", "Reference": "If it's successfully completed, {@link LibraryResult#getMediaItems()} will return the search\nresult.", "LLMCandidates": ["The method `getSearchResult` has been updated to return a {@link ListenableFuture} which returns a {@code LibraryResult}. The parameter names are still the same but the return type of the method is different. It still throws an {@link IllegalArgumentException} if the arguments do not meet their respective constraints (i.e., empty query, negative or less than 1 page size).", "The Javadoc comment for this method is updated to reflect the changes in return type from `BrowserResult` to `LibraryResult` and parameter names. The exceptions thrown remain the same but the comment now reflects that the method will throw an IllegalArgumentException if the query string is empty or null, page number is negative or less than one, and it also states that when the device is not connected, a disconnected future will be returned instead of executing the search result operation.", "The method now returns a {@link ListenableFuture<LibraryResult>}, not {@link BrowserResult}. If it's successfully completed, {@link LibraryResult#getMediaItems()} will return the search result. \n\nThe updated code takes in an additional parameter `params` of type {@link LibraryParams}, which is now non-nullable (@Nullable). The method also checks if the input query is empty or negative to throw {@link IllegalArgumentException}. It uses the new implementation ({@code getImpl()}) if connected, otherwise it returns a disconnected future.", "The updated comment is \"If it's successfully completed, {@link LibraryResult#getMediaItems()} will return the search result.\".", "If it's successfully completed, {@link LibraryResult#getMediaItems()} will return the search result."]}
{"SampleId": 5629914, "Origin": "Sets the options.", "Reference": "Set the options.", "LLMCandidates": ["Set the options.", "Set the options.", "Set the options.", "Set the options.", "Set the options."]}
{"SampleId": 2996629, "Origin": "Convenience method to get custom install file", "Reference": "Convenience method to get custom installation script", "LLMCandidates": ["Convenience method to get custom install script properties.", "This method is a convenience for getting custom installation files. The method first tries to load properties from an absolute path specified by the system property \"installation.script\". If this fails, it then attempts to locate and load these properties as resources of the class. In both cases, if successful, logs are written with the loaded properties.", "Updated method to get installation script properties from a file or classpath. \r\n\r\n- The updated method name `getInstallationScript` is more descriptive about its purpose as opposed to the original one which was named after properties.\r\n\r\n- The variable `fileName` has been moved into an if condition, where it checks for existence of a system property \"installation.script\". If this property does not exist, method returns empty Properties object instead of attempting to load from file or classpath. This change is in line with the original code logic and makes sense in context as well, since there's no point trying to load properties if it isn't specified.\r\n\r\n- The comment on `prop` has been updated accordingly: \"The `Properties prop` object is used to hold the installation script.\" instead of \"Build the initial value by adding 8 to n\".\r\n\r\n- A similar change was made for logging messages, e.g., from \"Loading properties\" to \"Using installation script from absolute path\", etc.\r\n\r\n- The `try-catch-finally` block structure is now in line with Java coding conventions and has been simplified further by using `IOUtils.closeQuietly()` method for closing resources, which takes care of possible null pointer exceptions and does not throw checked exception to the upper level. \r\n\r\n- The original comment \"Convenience method to get custom install file\" is retained as it still describes the purpose accurately and makes sense in context of this change. \r\n\r\nPlease note that changes may not be required if the code itself has not been significantly changed. If there were no significant changes, the Javadoc comment would remain the same: \"Convenience method to get custom install file\".", "Loads properties from either a file on disk or classpath. If file does not exist, method will return an empty Properties instance. Logs information about loading and any errors that occurred during the process.", "This method provides convenience for obtaining a custom install script file. The method loads properties from either an absolute path or classpath based on the existence of the given filename in the system as a property named \"installation.script\". If the file doesn't exist, it simply returns an empty Properties object without throwing any exceptions."]}
{"SampleId": 5629994, "Origin": "Sets the confidence.", "Reference": "Set the confidence.", "LLMCandidates": ["Set the confidence value by adding a new Double to it. The method returns this instance for method chaining.", "The initial value is set by adding 8 to n.", "Set the confidence level of this instance. The parameter must be a non-negative value less than or equal to 100. If the argument is null, sets it as default confidence (75).", "Sets a builder's confidence.", "Sets a builder's confidence."]}
{"SampleId": 3992375, "Origin": "Request an update of the current cluster metadata info, return the current version before the update", "Reference": "Request an update of the current cluster metadata info, return the current updateVersion before the update", "LLMCandidates": ["Requests an update of the current cluster metadata info, returns the current version before the update.", "Request an update of the current cluster metadata info to reflect changes to version number rather than returning the current version before the update.", "Request an update of the current cluster metadata info, return the updated version before the update.", "Request an update of the current cluster metadata info, return the updated version before the update.", "Request an update of the current cluster metadata info, return the updated version before the update"]}
